	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\.IfxEdsadc_Edsadc.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include\\libc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.src ..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c'

	
$TC162
	.sdecl	'.zrodata.IfxEdsadc_Edsadc..4.cnt',data,rom
	.sect	'.zrodata.IfxEdsadc_Edsadc..4.cnt'
	.align	2
.4.cnt:	.type	object
	.size	.4.cnt,4
	.word	1259902592
	.sdecl	'.zrodata.IfxEdsadc_Edsadc..5.cnt',data,rom
	.sect	'.zrodata.IfxEdsadc_Edsadc..5.cnt'
	.align	2
.5.cnt:	.type	object
	.size	.5.cnt,4
	.word	1176256512
	
	.sdecl	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_calcDIVM',code,cluster('IfxEdsadc_Edsadc_calcDIVM')
	.sect	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_calcDIVM'
	.align	2
	

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	     1  /**
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	     2   * \file IfxEdsadc_Edsadc.c
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	     3   * \brief EDSADC EDSADC details
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	     4   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	     5   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	     6   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	     7   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	     8   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	     9   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    10   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    11   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    12   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    13   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    14   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    15   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    16   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    17   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    18   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    19   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    20   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    21   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    22   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    23   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    24   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    25   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    26   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    27   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    28   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    29   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    30   * language processor.
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    31   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    32   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    33   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    34   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    35   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    36   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    37   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    38   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    39   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    40   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    41  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    42  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    43  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    44  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    45  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    46  #include "IfxEdsadc_Edsadc.h"
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    47  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    48  /** \addtogroup IfxLld_Edsadc_Edsadc_Module
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    49   * \{ */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    50  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    51  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    52  /*-----------------------Private Function Prototypes--------------------------*/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    53  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    54  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    55  /** \brief calculate division factor for modulator clock period
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    56   * \param sourceFreq Source frequency
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    57   * \param targetFreq Target frequency
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    58   * \return division factor
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    59   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    60  IFX_STATIC sint32 IfxEdsadc_Edsadc_calcDIVM(float32 sourceFreq, float32 *targetFreq);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    61  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    62  /** \} */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    63  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    64  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    65  /*-----------------------Private Function Prototypes--------------------------*/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    66  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    67  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    68  /** \brief calculate division factor for pwm patteren mode
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    69   * \param sourceFreq Source Frequency
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    70   * \param targetFreq Target Frequency
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    71   * \return Division Factor
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    72   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    73  IFX_STATIC sint32 IfxEdsadc_Edsadc_calcDIVCG(float32 sourceFreq, float32 *targetFreq);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    74  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    75  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    76  /*-------------------------Function Implementations---------------------------*/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    77  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    78  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    79  IFX_STATIC sint32 IfxEdsadc_Edsadc_calcDIVM(float32 sourceFreq, float32 *targetFreq)
; Function IfxEdsadc_Edsadc_calcDIVM
.L34:
IfxEdsadc_Edsadc_calcDIVM:	.type	func

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    80  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    81      float32 bestError = 10e6;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    82      sint32  bestDiv   = 4, i;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    83  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    84      for (i = 4; i <= 32; i += 2)
	mov	d0,#4
	mov.a	a15,#14
.L409:
	mov	d2,d0
	ld.w	d1,.4.cnt
.L397:
	mov	d3,#0
	fcall	.cocofun_6
.L398:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    85      {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    86          float32 freq  = sourceFreq / i;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    87          float32 error = __absf(freq - *targetFreq);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    88  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    89          if (__leqf(error, bestError))
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    90          {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    91              bestError = error;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    92              bestDiv   = i;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    93  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    94              if (!__neqf(error, 0))
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    95              {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    96                  break;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    97              }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    98          }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	    99      }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   100  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   101      *targetFreq = sourceFreq / bestDiv;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   102  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   103      return (bestDiv / 2) - 2;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   104  }
	add	d2,d0,#-2
	ret
.L389:
	
__IfxEdsadc_Edsadc_calcDIVM_function_end:
	.size	IfxEdsadc_Edsadc_calcDIVM,__IfxEdsadc_Edsadc_calcDIVM_function_end-IfxEdsadc_Edsadc_calcDIVM
.L136:
	; End of function
	
	.sdecl	'.text.IfxEdsadc_Edsadc..cocofun_6',code,cluster('.cocofun_6')
	.sect	'.text.IfxEdsadc_Edsadc..cocofun_6'
	.align	2
; Function .cocofun_6
.cocofun_6:	.type	func
; Function body .cocofun_6, coco_iter:0
.L2:
	itof	d15,d2
.L473:
	div.f	d15,d4,d15
	ld.w	d5,[a4]
.L411:
	sub.f	d5,d15,d5
	cmp.f	d15,d5,d3
.L412:
	jz.t	d15:0,.L4
	insn.t	d5,d5:31,d5:31
.L4:
	cmp.f	d15,d5,d1
.L413:
	jnz.t	d15:2,.L5
.L704:
	mov	e0,d5,d2
.L705:
	cmp.f	d15,d5,d3
	jz.t	d15:2,.L6
.L5:
	add	d2,#2
	loop	a15,.L2
.L6:
	itof	d15,d0
.L414:
	sha	d0,#-1
.L706:
	div.f	d15,d4,d15
	st.w	[a4],d15
.L410:
	fret
.L146:
	; End of function
	.sdecl	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_initCarrierGen',code,cluster('IfxEdsadc_Edsadc_initCarrierGen')
	.sect	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_initCarrierGen'
	.align	2
	
	.global	IfxEdsadc_Edsadc_initCarrierGen

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   105  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   106  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   107  void IfxEdsadc_Edsadc_initCarrierGen(IfxEdsadc_Edsadc *edsadc, IfxEdsadc_Edsadc_CarrierGenConfig *config)
; Function IfxEdsadc_Edsadc_initCarrierGen
.L37:
IfxEdsadc_Edsadc_initCarrierGen:	.type	func
	sub.a	a10,#8
.L415:
	mov.aa	a12,a4
.L417:
	mov.aa	a13,a5
.L418:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   108  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   109      Ifx_EDSADC_CGCFG cgcfg;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   110  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   111      cgcfg.U = 0;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   112  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   113      float32          sourceFreq = IfxEdsadc_getModulatorInputClockFreq(edsadc->edsadc);
	mov	d8,#0
	ld.a	a4,[a12]
.L169:
	call	IfxEdsadc_getModulatorInputClockFreq
.L416:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   114      float32          targetFreq = config->frequency;
	ld.w	d15,[a13]2
.L482:
	st.w	[a10],d15
.L483:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   115      cgcfg.B.DIVCG         = IfxEdsadc_Edsadc_calcDIVCG(sourceFreq / (32 * 32), &targetFreq);
	movh	d15,#14976
	mov.aa	a4,a10
.L484:
	mul.f	d4,d2,d15
	call	IfxEdsadc_Edsadc_calcDIVCG
.L419:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   116      cgcfg.B.SIGPOL        = (config->inverted == FALSE) ? 0 : 1;
	insert	d8,d8,d2,#4,#4
	ld.bu	d15,[a13]18
.L485:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   117      cgcfg.B.BREV          = (config->bitReversed == FALSE) ? 0 : 1;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   118      cgcfg.B.CGMOD         = config->carrierWaveformMode;
	ld.bu	d0,[a13]
.L486:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   119  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   120      edsadc->edsadc->CGCFG = cgcfg;
	ne	d15,d15,#0
	ld.a	a2,[a12]
.L487:
	insert	d8,d8,d15,#3,#1
	ld.bu	d15,[a13]19
	ne	d15,d15,#0
.L488:
	insert	d15,d8,d15,#2,#1
.L489:
	insert	d15,d15,d0,#0,#2
.L490:
	insert	d8,d8,d15,#0,#8
	st.w	[a2]160,d8
.L173:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   121  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   122      const IfxEdsadc_Cgpwm_Out *pinPos = config->pinPos;
	ld.a	a15,[a13]8
.L420:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   123  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   124      if (pinPos != NULL_PTR)
	jz.a	a15,.L8
.L177:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     2   * \file IfxEdsadc.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     3   * \brief EDSADC  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     4   * \ingroup IfxLld_Edsadc
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    41   * \defgroup IfxLld_Edsadc_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    42   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    43   * \defgroup IfxLld_Edsadc_Std_Operative Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    44   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    45   * \defgroup IfxLld_Edsadc_Std_Support Support Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    46   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    47   * \defgroup IfxLld_Edsadc_Std_Interrupt Interrupt Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    48   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    49   * \defgroup IfxLld_Edsadc_Std_IO IO Pin Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    50   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    53  #ifndef IFXEDSADC_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    54  #define IFXEDSADC_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    60  #include "_Impl/IfxEdsadc_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    61  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    62  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    63  #include "_PinMap/IfxEdsadc_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    64  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    65  #include "IfxEdsadc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    66  #include "IfxEdsadc_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    68  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    69  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    70  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    71  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    72  /** \addtogroup IfxLld_Edsadc_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    73   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    74  /** \brief Analog Clock Synchronization Delay
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    75   * Definition in Ifx_DSADC.MODCFG.B.ACSD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    79      IfxEdsadc_AnalogClockSyncDelay_noDelay     = 0,    /**< \brief no delay */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    80      IfxEdsadc_AnalogClockSyncDelay_cycleDelay1 = 1,    /**< \brief Delay of 1 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    81      IfxEdsadc_AnalogClockSyncDelay_cycleDelay2,        /**< \brief Delay of 2 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    82      IfxEdsadc_AnalogClockSyncDelay_cycleDelay3,        /**< \brief Delay of 3 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    83      IfxEdsadc_AnalogClockSyncDelay_cycleDelay4,        /**< \brief Delay of 4 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    84      IfxEdsadc_AnalogClockSyncDelay_cycleDelay5,        /**< \brief Delay of 5 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    85      IfxEdsadc_AnalogClockSyncDelay_cycleDelay6,        /**< \brief Delay of 6 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    86      IfxEdsadc_AnalogClockSyncDelay_cycleDelay7         /**< \brief Delay of 7 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    87  } IfxEdsadc_AnalogClockSyncDelay;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    89  /** \brief Service request generation (auxiliary)\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    90   * Definition in Ifx_EDSADC.FCFGM.B.SRGA
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    91   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    92  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    93  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    94      IfxEdsadc_AuxServiceRequest_never          = 0,  /**< \brief Never, service requests disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    95      IfxEdsadc_AuxServiceRequest_compEvent      = 1,  /**< \brief As selected by bitfield ESEL */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    96      IfxEdsadc_AuxServiceRequest_timestampEvent = 2,  /**< \brief Timestamp Event */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    97      IfxEdsadc_AuxServiceRequest_altSource      = 3   /**< \brief Alternate source: Capturing of a sign delay value to register CGSYNCx (x = 0 - 5) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    98  } IfxEdsadc_AuxServiceRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   100  /** \brief Carrier generation mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   101   * Definition in Ifx_EDSADC.CGCFG.B.CGMOD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   103  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   104  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   105      IfxEdsadc_CarrierWaveformMode_stopped  = 0,  /**< \brief Carrier Generator stopped */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   106      IfxEdsadc_CarrierWaveformMode_square   = 1,  /**< \brief Carrier Generator generates square wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   107      IfxEdsadc_CarrierWaveformMode_triangle = 2,  /**< \brief Carrier Generator generates triangle wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   108      IfxEdsadc_CarrierWaveformMode_sine     = 3   /**< \brief Carrier Generator generates sine wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   109  } IfxEdsadc_CarrierWaveformMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   111  /** \brief Common Mode Hold Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   115      IfxEdsadc_CommonModeHoldVoltage_disable = 0,  /**< \brief VCMH is off */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   116      IfxEdsadc_CommonModeHoldVoltage_enable  = 1   /**< \brief VCMH is generated */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   117  } IfxEdsadc_CommonModeHoldVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   119  /** \brief Select the data to be returned when register RESM is read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   120   * Definition in Ifx_DSADC.DICFG.B.DRM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   121   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   122  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   123  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   124      IfxEdsadc_DataRead_signOnHighbit      = 0,  /**< \brief Single: Issue one 16-bit value per read access (sign on high bits) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   125      IfxEdsadc_DataRead_timestampOnHighbit = 1,  /**< \brief Single: Issue one 16-bit value per read access (timestamp on high bits) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   126      IfxEdsadc_DataRead_double             = 2   /**< \brief Double: Issue two 16-bit values per read access */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   127  } IfxEdsadc_DataRead;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   129  /** \brief Data stream select
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   130   * Definition in Ifx_DSADC.DICFG.B.DSS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   131   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   132  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   133  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   134      IfxEdsadc_DataStream_onChipModulator        = 0,  /**< \brief select data stream from on chip modulator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   135      IfxEdsadc_DataStream_doubleDataClockEdge    = 3,  /**< \brief External modulator, use rising and falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   136      IfxEdsadc_DataStream_directFallingClockEdge = 4,  /**< \brief External modulator, use each falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   137      IfxEdsadc_DataStream_directRisingClockEdge  = 5,  /**< \brief External modulator, use each rising clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   138      IfxEdsadc_DataStream_secondFallingClockEdge = 6,  /**< \brief External modulator, use every 2nd falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   139      IfxEdsadc_DataStream_secondRisingClockEdge  = 7   /**< \brief External modulator, use every 2nd rising clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   140  } IfxEdsadc_DataStream;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   142  /** \brief Trimming Value for Dithering function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   143   * Definition in Ifx_DSADC.GLOBCFG.B.DITRIM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   144   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   145  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   146  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   147      IfxEdsadc_DitheringIntensity_minimum = 0,  /**< \brief Minimum dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   148      IfxEdsadc_DitheringIntensity_low     = 1,  /**< \brief Low dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   149      IfxEdsadc_DitheringIntensity_medium  = 2,  /**< \brief Medium dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   150      IfxEdsadc_DitheringIntensity_high    = 3   /**< \brief High */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   151  } IfxEdsadc_DitheringIntensity;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   152  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   153  /** \brief Define when comparator event is generated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   154   * Definition in Ifx_DSADC.FCFGM.B.ESEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   156  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   157  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   158      IfxEdsadc_EventSelect_everyNewResult = 0,  /**< \brief Always, for each new result value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   159      IfxEdsadc_EventSelect_insideBoundry  = 1,  /**< \brief If result is inside the boundary band */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   160      IfxEdsadc_EventSelect_outsideBoundry = 2   /**< \brief If result is outside the boundary band */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   161  } IfxEdsadc_EventSelect;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   163  /** \brief Defines the duration of the additional filter effect, based on values input to the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   164   * filter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   165   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   166  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   167  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   168      IfxEdsadc_FilterRunTimeInputCycle_2  = 0, /**< \brief 2 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   169      IfxEdsadc_FilterRunTimeInputCycle_4  = 1, /**< \brief 4 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   170      IfxEdsadc_FilterRunTimeInputCycle_8  = 2, /**< \brief 8 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   171      IfxEdsadc_FilterRunTimeInputCycle_16 = 3  /**< \brief 16 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   172  } IfxEdsadc_FilterRunTimeInputCycle;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   173  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   174  /** \brief Specifies Slew Rate Filter Strength
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   175   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   176  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   177  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   178      IfxEdsadc_FilterStrength_minimum = 0,  /**< \brief Minimum filter effect, early attenuation, linear operation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   179      IfxEdsadc_FilterStrength_weak    = 1,  /**< \brief Weak filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   180      IfxEdsadc_FilterStrength_medium  = 2,  /**< \brief Medium filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   181      IfxEdsadc_FilterStrength_maximum = 3   /**< \brief maximum filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   182  } IfxEdsadc_FilterStrength;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   184  /** \brief Fractional Reference Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   185   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   186  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   187  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   188      IfxEdsadc_FractionalRefVoltage_disable = 0,  /**< \brief VREFX is not connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   189      IfxEdsadc_FractionalRefVoltage_enable  = 1   /**< \brief VREFX is connected, value according to VREFXSEL */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   190  } IfxEdsadc_FractionalRefVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   192  /** \brief Fraction reference voltage selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   194  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   195  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   196      IfxEdsadc_FractionalRefVoltageSelection_div2  = 0, /**< \brief VREFX = VAREF / 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   197      IfxEdsadc_FractionalRefVoltageSelection_div4  = 1, /**< \brief VREFX = VAREF / 4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   198      IfxEdsadc_FractionalRefVoltageSelection_div8  = 2, /**< \brief VREFX = VAREF / 8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   199      IfxEdsadc_FractionalRefVoltageSelection_div16 = 3  /**< \brief VREFX = VAREF / 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   200  } IfxEdsadc_FractionalRefVoltageSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   202  /** \brief Half Supply Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   204  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   205  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   206      IfxEdsadc_HalfSupplyVoltage_disable = 0,  /**< \brief VDDM / 2 is not connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   207      IfxEdsadc_HalfSupplyVoltage_enable  = 1   /**< \brief VDDM / 2 is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   208  } IfxEdsadc_HalfSupplyVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   209  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   210  /** \brief Modulator configuration of positive/negative input line\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   211   * Definition in Ifx_DSADC.MODCFGx.B.INCFGP and Ifx_DSADC.MODCFGx.B.INCFGN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   213  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   214  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   215      IfxEdsadc_InputConfig_inputPin          = 0,  /**< \brief Modulator input connected to external pin */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   216      IfxEdsadc_InputConfig_supplyVoltage     = 1,  /**< \brief Modulator input connected to supply voltage V_ddm */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   217      IfxEdsadc_InputConfig_commonModeVoltage = 2,  /**< \brief Modulator input connected to common mode voltage V_cm */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   218      IfxEdsadc_InputConfig_referenceGround   = 3   /**< \brief Modulator input connected to reference ground V_ref */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   219  } IfxEdsadc_InputConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   221  /** \brief Demodulator input data source selection\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   222   * Definition in Ifx_EDSADC.DICFG.B.DSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   223   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   224  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   225  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   226      IfxEdsadc_InputDataSource_directInputA   = 0,  /**< \brief External, from input A, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   227      IfxEdsadc_InputDataSource_invertedInputA = 1,  /**< \brief External, from input A, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   228      IfxEdsadc_InputDataSource_directInputB   = 2,  /**< \brief External, from input B, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   229      IfxEdsadc_InputDataSource_invertedInputB = 3,  /**< \brief External, from input B, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   230      IfxEdsadc_InputDataSource_directInputC   = 4,  /**< \brief External, from input C, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   231      IfxEdsadc_InputDataSource_invertedInputC = 5,  /**< \brief External, from input C, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   232      IfxEdsadc_InputDataSource_directInputD   = 6,  /**< \brief External, from input D, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   233      IfxEdsadc_InputDataSource_invertedInputD = 7   /**< \brief External, from input D, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   234  } IfxEdsadc_InputDataSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   235  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   236  /** \brief Modulator gain select of analog input path\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   237   * Definition in Ifx_DSADC.MODCFGx.B.GAINSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   239  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   240  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   241      IfxEdsadc_InputGain_factor1  = 0, /**< \brief Input gain factor: 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   242      IfxEdsadc_InputGain_factor2  = 1, /**< \brief Input gain factor: 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   243      IfxEdsadc_InputGain_factor4  = 2, /**< \brief Input gain factor: 4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   244      IfxEdsadc_InputGain_factor8  = 3, /**< \brief Input gain factor: 8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   245      IfxEdsadc_InputGain_factor16 = 4  /**< \brief Input gain factor: 16 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   246  } IfxEdsadc_InputGain;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   247  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   248  /** \brief specifies input multiplexer control mode defined in MODULE_EDSADC.MODCFG.B.INMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   250  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   251  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   252      IfxEdsadc_InputMuxControlMode_softwareControl = 0,  /**< \brief Trigger Event by software (INMUX follows INSEL) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   253      IfxEdsadc_InputMuxControlMode_fallingEdge     = 1,  /**< \brief Trigger Event on Falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   254      IfxEdsadc_InputMuxControlMode_risingEdge      = 2,  /**< \brief Trigger Event on Rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   255      IfxEdsadc_InputMuxControlMode_always          = 3   /**< \brief Trigger event on any edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   256  } IfxEdsadc_InputMuxControlMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   258  /** \brief Modulator input pin selection\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   259   * Definition in Ifx_DSADC.MODCFGx.B.INMUX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   260   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   261  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   262  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   263      IfxEdsadc_InputPin_a = 0,  /**< \brief Pin A connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   264      IfxEdsadc_InputPin_b = 1,  /**< \brief Pin B connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   265      IfxEdsadc_InputPin_c = 2,  /**< \brief Pin C connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   266      IfxEdsadc_InputPin_d = 3   /**< \brief Pin D connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   267  } IfxEdsadc_InputPin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   269  /** \brief Controls the data shifter after the integrator that selects the portion of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   270   * integrator data for the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   271   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   272  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   274      IfxEdsadc_IntegrationShiftControl_0 = 0,      /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   275      IfxEdsadc_IntegrationShiftControl_1,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   276      IfxEdsadc_IntegrationShiftControl_2,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   277      IfxEdsadc_IntegrationShiftControl_3,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   278      IfxEdsadc_IntegrationShiftControl_4,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   279      IfxEdsadc_IntegrationShiftControl_5           /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   280  } IfxEdsadc_IntegrationShiftControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   281  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   282  /** \brief Integrator window size\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   283   * Definition in Ifx_DSADC.IWCTR.B.IWS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   284   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   285  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   286  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   287      IfxEdsadc_IntegrationWindowSize_internalControl = 0,  /**< \brief Internal control: stop integrator after REPVAL+1 integration cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   288      IfxEdsadc_IntegrationWindowSize_externalControl = 1   /**< \brief External control: stop integrator when bit INTEN becomes 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   289  } IfxEdsadc_IntegrationWindowSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   291  /** \brief Integrator trigger mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   292   * NOTE: switch-first to bypassed before using other mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   293   * Definition in Ifx_EDSADC.DICFG.B.ITRMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   295  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   296  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   297      IfxEdsadc_IntegratorTrigger_bypassed     = 0, /**< \brief No integration trigger, integrator bypassed */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   298      IfxEdsadc_IntegratorTrigger_fallingEdge  = 1, /**< \brief Trigger event upon a falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   299      IfxEdsadc_IntegratorTrigger_risingEdge   = 2, /**< \brief Trigger event upon a rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   300      IfxEdsadc_IntegratorTrigger_alwaysActive = 3  /**< \brief No trigger, integrator active all the time */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   301  } IfxEdsadc_IntegratorTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   303  /** \brief Service request generation (main chain)\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   304   * Definition in Ifx_EDSADC.FCFGM.B.SRGM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   305   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   306  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   307  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   308      IfxEdsadc_MainServiceRequest_never          = 0,  /**< \brief Never, service requests disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   309      IfxEdsadc_MainServiceRequest_highGateSignal = 1,  /**< \brief While gate (selected trigger signal) is high */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   310      IfxEdsadc_MainServiceRequest_lowGateSignal  = 2,  /**< \brief While gate (selected trigger signal) is low */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   311      IfxEdsadc_MainServiceRequest_everyNewResult = 3   /**< \brief Always, for each new result value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   312  } IfxEdsadc_MainServiceRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   313  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   314  /** \brief Modulator divider factor for modulator clock\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   315   * Definition in Ifx_EDSADC.MODCFGx.B.DIVM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   317  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   318  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   319      IfxEdsadc_ModulatorClockDivider_div4 = 0,      /**< \brief f_mod = f_clk / 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   320      IfxEdsadc_ModulatorClockDivider_div6,          /**< \brief f_mod = f_clk / 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   321      IfxEdsadc_ModulatorClockDivider_div8,          /**< \brief f_mod = f_clk / 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   322      IfxEdsadc_ModulatorClockDivider_div10,         /**< \brief f_mod = f_clk / 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   323      IfxEdsadc_ModulatorClockDivider_div12,         /**< \brief f_mod = f_clk / 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   324      IfxEdsadc_ModulatorClockDivider_div14,         /**< \brief f_mod = f_clk / 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   325      IfxEdsadc_ModulatorClockDivider_div16,         /**< \brief f_mod = f_clk / 16  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   326      IfxEdsadc_ModulatorClockDivider_div18          /**< \brief f_mod = f_clk / 18  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   327  } IfxEdsadc_ModulatorClockDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   329  /** \brief Defines the way the modulator clock is generated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   330   * Definition in Ifx_DSADC.GLOBCFG.B.USC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   331   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   332  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   333  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   334      IfxEdsadc_ModulatorClockGeneration_syncMode   = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   335      IfxEdsadc_ModulatorClockGeneration_unsyncMode = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   336  } IfxEdsadc_ModulatorClockGeneration;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   338  /** \brief Enable the offset compensation filter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   339   * Definition in Ifx_DSADC.FCFGM.B.OCEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   340   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   341  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   342  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   343      IfxEdsadc_OffsetCompensationFilter_disabled        = 0,  /**< \brief Offset Compensation filter disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   344      IfxEdsadc_OffsetCompensationFilter_enablewithRateA = 1,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   345      IfxEdsadc_OffsetCompensationFilter_enablewithRateB = 2,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   346      IfxEdsadc_OffsetCompensationFilter_enablewithRateC = 3,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate C */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   347      IfxEdsadc_OffsetCompensationFilter_enablewithRateD = 4,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate D */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   348      IfxEdsadc_OffsetCompensationFilter_enablewithRateE = 5,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate E */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   349      IfxEdsadc_OffsetCompensationFilter_enablewithRateF = 6,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate F */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   350      IfxEdsadc_OffsetCompensationFilter_enablewithRateG = 7   /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate G */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   351  } IfxEdsadc_OffsetCompensationFilter;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   353  /** \brief Overshoot Compensation Enable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   354   * Defined in fx_DSADC.FCFGM.B.OVCEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   355   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   356  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   357  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   358      IfxEdsadc_OvershootCompensation_disabled = 0,  /**< \brief Disabled, feed FIR filter directly */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   359      IfxEdsadc_OvershootCompensation_enabled  = 1   /**< \brief Attenuate response to fast edges */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   360  } IfxEdsadc_OvershootCompensation;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   362  /** \brief Rectifier sign source\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   363   * Selects the sign signal that is to be delayed.\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   364   * Definition in Ifx_DSADC.RECT.B.SSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   365   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   366  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   367  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   368      IfxEdsadc_RectifierSignSource_onChipGenerator = 0,  /**< \brief On-chip carrier generator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   369      IfxEdsadc_RectifierSignSource_nextChannel     = 1,  /**< \brief Sign of result of next channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   370      IfxEdsadc_RectifierSignSource_externalA       = 2,  /**< \brief External sign signal A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   371      IfxEdsadc_RectifierSignSource_externalB       = 3   /**< \brief External sign signal B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   372  } IfxEdsadc_RectifierSignSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   373  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   374  /** \brief Restart the filter chain when an integration window starts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   375   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   376  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   377  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   378      IfxEdsadc_RestartFilterChain_on  = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   379      IfxEdsadc_RestartFilterChain_off = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   380  } IfxEdsadc_RestartFilterChain;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   382  /** \brief specifies result display mode (signed/unsigned)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   383   * Definition in Ifx_DSADC.DICFG.B.RDM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   385  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   386  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   387      IfxEdsadc_ResultDisplayMode_signed   = 0, /**< \brief Signed: result values range from -215 to +215 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   388      IfxEdsadc_ResultDisplayMode_unsigned = 1  /**< \brief Unsigned: result values range from 0 to +216 (shifted by 215) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   389  } IfxEdsadc_ResultDisplayMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   390  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   391  /** \brief Demodulator sample clock source select\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   392   * Definition in Ifx_EDSADC.DICFG.B.CSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   393   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   394  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   395  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   396      IfxEdsadc_SampleClockSource_internal = 0,  /**< \brief Internal clock */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   397      IfxEdsadc_SampleClockSource_inputA   = 3,  /**< \brief External clock, from Input A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   398      IfxEdsadc_SampleClockSource_inputB   = 4,  /**< \brief External clock, from Input B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   399      IfxEdsadc_SampleClockSource_inputC   = 5   /**< \brief External clock, from Input C */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   400  } IfxEdsadc_SampleClockSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   402  /** \brief Service request fifo level
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   403   * Definition in Ifx_EDSADC.RFC.B.SRLVL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   405  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   406  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   407      IfxEdsadc_ServiceRequestFifolevel_1 = 0,      /**< \brief Generate a service request when Fifo contain level 1 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   408      IfxEdsadc_ServiceRequestFifolevel_2,          /**< \brief Generate a service request when Fifo contain level 2 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   409      IfxEdsadc_ServiceRequestFifolevel_3,          /**< \brief Generate a service request when Fifo contain level 3 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   410      IfxEdsadc_ServiceRequestFifolevel_4           /**< \brief Generate a service request when Fifo contain level 4 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   411  } IfxEdsadc_ServiceRequestFifolevel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   413  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   414   * Definition in Ifx_EDSADC.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   415   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   416  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   417  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   418      IfxEdsadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   419      IfxEdsadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   420  } IfxEdsadc_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   422  /** \brief Defines when the slew rate filter is activated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   424  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   425  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   426      IfxEdsadc_StepDetectionMode_lastInput       = 0, /**< \brief Compare threshold to difference of current and last input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   427      IfxEdsadc_StepDetectionMode_secondlastInput = 1  /**< \brief Compare threshold to difference of current and second-last input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   428  } IfxEdsadc_StepDetectionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   430  /** \brief Adjusts the analog circuitry to the supply voltage used in the application
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   431   * system.Defined In defined in MODULE_EDSADC.GLOBCFG.B.SUPLEV
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   433  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   434  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   435      IfxEdsadc_SupplyVoltageLevel_automaticControl = 0,  /**< \brief voltage range is controlled by the power supply */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   436      IfxEdsadc_SupplyVoltageLevel_upperVoltage     = 1,  /**< \brief Upper voltage range: assume a 5 V power supply is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   437      IfxEdsadc_SupplyVoltageLevel_lowerVoltage     = 2   /**< \brief Lower voltage range: assume a 3.3 V power supply is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   438  } IfxEdsadc_SupplyVoltageLevel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   439  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   440  /** \brief OCDS Suspend Control (OCDS.SUS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   441   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   442  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   443  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   444      IfxEdsadc_SuspendMode_none = 0,  /**< \brief No suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   445      IfxEdsadc_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   446      IfxEdsadc_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   447  } IfxEdsadc_SuspendMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   448  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   449  /** \brief Time Stamp Counter Clock Selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   450   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   451  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   452  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   453      IfxEdsadc_TimeStampCounterClockSelection_div1 = 0,  /**< \brief fTSTMP = fMOD */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   454      IfxEdsadc_TimeStampCounterClockSelection_div2 = 1,  /**< \brief fTSTMP = fMOD/2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   455      IfxEdsadc_TimeStampCounterClockSelection_div4 = 2,  /**< \brief fTSTMP = fMOD/4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   456      IfxEdsadc_TimeStampCounterClockSelection_div8 = 3   /**< \brief fTSTMP = fMOD/8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   457  } IfxEdsadc_TimeStampCounterClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   458  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   459  /** \brief Timestamp trigger mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   460   * Definition in Ifx_EDSADC.DICFG.B.TSTRMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   462  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   463  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   464      IfxEdsadc_TimestampTrigger_noTrigger   = 0,  /**< \brief No timestamp trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   465      IfxEdsadc_TimestampTrigger_fallingEdge = 1,  /**< \brief Trigger event upon a falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   466      IfxEdsadc_TimestampTrigger_risingEdge  = 2,  /**< \brief Trigger event upon a rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   467      IfxEdsadc_TimestampTrigger_eachEdge    = 3   /**< \brief Trigger event upon each edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   468  } IfxEdsadc_TimestampTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   469  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   470  /** \brief Trigger select\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   471   * Definition in Ifx_EDSADC.DICFG.B.TRSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   473  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   474  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   475      IfxEdsadc_TriggerInput_a = 0,   /**< \brief GTM EDSADC Trigger 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   476      IfxEdsadc_TriggerInput_b = 1,   /**< \brief GTM EDSADC Trigger 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   477      IfxEdsadc_TriggerInput_c = 2,   /**< \brief GTM ADC Trigger 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   478      IfxEdsadc_TriggerInput_d = 3,   /**< \brief GTM ADC Trigger 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   479      IfxEdsadc_TriggerInput_e = 4,   /**< \brief Trigger/gate via port input P33.0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   480      IfxEdsadc_TriggerInput_f = 5,   /**< \brief Trigger/gate via port input P33.4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   481      IfxEdsadc_TriggerInput_g = 6,   /**< \brief ERU pattern detection output 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   482      IfxEdsadc_TriggerInput_h = 7,   /**< \brief Trigger/gate, channel 0,input H */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   483      IfxEdsadc_TriggerInput_i = 8,   /**< \brief Trigger/gate, channel 0,input I */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   484      IfxEdsadc_TriggerInput_j = 9,   /**< \brief Trigger/gate, channel 0,input J */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   485      IfxEdsadc_TriggerInput_k = 10,  /**< \brief GTM ADC Trigger 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   486      IfxEdsadc_TriggerInput_l = 11,  /**< \brief GTM ADC Trigger 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   487      IfxEdsadc_TriggerInput_m = 12,  /**< \brief GTM DSADC Trigger 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   488      IfxEdsadc_TriggerInput_n = 13,  /**< \brief GTM DSADC Trigger 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   489      IfxEdsadc_TriggerInput_o = 14,  /**< \brief Trigger/gate, channel 0,input O */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   490      IfxEdsadc_TriggerInput_p = 15   /**< \brief Trigger/gate, channel 0,input P */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   491  } IfxEdsadc_TriggerInput;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   492  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   493  /** \brief Controls the dithering function for each modulator separately
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   494   * Definition in Ifx_DSADC.MODCFG.B.DITHEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   496  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   497  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   498      IfxEdsadc_dithering_disabled = 0,  /**< \brief dithering function disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   499      IfxEdsadc_dithering_enabled  = 1   /**< \brief dithering function enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   500  } IfxEdsadc_dithering;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   501  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   502  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   504  /** \brief Allows copying of bitfield AMX into bitfield TIMESTAMP
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   505   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   506  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   507  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   508      IfxEdsadc_AnalogMux_doNotCopyAmx = 0,  /**< \brief Do not copy, timestamp uses all 16 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   509      IfxEdsadc_AnalogMux_copyAmx      = 1   /**< \brief Copy AMX to bits TIMESTAMP[15:14], timestamp uses lower 14 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   510  } IfxEdsadc_AnalogMux;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   511  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   512  /** \brief Timestamp Counter Run Control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   513   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   514  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   515  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   516      IfxEdsadc_TimeStampCounterControl_off = 0,  /**< \brief Timestamp counter is off */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   517      IfxEdsadc_TimeStampCounterControl_on  = 1   /**< \brief Timestamp counter is counting at the rate selected by bitfield TSCLK */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   518  } IfxEdsadc_TimeStampCounterControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   519  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   520  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   521  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   523  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   524  /** \brief Modulator Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   526  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   527  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   528      float32                        modulatorClockPeriod;         /**< \brief Modulator clock period */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   529      IfxEdsadc_InputGain            inputGain;                    /**< \brief Modulator gain select of analog input path */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   530      IfxEdsadc_AnalogClockSyncDelay analogClockSyncDelay;         /**< \brief Define the delay in clock cycle after sync signal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   531      IfxEdsadc_InputConfig          positiveInput;                /**< \brief Modulator configuration of positive input line */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   532      IfxEdsadc_InputConfig          negativeInput;                /**< \brief Modulator configuration of negative input line */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   533      IfxEdsadc_InputPin             inputPin;                     /**< \brief Modulator input pin selection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   534      IfxEdsadc_dithering            ditheringEnabled;             /**< \brief Control the Dithering Function for each modulator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   535      boolean                        integratorResetEnabled;       /**< \brief Control the modulator overload handling */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   536      boolean                        inputMuxActionControl;        /**< \brief Defines the mechanism by which the input multiplexer is controlled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   537      IfxEdsadc_InputMuxControlMode  triggerEvent;                 /**< \brief Defines the condition for a trigger event to control the input multiplexer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   538  } IfxEdsadc_ModulatorConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   539  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   540  /** \addtogroup IfxLld_Edsadc_Std_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   541   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   542  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   543  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   544  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   545  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   547  /** \brief Returns the module's suspend state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   548   * TRUE :if module is suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   549   * FALSE:if module is not yet suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   550   * \param edsadc Pointer to EDSADC module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   551   * \return Suspend status (TRUE / FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   552   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   553  IFX_INLINE boolean IfxEdsadc_isModuleSuspended(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   555  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   556   * \param edsadc pointer to EDSADC registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   557   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   558   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   560  IFX_INLINE void IfxEdsadc_setSleepMode(Ifx_EDSADC *edsadc, IfxEdsadc_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   561  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   562  /** \brief Configure the Module to Hard/Soft suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   563   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   564   * \param edsadc Pointer to EDSADC module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   565   * \param mode Module suspend mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   566   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   567   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   568  IFX_INLINE void IfxEdsadc_setSuspendMode(Ifx_EDSADC *edsadc, IfxEdsadc_SuspendMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   569  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   570  /** \brief Enables the conversion of multiple channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   571   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   572   * \param modulatorMask the modulator which should be running (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   573   * \param channelMask the channels which should be scanned (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   574   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   575   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   576   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   578   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   579  IFX_INLINE void IfxEdsadc_startScan(Ifx_EDSADC *edsadc, uint32 modulatorMask, uint32 channelMask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   580  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   581  /** \brief Disables the conversion of multiple channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   582   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   583   * \param modulatorMask the modulator which should be disabled (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   584   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   585   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   586   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   587   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   589  IFX_INLINE void IfxEdsadc_stopScan(Ifx_EDSADC *edsadc, uint32 modulatorMask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   592  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   593  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   594  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   595  /** \brief Disables the module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   596   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   598   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   599  IFX_EXTERN void IfxEdsadc_disableModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   600  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   601  /** \brief Enables the module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   602   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   603   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   604   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   605  IFX_EXTERN void IfxEdsadc_enableModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   606  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   607  /** \brief resets EDSADC kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   608   * \param edsadc pointer to EDSADC registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   609   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   611  IFX_EXTERN void IfxEdsadc_resetModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   613  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   615  /** \addtogroup IfxLld_Edsadc_Std_Support
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   616   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   617  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   618  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   619  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   620  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   622  /** \brief Get the main comb decimation factor
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   623   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   624   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   625   * \return the main comb decimation factor
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   626   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   627  IFX_INLINE uint16 IfxEdsadc_getMainCombDecimation(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   629  /** \brief Get result from the main chain
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   630   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   631   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   632   * \return result from the main chain
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   633   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   634   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   635   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   636   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   637  IFX_INLINE sint16 IfxEdsadc_getMainResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   639  /** \brief Get the subsequent result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   640   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   641  IFX_INLINE sint32 IfxEdsadc_getSubsequentResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   642  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   643  /** \brief Return TRUE if EDSADC module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   644   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   645   * \return TRUE if EDSADC module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   646   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   647  IFX_INLINE boolean IfxEdsadc_isModuleEnabled(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   648  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   649  /** \brief Set the carrier waveform mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   650   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   651   * \param waveformMode the waveform mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   652   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   653   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   654  IFX_INLINE void IfxEdsadc_setCarrierMode(Ifx_EDSADC *edsadc, IfxEdsadc_CarrierWaveformMode waveformMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   656  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   657  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   658  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   659  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   660  /** \brief Get the sample frequency of the integrator output in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   661   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   662   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   663   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   664   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   665  IFX_EXTERN float32 IfxEdsadc_getIntegratorOutFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   667  /** \brief Get the sample frequency of the main COMB filter output in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   668   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   669   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   670   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   671   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   672  IFX_EXTERN float32 IfxEdsadc_getMainCombOutFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   674  /** \brief Estimate the group delay of main-chain filters in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   675   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   676   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   677   * \return delay in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   678   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   679  IFX_EXTERN float32 IfxEdsadc_getMainGroupDelay(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   681  /** \brief Get the modulator clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   682   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   683   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   684   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   685   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   686  IFX_EXTERN float32 IfxEdsadc_getModulatorClockFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   687  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   688  /** \brief Get the input frequency of EDSADC in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   689   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   690   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   691   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   692  IFX_EXTERN float32 IfxEdsadc_getModulatorInputClockFreq(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   693  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   694  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   695  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   696  /** \addtogroup IfxLld_Edsadc_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   697   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   698  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   699  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   700  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   701  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   702  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   703  /** \brief Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   704   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   705   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   706   * \return Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   708  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxEdsadc_getAuxSrc(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   710  /** \brief Get the interrupt source register for a Main event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   711   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   712   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   713   * \return Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   714   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   715  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxEdsadc_getMainSrc(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   716  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   717  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   718  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   719  /** \addtogroup IfxLld_Edsadc_Std_IO
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   720   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   721  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   722  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   723  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   724  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   725  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   726  /** \brief Initializes a CGPWM output
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   727   * \param cgPwm the CGPWM Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   728   * \param pinMode the pin output mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   729   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   730   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   731   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   732  IFX_INLINE void IfxEdsadc_initCgPwmPin(const IfxEdsadc_Cgpwm_Out *cgPwm, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   733  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   734  /** \brief Initializes a CIN input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   735   * \param cIn the CIN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   736   * \param cInMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   737   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   738   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   739   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   740  IFX_INLINE void IfxEdsadc_initCinPin(const IfxEdsadc_Cin_In *cIn, IfxPort_InputMode cInMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   741  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   742  /** \brief Initializes a COUT output
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   743   * \param cout the COUT Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   744   * \param pinMode the pin output mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   745   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   746   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   748  IFX_INLINE void IfxEdsadc_initCoutPin(const IfxEdsadc_Cout_Out *cout, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   750  /** \brief Initializes a DIN input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   751   * \param dIn the DIN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   752   * \param dInMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   753   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   754   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   755   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   756  IFX_INLINE void IfxEdsadc_initDinPin(const IfxEdsadc_Din_In *dIn, IfxPort_InputMode dInMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   757  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   758  /** \brief Initializes a DS input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   759   * \param dsn the DSN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   760   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   761   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   762   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   763   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   764  IFX_INLINE void IfxEdsadc_initDsnPin(const IfxEdsadc_Dsn_In *dsn, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   765  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   766  /** \brief Initializes a DS input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   767   * \param dsp the DSP Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   768   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   769   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   770   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   771   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   772  IFX_INLINE void IfxEdsadc_initDspPin(const IfxEdsadc_Dsp_In *dsp, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   774  /** \brief Initializes a ITR input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   775   * \param itr the ITR Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   776   * \param itrMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   777   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   778   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   779   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   780  IFX_INLINE void IfxEdsadc_initItrPin(const IfxEdsadc_Itr_In *itr, IfxPort_InputMode itrMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   781  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   782  /** \brief Initializes a SG input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   783   * \param sg the SG Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   784   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   785   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   786   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   787   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   788  IFX_INLINE void IfxEdsadc_initSgPin(const IfxEdsadc_Sg_In *sg, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   789  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   790  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   791  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   792  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   793  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   794  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   795  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   796  /** \brief Returns the positive input line configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   797   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   798   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   799   * \return Positive Input Line Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   800   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   801  IFX_INLINE uint8 IfxEdsadc_getPositiveInputLineConfiguration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   802  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   803  /** \brief Returns the negative input line configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   804   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   805   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   806   * \return Negative Input Line Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   807   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   808  IFX_INLINE uint8 IfxEdsadc_getNegativeInputLineConfiguration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   809  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   810  /** \brief Sets the Offset compensation Value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   811   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   812   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   813   * \param value Value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   814   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   815   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   816  IFX_INLINE void IfxEdsadc_setOffsetCompensationValue(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   818  /** \brief Returns the address of the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   819   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   820   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   821   * \return Address of the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   822   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   823  IFX_INLINE uint32 *IfxEdsadc_getResultRegisterAddress(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   824  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   825  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   826  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   827  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   828  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   829  /** \brief set common mode voltage Parameters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   830   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   831   * \param channel specifies channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   832   * \param voltage select Fractional reference Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   833   * \param refMode Fractional Reference Voltage Enable/ Disable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   834   * \param hsvMode Enable / Disable Half Supply Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   835   * \param cmhvMode Enable / Disable Common Mode Hold Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   836   * \param positiveInput Defines the connection of the respective positive input y to the common mode hold voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   837   * \param negativeInput Defines the connection of the respective negative input y to the common mode hold voltage.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   838   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   839   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   840  IFX_EXTERN void IfxEdsadc_setCommonModeVoltage(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_FractionalRefVoltageSelection voltage, IfxEdsadc_FractionalRefVoltage refMode, IfxEdsadc_HalfSupplyVoltage hsvMode, IfxEdsadc_CommonModeHoldVoltage cmhvMode, uint8 positiveInput, uint8 negativeInput);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   842  /** \brief configure gain correction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   843   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   844   * \param channel Specifies channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   845   * \param gainFactor Multiplication Factor for gain correction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   846   * \param cicShift Position of CIC filter output shifter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   847   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   848   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   849  IFX_EXTERN void IfxEdsadc_setGainCorrectionFactor(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   851  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   852   * \param edsadc Pointer to module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   853   * \param channel specifies channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   854   * \param timeStampCounterClock Time Stamp Counter Clock selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   855   * \param runControl TimeStamp Counter Run Control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   856   * \param analogMuxCopy Analog MUX Setting Copy Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   857   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   858   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   859  IFX_EXTERN void IfxEdsadc_setTimeStampCounter(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_TimeStampCounterClockSelection timeStampCounterClock, IfxEdsadc_TimeStampCounterControl runControl, IfxEdsadc_AnalogMux analogMuxCopy);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   861  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   862   * \param edsadc Pointer to EDSADC SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   863   * \param channel chanel no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   864   * \param gainFactor Multiplication Factor for Gain Correction During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   865   * \param cicShift Position of the CIC Filter Output Shifter During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   866   * \param cicDecimationRate Decimation Rate of the CIC Filter During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   867   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   868   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   869  IFX_EXTERN void IfxEdsadc_setGainControl(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift, uint8 cicDecimationRate);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   870  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   871  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   872   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   873   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   874   * \param calFactor Multiplication Factor for Gain Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   875   * \param calTarget Target Value for Calibrated Fullscale
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   876   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   877   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   878  IFX_EXTERN void IfxEdsadc_setGainCalibration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 calFactor, uint16 calTarget);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   879  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   880  /** \brief Set the Modulator configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   881   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   882   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   883   * \param config Modulator Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   884   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   885   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   886  IFX_EXTERN void IfxEdsadc_configureModulator(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_ModulatorConfig *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   887  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   888  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   889  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   890  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   891  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   892  IFX_INLINE uint16 IfxEdsadc_getMainCombDecimation(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   893  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   894      return (uint16)(1U + edsadc->CH[channel].FCFGC.B.CFMDF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   895  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   896  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   897  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   898  IFX_INLINE sint16 IfxEdsadc_getMainResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   899  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   900      return edsadc->CH[channel].RESM.B.RESULTLO;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   901  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   902  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   903  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   904  IFX_INLINE sint32 IfxEdsadc_getSubsequentResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   905  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   906      return (sint32)(edsadc->CH[channel].RESM.U);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   907  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   908  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   909  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   910  IFX_INLINE void IfxEdsadc_initCgPwmPin(const IfxEdsadc_Cgpwm_Out *cgPwm, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   911  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   912      if (cgPwm->pin.port != NULL_PTR)
	ld.a	a4,[a15]4
.L178:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   125      {                           /* Initialise positive carrier pin */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   126          IfxEdsadc_initCgPwmPin(pinPos, config->pinMode, config->pinDriver);
	ld.bu	d5,[a13]16
.L491:
	ld.bu	d8,[a13]17
.L187:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   912      if (cgPwm->pin.port != NULL_PTR)      (inlined)
	jz.a	a4,.L9
.L189:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     2   * \file IfxEdsadc.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     3   * \brief EDSADC  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     4   * \ingroup IfxLld_Edsadc
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    41   * \defgroup IfxLld_Edsadc_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    42   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    43   * \defgroup IfxLld_Edsadc_Std_Operative Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    44   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    45   * \defgroup IfxLld_Edsadc_Std_Support Support Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    46   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    47   * \defgroup IfxLld_Edsadc_Std_Interrupt Interrupt Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    48   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    49   * \defgroup IfxLld_Edsadc_Std_IO IO Pin Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    50   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    53  #ifndef IFXEDSADC_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    54  #define IFXEDSADC_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    60  #include "_Impl/IfxEdsadc_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    61  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    62  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    63  #include "_PinMap/IfxEdsadc_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    64  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    65  #include "IfxEdsadc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    66  #include "IfxEdsadc_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    68  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    69  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    70  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    71  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    72  /** \addtogroup IfxLld_Edsadc_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    73   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    74  /** \brief Analog Clock Synchronization Delay
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    75   * Definition in Ifx_DSADC.MODCFG.B.ACSD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    79      IfxEdsadc_AnalogClockSyncDelay_noDelay     = 0,    /**< \brief no delay */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    80      IfxEdsadc_AnalogClockSyncDelay_cycleDelay1 = 1,    /**< \brief Delay of 1 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    81      IfxEdsadc_AnalogClockSyncDelay_cycleDelay2,        /**< \brief Delay of 2 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    82      IfxEdsadc_AnalogClockSyncDelay_cycleDelay3,        /**< \brief Delay of 3 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    83      IfxEdsadc_AnalogClockSyncDelay_cycleDelay4,        /**< \brief Delay of 4 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    84      IfxEdsadc_AnalogClockSyncDelay_cycleDelay5,        /**< \brief Delay of 5 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    85      IfxEdsadc_AnalogClockSyncDelay_cycleDelay6,        /**< \brief Delay of 6 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    86      IfxEdsadc_AnalogClockSyncDelay_cycleDelay7         /**< \brief Delay of 7 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    87  } IfxEdsadc_AnalogClockSyncDelay;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    89  /** \brief Service request generation (auxiliary)\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    90   * Definition in Ifx_EDSADC.FCFGM.B.SRGA
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    91   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    92  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    93  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    94      IfxEdsadc_AuxServiceRequest_never          = 0,  /**< \brief Never, service requests disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    95      IfxEdsadc_AuxServiceRequest_compEvent      = 1,  /**< \brief As selected by bitfield ESEL */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    96      IfxEdsadc_AuxServiceRequest_timestampEvent = 2,  /**< \brief Timestamp Event */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    97      IfxEdsadc_AuxServiceRequest_altSource      = 3   /**< \brief Alternate source: Capturing of a sign delay value to register CGSYNCx (x = 0 - 5) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    98  } IfxEdsadc_AuxServiceRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   100  /** \brief Carrier generation mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   101   * Definition in Ifx_EDSADC.CGCFG.B.CGMOD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   103  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   104  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   105      IfxEdsadc_CarrierWaveformMode_stopped  = 0,  /**< \brief Carrier Generator stopped */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   106      IfxEdsadc_CarrierWaveformMode_square   = 1,  /**< \brief Carrier Generator generates square wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   107      IfxEdsadc_CarrierWaveformMode_triangle = 2,  /**< \brief Carrier Generator generates triangle wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   108      IfxEdsadc_CarrierWaveformMode_sine     = 3   /**< \brief Carrier Generator generates sine wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   109  } IfxEdsadc_CarrierWaveformMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   111  /** \brief Common Mode Hold Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   115      IfxEdsadc_CommonModeHoldVoltage_disable = 0,  /**< \brief VCMH is off */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   116      IfxEdsadc_CommonModeHoldVoltage_enable  = 1   /**< \brief VCMH is generated */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   117  } IfxEdsadc_CommonModeHoldVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   119  /** \brief Select the data to be returned when register RESM is read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   120   * Definition in Ifx_DSADC.DICFG.B.DRM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   121   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   122  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   123  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   124      IfxEdsadc_DataRead_signOnHighbit      = 0,  /**< \brief Single: Issue one 16-bit value per read access (sign on high bits) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   125      IfxEdsadc_DataRead_timestampOnHighbit = 1,  /**< \brief Single: Issue one 16-bit value per read access (timestamp on high bits) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   126      IfxEdsadc_DataRead_double             = 2   /**< \brief Double: Issue two 16-bit values per read access */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   127  } IfxEdsadc_DataRead;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   129  /** \brief Data stream select
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   130   * Definition in Ifx_DSADC.DICFG.B.DSS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   131   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   132  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   133  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   134      IfxEdsadc_DataStream_onChipModulator        = 0,  /**< \brief select data stream from on chip modulator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   135      IfxEdsadc_DataStream_doubleDataClockEdge    = 3,  /**< \brief External modulator, use rising and falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   136      IfxEdsadc_DataStream_directFallingClockEdge = 4,  /**< \brief External modulator, use each falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   137      IfxEdsadc_DataStream_directRisingClockEdge  = 5,  /**< \brief External modulator, use each rising clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   138      IfxEdsadc_DataStream_secondFallingClockEdge = 6,  /**< \brief External modulator, use every 2nd falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   139      IfxEdsadc_DataStream_secondRisingClockEdge  = 7   /**< \brief External modulator, use every 2nd rising clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   140  } IfxEdsadc_DataStream;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   142  /** \brief Trimming Value for Dithering function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   143   * Definition in Ifx_DSADC.GLOBCFG.B.DITRIM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   144   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   145  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   146  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   147      IfxEdsadc_DitheringIntensity_minimum = 0,  /**< \brief Minimum dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   148      IfxEdsadc_DitheringIntensity_low     = 1,  /**< \brief Low dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   149      IfxEdsadc_DitheringIntensity_medium  = 2,  /**< \brief Medium dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   150      IfxEdsadc_DitheringIntensity_high    = 3   /**< \brief High */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   151  } IfxEdsadc_DitheringIntensity;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   152  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   153  /** \brief Define when comparator event is generated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   154   * Definition in Ifx_DSADC.FCFGM.B.ESEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   156  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   157  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   158      IfxEdsadc_EventSelect_everyNewResult = 0,  /**< \brief Always, for each new result value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   159      IfxEdsadc_EventSelect_insideBoundry  = 1,  /**< \brief If result is inside the boundary band */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   160      IfxEdsadc_EventSelect_outsideBoundry = 2   /**< \brief If result is outside the boundary band */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   161  } IfxEdsadc_EventSelect;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   163  /** \brief Defines the duration of the additional filter effect, based on values input to the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   164   * filter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   165   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   166  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   167  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   168      IfxEdsadc_FilterRunTimeInputCycle_2  = 0, /**< \brief 2 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   169      IfxEdsadc_FilterRunTimeInputCycle_4  = 1, /**< \brief 4 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   170      IfxEdsadc_FilterRunTimeInputCycle_8  = 2, /**< \brief 8 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   171      IfxEdsadc_FilterRunTimeInputCycle_16 = 3  /**< \brief 16 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   172  } IfxEdsadc_FilterRunTimeInputCycle;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   173  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   174  /** \brief Specifies Slew Rate Filter Strength
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   175   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   176  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   177  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   178      IfxEdsadc_FilterStrength_minimum = 0,  /**< \brief Minimum filter effect, early attenuation, linear operation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   179      IfxEdsadc_FilterStrength_weak    = 1,  /**< \brief Weak filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   180      IfxEdsadc_FilterStrength_medium  = 2,  /**< \brief Medium filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   181      IfxEdsadc_FilterStrength_maximum = 3   /**< \brief maximum filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   182  } IfxEdsadc_FilterStrength;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   184  /** \brief Fractional Reference Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   185   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   186  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   187  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   188      IfxEdsadc_FractionalRefVoltage_disable = 0,  /**< \brief VREFX is not connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   189      IfxEdsadc_FractionalRefVoltage_enable  = 1   /**< \brief VREFX is connected, value according to VREFXSEL */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   190  } IfxEdsadc_FractionalRefVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   192  /** \brief Fraction reference voltage selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   194  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   195  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   196      IfxEdsadc_FractionalRefVoltageSelection_div2  = 0, /**< \brief VREFX = VAREF / 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   197      IfxEdsadc_FractionalRefVoltageSelection_div4  = 1, /**< \brief VREFX = VAREF / 4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   198      IfxEdsadc_FractionalRefVoltageSelection_div8  = 2, /**< \brief VREFX = VAREF / 8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   199      IfxEdsadc_FractionalRefVoltageSelection_div16 = 3  /**< \brief VREFX = VAREF / 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   200  } IfxEdsadc_FractionalRefVoltageSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   202  /** \brief Half Supply Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   204  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   205  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   206      IfxEdsadc_HalfSupplyVoltage_disable = 0,  /**< \brief VDDM / 2 is not connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   207      IfxEdsadc_HalfSupplyVoltage_enable  = 1   /**< \brief VDDM / 2 is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   208  } IfxEdsadc_HalfSupplyVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   209  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   210  /** \brief Modulator configuration of positive/negative input line\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   211   * Definition in Ifx_DSADC.MODCFGx.B.INCFGP and Ifx_DSADC.MODCFGx.B.INCFGN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   213  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   214  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   215      IfxEdsadc_InputConfig_inputPin          = 0,  /**< \brief Modulator input connected to external pin */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   216      IfxEdsadc_InputConfig_supplyVoltage     = 1,  /**< \brief Modulator input connected to supply voltage V_ddm */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   217      IfxEdsadc_InputConfig_commonModeVoltage = 2,  /**< \brief Modulator input connected to common mode voltage V_cm */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   218      IfxEdsadc_InputConfig_referenceGround   = 3   /**< \brief Modulator input connected to reference ground V_ref */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   219  } IfxEdsadc_InputConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   221  /** \brief Demodulator input data source selection\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   222   * Definition in Ifx_EDSADC.DICFG.B.DSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   223   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   224  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   225  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   226      IfxEdsadc_InputDataSource_directInputA   = 0,  /**< \brief External, from input A, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   227      IfxEdsadc_InputDataSource_invertedInputA = 1,  /**< \brief External, from input A, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   228      IfxEdsadc_InputDataSource_directInputB   = 2,  /**< \brief External, from input B, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   229      IfxEdsadc_InputDataSource_invertedInputB = 3,  /**< \brief External, from input B, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   230      IfxEdsadc_InputDataSource_directInputC   = 4,  /**< \brief External, from input C, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   231      IfxEdsadc_InputDataSource_invertedInputC = 5,  /**< \brief External, from input C, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   232      IfxEdsadc_InputDataSource_directInputD   = 6,  /**< \brief External, from input D, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   233      IfxEdsadc_InputDataSource_invertedInputD = 7   /**< \brief External, from input D, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   234  } IfxEdsadc_InputDataSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   235  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   236  /** \brief Modulator gain select of analog input path\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   237   * Definition in Ifx_DSADC.MODCFGx.B.GAINSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   239  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   240  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   241      IfxEdsadc_InputGain_factor1  = 0, /**< \brief Input gain factor: 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   242      IfxEdsadc_InputGain_factor2  = 1, /**< \brief Input gain factor: 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   243      IfxEdsadc_InputGain_factor4  = 2, /**< \brief Input gain factor: 4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   244      IfxEdsadc_InputGain_factor8  = 3, /**< \brief Input gain factor: 8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   245      IfxEdsadc_InputGain_factor16 = 4  /**< \brief Input gain factor: 16 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   246  } IfxEdsadc_InputGain;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   247  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   248  /** \brief specifies input multiplexer control mode defined in MODULE_EDSADC.MODCFG.B.INMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   250  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   251  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   252      IfxEdsadc_InputMuxControlMode_softwareControl = 0,  /**< \brief Trigger Event by software (INMUX follows INSEL) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   253      IfxEdsadc_InputMuxControlMode_fallingEdge     = 1,  /**< \brief Trigger Event on Falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   254      IfxEdsadc_InputMuxControlMode_risingEdge      = 2,  /**< \brief Trigger Event on Rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   255      IfxEdsadc_InputMuxControlMode_always          = 3   /**< \brief Trigger event on any edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   256  } IfxEdsadc_InputMuxControlMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   258  /** \brief Modulator input pin selection\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   259   * Definition in Ifx_DSADC.MODCFGx.B.INMUX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   260   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   261  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   262  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   263      IfxEdsadc_InputPin_a = 0,  /**< \brief Pin A connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   264      IfxEdsadc_InputPin_b = 1,  /**< \brief Pin B connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   265      IfxEdsadc_InputPin_c = 2,  /**< \brief Pin C connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   266      IfxEdsadc_InputPin_d = 3   /**< \brief Pin D connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   267  } IfxEdsadc_InputPin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   269  /** \brief Controls the data shifter after the integrator that selects the portion of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   270   * integrator data for the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   271   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   272  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   274      IfxEdsadc_IntegrationShiftControl_0 = 0,      /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   275      IfxEdsadc_IntegrationShiftControl_1,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   276      IfxEdsadc_IntegrationShiftControl_2,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   277      IfxEdsadc_IntegrationShiftControl_3,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   278      IfxEdsadc_IntegrationShiftControl_4,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   279      IfxEdsadc_IntegrationShiftControl_5           /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   280  } IfxEdsadc_IntegrationShiftControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   281  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   282  /** \brief Integrator window size\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   283   * Definition in Ifx_DSADC.IWCTR.B.IWS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   284   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   285  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   286  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   287      IfxEdsadc_IntegrationWindowSize_internalControl = 0,  /**< \brief Internal control: stop integrator after REPVAL+1 integration cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   288      IfxEdsadc_IntegrationWindowSize_externalControl = 1   /**< \brief External control: stop integrator when bit INTEN becomes 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   289  } IfxEdsadc_IntegrationWindowSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   291  /** \brief Integrator trigger mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   292   * NOTE: switch-first to bypassed before using other mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   293   * Definition in Ifx_EDSADC.DICFG.B.ITRMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   295  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   296  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   297      IfxEdsadc_IntegratorTrigger_bypassed     = 0, /**< \brief No integration trigger, integrator bypassed */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   298      IfxEdsadc_IntegratorTrigger_fallingEdge  = 1, /**< \brief Trigger event upon a falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   299      IfxEdsadc_IntegratorTrigger_risingEdge   = 2, /**< \brief Trigger event upon a rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   300      IfxEdsadc_IntegratorTrigger_alwaysActive = 3  /**< \brief No trigger, integrator active all the time */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   301  } IfxEdsadc_IntegratorTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   303  /** \brief Service request generation (main chain)\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   304   * Definition in Ifx_EDSADC.FCFGM.B.SRGM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   305   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   306  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   307  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   308      IfxEdsadc_MainServiceRequest_never          = 0,  /**< \brief Never, service requests disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   309      IfxEdsadc_MainServiceRequest_highGateSignal = 1,  /**< \brief While gate (selected trigger signal) is high */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   310      IfxEdsadc_MainServiceRequest_lowGateSignal  = 2,  /**< \brief While gate (selected trigger signal) is low */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   311      IfxEdsadc_MainServiceRequest_everyNewResult = 3   /**< \brief Always, for each new result value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   312  } IfxEdsadc_MainServiceRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   313  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   314  /** \brief Modulator divider factor for modulator clock\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   315   * Definition in Ifx_EDSADC.MODCFGx.B.DIVM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   317  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   318  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   319      IfxEdsadc_ModulatorClockDivider_div4 = 0,      /**< \brief f_mod = f_clk / 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   320      IfxEdsadc_ModulatorClockDivider_div6,          /**< \brief f_mod = f_clk / 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   321      IfxEdsadc_ModulatorClockDivider_div8,          /**< \brief f_mod = f_clk / 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   322      IfxEdsadc_ModulatorClockDivider_div10,         /**< \brief f_mod = f_clk / 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   323      IfxEdsadc_ModulatorClockDivider_div12,         /**< \brief f_mod = f_clk / 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   324      IfxEdsadc_ModulatorClockDivider_div14,         /**< \brief f_mod = f_clk / 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   325      IfxEdsadc_ModulatorClockDivider_div16,         /**< \brief f_mod = f_clk / 16  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   326      IfxEdsadc_ModulatorClockDivider_div18          /**< \brief f_mod = f_clk / 18  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   327  } IfxEdsadc_ModulatorClockDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   329  /** \brief Defines the way the modulator clock is generated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   330   * Definition in Ifx_DSADC.GLOBCFG.B.USC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   331   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   332  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   333  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   334      IfxEdsadc_ModulatorClockGeneration_syncMode   = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   335      IfxEdsadc_ModulatorClockGeneration_unsyncMode = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   336  } IfxEdsadc_ModulatorClockGeneration;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   338  /** \brief Enable the offset compensation filter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   339   * Definition in Ifx_DSADC.FCFGM.B.OCEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   340   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   341  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   342  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   343      IfxEdsadc_OffsetCompensationFilter_disabled        = 0,  /**< \brief Offset Compensation filter disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   344      IfxEdsadc_OffsetCompensationFilter_enablewithRateA = 1,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   345      IfxEdsadc_OffsetCompensationFilter_enablewithRateB = 2,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   346      IfxEdsadc_OffsetCompensationFilter_enablewithRateC = 3,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate C */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   347      IfxEdsadc_OffsetCompensationFilter_enablewithRateD = 4,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate D */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   348      IfxEdsadc_OffsetCompensationFilter_enablewithRateE = 5,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate E */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   349      IfxEdsadc_OffsetCompensationFilter_enablewithRateF = 6,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate F */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   350      IfxEdsadc_OffsetCompensationFilter_enablewithRateG = 7   /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate G */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   351  } IfxEdsadc_OffsetCompensationFilter;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   353  /** \brief Overshoot Compensation Enable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   354   * Defined in fx_DSADC.FCFGM.B.OVCEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   355   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   356  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   357  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   358      IfxEdsadc_OvershootCompensation_disabled = 0,  /**< \brief Disabled, feed FIR filter directly */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   359      IfxEdsadc_OvershootCompensation_enabled  = 1   /**< \brief Attenuate response to fast edges */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   360  } IfxEdsadc_OvershootCompensation;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   362  /** \brief Rectifier sign source\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   363   * Selects the sign signal that is to be delayed.\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   364   * Definition in Ifx_DSADC.RECT.B.SSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   365   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   366  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   367  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   368      IfxEdsadc_RectifierSignSource_onChipGenerator = 0,  /**< \brief On-chip carrier generator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   369      IfxEdsadc_RectifierSignSource_nextChannel     = 1,  /**< \brief Sign of result of next channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   370      IfxEdsadc_RectifierSignSource_externalA       = 2,  /**< \brief External sign signal A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   371      IfxEdsadc_RectifierSignSource_externalB       = 3   /**< \brief External sign signal B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   372  } IfxEdsadc_RectifierSignSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   373  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   374  /** \brief Restart the filter chain when an integration window starts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   375   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   376  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   377  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   378      IfxEdsadc_RestartFilterChain_on  = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   379      IfxEdsadc_RestartFilterChain_off = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   380  } IfxEdsadc_RestartFilterChain;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   382  /** \brief specifies result display mode (signed/unsigned)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   383   * Definition in Ifx_DSADC.DICFG.B.RDM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   385  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   386  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   387      IfxEdsadc_ResultDisplayMode_signed   = 0, /**< \brief Signed: result values range from -215 to +215 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   388      IfxEdsadc_ResultDisplayMode_unsigned = 1  /**< \brief Unsigned: result values range from 0 to +216 (shifted by 215) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   389  } IfxEdsadc_ResultDisplayMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   390  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   391  /** \brief Demodulator sample clock source select\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   392   * Definition in Ifx_EDSADC.DICFG.B.CSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   393   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   394  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   395  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   396      IfxEdsadc_SampleClockSource_internal = 0,  /**< \brief Internal clock */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   397      IfxEdsadc_SampleClockSource_inputA   = 3,  /**< \brief External clock, from Input A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   398      IfxEdsadc_SampleClockSource_inputB   = 4,  /**< \brief External clock, from Input B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   399      IfxEdsadc_SampleClockSource_inputC   = 5   /**< \brief External clock, from Input C */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   400  } IfxEdsadc_SampleClockSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   402  /** \brief Service request fifo level
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   403   * Definition in Ifx_EDSADC.RFC.B.SRLVL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   405  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   406  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   407      IfxEdsadc_ServiceRequestFifolevel_1 = 0,      /**< \brief Generate a service request when Fifo contain level 1 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   408      IfxEdsadc_ServiceRequestFifolevel_2,          /**< \brief Generate a service request when Fifo contain level 2 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   409      IfxEdsadc_ServiceRequestFifolevel_3,          /**< \brief Generate a service request when Fifo contain level 3 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   410      IfxEdsadc_ServiceRequestFifolevel_4           /**< \brief Generate a service request when Fifo contain level 4 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   411  } IfxEdsadc_ServiceRequestFifolevel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   413  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   414   * Definition in Ifx_EDSADC.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   415   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   416  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   417  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   418      IfxEdsadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   419      IfxEdsadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   420  } IfxEdsadc_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   422  /** \brief Defines when the slew rate filter is activated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   424  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   425  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   426      IfxEdsadc_StepDetectionMode_lastInput       = 0, /**< \brief Compare threshold to difference of current and last input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   427      IfxEdsadc_StepDetectionMode_secondlastInput = 1  /**< \brief Compare threshold to difference of current and second-last input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   428  } IfxEdsadc_StepDetectionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   430  /** \brief Adjusts the analog circuitry to the supply voltage used in the application
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   431   * system.Defined In defined in MODULE_EDSADC.GLOBCFG.B.SUPLEV
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   433  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   434  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   435      IfxEdsadc_SupplyVoltageLevel_automaticControl = 0,  /**< \brief voltage range is controlled by the power supply */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   436      IfxEdsadc_SupplyVoltageLevel_upperVoltage     = 1,  /**< \brief Upper voltage range: assume a 5 V power supply is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   437      IfxEdsadc_SupplyVoltageLevel_lowerVoltage     = 2   /**< \brief Lower voltage range: assume a 3.3 V power supply is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   438  } IfxEdsadc_SupplyVoltageLevel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   439  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   440  /** \brief OCDS Suspend Control (OCDS.SUS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   441   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   442  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   443  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   444      IfxEdsadc_SuspendMode_none = 0,  /**< \brief No suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   445      IfxEdsadc_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   446      IfxEdsadc_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   447  } IfxEdsadc_SuspendMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   448  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   449  /** \brief Time Stamp Counter Clock Selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   450   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   451  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   452  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   453      IfxEdsadc_TimeStampCounterClockSelection_div1 = 0,  /**< \brief fTSTMP = fMOD */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   454      IfxEdsadc_TimeStampCounterClockSelection_div2 = 1,  /**< \brief fTSTMP = fMOD/2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   455      IfxEdsadc_TimeStampCounterClockSelection_div4 = 2,  /**< \brief fTSTMP = fMOD/4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   456      IfxEdsadc_TimeStampCounterClockSelection_div8 = 3   /**< \brief fTSTMP = fMOD/8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   457  } IfxEdsadc_TimeStampCounterClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   458  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   459  /** \brief Timestamp trigger mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   460   * Definition in Ifx_EDSADC.DICFG.B.TSTRMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   462  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   463  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   464      IfxEdsadc_TimestampTrigger_noTrigger   = 0,  /**< \brief No timestamp trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   465      IfxEdsadc_TimestampTrigger_fallingEdge = 1,  /**< \brief Trigger event upon a falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   466      IfxEdsadc_TimestampTrigger_risingEdge  = 2,  /**< \brief Trigger event upon a rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   467      IfxEdsadc_TimestampTrigger_eachEdge    = 3   /**< \brief Trigger event upon each edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   468  } IfxEdsadc_TimestampTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   469  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   470  /** \brief Trigger select\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   471   * Definition in Ifx_EDSADC.DICFG.B.TRSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   473  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   474  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   475      IfxEdsadc_TriggerInput_a = 0,   /**< \brief GTM EDSADC Trigger 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   476      IfxEdsadc_TriggerInput_b = 1,   /**< \brief GTM EDSADC Trigger 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   477      IfxEdsadc_TriggerInput_c = 2,   /**< \brief GTM ADC Trigger 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   478      IfxEdsadc_TriggerInput_d = 3,   /**< \brief GTM ADC Trigger 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   479      IfxEdsadc_TriggerInput_e = 4,   /**< \brief Trigger/gate via port input P33.0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   480      IfxEdsadc_TriggerInput_f = 5,   /**< \brief Trigger/gate via port input P33.4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   481      IfxEdsadc_TriggerInput_g = 6,   /**< \brief ERU pattern detection output 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   482      IfxEdsadc_TriggerInput_h = 7,   /**< \brief Trigger/gate, channel 0,input H */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   483      IfxEdsadc_TriggerInput_i = 8,   /**< \brief Trigger/gate, channel 0,input I */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   484      IfxEdsadc_TriggerInput_j = 9,   /**< \brief Trigger/gate, channel 0,input J */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   485      IfxEdsadc_TriggerInput_k = 10,  /**< \brief GTM ADC Trigger 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   486      IfxEdsadc_TriggerInput_l = 11,  /**< \brief GTM ADC Trigger 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   487      IfxEdsadc_TriggerInput_m = 12,  /**< \brief GTM DSADC Trigger 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   488      IfxEdsadc_TriggerInput_n = 13,  /**< \brief GTM DSADC Trigger 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   489      IfxEdsadc_TriggerInput_o = 14,  /**< \brief Trigger/gate, channel 0,input O */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   490      IfxEdsadc_TriggerInput_p = 15   /**< \brief Trigger/gate, channel 0,input P */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   491  } IfxEdsadc_TriggerInput;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   492  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   493  /** \brief Controls the dithering function for each modulator separately
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   494   * Definition in Ifx_DSADC.MODCFG.B.DITHEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   496  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   497  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   498      IfxEdsadc_dithering_disabled = 0,  /**< \brief dithering function disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   499      IfxEdsadc_dithering_enabled  = 1   /**< \brief dithering function enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   500  } IfxEdsadc_dithering;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   501  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   502  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   504  /** \brief Allows copying of bitfield AMX into bitfield TIMESTAMP
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   505   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   506  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   507  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   508      IfxEdsadc_AnalogMux_doNotCopyAmx = 0,  /**< \brief Do not copy, timestamp uses all 16 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   509      IfxEdsadc_AnalogMux_copyAmx      = 1   /**< \brief Copy AMX to bits TIMESTAMP[15:14], timestamp uses lower 14 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   510  } IfxEdsadc_AnalogMux;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   511  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   512  /** \brief Timestamp Counter Run Control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   513   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   514  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   515  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   516      IfxEdsadc_TimeStampCounterControl_off = 0,  /**< \brief Timestamp counter is off */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   517      IfxEdsadc_TimeStampCounterControl_on  = 1   /**< \brief Timestamp counter is counting at the rate selected by bitfield TSCLK */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   518  } IfxEdsadc_TimeStampCounterControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   519  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   520  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   521  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   523  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   524  /** \brief Modulator Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   526  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   527  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   528      float32                        modulatorClockPeriod;         /**< \brief Modulator clock period */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   529      IfxEdsadc_InputGain            inputGain;                    /**< \brief Modulator gain select of analog input path */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   530      IfxEdsadc_AnalogClockSyncDelay analogClockSyncDelay;         /**< \brief Define the delay in clock cycle after sync signal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   531      IfxEdsadc_InputConfig          positiveInput;                /**< \brief Modulator configuration of positive input line */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   532      IfxEdsadc_InputConfig          negativeInput;                /**< \brief Modulator configuration of negative input line */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   533      IfxEdsadc_InputPin             inputPin;                     /**< \brief Modulator input pin selection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   534      IfxEdsadc_dithering            ditheringEnabled;             /**< \brief Control the Dithering Function for each modulator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   535      boolean                        integratorResetEnabled;       /**< \brief Control the modulator overload handling */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   536      boolean                        inputMuxActionControl;        /**< \brief Defines the mechanism by which the input multiplexer is controlled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   537      IfxEdsadc_InputMuxControlMode  triggerEvent;                 /**< \brief Defines the condition for a trigger event to control the input multiplexer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   538  } IfxEdsadc_ModulatorConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   539  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   540  /** \addtogroup IfxLld_Edsadc_Std_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   541   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   542  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   543  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   544  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   545  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   547  /** \brief Returns the module's suspend state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   548   * TRUE :if module is suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   549   * FALSE:if module is not yet suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   550   * \param edsadc Pointer to EDSADC module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   551   * \return Suspend status (TRUE / FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   552   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   553  IFX_INLINE boolean IfxEdsadc_isModuleSuspended(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   555  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   556   * \param edsadc pointer to EDSADC registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   557   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   558   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   560  IFX_INLINE void IfxEdsadc_setSleepMode(Ifx_EDSADC *edsadc, IfxEdsadc_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   561  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   562  /** \brief Configure the Module to Hard/Soft suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   563   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   564   * \param edsadc Pointer to EDSADC module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   565   * \param mode Module suspend mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   566   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   567   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   568  IFX_INLINE void IfxEdsadc_setSuspendMode(Ifx_EDSADC *edsadc, IfxEdsadc_SuspendMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   569  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   570  /** \brief Enables the conversion of multiple channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   571   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   572   * \param modulatorMask the modulator which should be running (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   573   * \param channelMask the channels which should be scanned (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   574   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   575   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   576   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   578   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   579  IFX_INLINE void IfxEdsadc_startScan(Ifx_EDSADC *edsadc, uint32 modulatorMask, uint32 channelMask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   580  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   581  /** \brief Disables the conversion of multiple channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   582   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   583   * \param modulatorMask the modulator which should be disabled (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   584   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   585   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   586   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   587   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   589  IFX_INLINE void IfxEdsadc_stopScan(Ifx_EDSADC *edsadc, uint32 modulatorMask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   592  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   593  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   594  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   595  /** \brief Disables the module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   596   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   598   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   599  IFX_EXTERN void IfxEdsadc_disableModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   600  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   601  /** \brief Enables the module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   602   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   603   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   604   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   605  IFX_EXTERN void IfxEdsadc_enableModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   606  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   607  /** \brief resets EDSADC kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   608   * \param edsadc pointer to EDSADC registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   609   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   611  IFX_EXTERN void IfxEdsadc_resetModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   613  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   615  /** \addtogroup IfxLld_Edsadc_Std_Support
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   616   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   617  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   618  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   619  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   620  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   622  /** \brief Get the main comb decimation factor
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   623   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   624   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   625   * \return the main comb decimation factor
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   626   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   627  IFX_INLINE uint16 IfxEdsadc_getMainCombDecimation(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   629  /** \brief Get result from the main chain
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   630   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   631   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   632   * \return result from the main chain
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   633   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   634   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   635   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   636   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   637  IFX_INLINE sint16 IfxEdsadc_getMainResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   639  /** \brief Get the subsequent result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   640   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   641  IFX_INLINE sint32 IfxEdsadc_getSubsequentResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   642  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   643  /** \brief Return TRUE if EDSADC module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   644   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   645   * \return TRUE if EDSADC module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   646   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   647  IFX_INLINE boolean IfxEdsadc_isModuleEnabled(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   648  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   649  /** \brief Set the carrier waveform mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   650   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   651   * \param waveformMode the waveform mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   652   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   653   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   654  IFX_INLINE void IfxEdsadc_setCarrierMode(Ifx_EDSADC *edsadc, IfxEdsadc_CarrierWaveformMode waveformMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   656  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   657  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   658  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   659  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   660  /** \brief Get the sample frequency of the integrator output in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   661   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   662   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   663   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   664   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   665  IFX_EXTERN float32 IfxEdsadc_getIntegratorOutFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   667  /** \brief Get the sample frequency of the main COMB filter output in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   668   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   669   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   670   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   671   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   672  IFX_EXTERN float32 IfxEdsadc_getMainCombOutFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   674  /** \brief Estimate the group delay of main-chain filters in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   675   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   676   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   677   * \return delay in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   678   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   679  IFX_EXTERN float32 IfxEdsadc_getMainGroupDelay(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   681  /** \brief Get the modulator clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   682   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   683   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   684   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   685   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   686  IFX_EXTERN float32 IfxEdsadc_getModulatorClockFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   687  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   688  /** \brief Get the input frequency of EDSADC in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   689   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   690   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   691   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   692  IFX_EXTERN float32 IfxEdsadc_getModulatorInputClockFreq(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   693  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   694  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   695  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   696  /** \addtogroup IfxLld_Edsadc_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   697   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   698  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   699  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   700  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   701  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   702  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   703  /** \brief Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   704   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   705   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   706   * \return Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   708  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxEdsadc_getAuxSrc(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   710  /** \brief Get the interrupt source register for a Main event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   711   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   712   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   713   * \return Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   714   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   715  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxEdsadc_getMainSrc(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   716  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   717  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   718  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   719  /** \addtogroup IfxLld_Edsadc_Std_IO
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   720   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   721  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   722  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   723  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   724  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   725  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   726  /** \brief Initializes a CGPWM output
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   727   * \param cgPwm the CGPWM Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   728   * \param pinMode the pin output mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   729   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   730   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   731   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   732  IFX_INLINE void IfxEdsadc_initCgPwmPin(const IfxEdsadc_Cgpwm_Out *cgPwm, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   733  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   734  /** \brief Initializes a CIN input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   735   * \param cIn the CIN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   736   * \param cInMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   737   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   738   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   739   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   740  IFX_INLINE void IfxEdsadc_initCinPin(const IfxEdsadc_Cin_In *cIn, IfxPort_InputMode cInMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   741  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   742  /** \brief Initializes a COUT output
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   743   * \param cout the COUT Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   744   * \param pinMode the pin output mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   745   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   746   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   748  IFX_INLINE void IfxEdsadc_initCoutPin(const IfxEdsadc_Cout_Out *cout, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   750  /** \brief Initializes a DIN input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   751   * \param dIn the DIN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   752   * \param dInMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   753   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   754   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   755   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   756  IFX_INLINE void IfxEdsadc_initDinPin(const IfxEdsadc_Din_In *dIn, IfxPort_InputMode dInMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   757  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   758  /** \brief Initializes a DS input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   759   * \param dsn the DSN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   760   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   761   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   762   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   763   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   764  IFX_INLINE void IfxEdsadc_initDsnPin(const IfxEdsadc_Dsn_In *dsn, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   765  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   766  /** \brief Initializes a DS input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   767   * \param dsp the DSP Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   768   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   769   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   770   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   771   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   772  IFX_INLINE void IfxEdsadc_initDspPin(const IfxEdsadc_Dsp_In *dsp, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   774  /** \brief Initializes a ITR input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   775   * \param itr the ITR Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   776   * \param itrMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   777   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   778   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   779   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   780  IFX_INLINE void IfxEdsadc_initItrPin(const IfxEdsadc_Itr_In *itr, IfxPort_InputMode itrMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   781  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   782  /** \brief Initializes a SG input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   783   * \param sg the SG Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   784   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   785   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   786   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   787   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   788  IFX_INLINE void IfxEdsadc_initSgPin(const IfxEdsadc_Sg_In *sg, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   789  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   790  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   791  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   792  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   793  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   794  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   795  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   796  /** \brief Returns the positive input line configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   797   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   798   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   799   * \return Positive Input Line Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   800   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   801  IFX_INLINE uint8 IfxEdsadc_getPositiveInputLineConfiguration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   802  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   803  /** \brief Returns the negative input line configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   804   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   805   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   806   * \return Negative Input Line Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   807   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   808  IFX_INLINE uint8 IfxEdsadc_getNegativeInputLineConfiguration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   809  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   810  /** \brief Sets the Offset compensation Value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   811   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   812   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   813   * \param value Value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   814   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   815   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   816  IFX_INLINE void IfxEdsadc_setOffsetCompensationValue(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   818  /** \brief Returns the address of the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   819   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   820   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   821   * \return Address of the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   822   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   823  IFX_INLINE uint32 *IfxEdsadc_getResultRegisterAddress(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   824  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   825  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   826  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   827  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   828  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   829  /** \brief set common mode voltage Parameters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   830   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   831   * \param channel specifies channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   832   * \param voltage select Fractional reference Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   833   * \param refMode Fractional Reference Voltage Enable/ Disable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   834   * \param hsvMode Enable / Disable Half Supply Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   835   * \param cmhvMode Enable / Disable Common Mode Hold Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   836   * \param positiveInput Defines the connection of the respective positive input y to the common mode hold voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   837   * \param negativeInput Defines the connection of the respective negative input y to the common mode hold voltage.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   838   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   839   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   840  IFX_EXTERN void IfxEdsadc_setCommonModeVoltage(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_FractionalRefVoltageSelection voltage, IfxEdsadc_FractionalRefVoltage refMode, IfxEdsadc_HalfSupplyVoltage hsvMode, IfxEdsadc_CommonModeHoldVoltage cmhvMode, uint8 positiveInput, uint8 negativeInput);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   842  /** \brief configure gain correction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   843   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   844   * \param channel Specifies channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   845   * \param gainFactor Multiplication Factor for gain correction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   846   * \param cicShift Position of CIC filter output shifter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   847   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   848   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   849  IFX_EXTERN void IfxEdsadc_setGainCorrectionFactor(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   851  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   852   * \param edsadc Pointer to module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   853   * \param channel specifies channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   854   * \param timeStampCounterClock Time Stamp Counter Clock selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   855   * \param runControl TimeStamp Counter Run Control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   856   * \param analogMuxCopy Analog MUX Setting Copy Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   857   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   858   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   859  IFX_EXTERN void IfxEdsadc_setTimeStampCounter(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_TimeStampCounterClockSelection timeStampCounterClock, IfxEdsadc_TimeStampCounterControl runControl, IfxEdsadc_AnalogMux analogMuxCopy);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   861  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   862   * \param edsadc Pointer to EDSADC SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   863   * \param channel chanel no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   864   * \param gainFactor Multiplication Factor for Gain Correction During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   865   * \param cicShift Position of the CIC Filter Output Shifter During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   866   * \param cicDecimationRate Decimation Rate of the CIC Filter During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   867   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   868   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   869  IFX_EXTERN void IfxEdsadc_setGainControl(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift, uint8 cicDecimationRate);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   870  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   871  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   872   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   873   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   874   * \param calFactor Multiplication Factor for Gain Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   875   * \param calTarget Target Value for Calibrated Fullscale
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   876   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   877   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   878  IFX_EXTERN void IfxEdsadc_setGainCalibration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 calFactor, uint16 calTarget);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   879  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   880  /** \brief Set the Modulator configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   881   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   882   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   883   * \param config Modulator Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   884   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   885   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   886  IFX_EXTERN void IfxEdsadc_configureModulator(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_ModulatorConfig *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   887  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   888  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   889  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   890  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   891  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   892  IFX_INLINE uint16 IfxEdsadc_getMainCombDecimation(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   893  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   894      return (uint16)(1U + edsadc->CH[channel].FCFGC.B.CFMDF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   895  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   896  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   897  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   898  IFX_INLINE sint16 IfxEdsadc_getMainResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   899  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   900      return edsadc->CH[channel].RESM.B.RESULTLO;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   901  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   902  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   903  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   904  IFX_INLINE sint32 IfxEdsadc_getSubsequentResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   905  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   906      return (sint32)(edsadc->CH[channel].RESM.U);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   907  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   908  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   909  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   910  IFX_INLINE void IfxEdsadc_initCgPwmPin(const IfxEdsadc_Cgpwm_Out *cgPwm, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   911  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   912      if (cgPwm->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   913      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   914          IfxPort_setPinModeOutput(cgPwm->pin.port, cgPwm->pin.pinIndex, pinMode, cgPwm->select);
	ld.bu	d15,[a15]12
.L492:
	ld.bu	d4,[a15]8
.L493:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   672  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   674  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   675  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   676  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   677      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
	or	d5,d15
	call	IfxPort_setPinMode
.L190:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   915          IfxPort_setPinPadDriver(cgPwm->pin.port, cgPwm->pin.pinIndex, padDriver);
	ld.a	a4,[a15]4
.L494:
	ld.bu	d4,[a15]8
.L495:
	mov	d5,d8
	call	IfxPort_setPinPadDriver

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   912      if (cgPwm->pin.port != NULL_PTR)      (inlined)
.L9:
.L8:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   127      }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   128  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   129      const IfxEdsadc_Cgpwm_Out *pinNeg = config->pinNeg;
	ld.a	a15,[a13]12
.L421:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   130  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   131      if (pinNeg != NULL_PTR)
	jz.a	a15,.L10
.L201:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     2   * \file IfxEdsadc.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     3   * \brief EDSADC  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     4   * \ingroup IfxLld_Edsadc
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    41   * \defgroup IfxLld_Edsadc_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    42   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    43   * \defgroup IfxLld_Edsadc_Std_Operative Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    44   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    45   * \defgroup IfxLld_Edsadc_Std_Support Support Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    46   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    47   * \defgroup IfxLld_Edsadc_Std_Interrupt Interrupt Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    48   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    49   * \defgroup IfxLld_Edsadc_Std_IO IO Pin Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    50   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    53  #ifndef IFXEDSADC_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    54  #define IFXEDSADC_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    60  #include "_Impl/IfxEdsadc_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    61  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    62  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    63  #include "_PinMap/IfxEdsadc_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    64  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    65  #include "IfxEdsadc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    66  #include "IfxEdsadc_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    68  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    69  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    70  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    71  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    72  /** \addtogroup IfxLld_Edsadc_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    73   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    74  /** \brief Analog Clock Synchronization Delay
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    75   * Definition in Ifx_DSADC.MODCFG.B.ACSD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    79      IfxEdsadc_AnalogClockSyncDelay_noDelay     = 0,    /**< \brief no delay */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    80      IfxEdsadc_AnalogClockSyncDelay_cycleDelay1 = 1,    /**< \brief Delay of 1 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    81      IfxEdsadc_AnalogClockSyncDelay_cycleDelay2,        /**< \brief Delay of 2 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    82      IfxEdsadc_AnalogClockSyncDelay_cycleDelay3,        /**< \brief Delay of 3 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    83      IfxEdsadc_AnalogClockSyncDelay_cycleDelay4,        /**< \brief Delay of 4 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    84      IfxEdsadc_AnalogClockSyncDelay_cycleDelay5,        /**< \brief Delay of 5 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    85      IfxEdsadc_AnalogClockSyncDelay_cycleDelay6,        /**< \brief Delay of 6 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    86      IfxEdsadc_AnalogClockSyncDelay_cycleDelay7         /**< \brief Delay of 7 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    87  } IfxEdsadc_AnalogClockSyncDelay;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    89  /** \brief Service request generation (auxiliary)\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    90   * Definition in Ifx_EDSADC.FCFGM.B.SRGA
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    91   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    92  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    93  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    94      IfxEdsadc_AuxServiceRequest_never          = 0,  /**< \brief Never, service requests disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    95      IfxEdsadc_AuxServiceRequest_compEvent      = 1,  /**< \brief As selected by bitfield ESEL */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    96      IfxEdsadc_AuxServiceRequest_timestampEvent = 2,  /**< \brief Timestamp Event */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    97      IfxEdsadc_AuxServiceRequest_altSource      = 3   /**< \brief Alternate source: Capturing of a sign delay value to register CGSYNCx (x = 0 - 5) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    98  } IfxEdsadc_AuxServiceRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   100  /** \brief Carrier generation mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   101   * Definition in Ifx_EDSADC.CGCFG.B.CGMOD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   103  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   104  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   105      IfxEdsadc_CarrierWaveformMode_stopped  = 0,  /**< \brief Carrier Generator stopped */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   106      IfxEdsadc_CarrierWaveformMode_square   = 1,  /**< \brief Carrier Generator generates square wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   107      IfxEdsadc_CarrierWaveformMode_triangle = 2,  /**< \brief Carrier Generator generates triangle wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   108      IfxEdsadc_CarrierWaveformMode_sine     = 3   /**< \brief Carrier Generator generates sine wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   109  } IfxEdsadc_CarrierWaveformMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   111  /** \brief Common Mode Hold Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   115      IfxEdsadc_CommonModeHoldVoltage_disable = 0,  /**< \brief VCMH is off */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   116      IfxEdsadc_CommonModeHoldVoltage_enable  = 1   /**< \brief VCMH is generated */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   117  } IfxEdsadc_CommonModeHoldVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   119  /** \brief Select the data to be returned when register RESM is read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   120   * Definition in Ifx_DSADC.DICFG.B.DRM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   121   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   122  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   123  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   124      IfxEdsadc_DataRead_signOnHighbit      = 0,  /**< \brief Single: Issue one 16-bit value per read access (sign on high bits) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   125      IfxEdsadc_DataRead_timestampOnHighbit = 1,  /**< \brief Single: Issue one 16-bit value per read access (timestamp on high bits) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   126      IfxEdsadc_DataRead_double             = 2   /**< \brief Double: Issue two 16-bit values per read access */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   127  } IfxEdsadc_DataRead;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   129  /** \brief Data stream select
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   130   * Definition in Ifx_DSADC.DICFG.B.DSS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   131   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   132  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   133  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   134      IfxEdsadc_DataStream_onChipModulator        = 0,  /**< \brief select data stream from on chip modulator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   135      IfxEdsadc_DataStream_doubleDataClockEdge    = 3,  /**< \brief External modulator, use rising and falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   136      IfxEdsadc_DataStream_directFallingClockEdge = 4,  /**< \brief External modulator, use each falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   137      IfxEdsadc_DataStream_directRisingClockEdge  = 5,  /**< \brief External modulator, use each rising clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   138      IfxEdsadc_DataStream_secondFallingClockEdge = 6,  /**< \brief External modulator, use every 2nd falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   139      IfxEdsadc_DataStream_secondRisingClockEdge  = 7   /**< \brief External modulator, use every 2nd rising clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   140  } IfxEdsadc_DataStream;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   142  /** \brief Trimming Value for Dithering function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   143   * Definition in Ifx_DSADC.GLOBCFG.B.DITRIM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   144   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   145  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   146  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   147      IfxEdsadc_DitheringIntensity_minimum = 0,  /**< \brief Minimum dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   148      IfxEdsadc_DitheringIntensity_low     = 1,  /**< \brief Low dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   149      IfxEdsadc_DitheringIntensity_medium  = 2,  /**< \brief Medium dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   150      IfxEdsadc_DitheringIntensity_high    = 3   /**< \brief High */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   151  } IfxEdsadc_DitheringIntensity;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   152  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   153  /** \brief Define when comparator event is generated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   154   * Definition in Ifx_DSADC.FCFGM.B.ESEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   156  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   157  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   158      IfxEdsadc_EventSelect_everyNewResult = 0,  /**< \brief Always, for each new result value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   159      IfxEdsadc_EventSelect_insideBoundry  = 1,  /**< \brief If result is inside the boundary band */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   160      IfxEdsadc_EventSelect_outsideBoundry = 2   /**< \brief If result is outside the boundary band */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   161  } IfxEdsadc_EventSelect;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   163  /** \brief Defines the duration of the additional filter effect, based on values input to the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   164   * filter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   165   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   166  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   167  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   168      IfxEdsadc_FilterRunTimeInputCycle_2  = 0, /**< \brief 2 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   169      IfxEdsadc_FilterRunTimeInputCycle_4  = 1, /**< \brief 4 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   170      IfxEdsadc_FilterRunTimeInputCycle_8  = 2, /**< \brief 8 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   171      IfxEdsadc_FilterRunTimeInputCycle_16 = 3  /**< \brief 16 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   172  } IfxEdsadc_FilterRunTimeInputCycle;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   173  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   174  /** \brief Specifies Slew Rate Filter Strength
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   175   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   176  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   177  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   178      IfxEdsadc_FilterStrength_minimum = 0,  /**< \brief Minimum filter effect, early attenuation, linear operation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   179      IfxEdsadc_FilterStrength_weak    = 1,  /**< \brief Weak filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   180      IfxEdsadc_FilterStrength_medium  = 2,  /**< \brief Medium filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   181      IfxEdsadc_FilterStrength_maximum = 3   /**< \brief maximum filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   182  } IfxEdsadc_FilterStrength;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   184  /** \brief Fractional Reference Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   185   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   186  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   187  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   188      IfxEdsadc_FractionalRefVoltage_disable = 0,  /**< \brief VREFX is not connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   189      IfxEdsadc_FractionalRefVoltage_enable  = 1   /**< \brief VREFX is connected, value according to VREFXSEL */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   190  } IfxEdsadc_FractionalRefVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   192  /** \brief Fraction reference voltage selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   194  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   195  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   196      IfxEdsadc_FractionalRefVoltageSelection_div2  = 0, /**< \brief VREFX = VAREF / 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   197      IfxEdsadc_FractionalRefVoltageSelection_div4  = 1, /**< \brief VREFX = VAREF / 4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   198      IfxEdsadc_FractionalRefVoltageSelection_div8  = 2, /**< \brief VREFX = VAREF / 8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   199      IfxEdsadc_FractionalRefVoltageSelection_div16 = 3  /**< \brief VREFX = VAREF / 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   200  } IfxEdsadc_FractionalRefVoltageSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   202  /** \brief Half Supply Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   204  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   205  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   206      IfxEdsadc_HalfSupplyVoltage_disable = 0,  /**< \brief VDDM / 2 is not connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   207      IfxEdsadc_HalfSupplyVoltage_enable  = 1   /**< \brief VDDM / 2 is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   208  } IfxEdsadc_HalfSupplyVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   209  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   210  /** \brief Modulator configuration of positive/negative input line\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   211   * Definition in Ifx_DSADC.MODCFGx.B.INCFGP and Ifx_DSADC.MODCFGx.B.INCFGN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   213  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   214  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   215      IfxEdsadc_InputConfig_inputPin          = 0,  /**< \brief Modulator input connected to external pin */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   216      IfxEdsadc_InputConfig_supplyVoltage     = 1,  /**< \brief Modulator input connected to supply voltage V_ddm */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   217      IfxEdsadc_InputConfig_commonModeVoltage = 2,  /**< \brief Modulator input connected to common mode voltage V_cm */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   218      IfxEdsadc_InputConfig_referenceGround   = 3   /**< \brief Modulator input connected to reference ground V_ref */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   219  } IfxEdsadc_InputConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   221  /** \brief Demodulator input data source selection\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   222   * Definition in Ifx_EDSADC.DICFG.B.DSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   223   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   224  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   225  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   226      IfxEdsadc_InputDataSource_directInputA   = 0,  /**< \brief External, from input A, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   227      IfxEdsadc_InputDataSource_invertedInputA = 1,  /**< \brief External, from input A, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   228      IfxEdsadc_InputDataSource_directInputB   = 2,  /**< \brief External, from input B, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   229      IfxEdsadc_InputDataSource_invertedInputB = 3,  /**< \brief External, from input B, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   230      IfxEdsadc_InputDataSource_directInputC   = 4,  /**< \brief External, from input C, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   231      IfxEdsadc_InputDataSource_invertedInputC = 5,  /**< \brief External, from input C, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   232      IfxEdsadc_InputDataSource_directInputD   = 6,  /**< \brief External, from input D, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   233      IfxEdsadc_InputDataSource_invertedInputD = 7   /**< \brief External, from input D, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   234  } IfxEdsadc_InputDataSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   235  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   236  /** \brief Modulator gain select of analog input path\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   237   * Definition in Ifx_DSADC.MODCFGx.B.GAINSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   239  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   240  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   241      IfxEdsadc_InputGain_factor1  = 0, /**< \brief Input gain factor: 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   242      IfxEdsadc_InputGain_factor2  = 1, /**< \brief Input gain factor: 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   243      IfxEdsadc_InputGain_factor4  = 2, /**< \brief Input gain factor: 4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   244      IfxEdsadc_InputGain_factor8  = 3, /**< \brief Input gain factor: 8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   245      IfxEdsadc_InputGain_factor16 = 4  /**< \brief Input gain factor: 16 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   246  } IfxEdsadc_InputGain;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   247  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   248  /** \brief specifies input multiplexer control mode defined in MODULE_EDSADC.MODCFG.B.INMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   250  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   251  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   252      IfxEdsadc_InputMuxControlMode_softwareControl = 0,  /**< \brief Trigger Event by software (INMUX follows INSEL) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   253      IfxEdsadc_InputMuxControlMode_fallingEdge     = 1,  /**< \brief Trigger Event on Falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   254      IfxEdsadc_InputMuxControlMode_risingEdge      = 2,  /**< \brief Trigger Event on Rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   255      IfxEdsadc_InputMuxControlMode_always          = 3   /**< \brief Trigger event on any edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   256  } IfxEdsadc_InputMuxControlMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   258  /** \brief Modulator input pin selection\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   259   * Definition in Ifx_DSADC.MODCFGx.B.INMUX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   260   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   261  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   262  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   263      IfxEdsadc_InputPin_a = 0,  /**< \brief Pin A connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   264      IfxEdsadc_InputPin_b = 1,  /**< \brief Pin B connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   265      IfxEdsadc_InputPin_c = 2,  /**< \brief Pin C connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   266      IfxEdsadc_InputPin_d = 3   /**< \brief Pin D connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   267  } IfxEdsadc_InputPin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   269  /** \brief Controls the data shifter after the integrator that selects the portion of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   270   * integrator data for the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   271   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   272  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   274      IfxEdsadc_IntegrationShiftControl_0 = 0,      /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   275      IfxEdsadc_IntegrationShiftControl_1,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   276      IfxEdsadc_IntegrationShiftControl_2,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   277      IfxEdsadc_IntegrationShiftControl_3,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   278      IfxEdsadc_IntegrationShiftControl_4,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   279      IfxEdsadc_IntegrationShiftControl_5           /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   280  } IfxEdsadc_IntegrationShiftControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   281  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   282  /** \brief Integrator window size\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   283   * Definition in Ifx_DSADC.IWCTR.B.IWS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   284   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   285  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   286  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   287      IfxEdsadc_IntegrationWindowSize_internalControl = 0,  /**< \brief Internal control: stop integrator after REPVAL+1 integration cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   288      IfxEdsadc_IntegrationWindowSize_externalControl = 1   /**< \brief External control: stop integrator when bit INTEN becomes 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   289  } IfxEdsadc_IntegrationWindowSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   291  /** \brief Integrator trigger mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   292   * NOTE: switch-first to bypassed before using other mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   293   * Definition in Ifx_EDSADC.DICFG.B.ITRMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   295  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   296  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   297      IfxEdsadc_IntegratorTrigger_bypassed     = 0, /**< \brief No integration trigger, integrator bypassed */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   298      IfxEdsadc_IntegratorTrigger_fallingEdge  = 1, /**< \brief Trigger event upon a falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   299      IfxEdsadc_IntegratorTrigger_risingEdge   = 2, /**< \brief Trigger event upon a rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   300      IfxEdsadc_IntegratorTrigger_alwaysActive = 3  /**< \brief No trigger, integrator active all the time */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   301  } IfxEdsadc_IntegratorTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   303  /** \brief Service request generation (main chain)\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   304   * Definition in Ifx_EDSADC.FCFGM.B.SRGM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   305   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   306  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   307  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   308      IfxEdsadc_MainServiceRequest_never          = 0,  /**< \brief Never, service requests disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   309      IfxEdsadc_MainServiceRequest_highGateSignal = 1,  /**< \brief While gate (selected trigger signal) is high */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   310      IfxEdsadc_MainServiceRequest_lowGateSignal  = 2,  /**< \brief While gate (selected trigger signal) is low */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   311      IfxEdsadc_MainServiceRequest_everyNewResult = 3   /**< \brief Always, for each new result value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   312  } IfxEdsadc_MainServiceRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   313  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   314  /** \brief Modulator divider factor for modulator clock\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   315   * Definition in Ifx_EDSADC.MODCFGx.B.DIVM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   317  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   318  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   319      IfxEdsadc_ModulatorClockDivider_div4 = 0,      /**< \brief f_mod = f_clk / 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   320      IfxEdsadc_ModulatorClockDivider_div6,          /**< \brief f_mod = f_clk / 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   321      IfxEdsadc_ModulatorClockDivider_div8,          /**< \brief f_mod = f_clk / 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   322      IfxEdsadc_ModulatorClockDivider_div10,         /**< \brief f_mod = f_clk / 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   323      IfxEdsadc_ModulatorClockDivider_div12,         /**< \brief f_mod = f_clk / 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   324      IfxEdsadc_ModulatorClockDivider_div14,         /**< \brief f_mod = f_clk / 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   325      IfxEdsadc_ModulatorClockDivider_div16,         /**< \brief f_mod = f_clk / 16  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   326      IfxEdsadc_ModulatorClockDivider_div18          /**< \brief f_mod = f_clk / 18  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   327  } IfxEdsadc_ModulatorClockDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   329  /** \brief Defines the way the modulator clock is generated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   330   * Definition in Ifx_DSADC.GLOBCFG.B.USC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   331   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   332  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   333  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   334      IfxEdsadc_ModulatorClockGeneration_syncMode   = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   335      IfxEdsadc_ModulatorClockGeneration_unsyncMode = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   336  } IfxEdsadc_ModulatorClockGeneration;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   338  /** \brief Enable the offset compensation filter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   339   * Definition in Ifx_DSADC.FCFGM.B.OCEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   340   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   341  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   342  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   343      IfxEdsadc_OffsetCompensationFilter_disabled        = 0,  /**< \brief Offset Compensation filter disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   344      IfxEdsadc_OffsetCompensationFilter_enablewithRateA = 1,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   345      IfxEdsadc_OffsetCompensationFilter_enablewithRateB = 2,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   346      IfxEdsadc_OffsetCompensationFilter_enablewithRateC = 3,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate C */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   347      IfxEdsadc_OffsetCompensationFilter_enablewithRateD = 4,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate D */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   348      IfxEdsadc_OffsetCompensationFilter_enablewithRateE = 5,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate E */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   349      IfxEdsadc_OffsetCompensationFilter_enablewithRateF = 6,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate F */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   350      IfxEdsadc_OffsetCompensationFilter_enablewithRateG = 7   /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate G */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   351  } IfxEdsadc_OffsetCompensationFilter;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   353  /** \brief Overshoot Compensation Enable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   354   * Defined in fx_DSADC.FCFGM.B.OVCEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   355   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   356  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   357  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   358      IfxEdsadc_OvershootCompensation_disabled = 0,  /**< \brief Disabled, feed FIR filter directly */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   359      IfxEdsadc_OvershootCompensation_enabled  = 1   /**< \brief Attenuate response to fast edges */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   360  } IfxEdsadc_OvershootCompensation;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   362  /** \brief Rectifier sign source\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   363   * Selects the sign signal that is to be delayed.\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   364   * Definition in Ifx_DSADC.RECT.B.SSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   365   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   366  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   367  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   368      IfxEdsadc_RectifierSignSource_onChipGenerator = 0,  /**< \brief On-chip carrier generator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   369      IfxEdsadc_RectifierSignSource_nextChannel     = 1,  /**< \brief Sign of result of next channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   370      IfxEdsadc_RectifierSignSource_externalA       = 2,  /**< \brief External sign signal A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   371      IfxEdsadc_RectifierSignSource_externalB       = 3   /**< \brief External sign signal B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   372  } IfxEdsadc_RectifierSignSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   373  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   374  /** \brief Restart the filter chain when an integration window starts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   375   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   376  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   377  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   378      IfxEdsadc_RestartFilterChain_on  = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   379      IfxEdsadc_RestartFilterChain_off = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   380  } IfxEdsadc_RestartFilterChain;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   382  /** \brief specifies result display mode (signed/unsigned)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   383   * Definition in Ifx_DSADC.DICFG.B.RDM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   385  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   386  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   387      IfxEdsadc_ResultDisplayMode_signed   = 0, /**< \brief Signed: result values range from -215 to +215 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   388      IfxEdsadc_ResultDisplayMode_unsigned = 1  /**< \brief Unsigned: result values range from 0 to +216 (shifted by 215) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   389  } IfxEdsadc_ResultDisplayMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   390  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   391  /** \brief Demodulator sample clock source select\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   392   * Definition in Ifx_EDSADC.DICFG.B.CSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   393   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   394  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   395  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   396      IfxEdsadc_SampleClockSource_internal = 0,  /**< \brief Internal clock */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   397      IfxEdsadc_SampleClockSource_inputA   = 3,  /**< \brief External clock, from Input A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   398      IfxEdsadc_SampleClockSource_inputB   = 4,  /**< \brief External clock, from Input B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   399      IfxEdsadc_SampleClockSource_inputC   = 5   /**< \brief External clock, from Input C */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   400  } IfxEdsadc_SampleClockSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   402  /** \brief Service request fifo level
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   403   * Definition in Ifx_EDSADC.RFC.B.SRLVL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   405  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   406  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   407      IfxEdsadc_ServiceRequestFifolevel_1 = 0,      /**< \brief Generate a service request when Fifo contain level 1 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   408      IfxEdsadc_ServiceRequestFifolevel_2,          /**< \brief Generate a service request when Fifo contain level 2 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   409      IfxEdsadc_ServiceRequestFifolevel_3,          /**< \brief Generate a service request when Fifo contain level 3 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   410      IfxEdsadc_ServiceRequestFifolevel_4           /**< \brief Generate a service request when Fifo contain level 4 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   411  } IfxEdsadc_ServiceRequestFifolevel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   413  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   414   * Definition in Ifx_EDSADC.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   415   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   416  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   417  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   418      IfxEdsadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   419      IfxEdsadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   420  } IfxEdsadc_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   422  /** \brief Defines when the slew rate filter is activated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   424  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   425  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   426      IfxEdsadc_StepDetectionMode_lastInput       = 0, /**< \brief Compare threshold to difference of current and last input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   427      IfxEdsadc_StepDetectionMode_secondlastInput = 1  /**< \brief Compare threshold to difference of current and second-last input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   428  } IfxEdsadc_StepDetectionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   430  /** \brief Adjusts the analog circuitry to the supply voltage used in the application
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   431   * system.Defined In defined in MODULE_EDSADC.GLOBCFG.B.SUPLEV
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   433  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   434  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   435      IfxEdsadc_SupplyVoltageLevel_automaticControl = 0,  /**< \brief voltage range is controlled by the power supply */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   436      IfxEdsadc_SupplyVoltageLevel_upperVoltage     = 1,  /**< \brief Upper voltage range: assume a 5 V power supply is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   437      IfxEdsadc_SupplyVoltageLevel_lowerVoltage     = 2   /**< \brief Lower voltage range: assume a 3.3 V power supply is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   438  } IfxEdsadc_SupplyVoltageLevel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   439  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   440  /** \brief OCDS Suspend Control (OCDS.SUS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   441   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   442  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   443  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   444      IfxEdsadc_SuspendMode_none = 0,  /**< \brief No suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   445      IfxEdsadc_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   446      IfxEdsadc_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   447  } IfxEdsadc_SuspendMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   448  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   449  /** \brief Time Stamp Counter Clock Selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   450   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   451  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   452  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   453      IfxEdsadc_TimeStampCounterClockSelection_div1 = 0,  /**< \brief fTSTMP = fMOD */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   454      IfxEdsadc_TimeStampCounterClockSelection_div2 = 1,  /**< \brief fTSTMP = fMOD/2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   455      IfxEdsadc_TimeStampCounterClockSelection_div4 = 2,  /**< \brief fTSTMP = fMOD/4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   456      IfxEdsadc_TimeStampCounterClockSelection_div8 = 3   /**< \brief fTSTMP = fMOD/8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   457  } IfxEdsadc_TimeStampCounterClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   458  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   459  /** \brief Timestamp trigger mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   460   * Definition in Ifx_EDSADC.DICFG.B.TSTRMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   462  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   463  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   464      IfxEdsadc_TimestampTrigger_noTrigger   = 0,  /**< \brief No timestamp trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   465      IfxEdsadc_TimestampTrigger_fallingEdge = 1,  /**< \brief Trigger event upon a falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   466      IfxEdsadc_TimestampTrigger_risingEdge  = 2,  /**< \brief Trigger event upon a rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   467      IfxEdsadc_TimestampTrigger_eachEdge    = 3   /**< \brief Trigger event upon each edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   468  } IfxEdsadc_TimestampTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   469  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   470  /** \brief Trigger select\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   471   * Definition in Ifx_EDSADC.DICFG.B.TRSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   473  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   474  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   475      IfxEdsadc_TriggerInput_a = 0,   /**< \brief GTM EDSADC Trigger 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   476      IfxEdsadc_TriggerInput_b = 1,   /**< \brief GTM EDSADC Trigger 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   477      IfxEdsadc_TriggerInput_c = 2,   /**< \brief GTM ADC Trigger 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   478      IfxEdsadc_TriggerInput_d = 3,   /**< \brief GTM ADC Trigger 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   479      IfxEdsadc_TriggerInput_e = 4,   /**< \brief Trigger/gate via port input P33.0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   480      IfxEdsadc_TriggerInput_f = 5,   /**< \brief Trigger/gate via port input P33.4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   481      IfxEdsadc_TriggerInput_g = 6,   /**< \brief ERU pattern detection output 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   482      IfxEdsadc_TriggerInput_h = 7,   /**< \brief Trigger/gate, channel 0,input H */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   483      IfxEdsadc_TriggerInput_i = 8,   /**< \brief Trigger/gate, channel 0,input I */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   484      IfxEdsadc_TriggerInput_j = 9,   /**< \brief Trigger/gate, channel 0,input J */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   485      IfxEdsadc_TriggerInput_k = 10,  /**< \brief GTM ADC Trigger 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   486      IfxEdsadc_TriggerInput_l = 11,  /**< \brief GTM ADC Trigger 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   487      IfxEdsadc_TriggerInput_m = 12,  /**< \brief GTM DSADC Trigger 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   488      IfxEdsadc_TriggerInput_n = 13,  /**< \brief GTM DSADC Trigger 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   489      IfxEdsadc_TriggerInput_o = 14,  /**< \brief Trigger/gate, channel 0,input O */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   490      IfxEdsadc_TriggerInput_p = 15   /**< \brief Trigger/gate, channel 0,input P */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   491  } IfxEdsadc_TriggerInput;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   492  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   493  /** \brief Controls the dithering function for each modulator separately
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   494   * Definition in Ifx_DSADC.MODCFG.B.DITHEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   496  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   497  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   498      IfxEdsadc_dithering_disabled = 0,  /**< \brief dithering function disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   499      IfxEdsadc_dithering_enabled  = 1   /**< \brief dithering function enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   500  } IfxEdsadc_dithering;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   501  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   502  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   504  /** \brief Allows copying of bitfield AMX into bitfield TIMESTAMP
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   505   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   506  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   507  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   508      IfxEdsadc_AnalogMux_doNotCopyAmx = 0,  /**< \brief Do not copy, timestamp uses all 16 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   509      IfxEdsadc_AnalogMux_copyAmx      = 1   /**< \brief Copy AMX to bits TIMESTAMP[15:14], timestamp uses lower 14 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   510  } IfxEdsadc_AnalogMux;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   511  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   512  /** \brief Timestamp Counter Run Control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   513   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   514  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   515  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   516      IfxEdsadc_TimeStampCounterControl_off = 0,  /**< \brief Timestamp counter is off */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   517      IfxEdsadc_TimeStampCounterControl_on  = 1   /**< \brief Timestamp counter is counting at the rate selected by bitfield TSCLK */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   518  } IfxEdsadc_TimeStampCounterControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   519  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   520  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   521  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   523  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   524  /** \brief Modulator Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   526  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   527  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   528      float32                        modulatorClockPeriod;         /**< \brief Modulator clock period */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   529      IfxEdsadc_InputGain            inputGain;                    /**< \brief Modulator gain select of analog input path */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   530      IfxEdsadc_AnalogClockSyncDelay analogClockSyncDelay;         /**< \brief Define the delay in clock cycle after sync signal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   531      IfxEdsadc_InputConfig          positiveInput;                /**< \brief Modulator configuration of positive input line */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   532      IfxEdsadc_InputConfig          negativeInput;                /**< \brief Modulator configuration of negative input line */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   533      IfxEdsadc_InputPin             inputPin;                     /**< \brief Modulator input pin selection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   534      IfxEdsadc_dithering            ditheringEnabled;             /**< \brief Control the Dithering Function for each modulator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   535      boolean                        integratorResetEnabled;       /**< \brief Control the modulator overload handling */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   536      boolean                        inputMuxActionControl;        /**< \brief Defines the mechanism by which the input multiplexer is controlled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   537      IfxEdsadc_InputMuxControlMode  triggerEvent;                 /**< \brief Defines the condition for a trigger event to control the input multiplexer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   538  } IfxEdsadc_ModulatorConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   539  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   540  /** \addtogroup IfxLld_Edsadc_Std_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   541   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   542  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   543  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   544  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   545  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   547  /** \brief Returns the module's suspend state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   548   * TRUE :if module is suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   549   * FALSE:if module is not yet suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   550   * \param edsadc Pointer to EDSADC module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   551   * \return Suspend status (TRUE / FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   552   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   553  IFX_INLINE boolean IfxEdsadc_isModuleSuspended(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   555  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   556   * \param edsadc pointer to EDSADC registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   557   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   558   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   560  IFX_INLINE void IfxEdsadc_setSleepMode(Ifx_EDSADC *edsadc, IfxEdsadc_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   561  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   562  /** \brief Configure the Module to Hard/Soft suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   563   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   564   * \param edsadc Pointer to EDSADC module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   565   * \param mode Module suspend mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   566   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   567   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   568  IFX_INLINE void IfxEdsadc_setSuspendMode(Ifx_EDSADC *edsadc, IfxEdsadc_SuspendMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   569  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   570  /** \brief Enables the conversion of multiple channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   571   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   572   * \param modulatorMask the modulator which should be running (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   573   * \param channelMask the channels which should be scanned (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   574   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   575   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   576   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   578   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   579  IFX_INLINE void IfxEdsadc_startScan(Ifx_EDSADC *edsadc, uint32 modulatorMask, uint32 channelMask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   580  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   581  /** \brief Disables the conversion of multiple channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   582   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   583   * \param modulatorMask the modulator which should be disabled (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   584   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   585   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   586   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   587   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   589  IFX_INLINE void IfxEdsadc_stopScan(Ifx_EDSADC *edsadc, uint32 modulatorMask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   592  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   593  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   594  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   595  /** \brief Disables the module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   596   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   598   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   599  IFX_EXTERN void IfxEdsadc_disableModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   600  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   601  /** \brief Enables the module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   602   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   603   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   604   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   605  IFX_EXTERN void IfxEdsadc_enableModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   606  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   607  /** \brief resets EDSADC kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   608   * \param edsadc pointer to EDSADC registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   609   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   611  IFX_EXTERN void IfxEdsadc_resetModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   613  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   615  /** \addtogroup IfxLld_Edsadc_Std_Support
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   616   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   617  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   618  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   619  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   620  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   622  /** \brief Get the main comb decimation factor
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   623   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   624   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   625   * \return the main comb decimation factor
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   626   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   627  IFX_INLINE uint16 IfxEdsadc_getMainCombDecimation(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   629  /** \brief Get result from the main chain
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   630   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   631   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   632   * \return result from the main chain
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   633   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   634   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   635   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   636   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   637  IFX_INLINE sint16 IfxEdsadc_getMainResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   639  /** \brief Get the subsequent result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   640   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   641  IFX_INLINE sint32 IfxEdsadc_getSubsequentResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   642  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   643  /** \brief Return TRUE if EDSADC module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   644   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   645   * \return TRUE if EDSADC module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   646   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   647  IFX_INLINE boolean IfxEdsadc_isModuleEnabled(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   648  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   649  /** \brief Set the carrier waveform mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   650   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   651   * \param waveformMode the waveform mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   652   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   653   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   654  IFX_INLINE void IfxEdsadc_setCarrierMode(Ifx_EDSADC *edsadc, IfxEdsadc_CarrierWaveformMode waveformMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   656  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   657  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   658  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   659  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   660  /** \brief Get the sample frequency of the integrator output in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   661   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   662   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   663   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   664   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   665  IFX_EXTERN float32 IfxEdsadc_getIntegratorOutFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   667  /** \brief Get the sample frequency of the main COMB filter output in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   668   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   669   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   670   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   671   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   672  IFX_EXTERN float32 IfxEdsadc_getMainCombOutFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   674  /** \brief Estimate the group delay of main-chain filters in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   675   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   676   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   677   * \return delay in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   678   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   679  IFX_EXTERN float32 IfxEdsadc_getMainGroupDelay(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   681  /** \brief Get the modulator clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   682   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   683   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   684   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   685   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   686  IFX_EXTERN float32 IfxEdsadc_getModulatorClockFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   687  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   688  /** \brief Get the input frequency of EDSADC in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   689   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   690   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   691   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   692  IFX_EXTERN float32 IfxEdsadc_getModulatorInputClockFreq(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   693  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   694  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   695  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   696  /** \addtogroup IfxLld_Edsadc_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   697   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   698  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   699  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   700  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   701  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   702  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   703  /** \brief Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   704   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   705   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   706   * \return Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   708  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxEdsadc_getAuxSrc(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   710  /** \brief Get the interrupt source register for a Main event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   711   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   712   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   713   * \return Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   714   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   715  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxEdsadc_getMainSrc(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   716  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   717  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   718  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   719  /** \addtogroup IfxLld_Edsadc_Std_IO
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   720   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   721  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   722  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   723  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   724  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   725  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   726  /** \brief Initializes a CGPWM output
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   727   * \param cgPwm the CGPWM Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   728   * \param pinMode the pin output mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   729   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   730   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   731   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   732  IFX_INLINE void IfxEdsadc_initCgPwmPin(const IfxEdsadc_Cgpwm_Out *cgPwm, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   733  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   734  /** \brief Initializes a CIN input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   735   * \param cIn the CIN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   736   * \param cInMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   737   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   738   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   739   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   740  IFX_INLINE void IfxEdsadc_initCinPin(const IfxEdsadc_Cin_In *cIn, IfxPort_InputMode cInMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   741  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   742  /** \brief Initializes a COUT output
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   743   * \param cout the COUT Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   744   * \param pinMode the pin output mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   745   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   746   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   748  IFX_INLINE void IfxEdsadc_initCoutPin(const IfxEdsadc_Cout_Out *cout, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   750  /** \brief Initializes a DIN input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   751   * \param dIn the DIN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   752   * \param dInMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   753   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   754   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   755   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   756  IFX_INLINE void IfxEdsadc_initDinPin(const IfxEdsadc_Din_In *dIn, IfxPort_InputMode dInMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   757  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   758  /** \brief Initializes a DS input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   759   * \param dsn the DSN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   760   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   761   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   762   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   763   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   764  IFX_INLINE void IfxEdsadc_initDsnPin(const IfxEdsadc_Dsn_In *dsn, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   765  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   766  /** \brief Initializes a DS input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   767   * \param dsp the DSP Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   768   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   769   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   770   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   771   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   772  IFX_INLINE void IfxEdsadc_initDspPin(const IfxEdsadc_Dsp_In *dsp, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   774  /** \brief Initializes a ITR input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   775   * \param itr the ITR Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   776   * \param itrMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   777   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   778   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   779   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   780  IFX_INLINE void IfxEdsadc_initItrPin(const IfxEdsadc_Itr_In *itr, IfxPort_InputMode itrMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   781  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   782  /** \brief Initializes a SG input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   783   * \param sg the SG Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   784   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   785   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   786   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   787   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   788  IFX_INLINE void IfxEdsadc_initSgPin(const IfxEdsadc_Sg_In *sg, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   789  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   790  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   791  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   792  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   793  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   794  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   795  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   796  /** \brief Returns the positive input line configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   797   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   798   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   799   * \return Positive Input Line Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   800   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   801  IFX_INLINE uint8 IfxEdsadc_getPositiveInputLineConfiguration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   802  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   803  /** \brief Returns the negative input line configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   804   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   805   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   806   * \return Negative Input Line Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   807   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   808  IFX_INLINE uint8 IfxEdsadc_getNegativeInputLineConfiguration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   809  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   810  /** \brief Sets the Offset compensation Value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   811   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   812   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   813   * \param value Value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   814   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   815   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   816  IFX_INLINE void IfxEdsadc_setOffsetCompensationValue(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   818  /** \brief Returns the address of the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   819   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   820   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   821   * \return Address of the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   822   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   823  IFX_INLINE uint32 *IfxEdsadc_getResultRegisterAddress(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   824  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   825  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   826  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   827  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   828  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   829  /** \brief set common mode voltage Parameters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   830   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   831   * \param channel specifies channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   832   * \param voltage select Fractional reference Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   833   * \param refMode Fractional Reference Voltage Enable/ Disable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   834   * \param hsvMode Enable / Disable Half Supply Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   835   * \param cmhvMode Enable / Disable Common Mode Hold Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   836   * \param positiveInput Defines the connection of the respective positive input y to the common mode hold voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   837   * \param negativeInput Defines the connection of the respective negative input y to the common mode hold voltage.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   838   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   839   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   840  IFX_EXTERN void IfxEdsadc_setCommonModeVoltage(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_FractionalRefVoltageSelection voltage, IfxEdsadc_FractionalRefVoltage refMode, IfxEdsadc_HalfSupplyVoltage hsvMode, IfxEdsadc_CommonModeHoldVoltage cmhvMode, uint8 positiveInput, uint8 negativeInput);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   842  /** \brief configure gain correction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   843   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   844   * \param channel Specifies channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   845   * \param gainFactor Multiplication Factor for gain correction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   846   * \param cicShift Position of CIC filter output shifter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   847   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   848   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   849  IFX_EXTERN void IfxEdsadc_setGainCorrectionFactor(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   851  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   852   * \param edsadc Pointer to module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   853   * \param channel specifies channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   854   * \param timeStampCounterClock Time Stamp Counter Clock selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   855   * \param runControl TimeStamp Counter Run Control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   856   * \param analogMuxCopy Analog MUX Setting Copy Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   857   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   858   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   859  IFX_EXTERN void IfxEdsadc_setTimeStampCounter(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_TimeStampCounterClockSelection timeStampCounterClock, IfxEdsadc_TimeStampCounterControl runControl, IfxEdsadc_AnalogMux analogMuxCopy);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   861  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   862   * \param edsadc Pointer to EDSADC SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   863   * \param channel chanel no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   864   * \param gainFactor Multiplication Factor for Gain Correction During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   865   * \param cicShift Position of the CIC Filter Output Shifter During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   866   * \param cicDecimationRate Decimation Rate of the CIC Filter During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   867   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   868   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   869  IFX_EXTERN void IfxEdsadc_setGainControl(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift, uint8 cicDecimationRate);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   870  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   871  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   872   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   873   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   874   * \param calFactor Multiplication Factor for Gain Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   875   * \param calTarget Target Value for Calibrated Fullscale
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   876   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   877   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   878  IFX_EXTERN void IfxEdsadc_setGainCalibration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 calFactor, uint16 calTarget);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   879  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   880  /** \brief Set the Modulator configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   881   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   882   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   883   * \param config Modulator Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   884   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   885   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   886  IFX_EXTERN void IfxEdsadc_configureModulator(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_ModulatorConfig *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   887  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   888  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   889  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   890  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   891  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   892  IFX_INLINE uint16 IfxEdsadc_getMainCombDecimation(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   893  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   894      return (uint16)(1U + edsadc->CH[channel].FCFGC.B.CFMDF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   895  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   896  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   897  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   898  IFX_INLINE sint16 IfxEdsadc_getMainResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   899  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   900      return edsadc->CH[channel].RESM.B.RESULTLO;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   901  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   902  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   903  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   904  IFX_INLINE sint32 IfxEdsadc_getSubsequentResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   905  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   906      return (sint32)(edsadc->CH[channel].RESM.U);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   907  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   908  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   909  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   910  IFX_INLINE void IfxEdsadc_initCgPwmPin(const IfxEdsadc_Cgpwm_Out *cgPwm, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   911  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   912      if (cgPwm->pin.port != NULL_PTR)
	ld.a	a4,[a15]4
.L202:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   132      {                           /* Initialise negative carrier pin */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   133          IfxEdsadc_initCgPwmPin(pinNeg, config->pinMode, config->pinDriver);
	ld.bu	d5,[a13]16
.L496:
	ld.bu	d8,[a13]17
.L204:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   912      if (cgPwm->pin.port != NULL_PTR)      (inlined)
	jz.a	a4,.L11
.L205:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     2   * \file IfxEdsadc.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     3   * \brief EDSADC  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     4   * \ingroup IfxLld_Edsadc
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    41   * \defgroup IfxLld_Edsadc_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    42   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    43   * \defgroup IfxLld_Edsadc_Std_Operative Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    44   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    45   * \defgroup IfxLld_Edsadc_Std_Support Support Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    46   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    47   * \defgroup IfxLld_Edsadc_Std_Interrupt Interrupt Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    48   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    49   * \defgroup IfxLld_Edsadc_Std_IO IO Pin Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    50   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    53  #ifndef IFXEDSADC_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    54  #define IFXEDSADC_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    60  #include "_Impl/IfxEdsadc_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    61  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    62  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    63  #include "_PinMap/IfxEdsadc_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    64  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    65  #include "IfxEdsadc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    66  #include "IfxEdsadc_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    68  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    69  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    70  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    71  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    72  /** \addtogroup IfxLld_Edsadc_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    73   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    74  /** \brief Analog Clock Synchronization Delay
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    75   * Definition in Ifx_DSADC.MODCFG.B.ACSD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    79      IfxEdsadc_AnalogClockSyncDelay_noDelay     = 0,    /**< \brief no delay */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    80      IfxEdsadc_AnalogClockSyncDelay_cycleDelay1 = 1,    /**< \brief Delay of 1 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    81      IfxEdsadc_AnalogClockSyncDelay_cycleDelay2,        /**< \brief Delay of 2 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    82      IfxEdsadc_AnalogClockSyncDelay_cycleDelay3,        /**< \brief Delay of 3 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    83      IfxEdsadc_AnalogClockSyncDelay_cycleDelay4,        /**< \brief Delay of 4 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    84      IfxEdsadc_AnalogClockSyncDelay_cycleDelay5,        /**< \brief Delay of 5 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    85      IfxEdsadc_AnalogClockSyncDelay_cycleDelay6,        /**< \brief Delay of 6 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    86      IfxEdsadc_AnalogClockSyncDelay_cycleDelay7         /**< \brief Delay of 7 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    87  } IfxEdsadc_AnalogClockSyncDelay;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    89  /** \brief Service request generation (auxiliary)\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    90   * Definition in Ifx_EDSADC.FCFGM.B.SRGA
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    91   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    92  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    93  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    94      IfxEdsadc_AuxServiceRequest_never          = 0,  /**< \brief Never, service requests disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    95      IfxEdsadc_AuxServiceRequest_compEvent      = 1,  /**< \brief As selected by bitfield ESEL */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    96      IfxEdsadc_AuxServiceRequest_timestampEvent = 2,  /**< \brief Timestamp Event */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    97      IfxEdsadc_AuxServiceRequest_altSource      = 3   /**< \brief Alternate source: Capturing of a sign delay value to register CGSYNCx (x = 0 - 5) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    98  } IfxEdsadc_AuxServiceRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   100  /** \brief Carrier generation mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   101   * Definition in Ifx_EDSADC.CGCFG.B.CGMOD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   103  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   104  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   105      IfxEdsadc_CarrierWaveformMode_stopped  = 0,  /**< \brief Carrier Generator stopped */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   106      IfxEdsadc_CarrierWaveformMode_square   = 1,  /**< \brief Carrier Generator generates square wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   107      IfxEdsadc_CarrierWaveformMode_triangle = 2,  /**< \brief Carrier Generator generates triangle wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   108      IfxEdsadc_CarrierWaveformMode_sine     = 3   /**< \brief Carrier Generator generates sine wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   109  } IfxEdsadc_CarrierWaveformMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   111  /** \brief Common Mode Hold Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   115      IfxEdsadc_CommonModeHoldVoltage_disable = 0,  /**< \brief VCMH is off */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   116      IfxEdsadc_CommonModeHoldVoltage_enable  = 1   /**< \brief VCMH is generated */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   117  } IfxEdsadc_CommonModeHoldVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   119  /** \brief Select the data to be returned when register RESM is read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   120   * Definition in Ifx_DSADC.DICFG.B.DRM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   121   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   122  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   123  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   124      IfxEdsadc_DataRead_signOnHighbit      = 0,  /**< \brief Single: Issue one 16-bit value per read access (sign on high bits) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   125      IfxEdsadc_DataRead_timestampOnHighbit = 1,  /**< \brief Single: Issue one 16-bit value per read access (timestamp on high bits) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   126      IfxEdsadc_DataRead_double             = 2   /**< \brief Double: Issue two 16-bit values per read access */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   127  } IfxEdsadc_DataRead;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   129  /** \brief Data stream select
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   130   * Definition in Ifx_DSADC.DICFG.B.DSS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   131   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   132  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   133  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   134      IfxEdsadc_DataStream_onChipModulator        = 0,  /**< \brief select data stream from on chip modulator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   135      IfxEdsadc_DataStream_doubleDataClockEdge    = 3,  /**< \brief External modulator, use rising and falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   136      IfxEdsadc_DataStream_directFallingClockEdge = 4,  /**< \brief External modulator, use each falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   137      IfxEdsadc_DataStream_directRisingClockEdge  = 5,  /**< \brief External modulator, use each rising clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   138      IfxEdsadc_DataStream_secondFallingClockEdge = 6,  /**< \brief External modulator, use every 2nd falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   139      IfxEdsadc_DataStream_secondRisingClockEdge  = 7   /**< \brief External modulator, use every 2nd rising clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   140  } IfxEdsadc_DataStream;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   142  /** \brief Trimming Value for Dithering function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   143   * Definition in Ifx_DSADC.GLOBCFG.B.DITRIM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   144   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   145  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   146  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   147      IfxEdsadc_DitheringIntensity_minimum = 0,  /**< \brief Minimum dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   148      IfxEdsadc_DitheringIntensity_low     = 1,  /**< \brief Low dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   149      IfxEdsadc_DitheringIntensity_medium  = 2,  /**< \brief Medium dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   150      IfxEdsadc_DitheringIntensity_high    = 3   /**< \brief High */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   151  } IfxEdsadc_DitheringIntensity;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   152  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   153  /** \brief Define when comparator event is generated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   154   * Definition in Ifx_DSADC.FCFGM.B.ESEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   156  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   157  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   158      IfxEdsadc_EventSelect_everyNewResult = 0,  /**< \brief Always, for each new result value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   159      IfxEdsadc_EventSelect_insideBoundry  = 1,  /**< \brief If result is inside the boundary band */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   160      IfxEdsadc_EventSelect_outsideBoundry = 2   /**< \brief If result is outside the boundary band */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   161  } IfxEdsadc_EventSelect;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   163  /** \brief Defines the duration of the additional filter effect, based on values input to the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   164   * filter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   165   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   166  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   167  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   168      IfxEdsadc_FilterRunTimeInputCycle_2  = 0, /**< \brief 2 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   169      IfxEdsadc_FilterRunTimeInputCycle_4  = 1, /**< \brief 4 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   170      IfxEdsadc_FilterRunTimeInputCycle_8  = 2, /**< \brief 8 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   171      IfxEdsadc_FilterRunTimeInputCycle_16 = 3  /**< \brief 16 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   172  } IfxEdsadc_FilterRunTimeInputCycle;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   173  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   174  /** \brief Specifies Slew Rate Filter Strength
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   175   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   176  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   177  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   178      IfxEdsadc_FilterStrength_minimum = 0,  /**< \brief Minimum filter effect, early attenuation, linear operation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   179      IfxEdsadc_FilterStrength_weak    = 1,  /**< \brief Weak filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   180      IfxEdsadc_FilterStrength_medium  = 2,  /**< \brief Medium filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   181      IfxEdsadc_FilterStrength_maximum = 3   /**< \brief maximum filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   182  } IfxEdsadc_FilterStrength;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   184  /** \brief Fractional Reference Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   185   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   186  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   187  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   188      IfxEdsadc_FractionalRefVoltage_disable = 0,  /**< \brief VREFX is not connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   189      IfxEdsadc_FractionalRefVoltage_enable  = 1   /**< \brief VREFX is connected, value according to VREFXSEL */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   190  } IfxEdsadc_FractionalRefVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   192  /** \brief Fraction reference voltage selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   194  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   195  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   196      IfxEdsadc_FractionalRefVoltageSelection_div2  = 0, /**< \brief VREFX = VAREF / 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   197      IfxEdsadc_FractionalRefVoltageSelection_div4  = 1, /**< \brief VREFX = VAREF / 4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   198      IfxEdsadc_FractionalRefVoltageSelection_div8  = 2, /**< \brief VREFX = VAREF / 8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   199      IfxEdsadc_FractionalRefVoltageSelection_div16 = 3  /**< \brief VREFX = VAREF / 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   200  } IfxEdsadc_FractionalRefVoltageSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   202  /** \brief Half Supply Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   204  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   205  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   206      IfxEdsadc_HalfSupplyVoltage_disable = 0,  /**< \brief VDDM / 2 is not connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   207      IfxEdsadc_HalfSupplyVoltage_enable  = 1   /**< \brief VDDM / 2 is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   208  } IfxEdsadc_HalfSupplyVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   209  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   210  /** \brief Modulator configuration of positive/negative input line\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   211   * Definition in Ifx_DSADC.MODCFGx.B.INCFGP and Ifx_DSADC.MODCFGx.B.INCFGN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   213  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   214  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   215      IfxEdsadc_InputConfig_inputPin          = 0,  /**< \brief Modulator input connected to external pin */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   216      IfxEdsadc_InputConfig_supplyVoltage     = 1,  /**< \brief Modulator input connected to supply voltage V_ddm */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   217      IfxEdsadc_InputConfig_commonModeVoltage = 2,  /**< \brief Modulator input connected to common mode voltage V_cm */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   218      IfxEdsadc_InputConfig_referenceGround   = 3   /**< \brief Modulator input connected to reference ground V_ref */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   219  } IfxEdsadc_InputConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   221  /** \brief Demodulator input data source selection\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   222   * Definition in Ifx_EDSADC.DICFG.B.DSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   223   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   224  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   225  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   226      IfxEdsadc_InputDataSource_directInputA   = 0,  /**< \brief External, from input A, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   227      IfxEdsadc_InputDataSource_invertedInputA = 1,  /**< \brief External, from input A, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   228      IfxEdsadc_InputDataSource_directInputB   = 2,  /**< \brief External, from input B, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   229      IfxEdsadc_InputDataSource_invertedInputB = 3,  /**< \brief External, from input B, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   230      IfxEdsadc_InputDataSource_directInputC   = 4,  /**< \brief External, from input C, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   231      IfxEdsadc_InputDataSource_invertedInputC = 5,  /**< \brief External, from input C, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   232      IfxEdsadc_InputDataSource_directInputD   = 6,  /**< \brief External, from input D, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   233      IfxEdsadc_InputDataSource_invertedInputD = 7   /**< \brief External, from input D, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   234  } IfxEdsadc_InputDataSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   235  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   236  /** \brief Modulator gain select of analog input path\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   237   * Definition in Ifx_DSADC.MODCFGx.B.GAINSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   239  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   240  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   241      IfxEdsadc_InputGain_factor1  = 0, /**< \brief Input gain factor: 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   242      IfxEdsadc_InputGain_factor2  = 1, /**< \brief Input gain factor: 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   243      IfxEdsadc_InputGain_factor4  = 2, /**< \brief Input gain factor: 4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   244      IfxEdsadc_InputGain_factor8  = 3, /**< \brief Input gain factor: 8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   245      IfxEdsadc_InputGain_factor16 = 4  /**< \brief Input gain factor: 16 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   246  } IfxEdsadc_InputGain;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   247  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   248  /** \brief specifies input multiplexer control mode defined in MODULE_EDSADC.MODCFG.B.INMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   250  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   251  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   252      IfxEdsadc_InputMuxControlMode_softwareControl = 0,  /**< \brief Trigger Event by software (INMUX follows INSEL) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   253      IfxEdsadc_InputMuxControlMode_fallingEdge     = 1,  /**< \brief Trigger Event on Falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   254      IfxEdsadc_InputMuxControlMode_risingEdge      = 2,  /**< \brief Trigger Event on Rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   255      IfxEdsadc_InputMuxControlMode_always          = 3   /**< \brief Trigger event on any edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   256  } IfxEdsadc_InputMuxControlMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   258  /** \brief Modulator input pin selection\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   259   * Definition in Ifx_DSADC.MODCFGx.B.INMUX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   260   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   261  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   262  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   263      IfxEdsadc_InputPin_a = 0,  /**< \brief Pin A connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   264      IfxEdsadc_InputPin_b = 1,  /**< \brief Pin B connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   265      IfxEdsadc_InputPin_c = 2,  /**< \brief Pin C connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   266      IfxEdsadc_InputPin_d = 3   /**< \brief Pin D connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   267  } IfxEdsadc_InputPin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   269  /** \brief Controls the data shifter after the integrator that selects the portion of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   270   * integrator data for the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   271   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   272  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   274      IfxEdsadc_IntegrationShiftControl_0 = 0,      /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   275      IfxEdsadc_IntegrationShiftControl_1,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   276      IfxEdsadc_IntegrationShiftControl_2,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   277      IfxEdsadc_IntegrationShiftControl_3,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   278      IfxEdsadc_IntegrationShiftControl_4,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   279      IfxEdsadc_IntegrationShiftControl_5           /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   280  } IfxEdsadc_IntegrationShiftControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   281  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   282  /** \brief Integrator window size\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   283   * Definition in Ifx_DSADC.IWCTR.B.IWS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   284   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   285  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   286  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   287      IfxEdsadc_IntegrationWindowSize_internalControl = 0,  /**< \brief Internal control: stop integrator after REPVAL+1 integration cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   288      IfxEdsadc_IntegrationWindowSize_externalControl = 1   /**< \brief External control: stop integrator when bit INTEN becomes 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   289  } IfxEdsadc_IntegrationWindowSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   291  /** \brief Integrator trigger mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   292   * NOTE: switch-first to bypassed before using other mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   293   * Definition in Ifx_EDSADC.DICFG.B.ITRMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   295  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   296  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   297      IfxEdsadc_IntegratorTrigger_bypassed     = 0, /**< \brief No integration trigger, integrator bypassed */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   298      IfxEdsadc_IntegratorTrigger_fallingEdge  = 1, /**< \brief Trigger event upon a falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   299      IfxEdsadc_IntegratorTrigger_risingEdge   = 2, /**< \brief Trigger event upon a rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   300      IfxEdsadc_IntegratorTrigger_alwaysActive = 3  /**< \brief No trigger, integrator active all the time */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   301  } IfxEdsadc_IntegratorTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   303  /** \brief Service request generation (main chain)\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   304   * Definition in Ifx_EDSADC.FCFGM.B.SRGM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   305   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   306  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   307  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   308      IfxEdsadc_MainServiceRequest_never          = 0,  /**< \brief Never, service requests disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   309      IfxEdsadc_MainServiceRequest_highGateSignal = 1,  /**< \brief While gate (selected trigger signal) is high */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   310      IfxEdsadc_MainServiceRequest_lowGateSignal  = 2,  /**< \brief While gate (selected trigger signal) is low */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   311      IfxEdsadc_MainServiceRequest_everyNewResult = 3   /**< \brief Always, for each new result value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   312  } IfxEdsadc_MainServiceRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   313  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   314  /** \brief Modulator divider factor for modulator clock\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   315   * Definition in Ifx_EDSADC.MODCFGx.B.DIVM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   317  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   318  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   319      IfxEdsadc_ModulatorClockDivider_div4 = 0,      /**< \brief f_mod = f_clk / 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   320      IfxEdsadc_ModulatorClockDivider_div6,          /**< \brief f_mod = f_clk / 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   321      IfxEdsadc_ModulatorClockDivider_div8,          /**< \brief f_mod = f_clk / 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   322      IfxEdsadc_ModulatorClockDivider_div10,         /**< \brief f_mod = f_clk / 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   323      IfxEdsadc_ModulatorClockDivider_div12,         /**< \brief f_mod = f_clk / 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   324      IfxEdsadc_ModulatorClockDivider_div14,         /**< \brief f_mod = f_clk / 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   325      IfxEdsadc_ModulatorClockDivider_div16,         /**< \brief f_mod = f_clk / 16  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   326      IfxEdsadc_ModulatorClockDivider_div18          /**< \brief f_mod = f_clk / 18  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   327  } IfxEdsadc_ModulatorClockDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   329  /** \brief Defines the way the modulator clock is generated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   330   * Definition in Ifx_DSADC.GLOBCFG.B.USC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   331   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   332  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   333  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   334      IfxEdsadc_ModulatorClockGeneration_syncMode   = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   335      IfxEdsadc_ModulatorClockGeneration_unsyncMode = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   336  } IfxEdsadc_ModulatorClockGeneration;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   338  /** \brief Enable the offset compensation filter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   339   * Definition in Ifx_DSADC.FCFGM.B.OCEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   340   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   341  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   342  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   343      IfxEdsadc_OffsetCompensationFilter_disabled        = 0,  /**< \brief Offset Compensation filter disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   344      IfxEdsadc_OffsetCompensationFilter_enablewithRateA = 1,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   345      IfxEdsadc_OffsetCompensationFilter_enablewithRateB = 2,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   346      IfxEdsadc_OffsetCompensationFilter_enablewithRateC = 3,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate C */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   347      IfxEdsadc_OffsetCompensationFilter_enablewithRateD = 4,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate D */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   348      IfxEdsadc_OffsetCompensationFilter_enablewithRateE = 5,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate E */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   349      IfxEdsadc_OffsetCompensationFilter_enablewithRateF = 6,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate F */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   350      IfxEdsadc_OffsetCompensationFilter_enablewithRateG = 7   /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate G */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   351  } IfxEdsadc_OffsetCompensationFilter;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   353  /** \brief Overshoot Compensation Enable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   354   * Defined in fx_DSADC.FCFGM.B.OVCEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   355   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   356  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   357  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   358      IfxEdsadc_OvershootCompensation_disabled = 0,  /**< \brief Disabled, feed FIR filter directly */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   359      IfxEdsadc_OvershootCompensation_enabled  = 1   /**< \brief Attenuate response to fast edges */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   360  } IfxEdsadc_OvershootCompensation;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   362  /** \brief Rectifier sign source\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   363   * Selects the sign signal that is to be delayed.\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   364   * Definition in Ifx_DSADC.RECT.B.SSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   365   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   366  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   367  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   368      IfxEdsadc_RectifierSignSource_onChipGenerator = 0,  /**< \brief On-chip carrier generator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   369      IfxEdsadc_RectifierSignSource_nextChannel     = 1,  /**< \brief Sign of result of next channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   370      IfxEdsadc_RectifierSignSource_externalA       = 2,  /**< \brief External sign signal A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   371      IfxEdsadc_RectifierSignSource_externalB       = 3   /**< \brief External sign signal B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   372  } IfxEdsadc_RectifierSignSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   373  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   374  /** \brief Restart the filter chain when an integration window starts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   375   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   376  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   377  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   378      IfxEdsadc_RestartFilterChain_on  = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   379      IfxEdsadc_RestartFilterChain_off = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   380  } IfxEdsadc_RestartFilterChain;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   382  /** \brief specifies result display mode (signed/unsigned)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   383   * Definition in Ifx_DSADC.DICFG.B.RDM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   385  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   386  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   387      IfxEdsadc_ResultDisplayMode_signed   = 0, /**< \brief Signed: result values range from -215 to +215 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   388      IfxEdsadc_ResultDisplayMode_unsigned = 1  /**< \brief Unsigned: result values range from 0 to +216 (shifted by 215) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   389  } IfxEdsadc_ResultDisplayMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   390  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   391  /** \brief Demodulator sample clock source select\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   392   * Definition in Ifx_EDSADC.DICFG.B.CSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   393   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   394  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   395  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   396      IfxEdsadc_SampleClockSource_internal = 0,  /**< \brief Internal clock */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   397      IfxEdsadc_SampleClockSource_inputA   = 3,  /**< \brief External clock, from Input A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   398      IfxEdsadc_SampleClockSource_inputB   = 4,  /**< \brief External clock, from Input B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   399      IfxEdsadc_SampleClockSource_inputC   = 5   /**< \brief External clock, from Input C */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   400  } IfxEdsadc_SampleClockSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   402  /** \brief Service request fifo level
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   403   * Definition in Ifx_EDSADC.RFC.B.SRLVL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   405  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   406  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   407      IfxEdsadc_ServiceRequestFifolevel_1 = 0,      /**< \brief Generate a service request when Fifo contain level 1 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   408      IfxEdsadc_ServiceRequestFifolevel_2,          /**< \brief Generate a service request when Fifo contain level 2 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   409      IfxEdsadc_ServiceRequestFifolevel_3,          /**< \brief Generate a service request when Fifo contain level 3 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   410      IfxEdsadc_ServiceRequestFifolevel_4           /**< \brief Generate a service request when Fifo contain level 4 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   411  } IfxEdsadc_ServiceRequestFifolevel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   413  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   414   * Definition in Ifx_EDSADC.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   415   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   416  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   417  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   418      IfxEdsadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   419      IfxEdsadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   420  } IfxEdsadc_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   422  /** \brief Defines when the slew rate filter is activated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   424  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   425  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   426      IfxEdsadc_StepDetectionMode_lastInput       = 0, /**< \brief Compare threshold to difference of current and last input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   427      IfxEdsadc_StepDetectionMode_secondlastInput = 1  /**< \brief Compare threshold to difference of current and second-last input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   428  } IfxEdsadc_StepDetectionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   430  /** \brief Adjusts the analog circuitry to the supply voltage used in the application
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   431   * system.Defined In defined in MODULE_EDSADC.GLOBCFG.B.SUPLEV
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   433  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   434  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   435      IfxEdsadc_SupplyVoltageLevel_automaticControl = 0,  /**< \brief voltage range is controlled by the power supply */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   436      IfxEdsadc_SupplyVoltageLevel_upperVoltage     = 1,  /**< \brief Upper voltage range: assume a 5 V power supply is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   437      IfxEdsadc_SupplyVoltageLevel_lowerVoltage     = 2   /**< \brief Lower voltage range: assume a 3.3 V power supply is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   438  } IfxEdsadc_SupplyVoltageLevel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   439  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   440  /** \brief OCDS Suspend Control (OCDS.SUS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   441   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   442  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   443  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   444      IfxEdsadc_SuspendMode_none = 0,  /**< \brief No suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   445      IfxEdsadc_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   446      IfxEdsadc_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   447  } IfxEdsadc_SuspendMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   448  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   449  /** \brief Time Stamp Counter Clock Selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   450   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   451  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   452  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   453      IfxEdsadc_TimeStampCounterClockSelection_div1 = 0,  /**< \brief fTSTMP = fMOD */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   454      IfxEdsadc_TimeStampCounterClockSelection_div2 = 1,  /**< \brief fTSTMP = fMOD/2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   455      IfxEdsadc_TimeStampCounterClockSelection_div4 = 2,  /**< \brief fTSTMP = fMOD/4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   456      IfxEdsadc_TimeStampCounterClockSelection_div8 = 3   /**< \brief fTSTMP = fMOD/8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   457  } IfxEdsadc_TimeStampCounterClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   458  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   459  /** \brief Timestamp trigger mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   460   * Definition in Ifx_EDSADC.DICFG.B.TSTRMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   462  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   463  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   464      IfxEdsadc_TimestampTrigger_noTrigger   = 0,  /**< \brief No timestamp trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   465      IfxEdsadc_TimestampTrigger_fallingEdge = 1,  /**< \brief Trigger event upon a falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   466      IfxEdsadc_TimestampTrigger_risingEdge  = 2,  /**< \brief Trigger event upon a rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   467      IfxEdsadc_TimestampTrigger_eachEdge    = 3   /**< \brief Trigger event upon each edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   468  } IfxEdsadc_TimestampTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   469  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   470  /** \brief Trigger select\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   471   * Definition in Ifx_EDSADC.DICFG.B.TRSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   473  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   474  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   475      IfxEdsadc_TriggerInput_a = 0,   /**< \brief GTM EDSADC Trigger 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   476      IfxEdsadc_TriggerInput_b = 1,   /**< \brief GTM EDSADC Trigger 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   477      IfxEdsadc_TriggerInput_c = 2,   /**< \brief GTM ADC Trigger 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   478      IfxEdsadc_TriggerInput_d = 3,   /**< \brief GTM ADC Trigger 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   479      IfxEdsadc_TriggerInput_e = 4,   /**< \brief Trigger/gate via port input P33.0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   480      IfxEdsadc_TriggerInput_f = 5,   /**< \brief Trigger/gate via port input P33.4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   481      IfxEdsadc_TriggerInput_g = 6,   /**< \brief ERU pattern detection output 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   482      IfxEdsadc_TriggerInput_h = 7,   /**< \brief Trigger/gate, channel 0,input H */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   483      IfxEdsadc_TriggerInput_i = 8,   /**< \brief Trigger/gate, channel 0,input I */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   484      IfxEdsadc_TriggerInput_j = 9,   /**< \brief Trigger/gate, channel 0,input J */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   485      IfxEdsadc_TriggerInput_k = 10,  /**< \brief GTM ADC Trigger 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   486      IfxEdsadc_TriggerInput_l = 11,  /**< \brief GTM ADC Trigger 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   487      IfxEdsadc_TriggerInput_m = 12,  /**< \brief GTM DSADC Trigger 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   488      IfxEdsadc_TriggerInput_n = 13,  /**< \brief GTM DSADC Trigger 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   489      IfxEdsadc_TriggerInput_o = 14,  /**< \brief Trigger/gate, channel 0,input O */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   490      IfxEdsadc_TriggerInput_p = 15   /**< \brief Trigger/gate, channel 0,input P */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   491  } IfxEdsadc_TriggerInput;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   492  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   493  /** \brief Controls the dithering function for each modulator separately
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   494   * Definition in Ifx_DSADC.MODCFG.B.DITHEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   496  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   497  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   498      IfxEdsadc_dithering_disabled = 0,  /**< \brief dithering function disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   499      IfxEdsadc_dithering_enabled  = 1   /**< \brief dithering function enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   500  } IfxEdsadc_dithering;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   501  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   502  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   504  /** \brief Allows copying of bitfield AMX into bitfield TIMESTAMP
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   505   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   506  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   507  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   508      IfxEdsadc_AnalogMux_doNotCopyAmx = 0,  /**< \brief Do not copy, timestamp uses all 16 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   509      IfxEdsadc_AnalogMux_copyAmx      = 1   /**< \brief Copy AMX to bits TIMESTAMP[15:14], timestamp uses lower 14 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   510  } IfxEdsadc_AnalogMux;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   511  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   512  /** \brief Timestamp Counter Run Control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   513   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   514  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   515  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   516      IfxEdsadc_TimeStampCounterControl_off = 0,  /**< \brief Timestamp counter is off */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   517      IfxEdsadc_TimeStampCounterControl_on  = 1   /**< \brief Timestamp counter is counting at the rate selected by bitfield TSCLK */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   518  } IfxEdsadc_TimeStampCounterControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   519  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   520  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   521  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   523  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   524  /** \brief Modulator Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   526  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   527  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   528      float32                        modulatorClockPeriod;         /**< \brief Modulator clock period */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   529      IfxEdsadc_InputGain            inputGain;                    /**< \brief Modulator gain select of analog input path */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   530      IfxEdsadc_AnalogClockSyncDelay analogClockSyncDelay;         /**< \brief Define the delay in clock cycle after sync signal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   531      IfxEdsadc_InputConfig          positiveInput;                /**< \brief Modulator configuration of positive input line */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   532      IfxEdsadc_InputConfig          negativeInput;                /**< \brief Modulator configuration of negative input line */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   533      IfxEdsadc_InputPin             inputPin;                     /**< \brief Modulator input pin selection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   534      IfxEdsadc_dithering            ditheringEnabled;             /**< \brief Control the Dithering Function for each modulator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   535      boolean                        integratorResetEnabled;       /**< \brief Control the modulator overload handling */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   536      boolean                        inputMuxActionControl;        /**< \brief Defines the mechanism by which the input multiplexer is controlled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   537      IfxEdsadc_InputMuxControlMode  triggerEvent;                 /**< \brief Defines the condition for a trigger event to control the input multiplexer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   538  } IfxEdsadc_ModulatorConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   539  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   540  /** \addtogroup IfxLld_Edsadc_Std_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   541   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   542  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   543  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   544  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   545  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   547  /** \brief Returns the module's suspend state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   548   * TRUE :if module is suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   549   * FALSE:if module is not yet suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   550   * \param edsadc Pointer to EDSADC module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   551   * \return Suspend status (TRUE / FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   552   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   553  IFX_INLINE boolean IfxEdsadc_isModuleSuspended(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   555  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   556   * \param edsadc pointer to EDSADC registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   557   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   558   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   560  IFX_INLINE void IfxEdsadc_setSleepMode(Ifx_EDSADC *edsadc, IfxEdsadc_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   561  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   562  /** \brief Configure the Module to Hard/Soft suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   563   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   564   * \param edsadc Pointer to EDSADC module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   565   * \param mode Module suspend mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   566   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   567   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   568  IFX_INLINE void IfxEdsadc_setSuspendMode(Ifx_EDSADC *edsadc, IfxEdsadc_SuspendMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   569  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   570  /** \brief Enables the conversion of multiple channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   571   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   572   * \param modulatorMask the modulator which should be running (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   573   * \param channelMask the channels which should be scanned (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   574   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   575   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   576   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   578   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   579  IFX_INLINE void IfxEdsadc_startScan(Ifx_EDSADC *edsadc, uint32 modulatorMask, uint32 channelMask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   580  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   581  /** \brief Disables the conversion of multiple channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   582   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   583   * \param modulatorMask the modulator which should be disabled (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   584   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   585   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   586   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   587   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   589  IFX_INLINE void IfxEdsadc_stopScan(Ifx_EDSADC *edsadc, uint32 modulatorMask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   592  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   593  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   594  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   595  /** \brief Disables the module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   596   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   598   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   599  IFX_EXTERN void IfxEdsadc_disableModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   600  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   601  /** \brief Enables the module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   602   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   603   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   604   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   605  IFX_EXTERN void IfxEdsadc_enableModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   606  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   607  /** \brief resets EDSADC kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   608   * \param edsadc pointer to EDSADC registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   609   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   611  IFX_EXTERN void IfxEdsadc_resetModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   613  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   615  /** \addtogroup IfxLld_Edsadc_Std_Support
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   616   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   617  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   618  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   619  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   620  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   622  /** \brief Get the main comb decimation factor
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   623   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   624   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   625   * \return the main comb decimation factor
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   626   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   627  IFX_INLINE uint16 IfxEdsadc_getMainCombDecimation(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   629  /** \brief Get result from the main chain
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   630   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   631   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   632   * \return result from the main chain
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   633   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   634   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   635   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   636   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   637  IFX_INLINE sint16 IfxEdsadc_getMainResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   639  /** \brief Get the subsequent result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   640   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   641  IFX_INLINE sint32 IfxEdsadc_getSubsequentResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   642  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   643  /** \brief Return TRUE if EDSADC module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   644   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   645   * \return TRUE if EDSADC module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   646   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   647  IFX_INLINE boolean IfxEdsadc_isModuleEnabled(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   648  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   649  /** \brief Set the carrier waveform mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   650   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   651   * \param waveformMode the waveform mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   652   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   653   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   654  IFX_INLINE void IfxEdsadc_setCarrierMode(Ifx_EDSADC *edsadc, IfxEdsadc_CarrierWaveformMode waveformMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   656  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   657  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   658  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   659  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   660  /** \brief Get the sample frequency of the integrator output in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   661   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   662   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   663   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   664   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   665  IFX_EXTERN float32 IfxEdsadc_getIntegratorOutFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   667  /** \brief Get the sample frequency of the main COMB filter output in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   668   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   669   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   670   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   671   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   672  IFX_EXTERN float32 IfxEdsadc_getMainCombOutFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   674  /** \brief Estimate the group delay of main-chain filters in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   675   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   676   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   677   * \return delay in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   678   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   679  IFX_EXTERN float32 IfxEdsadc_getMainGroupDelay(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   681  /** \brief Get the modulator clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   682   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   683   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   684   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   685   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   686  IFX_EXTERN float32 IfxEdsadc_getModulatorClockFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   687  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   688  /** \brief Get the input frequency of EDSADC in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   689   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   690   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   691   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   692  IFX_EXTERN float32 IfxEdsadc_getModulatorInputClockFreq(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   693  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   694  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   695  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   696  /** \addtogroup IfxLld_Edsadc_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   697   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   698  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   699  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   700  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   701  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   702  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   703  /** \brief Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   704   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   705   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   706   * \return Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   708  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxEdsadc_getAuxSrc(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   710  /** \brief Get the interrupt source register for a Main event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   711   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   712   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   713   * \return Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   714   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   715  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxEdsadc_getMainSrc(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   716  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   717  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   718  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   719  /** \addtogroup IfxLld_Edsadc_Std_IO
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   720   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   721  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   722  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   723  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   724  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   725  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   726  /** \brief Initializes a CGPWM output
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   727   * \param cgPwm the CGPWM Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   728   * \param pinMode the pin output mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   729   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   730   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   731   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   732  IFX_INLINE void IfxEdsadc_initCgPwmPin(const IfxEdsadc_Cgpwm_Out *cgPwm, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   733  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   734  /** \brief Initializes a CIN input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   735   * \param cIn the CIN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   736   * \param cInMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   737   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   738   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   739   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   740  IFX_INLINE void IfxEdsadc_initCinPin(const IfxEdsadc_Cin_In *cIn, IfxPort_InputMode cInMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   741  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   742  /** \brief Initializes a COUT output
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   743   * \param cout the COUT Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   744   * \param pinMode the pin output mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   745   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   746   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   748  IFX_INLINE void IfxEdsadc_initCoutPin(const IfxEdsadc_Cout_Out *cout, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   750  /** \brief Initializes a DIN input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   751   * \param dIn the DIN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   752   * \param dInMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   753   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   754   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   755   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   756  IFX_INLINE void IfxEdsadc_initDinPin(const IfxEdsadc_Din_In *dIn, IfxPort_InputMode dInMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   757  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   758  /** \brief Initializes a DS input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   759   * \param dsn the DSN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   760   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   761   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   762   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   763   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   764  IFX_INLINE void IfxEdsadc_initDsnPin(const IfxEdsadc_Dsn_In *dsn, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   765  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   766  /** \brief Initializes a DS input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   767   * \param dsp the DSP Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   768   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   769   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   770   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   771   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   772  IFX_INLINE void IfxEdsadc_initDspPin(const IfxEdsadc_Dsp_In *dsp, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   774  /** \brief Initializes a ITR input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   775   * \param itr the ITR Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   776   * \param itrMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   777   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   778   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   779   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   780  IFX_INLINE void IfxEdsadc_initItrPin(const IfxEdsadc_Itr_In *itr, IfxPort_InputMode itrMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   781  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   782  /** \brief Initializes a SG input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   783   * \param sg the SG Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   784   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   785   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   786   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   787   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   788  IFX_INLINE void IfxEdsadc_initSgPin(const IfxEdsadc_Sg_In *sg, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   789  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   790  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   791  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   792  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   793  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   794  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   795  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   796  /** \brief Returns the positive input line configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   797   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   798   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   799   * \return Positive Input Line Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   800   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   801  IFX_INLINE uint8 IfxEdsadc_getPositiveInputLineConfiguration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   802  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   803  /** \brief Returns the negative input line configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   804   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   805   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   806   * \return Negative Input Line Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   807   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   808  IFX_INLINE uint8 IfxEdsadc_getNegativeInputLineConfiguration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   809  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   810  /** \brief Sets the Offset compensation Value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   811   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   812   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   813   * \param value Value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   814   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   815   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   816  IFX_INLINE void IfxEdsadc_setOffsetCompensationValue(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   818  /** \brief Returns the address of the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   819   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   820   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   821   * \return Address of the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   822   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   823  IFX_INLINE uint32 *IfxEdsadc_getResultRegisterAddress(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   824  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   825  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   826  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   827  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   828  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   829  /** \brief set common mode voltage Parameters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   830   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   831   * \param channel specifies channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   832   * \param voltage select Fractional reference Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   833   * \param refMode Fractional Reference Voltage Enable/ Disable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   834   * \param hsvMode Enable / Disable Half Supply Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   835   * \param cmhvMode Enable / Disable Common Mode Hold Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   836   * \param positiveInput Defines the connection of the respective positive input y to the common mode hold voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   837   * \param negativeInput Defines the connection of the respective negative input y to the common mode hold voltage.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   838   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   839   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   840  IFX_EXTERN void IfxEdsadc_setCommonModeVoltage(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_FractionalRefVoltageSelection voltage, IfxEdsadc_FractionalRefVoltage refMode, IfxEdsadc_HalfSupplyVoltage hsvMode, IfxEdsadc_CommonModeHoldVoltage cmhvMode, uint8 positiveInput, uint8 negativeInput);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   842  /** \brief configure gain correction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   843   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   844   * \param channel Specifies channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   845   * \param gainFactor Multiplication Factor for gain correction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   846   * \param cicShift Position of CIC filter output shifter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   847   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   848   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   849  IFX_EXTERN void IfxEdsadc_setGainCorrectionFactor(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   851  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   852   * \param edsadc Pointer to module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   853   * \param channel specifies channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   854   * \param timeStampCounterClock Time Stamp Counter Clock selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   855   * \param runControl TimeStamp Counter Run Control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   856   * \param analogMuxCopy Analog MUX Setting Copy Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   857   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   858   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   859  IFX_EXTERN void IfxEdsadc_setTimeStampCounter(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_TimeStampCounterClockSelection timeStampCounterClock, IfxEdsadc_TimeStampCounterControl runControl, IfxEdsadc_AnalogMux analogMuxCopy);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   861  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   862   * \param edsadc Pointer to EDSADC SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   863   * \param channel chanel no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   864   * \param gainFactor Multiplication Factor for Gain Correction During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   865   * \param cicShift Position of the CIC Filter Output Shifter During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   866   * \param cicDecimationRate Decimation Rate of the CIC Filter During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   867   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   868   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   869  IFX_EXTERN void IfxEdsadc_setGainControl(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift, uint8 cicDecimationRate);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   870  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   871  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   872   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   873   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   874   * \param calFactor Multiplication Factor for Gain Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   875   * \param calTarget Target Value for Calibrated Fullscale
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   876   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   877   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   878  IFX_EXTERN void IfxEdsadc_setGainCalibration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 calFactor, uint16 calTarget);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   879  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   880  /** \brief Set the Modulator configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   881   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   882   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   883   * \param config Modulator Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   884   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   885   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   886  IFX_EXTERN void IfxEdsadc_configureModulator(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_ModulatorConfig *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   887  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   888  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   889  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   890  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   891  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   892  IFX_INLINE uint16 IfxEdsadc_getMainCombDecimation(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   893  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   894      return (uint16)(1U + edsadc->CH[channel].FCFGC.B.CFMDF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   895  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   896  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   897  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   898  IFX_INLINE sint16 IfxEdsadc_getMainResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   899  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   900      return edsadc->CH[channel].RESM.B.RESULTLO;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   901  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   902  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   903  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   904  IFX_INLINE sint32 IfxEdsadc_getSubsequentResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   905  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   906      return (sint32)(edsadc->CH[channel].RESM.U);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   907  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   908  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   909  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   910  IFX_INLINE void IfxEdsadc_initCgPwmPin(const IfxEdsadc_Cgpwm_Out *cgPwm, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   911  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   912      if (cgPwm->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   913      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   914          IfxPort_setPinModeOutput(cgPwm->pin.port, cgPwm->pin.pinIndex, pinMode, cgPwm->select);
	ld.bu	d15,[a15]12
.L497:
	ld.bu	d4,[a15]8
.L498:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   672  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   674  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   675  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   676  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   677      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
	or	d5,d15
	call	IfxPort_setPinMode
.L206:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   915          IfxPort_setPinPadDriver(cgPwm->pin.port, cgPwm->pin.pinIndex, padDriver);
	ld.a	a4,[a15]4
.L499:
	ld.bu	d4,[a15]8
.L500:
	mov	d5,d8
	j	IfxPort_setPinPadDriver

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   912      if (cgPwm->pin.port != NULL_PTR)      (inlined)
.L11:
.L10:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   134      }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   135  }
	ret
.L162:
	
__IfxEdsadc_Edsadc_initCarrierGen_function_end:
	.size	IfxEdsadc_Edsadc_initCarrierGen,__IfxEdsadc_Edsadc_initCarrierGen_function_end-IfxEdsadc_Edsadc_initCarrierGen
.L76:
	; End of function
	
	.sdecl	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_initChannel',code,cluster('IfxEdsadc_Edsadc_initChannel')
	.sect	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_initChannel'
	.align	2
	
	.global	IfxEdsadc_Edsadc_initChannel

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   136  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   137  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   138  void IfxEdsadc_Edsadc_initChannel(IfxEdsadc_Edsadc_Channel *channel, const IfxEdsadc_Edsadc_ChannelConfig *config)
; Function IfxEdsadc_Edsadc_initChannel
.L39:
IfxEdsadc_Edsadc_initChannel:	.type	func
	mov.aa	a12,a5
.L425:
	mov.aa	a15,a4
.L427:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   139  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   140      Ifx_EDSADC *edsadc = config->module;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   141  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   142      channel->channelId = config->channelId;
	ld.bu	d15,[a12]4
.L628:
	ld.a	a13,[a12]
.L445:
	st.b	[a15]8,d15
.L629:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   143      channel->module    = edsadc;
	st.a	[a15],a13
.L630:
	sub.a	a10,#16
.L422:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   144      channel->channel   = (Ifx_EDSADC_CH *)&edsadc->CH[config->channelId];
	ld.bu	d15,[a12]4
.L631:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   145  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   146      IfxEdsadc_Edsadc_initModulator(channel, &config->modulator);
	lea	a5,[a12]24
.L424:
	sha	d15,d15,#8
.L632:
	addsc.a	a2,a13,d15,#0
	lea	a2,[a2]256
.L633:
	st.a	[a15]4,a2
.L634:
	call	IfxEdsadc_Edsadc_initModulator
.L423:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   147      IfxEdsadc_Edsadc_initDemodulator(channel, &config->demodulator);
	lea	a5,[a12]40
	mov.aa	a4,a15
.L429:
	call	IfxEdsadc_Edsadc_initDemodulator
.L430:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   148      IfxEdsadc_Edsadc_initCombFilter(channel, &config->combFilter);
	lea	a5,[a12]68
	mov.aa	a4,a15
.L431:
	call	IfxEdsadc_Edsadc_initCombFilter
.L432:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   149      IfxEdsadc_Edsadc_initFirFilter(channel, &config->firFilter);
	lea	a5,[a12]8
	mov.aa	a4,a15
.L433:
	call	IfxEdsadc_Edsadc_initFirFilter
.L434:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   150      IfxEdsadc_Edsadc_initIntegrator(channel, &config->integrator);
	lea	a5,[a12]52
	mov.aa	a4,a15
.L435:
	call	IfxEdsadc_Edsadc_initIntegrator
.L436:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   151      IfxEdsadc_Edsadc_initRectifier(channel, &config->rectifier);
	lea	a5,[a12]64
	mov.aa	a4,a15
.L437:
	call	IfxEdsadc_Edsadc_initRectifier
.L273:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   152      IfxEdsadc_Edsadc_setGainCorrectionFactor(edsadc, channel->channelId, config->gainFactor, config->cicShift);
	ld.bu	d4,[a15]8
.L635:
	ld.hu	d5,[a12]82
.L636:
	ld.bu	d6,[a12]84
	mov.aa	a4,a13
.L438:
	call	IfxEdsadc_setGainCorrectionFactor
.L274:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   153  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   154      IfxEdsadc_Edsadc_initTimeStampCounter(edsadc, channel->channelId, &config->timeStamp);
	ld.bu	d4,[a15]8
.L637:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	     2   * \file IfxEdsadc_Edsadc.h
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	     3   * \brief EDSADC EDSADC details
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	     4   * \ingroup IfxLld_Edsadc
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	     5   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	     8   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	     9   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    11   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    16   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    18   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    25   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    32   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    40   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    41   * \defgroup IfxLld_Edsadc_Edsadc_Usage How to use the EDSADC Interface driver?
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    42   * \ingroup IfxLld_Edsadc
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    43   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    44   * The EDSADC interface driver provides a default EDSADC configuration for converting analog data streams inputs from external modulators via digital input channels, into digital values by using the on-chip demodulator channels.
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    45   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    46   * In the following sections it will be described, how to integrate the driver into the application framework.
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    47   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    48   * \section IfxLld_Edsadc_Edsadc_Preparation Preparation
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    49   * \subsection IfxLld_Edsadc_Edsadc_Include Include Files
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    50   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    51   * Include following header file into your C code:
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    52   * \code
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    53   *     #include <Edsadc/Edsadc/IfxEdsadc_Edsadc.h>
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    54   *  \endcode
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    55   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    56   * \subsection IfxLld_Edsadc_Edsadc_Variables Variables
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    57   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    58   * Declare the EDSADC channel handle and available channels as global variables in your C code:
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    59   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    60   * \code
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    61   *     static IfxEdsadc_Edsadc edsadc;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    62   *     IfxEdsadc_Edsadc_Channel edsadcChannel[IFXEDSADC_NUM_CHANNELS];
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    63   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    64   *     uint8 edsadcChannelAvailable[IFXEDSADC_NUM_CHANNELS] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    65   * \endcode
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    66   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    67   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    68   * \subsection IfxLld_Edsadc_Edsadc_Init Module Initialisation
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    69   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    70   * The module initialisation can be done in the same function. Here an example:
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    71   * \code
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    72   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    73   *     // create module config
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    74   *     IfxEdsadc_Edsadc_Config edsadcConfig;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    75   *     IfxEdsadc_Edsadc_initModuleConfig(&edsadcConfig, &MODULE_EDSADC);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    76   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    77   *     // initialize module
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    78   *    // IfxEdsadc_Edsadc edsadc; //declared globally
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    79   *     IfxEdsadc_Edsadc_initModule(&edsadc, &edsadcConfig);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    80   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    81   *     // create channel config
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    82   *     IfxEdsadc_Edsadc_ChannelConfig edsadcChannelConfig;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    83   *     IfxEdsadc_Edsadc_initChannelConfig(&edsadcChannelConfig, &edsadc);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    84   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    85   *     // modify default configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    86   *     edsadcChannelConfig.modulator.positiveInput      = IfxEdsadc_InputConfig_inputPin;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    87   *     edsadcChannelConfig.modulator.negativeInput      = IfxEdsadc_InputConfig_inputPin;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    88   *     edsadcChannelConfig.modulator.inputGain          = IfxEdsadc_InputGain_factor1;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    89   *     edsadcChannelConfig.modulator.inputPin           = IfxEdsadc_InputPin_a;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    90   *     edsadcChannelConfig.modulator.modulatorClockFreq = 10.0e6;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    91   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    92   *     edsadcChannelConfig.combFilter.decimationFactor  = 32;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    93   *     edsadcChannelConfig.combFilter.startValue        = 32;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    94   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    95   *     edsadcChannelConfig.firFilter.fir0Enabled        = TRUE;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    96   *     edsadcChannelConfig.firFilter.fir1Enabled        = TRUE;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    97   *     edsadcChannelConfig.firFilter.offsetCompensation = IfxEdsadc_OffsetCompensationFilter_disabled;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    98   *     edsadcChannelConfig.firFilter.fir1DecimateRate   = TRUE;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    99   *     edsadcChannelConfig.firFilter.prefilterEnabled   = TRUE;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   100   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   101   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   102   *     // initialize channels
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   103   *     for(int chn=0; chn<IFXEDSADC_NUM_CHANNELS; ++chn) {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   104   *         if( edsadcChannelAvailable[chn] ) {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   105   *             edsadcChannelConfig.channelId = (IfxEdsadc_ChannelId)chn;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   106   *         //  Note:CICSHIFT Value has to update according to application need
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   107   *            edsadcChannelConfig.cicShift = 15;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   108   *             IfxEdsadc_Edsadc_initChannel(&edsadcChannel[chn], &edsadcChannelConfig);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   109   *         }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   110   *     }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   111   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   112   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   113   * \endcode
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   114   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   115   * The EDSADC is ready for use now!
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   116   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   117   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   118   * \section IfxLld_Edsadc_Edsadc_Conversions Conversions
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   119   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   120   * The EDSADC driver provides simple to use Conversion function,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   121   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   122   * \code
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   123   *     // start conversions
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   124   *     IfxEdsadc_Edsadc_startScan(&edsadc, 0x3f, 0x3f);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   125   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   126   *     // results are now available in IFXEDSADC(ds).CH[x].RESM.B.RESULT (x=0..5)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   127   * \endcode
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   128   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   129   * The converted data can be collected using the following function
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   130   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   131   * \code
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   132   *     // declared globally
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   133   *     // sint16 result[];
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   134   *    for(int chn=0; chn<IFXEDSADC_NUM_CHANNELS; ++chn) {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   135   *         if( edsadcChannelAvailable[chn] ) {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   136   *     result = IfxEdsadc_Edsadc_getMainResult(&edsadcChannel[chn]);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   137   * }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   138   * }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   139   * \endcode
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   140   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   141   * \defgroup IfxLld_Edsadc_Edsadc EDSADC
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   142   * \ingroup IfxLld_Edsadc
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   143   * \defgroup IfxLld_Edsadc_Edsadc_DataStructures Data Structures
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   144   * \ingroup IfxLld_Edsadc_Edsadc
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   145   * \defgroup IfxLld_Edsadc_Edsadc_Module Module Functions
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   146   * \ingroup IfxLld_Edsadc_Edsadc
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   147   * \defgroup IfxLld_Edsadc_Edsadc_Channel Channel Functions
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   148   * \ingroup IfxLld_Edsadc_Edsadc
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   149   * \defgroup IfxLld_Edsadc_Edsadc_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   150   * \ingroup IfxLld_Edsadc_Edsadc
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   151   * \defgroup IfxLld_Edsadc_Edsadc_Results Result Functions
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   152   * \ingroup IfxLld_Edsadc_Edsadc
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   153   * \defgroup IfxLld_Edsadc_Edsadc_Interrupt Interrupt Functions
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   154   * \ingroup IfxLld_Edsadc_Edsadc
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   155   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   156  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   157  #ifndef IFXEDSADC_EDSADC_H
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   158  #define IFXEDSADC_EDSADC_H 1
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   159  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   160  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   161  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   162  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   163  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   164  #include "Edsadc/Std/IfxEdsadc.h"
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   165  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   166  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   167  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   168  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   169  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   170  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   171  /** \addtogroup IfxLld_Edsadc_Edsadc_DataStructures
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   172   * \{ */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   173  /** \brief Channel Pins Configuration structure
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   174   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   175  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   176  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   177      IFX_CONST IfxEdsadc_Cin_In *cin;             /**< \brief the CIN Pin which should be configured */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   178      IfxPort_InputMode           cinMode;         /**< \brief the CIN pin input mode which should be configured */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   179      IFX_CONST IfxEdsadc_Din_In *din;             /**< \brief the DIN Pin which should be configured */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   180      IfxPort_InputMode           dinMode;         /**< \brief the DIN pin input mode which should be configured */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   181      IFX_CONST IfxEdsadc_Itr_In *itr;             /**< \brief the ITR Pin which should be configured */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   182      IfxPort_InputMode           itrMode;         /**< \brief the ITR pin input mode which should be configured */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   183      IFX_CONST IfxEdsadc_Dsn_In *dsn;             /**< \brief the DSN Pin which should be configured */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   184      IfxPort_InputMode           dsnMode;         /**< \brief the DSN pin output mode which should be configured */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   185      IFX_CONST IfxEdsadc_Dsp_In *dsp;             /**< \brief the DSP Pin which should be configured */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   186      IfxPort_InputMode           dspMode;         /**< \brief the DSP pin output mode which should be configured */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   187      IfxPort_PadDriver           pinDriver;       /**< \brief Pin Driver Configuration */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   188  } IfxEdsadc_Edsadc_ChannelPins;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   189  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   190  /** \brief Comb filter configuration structure
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   191   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   192  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   193  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   194      uint16 decimationFactor;       /**< \brief decimation rate of comb filter 4 .. 256 */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   195      uint16 startValue;             /**< \brief 4 .. decimationFactor */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   196  } IfxEdsadc_Edsadc_CombFilterConfig;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   197  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   198  /** \brief enable the voltage generators and select which input pins are connected to the common mode hold voltage
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   199   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   200  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   201  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   202      IfxEdsadc_FractionalRefVoltageSelection fractionalRefVoltage;        /**< \brief Fractional Reference Voltage selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   203      IfxEdsadc_FractionalRefVoltage          refVoltageEnable;            /**< \brief Fractional Reference Voltage enable/disable */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   204      IfxEdsadc_HalfSupplyVoltage             halfSupplyVoltge;            /**< \brief Half supply voltage Enable/Disable */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   205      IfxEdsadc_CommonModeHoldVoltage         commonModeHoldVoltage;       /**< \brief Common Mode hold Voltage Enable/ Disable */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   206      uint8                                   positiveInput;               /**< \brief Defines the connection of the respective positive input y to the common
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   207                                                                            * mode hold voltage. */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   208      uint8                                   negativeInput;               /**< \brief Defines the connection of the respective negative input y to the common mode hold voltage */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   209  } IfxEdsadc_Edsadc_CommonModeVoltageConfig;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   210  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   211  /** \brief Demodulator configuration structure
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   212   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   213  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   214  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   215      IfxEdsadc_TriggerInput      triggerInput;             /**< \brief Trigger selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   216      IfxEdsadc_InputDataSource   inputDataSource;          /**< \brief Demodulator input data source selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   217      IfxEdsadc_DataStream        dataStream;               /**< \brief Data stream select */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   218      IfxEdsadc_SampleClockSource sampleClockSource;        /**< \brief Demodulator sample clock source selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   219      IfxEdsadc_IntegratorTrigger integrationTrigger;       /**< \brief Integrator trigger mode selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   220      IfxEdsadc_TimestampTrigger  timestampTrigger;         /**< \brief Timestamp trigger mode selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   221      IfxEdsadc_DataRead          dataReadMode;             /**< \brief Selects the data that is returned when register RESMx is read (). */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   222      boolean                     timeStampMode;            /**< \brief FALSE = no timeStamp
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   223                                                             * True    = inserts timestamp upon trigger */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   224      IfxEdsadc_ResultDisplayMode resultDisplay;            /**< \brief Result Display Mode (Signed./Unsigned) */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   225  } IfxEdsadc_Edsadc_DemodulatorConfig;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   226  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   227  /** \brief FIR filters configuration structure
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   228   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   229  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   230  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   231      IfxEdsadc_MainServiceRequest       serviceRequest;                  /**< \brief Service Request generation for main service request */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   232      IfxEdsadc_AuxServiceRequest        auxServiceRequest;               /**< \brief Service Request Generation for Auxiliary Service Request */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   233      IfxEdsadc_ServiceRequestFifolevel  serviceRequestLevel;             /**< \brief Service Request FIFO Level */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   234      IfxEdsadc_EventSelect              eventSelect;                     /**< \brief Defines when a comparator event is generated. */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   235      IfxEdsadc_OffsetCompensationFilter offsetCompensation;              /**< \brief Offset Compensation Filter enable/disable selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   236      boolean                            fir0Enabled;                     /**< \brief FIR filter 0 enable/disable selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   237      boolean                            fir1Enabled;                     /**< \brief FIR filter 0 enable/disable selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   238      boolean                            rippleCompensationEnabled;       /**< \brief Ripple Compensation Enabled */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   239      boolean                            fir1DecimateRate;                /**< \brief FIR1 Filter Decimation Rate */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   240      boolean                            cicMode;                         /**< \brief CIC Filter mode */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   241      boolean                            prefilterEnabled;                /**< \brief Enable/Disable the PreFilter */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   242      boolean                            calibrationTrigger;              /**< \brief triggger the calibration */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   243      boolean                            calibrationControl;              /**< \brief Automatic Calibration Control */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   244      IfxEdsadc_OvershootCompensation    overshootCompensation;           /**< \brief Overshoot Compensation Enable/Disable */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   245  } IfxEdsadc_Edsadc_FirFilterConfig;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   246  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   247  /** \brief Integrator configuration structure
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   248   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   249  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   250  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   251      IfxEdsadc_IntegrationWindowSize   windowSize;              /**< \brief Integrator window size */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   252      uint16                            discardCount;            /**< \brief Number of discarded values to after active trigger: 1 .. 64 */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   253      uint16                            integrationCount;        /**< \brief Number of integrated values after discard step: 1 .. 64 */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   254      uint16                            integrationCycles;       /**< \brief Number of integration cycles: 1 .. 16. Used only when \ref IfxEdsadc_IntegrationWindowSize_internalControl */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   255      IfxEdsadc_IntegrationShiftControl shiftControl;            /**< \brief Integrator shift control */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   256      IfxEdsadc_RestartFilterChain      fcRestartControl;        /**< \brief Filter Chain Restart Control */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   257  } IfxEdsadc_Edsadc_IntegratorConfig;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   258  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   259  /** \brief Modulator configuration structure
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   260   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   261  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   262  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   263      float32                        modulatorClockFreq;           /**< \brief Modulator clock frequency */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   264      IfxEdsadc_InputGain            inputGain;                    /**< \brief Modulator gain select of analog input path */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   265      IfxEdsadc_AnalogClockSyncDelay analogClockSyncDelay;         /**< \brief Define the delay in clock cycle after sync signal */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   266      IfxEdsadc_InputConfig          positiveInput;                /**< \brief Modulator configuration of positive input line */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   267      IfxEdsadc_InputConfig          negativeInput;                /**< \brief Modulator configuration of negative input line */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   268      IfxEdsadc_InputPin             inputPin;                     /**< \brief Modulator input pin selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   269      IfxEdsadc_dithering            ditheringEnabled;             /**< \brief Control the Dithering Function for each modulator */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   270      boolean                        integratorResetEnabled;       /**< \brief control the modulator overload handling */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   271      boolean                        inputMuxActionControl;        /**< \brief Defines the mechanism by which the input multiplexer is controlled */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   272      IfxEdsadc_InputMuxControlMode  triggerEvent;                 /**< \brief Defines the condition for a trigger event to control the input multiplexer */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   273  } IfxEdsadc_Edsadc_ModulatorConfig;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   274  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   275  /** \brief Rectifier configuration structure
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   276   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   277  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   278  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   279      uint8                         signDelay;        /**< \brief Sign delay value */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   280      uint8                         signPeriod;       /**< \brief Sign period */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   281      IfxEdsadc_RectifierSignSource signSource;       /**< \brief Rectifier sign source */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   282      boolean                       enabled;          /**< \brief Rectification enable/disable selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   283  } IfxEdsadc_Edsadc_RectifierConfig;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   284  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   285  /** \brief TimeStamp Counter Configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   286   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   287  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   288  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   289      IfxEdsadc_TimeStampCounterClockSelection timeStampCounterClock;            /**< \brief Timestamp Counter Clock Selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   290      IfxEdsadc_TimeStampCounterControl        timeStampCounterRunControl;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   291      IfxEdsadc_AnalogMux                      analogMuxCopy;                    /**< \brief Allows copying of bitfield AMX into bitfield TIMESTAMP */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   292  } IfxEdsadc_Edsadc_TimeStampCounter;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   293  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   294  /** \} */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   295  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   296  /** \brief Contains configurations for Gain Calibaration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   297   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   298  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   299  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   300      uint16 gainFactor;              /**< \brief Multiplication Factor for Gain Correction During Calibration(in GAINCTR register) */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   301      uint8  cicShift;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   302      uint8  cicDecimationRate;       /**< \brief Decimation Rate of the CIC Filter During Calibration(GAINCTR register) */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   303      uint16 calFactor;               /**< \brief Multiplication Factor for Gain Calibration */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   304      uint16 calTarget;               /**< \brief Target Value for Calibrated Fullscale */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   305  } IfxEdsadc_Edsadc_GainCalibrationConfig;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   306  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   307  /** \addtogroup IfxLld_Edsadc_Edsadc_DataStructures
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   308   * \{ */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   309  /** \brief EDSADC handle data structure
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   310   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   311  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   312  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   313      Ifx_EDSADC *edsadc;       /**< \brief Specifies the pointer to the EDSADC module registers */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   314  } IfxEdsadc_Edsadc;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   315  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   316  /** \brief Carrier generation configuration structure
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   317   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   318  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   319  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   320      IfxEdsadc_CarrierWaveformMode  carrierWaveformMode;       /**< \brief Carrier generation mode */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   321      float32                        frequency;                 /**< \brief Expected excitation frequency in Hz. */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   322      IFX_CONST IfxEdsadc_Cgpwm_Out *pinPos;                    /**< \brief Positive-carrier pin configuration */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   323      IFX_CONST IfxEdsadc_Cgpwm_Out *pinNeg;                    /**< \brief Negative-carrier pin configuration */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   324      IfxPort_OutputMode             pinMode;                   /**< \brief Carrier pins output mode */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   325      IfxPort_PadDriver              pinDriver;                 /**< \brief Carrier pins pad driver */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   326      boolean                        inverted;                  /**< \brief Signal polarity (Normal / Inverted) selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   327      boolean                        bitReversed;               /**< \brief Bit-Reverse PWM Generation (Normal / Bit reverse mode) selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   328  } IfxEdsadc_Edsadc_CarrierGenConfig;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   329  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   330  /** \brief Channel handle structure
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   331   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   332  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   333  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   334      Ifx_EDSADC         *module;          /**< \brief Specifies the pointer to the EDSADC module registers */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   335      Ifx_EDSADC_CH      *channel;         /**< \brief Specifies the pointer to the EDSADC channel registers */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   336      IfxEdsadc_ChannelId channelId;       /**< \brief Channel Id */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   337  } IfxEdsadc_Edsadc_Channel;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   338  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   339  /** \brief Single channel configuration structure
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   340   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   341  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   342  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   343      Ifx_EDSADC                              *module;                      /**< \brief Specifies the pointer to the EDSADC module registers */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   344      IfxEdsadc_ChannelId                      channelId;                   /**< \brief Channel Id */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   345      IfxEdsadc_Edsadc_FirFilterConfig         firFilter;                   /**< \brief FIR filters configuration structure */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   346      IfxEdsadc_Edsadc_ModulatorConfig         modulator;                   /**< \brief Modulator configuration structure */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   347      IfxEdsadc_Edsadc_DemodulatorConfig       demodulator;                 /**< \brief Demodulator configuration structure */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   348      IfxEdsadc_Edsadc_IntegratorConfig        integrator;                  /**< \brief Integrator configuration structure */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   349      IfxEdsadc_Edsadc_RectifierConfig         rectifier;                   /**< \brief Rectifier configuration structure */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   350      IfxEdsadc_Edsadc_CombFilterConfig        combFilter;                  /**< \brief Comb filter configuration structure */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   351      IfxEdsadc_Edsadc_TimeStampCounter        timeStamp;                   /**< \brief Configure Time Stamp Counter */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   352      IfxEdsadc_Edsadc_CommonModeVoltageConfig commonMode;                  /**< \brief Common Mode Voltage Configuration */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   353      uint16                                   gainFactor;                  /**< \brief Multiplication Factor for Gain Correction */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   354      uint8                                    cicShift;                    /**< \brief Position of the CIC Filter Output Shifter */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   355      IFX_CONST IfxEdsadc_Edsadc_ChannelPins  *channelPins;                 /**< \brief Channel Pins Configuration structure */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   356      IfxEdsadc_Edsadc_GainCalibrationConfig   gainCalibrationConfig;       /**< \brief Configuration Settings for Gain Calibration */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   357  } IfxEdsadc_Edsadc_ChannelConfig;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   358  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   359  /** \brief Clock configuration data structure
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   360   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   361  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   362  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   363      Ifx_EDSADC                        *edsadc;                   /**< \brief Specifies the pointer to the EDSADC module registers */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   364      IfxEdsadc_DitheringIntensity       ditheringIntensity;       /**< \brief Trimming Value for the Dithering Function */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   365      IfxEdsadc_ModulatorClockGeneration modulatorClockMode;       /**< \brief Defines the way the modulator clock is generated. */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   366      IfxEdsadc_SupplyVoltageLevel       supplyVoltageLevel;       /**< \brief Adjusts the analog circuitry to the supply voltage used in the application
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   367                                                                    * system */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   368  } IfxEdsadc_Edsadc_Config;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   369  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   370  /** \} */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   371  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   372  /** \addtogroup IfxLld_Edsadc_Edsadc_Module
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   373   * \{ */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   374  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   375  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   376  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   377  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   378  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   379  /** \brief Initialise the EDSADC carrier generator
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   380   * \param edsadc pointer to the EDSADC handle (it will be initialized by this function)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   381   * \param config pointer to the EDSADC carrier configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   382   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   383   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   384  IFX_EXTERN void IfxEdsadc_Edsadc_initCarrierGen(IfxEdsadc_Edsadc *edsadc, IfxEdsadc_Edsadc_CarrierGenConfig *config);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   385  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   386  /** \brief Initialises the comb filter
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   387   * \param channel Pointer to the EDSADC channel handle
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   388   * \param config pointer to the EDSADC comb filter configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   389   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   390   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   391  IFX_EXTERN void IfxEdsadc_Edsadc_initCombFilter(IfxEdsadc_Edsadc_Channel *channel, const IfxEdsadc_Edsadc_CombFilterConfig *config);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   392  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   393  /** \brief Initialises the demodulator
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   394   * \param channel Pointer to the EDSADC channel handle
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   395   * \param config pointer to the EDSADC demodulator configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   396   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   397   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   398  IFX_EXTERN void IfxEdsadc_Edsadc_initDemodulator(IfxEdsadc_Edsadc_Channel *channel, const IfxEdsadc_Edsadc_DemodulatorConfig *config);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   399  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   400  /** \brief Initialises the fir filter
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   401   * \param channel Pointer to the EDSADC channel handle
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   402   * \param config pointer to the EDSADC fir filter configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   403   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   404   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   405  IFX_EXTERN void IfxEdsadc_Edsadc_initFirFilter(IfxEdsadc_Edsadc_Channel *channel, const IfxEdsadc_Edsadc_FirFilterConfig *config);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   406  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   407  /** \brief Initialises the integrator
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   408   * \param channel Pointer to the EDSADC channel handle
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   409   * \param config pointer to the EDSADC fir integrator configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   410   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   411   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   412  IFX_EXTERN void IfxEdsadc_Edsadc_initIntegrator(IfxEdsadc_Edsadc_Channel *channel, const IfxEdsadc_Edsadc_IntegratorConfig *config);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   413  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   414  /** \brief Initialises the modulator
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   415   * \param channel Pointer to the EDSADC channel handle
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   416   * \param config pointer to the EDSADC modulator configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   417   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   418   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   419  IFX_EXTERN void IfxEdsadc_Edsadc_initModulator(IfxEdsadc_Edsadc_Channel *channel, const IfxEdsadc_Edsadc_ModulatorConfig *config);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   420  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   421  /** \brief Initialise the EDSADC with the supplied configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   422   * \param edsadc pointer to the EDSADC handle (it will be initialized by this function)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   423   * \param config pointer to the EDSADC module configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   424   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   425   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   426   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   427   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   428   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   429  IFX_EXTERN void IfxEdsadc_Edsadc_initModule(IfxEdsadc_Edsadc *edsadc, IfxEdsadc_Edsadc_Config *config);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   430  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   431  /** \brief Initialise the config struct with default EDSADC configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   432   * \param config pointer to the EDSADC module configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   433   * \param edsadc base address of the EDSADC register space
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   434   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   435   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   436   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   437   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   438   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   439  IFX_EXTERN void IfxEdsadc_Edsadc_initModuleConfig(IfxEdsadc_Edsadc_Config *config, Ifx_EDSADC *edsadc);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   440  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   441  /** \brief Initialises the rectifier
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   442   * \param channel Pointer to the EDSADC channel handle
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   443   * \param config pointer to the EDSADC fir rectifier configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   444   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   445   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   446  IFX_EXTERN void IfxEdsadc_Edsadc_initRectifier(IfxEdsadc_Edsadc_Channel *channel, const IfxEdsadc_Edsadc_RectifierConfig *config);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   447  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   448  /** \} */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   449  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   450  /** \addtogroup IfxLld_Edsadc_Edsadc_Channel
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   451   * \{ */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   452  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   453  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   454  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   455  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   456  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   457  /** \brief Initialise a EDSADC channel with the supplied configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   458   * \param channel pointer to the EDSADC channel handle (it will be initialized by this function)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   459   * \param config pointer to the EDSADCChannel configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   460   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   461   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   462   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   463   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   464   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   465  IFX_EXTERN void IfxEdsadc_Edsadc_initChannel(IfxEdsadc_Edsadc_Channel *channel, const IfxEdsadc_Edsadc_ChannelConfig *config);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   466  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   467  /** \brief Initialise the config struct with default EDSADC channel configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   468   * \param config pointer to the EDSADC Channel configuration  (it will be initialized by this function)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   469   * \param edsadc pointer to the EDSADC handle
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   471   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   472   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   473   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   474   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   475  IFX_EXTERN void IfxEdsadc_Edsadc_initChannelConfig(IfxEdsadc_Edsadc_ChannelConfig *config, IfxEdsadc_Edsadc *edsadc);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   476  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   477  /** \} */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   478  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   479  /** \addtogroup IfxLld_Edsadc_Edsadc_Operative
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   480   * \{ */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   481  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   482  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   483  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   484  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   485  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   486  /** \brief Enables the conversion of multiple channels
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   487   * \param edsadc EDSADC handle
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   488   * \param modulatorMask the modulator which should be running (bitwise selection)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   489   * \param channelMask the channels which should be scanned (bitwise selection)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   490   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   491   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   492   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   493   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   494   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   495  IFX_INLINE void IfxEdsadc_Edsadc_startScan(IfxEdsadc_Edsadc *edsadc, uint32 modulatorMask, uint32 channelMask);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   496  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   497  /** \brief Disables the conversion of multiple channels
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   498   * \param edsadc Pointer to the EDSADC handle
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   499   * \param modulatorMask the modulator which should be running (bitwise selection)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   500   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   501   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   502   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   503   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   504   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   505  IFX_INLINE void IfxEdsadc_Edsadc_stopScan(IfxEdsadc_Edsadc *edsadc, uint32 modulatorMask);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   506  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   507  /** \} */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   508  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   509  /** \addtogroup IfxLld_Edsadc_Edsadc_Results
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   510   * \{ */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   511  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   512  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   513  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   514  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   515  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   516  /** \brief Get result from the main chain
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   517   * \param channel Pointer to the EDSADC channel handle
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   518   * \return result from the main chain
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   519   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   520   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   521   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   522   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   523  IFX_INLINE sint16 IfxEdsadc_Edsadc_getMainResult(IfxEdsadc_Edsadc_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   524  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   525  /** \brief give the subsequent result
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   526   * \param channel channel ID
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   527   * \return return the Subsequent Result
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   528   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   529  IFX_INLINE sint32 IfxEdsadc_Edsadc_getSubsequentResult(IfxEdsadc_Edsadc_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   530  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   531  /** \} */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   532  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   533  /** \addtogroup IfxLld_Edsadc_Edsadc_Interrupt
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   534   * \{ */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   535  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   536  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   537  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   538  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   539  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   540  /** \brief Get the interrupt source register for a Aux event
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   541   * \param channel Pointer to the EDSADC channel handle
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   542   * \return Address/pointer to the interrupt source register
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   543   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   544  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEdsadc_Edsadc_getAuxSrc(IfxEdsadc_Edsadc_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   545  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   546  /** \brief Get the interrupt source register for a Main event
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   547   * \param channel Pointer to the EDSADC channel handle
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   548   * \return Address/pointer to the interrupt source register
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   549   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   550  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEdsadc_Edsadc_getMainSrc(IfxEdsadc_Edsadc_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   551  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   552  /** \} */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   553  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   554  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   555  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   556  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   557  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   558  /** \brief set gain Correction Factor
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   559   * \param edsadc Pointer to edsadc Module space
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   560   * \param channel specifies channel number
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   561   * \param gainFactor Mulitiplication factor for gain correction
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   562   * \param cicShift Position of CIC filter output shifter
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   563   * Note:Value has to update according to application need
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   564   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   565   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   566  IFX_INLINE void IfxEdsadc_Edsadc_setGainCorrectionFactor(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   567  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   568  /** \brief Configure Time Stamp Counter
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   569   * \param edsadc pointer to Module Space
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   570   * \param channel specifies channel ID
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   571   * \param timeStamp specifies the timeStamp Configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   573   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   574  IFX_INLINE void IfxEdsadc_Edsadc_initTimeStampCounter(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, const IfxEdsadc_Edsadc_TimeStampCounter *timeStamp);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   575  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   576  /** \brief initialize common mode voltage configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   577   * \param edsadc pointer to Module space
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   578   * \param channel channel no
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   579   * \param commonMode pointer to common mode voltage config structure
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   580   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   581   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   582  IFX_INLINE void IfxEdsadc_Edsadc_initCommonModeVoltage(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, const IfxEdsadc_Edsadc_CommonModeVoltageConfig *commonMode);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   583  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   584  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   585  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   586  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   587  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   588  /**
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   589   * \param config Pointer to DSADC Carrier Configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   590   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   591   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   592  IFX_EXTERN void IfxEdsadc_Edsadc_initCarrierGenConfig(IfxEdsadc_Edsadc_CarrierGenConfig *config);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   593  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   594  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   595  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   596  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   597  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   598  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEdsadc_Edsadc_getAuxSrc(IfxEdsadc_Edsadc_Channel *channel)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   599  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   600      return IfxEdsadc_getAuxSrc(channel->module, channel->channelId);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   601  }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   602  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   603  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   604  IFX_INLINE sint16 IfxEdsadc_Edsadc_getMainResult(IfxEdsadc_Edsadc_Channel *channel)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   605  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   606      return IfxEdsadc_getMainResult(channel->module, channel->channelId);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   607  }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   608  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   609  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   610  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEdsadc_Edsadc_getMainSrc(IfxEdsadc_Edsadc_Channel *channel)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   611  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   612      return IfxEdsadc_getMainSrc(channel->module, channel->channelId);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   613  }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   614  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   615  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   616  IFX_INLINE sint32 IfxEdsadc_Edsadc_getSubsequentResult(IfxEdsadc_Edsadc_Channel *channel)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   617  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   618      return IfxEdsadc_getSubsequentResult(channel->module, channel->channelId);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   619  }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   620  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   621  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   622  IFX_INLINE void IfxEdsadc_Edsadc_startScan(IfxEdsadc_Edsadc *edsadc, uint32 modulatorMask, uint32 channelMask)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   623  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   624      IfxEdsadc_startScan(edsadc->edsadc, modulatorMask, channelMask);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   625  }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   626  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   627  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   628  IFX_INLINE void IfxEdsadc_Edsadc_stopScan(IfxEdsadc_Edsadc *edsadc, uint32 modulatorMask)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   629  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   630      IfxEdsadc_stopScan(edsadc->edsadc, modulatorMask);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   631  }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   632  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   633  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   634  IFX_INLINE void IfxEdsadc_Edsadc_setGainCorrectionFactor(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   635  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   636      IfxEdsadc_setGainCorrectionFactor(edsadc, channel, gainFactor, cicShift);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   637  }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   638  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   639  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   640  IFX_INLINE void IfxEdsadc_Edsadc_initTimeStampCounter(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, const IfxEdsadc_Edsadc_TimeStampCounter *timeStamp)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   641  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   642      IfxEdsadc_setTimeStampCounter(edsadc, channel, timeStamp->timeStampCounterClock, timeStamp->timeStampCounterRunControl, timeStamp->analogMuxCopy);
	ld.bu	d5,[a12]72
.L638:
	ld.bu	d6,[a12]73
.L639:
	ld.bu	d7,[a12]74
	mov.aa	a4,a13
.L439:
	call	IfxEdsadc_setTimeStampCounter
.L285:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   643  }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   644  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   645  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   646  IFX_INLINE void IfxEdsadc_Edsadc_initCommonModeVoltage(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, const IfxEdsadc_Edsadc_CommonModeVoltageConfig *commonMode)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   647  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   648      IfxEdsadc_setCommonModeVoltage(edsadc, channel, commonMode->fractionalRefVoltage, commonMode->refVoltageEnable, commonMode->halfSupplyVoltge, commonMode->commonModeHoldVoltage, commonMode->positiveInput, commonMode->negativeInput);
	ld.bu	d15,[a12]79
	st.b	[a10],d15
.L640:
	ld.bu	d15,[a12]80
	st.b	[a10]4,d15
.L641:
	ld.bu	d15,[a12]81
	st.b	[a10]8,d15
.L642:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   155      IfxEdsadc_Edsadc_initCommonModeVoltage(edsadc, channel->channelId, &config->commonMode);
	ld.bu	d4,[a15]8
.L643:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	     2   * \file IfxEdsadc_Edsadc.h
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	     3   * \brief EDSADC EDSADC details
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	     4   * \ingroup IfxLld_Edsadc
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	     5   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	     8   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	     9   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    11   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    16   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    18   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    25   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    32   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    40   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    41   * \defgroup IfxLld_Edsadc_Edsadc_Usage How to use the EDSADC Interface driver?
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    42   * \ingroup IfxLld_Edsadc
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    43   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    44   * The EDSADC interface driver provides a default EDSADC configuration for converting analog data streams inputs from external modulators via digital input channels, into digital values by using the on-chip demodulator channels.
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    45   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    46   * In the following sections it will be described, how to integrate the driver into the application framework.
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    47   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    48   * \section IfxLld_Edsadc_Edsadc_Preparation Preparation
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    49   * \subsection IfxLld_Edsadc_Edsadc_Include Include Files
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    50   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    51   * Include following header file into your C code:
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    52   * \code
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    53   *     #include <Edsadc/Edsadc/IfxEdsadc_Edsadc.h>
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    54   *  \endcode
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    55   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    56   * \subsection IfxLld_Edsadc_Edsadc_Variables Variables
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    57   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    58   * Declare the EDSADC channel handle and available channels as global variables in your C code:
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    59   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    60   * \code
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    61   *     static IfxEdsadc_Edsadc edsadc;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    62   *     IfxEdsadc_Edsadc_Channel edsadcChannel[IFXEDSADC_NUM_CHANNELS];
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    63   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    64   *     uint8 edsadcChannelAvailable[IFXEDSADC_NUM_CHANNELS] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    65   * \endcode
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    66   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    67   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    68   * \subsection IfxLld_Edsadc_Edsadc_Init Module Initialisation
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    69   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    70   * The module initialisation can be done in the same function. Here an example:
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    71   * \code
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    72   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    73   *     // create module config
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    74   *     IfxEdsadc_Edsadc_Config edsadcConfig;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    75   *     IfxEdsadc_Edsadc_initModuleConfig(&edsadcConfig, &MODULE_EDSADC);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    76   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    77   *     // initialize module
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    78   *    // IfxEdsadc_Edsadc edsadc; //declared globally
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    79   *     IfxEdsadc_Edsadc_initModule(&edsadc, &edsadcConfig);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    80   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    81   *     // create channel config
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    82   *     IfxEdsadc_Edsadc_ChannelConfig edsadcChannelConfig;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    83   *     IfxEdsadc_Edsadc_initChannelConfig(&edsadcChannelConfig, &edsadc);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    84   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    85   *     // modify default configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    86   *     edsadcChannelConfig.modulator.positiveInput      = IfxEdsadc_InputConfig_inputPin;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    87   *     edsadcChannelConfig.modulator.negativeInput      = IfxEdsadc_InputConfig_inputPin;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    88   *     edsadcChannelConfig.modulator.inputGain          = IfxEdsadc_InputGain_factor1;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    89   *     edsadcChannelConfig.modulator.inputPin           = IfxEdsadc_InputPin_a;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    90   *     edsadcChannelConfig.modulator.modulatorClockFreq = 10.0e6;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    91   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    92   *     edsadcChannelConfig.combFilter.decimationFactor  = 32;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    93   *     edsadcChannelConfig.combFilter.startValue        = 32;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    94   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    95   *     edsadcChannelConfig.firFilter.fir0Enabled        = TRUE;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    96   *     edsadcChannelConfig.firFilter.fir1Enabled        = TRUE;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    97   *     edsadcChannelConfig.firFilter.offsetCompensation = IfxEdsadc_OffsetCompensationFilter_disabled;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    98   *     edsadcChannelConfig.firFilter.fir1DecimateRate   = TRUE;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	    99   *     edsadcChannelConfig.firFilter.prefilterEnabled   = TRUE;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   100   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   101   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   102   *     // initialize channels
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   103   *     for(int chn=0; chn<IFXEDSADC_NUM_CHANNELS; ++chn) {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   104   *         if( edsadcChannelAvailable[chn] ) {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   105   *             edsadcChannelConfig.channelId = (IfxEdsadc_ChannelId)chn;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   106   *         //  Note:CICSHIFT Value has to update according to application need
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   107   *            edsadcChannelConfig.cicShift = 15;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   108   *             IfxEdsadc_Edsadc_initChannel(&edsadcChannel[chn], &edsadcChannelConfig);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   109   *         }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   110   *     }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   111   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   112   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   113   * \endcode
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   114   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   115   * The EDSADC is ready for use now!
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   116   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   117   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   118   * \section IfxLld_Edsadc_Edsadc_Conversions Conversions
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   119   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   120   * The EDSADC driver provides simple to use Conversion function,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   121   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   122   * \code
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   123   *     // start conversions
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   124   *     IfxEdsadc_Edsadc_startScan(&edsadc, 0x3f, 0x3f);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   125   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   126   *     // results are now available in IFXEDSADC(ds).CH[x].RESM.B.RESULT (x=0..5)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   127   * \endcode
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   128   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   129   * The converted data can be collected using the following function
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   130   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   131   * \code
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   132   *     // declared globally
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   133   *     // sint16 result[];
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   134   *    for(int chn=0; chn<IFXEDSADC_NUM_CHANNELS; ++chn) {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   135   *         if( edsadcChannelAvailable[chn] ) {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   136   *     result = IfxEdsadc_Edsadc_getMainResult(&edsadcChannel[chn]);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   137   * }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   138   * }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   139   * \endcode
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   140   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   141   * \defgroup IfxLld_Edsadc_Edsadc EDSADC
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   142   * \ingroup IfxLld_Edsadc
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   143   * \defgroup IfxLld_Edsadc_Edsadc_DataStructures Data Structures
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   144   * \ingroup IfxLld_Edsadc_Edsadc
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   145   * \defgroup IfxLld_Edsadc_Edsadc_Module Module Functions
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   146   * \ingroup IfxLld_Edsadc_Edsadc
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   147   * \defgroup IfxLld_Edsadc_Edsadc_Channel Channel Functions
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   148   * \ingroup IfxLld_Edsadc_Edsadc
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   149   * \defgroup IfxLld_Edsadc_Edsadc_Operative Operative Functions
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   150   * \ingroup IfxLld_Edsadc_Edsadc
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   151   * \defgroup IfxLld_Edsadc_Edsadc_Results Result Functions
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   152   * \ingroup IfxLld_Edsadc_Edsadc
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   153   * \defgroup IfxLld_Edsadc_Edsadc_Interrupt Interrupt Functions
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   154   * \ingroup IfxLld_Edsadc_Edsadc
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   155   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   156  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   157  #ifndef IFXEDSADC_EDSADC_H
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   158  #define IFXEDSADC_EDSADC_H 1
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   159  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   160  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   161  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   162  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   163  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   164  #include "Edsadc/Std/IfxEdsadc.h"
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   165  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   166  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   167  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   168  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   169  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   170  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   171  /** \addtogroup IfxLld_Edsadc_Edsadc_DataStructures
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   172   * \{ */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   173  /** \brief Channel Pins Configuration structure
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   174   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   175  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   176  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   177      IFX_CONST IfxEdsadc_Cin_In *cin;             /**< \brief the CIN Pin which should be configured */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   178      IfxPort_InputMode           cinMode;         /**< \brief the CIN pin input mode which should be configured */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   179      IFX_CONST IfxEdsadc_Din_In *din;             /**< \brief the DIN Pin which should be configured */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   180      IfxPort_InputMode           dinMode;         /**< \brief the DIN pin input mode which should be configured */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   181      IFX_CONST IfxEdsadc_Itr_In *itr;             /**< \brief the ITR Pin which should be configured */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   182      IfxPort_InputMode           itrMode;         /**< \brief the ITR pin input mode which should be configured */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   183      IFX_CONST IfxEdsadc_Dsn_In *dsn;             /**< \brief the DSN Pin which should be configured */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   184      IfxPort_InputMode           dsnMode;         /**< \brief the DSN pin output mode which should be configured */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   185      IFX_CONST IfxEdsadc_Dsp_In *dsp;             /**< \brief the DSP Pin which should be configured */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   186      IfxPort_InputMode           dspMode;         /**< \brief the DSP pin output mode which should be configured */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   187      IfxPort_PadDriver           pinDriver;       /**< \brief Pin Driver Configuration */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   188  } IfxEdsadc_Edsadc_ChannelPins;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   189  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   190  /** \brief Comb filter configuration structure
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   191   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   192  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   193  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   194      uint16 decimationFactor;       /**< \brief decimation rate of comb filter 4 .. 256 */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   195      uint16 startValue;             /**< \brief 4 .. decimationFactor */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   196  } IfxEdsadc_Edsadc_CombFilterConfig;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   197  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   198  /** \brief enable the voltage generators and select which input pins are connected to the common mode hold voltage
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   199   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   200  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   201  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   202      IfxEdsadc_FractionalRefVoltageSelection fractionalRefVoltage;        /**< \brief Fractional Reference Voltage selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   203      IfxEdsadc_FractionalRefVoltage          refVoltageEnable;            /**< \brief Fractional Reference Voltage enable/disable */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   204      IfxEdsadc_HalfSupplyVoltage             halfSupplyVoltge;            /**< \brief Half supply voltage Enable/Disable */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   205      IfxEdsadc_CommonModeHoldVoltage         commonModeHoldVoltage;       /**< \brief Common Mode hold Voltage Enable/ Disable */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   206      uint8                                   positiveInput;               /**< \brief Defines the connection of the respective positive input y to the common
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   207                                                                            * mode hold voltage. */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   208      uint8                                   negativeInput;               /**< \brief Defines the connection of the respective negative input y to the common mode hold voltage */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   209  } IfxEdsadc_Edsadc_CommonModeVoltageConfig;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   210  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   211  /** \brief Demodulator configuration structure
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   212   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   213  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   214  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   215      IfxEdsadc_TriggerInput      triggerInput;             /**< \brief Trigger selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   216      IfxEdsadc_InputDataSource   inputDataSource;          /**< \brief Demodulator input data source selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   217      IfxEdsadc_DataStream        dataStream;               /**< \brief Data stream select */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   218      IfxEdsadc_SampleClockSource sampleClockSource;        /**< \brief Demodulator sample clock source selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   219      IfxEdsadc_IntegratorTrigger integrationTrigger;       /**< \brief Integrator trigger mode selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   220      IfxEdsadc_TimestampTrigger  timestampTrigger;         /**< \brief Timestamp trigger mode selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   221      IfxEdsadc_DataRead          dataReadMode;             /**< \brief Selects the data that is returned when register RESMx is read (). */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   222      boolean                     timeStampMode;            /**< \brief FALSE = no timeStamp
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   223                                                             * True    = inserts timestamp upon trigger */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   224      IfxEdsadc_ResultDisplayMode resultDisplay;            /**< \brief Result Display Mode (Signed./Unsigned) */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   225  } IfxEdsadc_Edsadc_DemodulatorConfig;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   226  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   227  /** \brief FIR filters configuration structure
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   228   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   229  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   230  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   231      IfxEdsadc_MainServiceRequest       serviceRequest;                  /**< \brief Service Request generation for main service request */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   232      IfxEdsadc_AuxServiceRequest        auxServiceRequest;               /**< \brief Service Request Generation for Auxiliary Service Request */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   233      IfxEdsadc_ServiceRequestFifolevel  serviceRequestLevel;             /**< \brief Service Request FIFO Level */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   234      IfxEdsadc_EventSelect              eventSelect;                     /**< \brief Defines when a comparator event is generated. */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   235      IfxEdsadc_OffsetCompensationFilter offsetCompensation;              /**< \brief Offset Compensation Filter enable/disable selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   236      boolean                            fir0Enabled;                     /**< \brief FIR filter 0 enable/disable selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   237      boolean                            fir1Enabled;                     /**< \brief FIR filter 0 enable/disable selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   238      boolean                            rippleCompensationEnabled;       /**< \brief Ripple Compensation Enabled */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   239      boolean                            fir1DecimateRate;                /**< \brief FIR1 Filter Decimation Rate */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   240      boolean                            cicMode;                         /**< \brief CIC Filter mode */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   241      boolean                            prefilterEnabled;                /**< \brief Enable/Disable the PreFilter */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   242      boolean                            calibrationTrigger;              /**< \brief triggger the calibration */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   243      boolean                            calibrationControl;              /**< \brief Automatic Calibration Control */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   244      IfxEdsadc_OvershootCompensation    overshootCompensation;           /**< \brief Overshoot Compensation Enable/Disable */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   245  } IfxEdsadc_Edsadc_FirFilterConfig;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   246  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   247  /** \brief Integrator configuration structure
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   248   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   249  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   250  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   251      IfxEdsadc_IntegrationWindowSize   windowSize;              /**< \brief Integrator window size */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   252      uint16                            discardCount;            /**< \brief Number of discarded values to after active trigger: 1 .. 64 */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   253      uint16                            integrationCount;        /**< \brief Number of integrated values after discard step: 1 .. 64 */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   254      uint16                            integrationCycles;       /**< \brief Number of integration cycles: 1 .. 16. Used only when \ref IfxEdsadc_IntegrationWindowSize_internalControl */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   255      IfxEdsadc_IntegrationShiftControl shiftControl;            /**< \brief Integrator shift control */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   256      IfxEdsadc_RestartFilterChain      fcRestartControl;        /**< \brief Filter Chain Restart Control */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   257  } IfxEdsadc_Edsadc_IntegratorConfig;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   258  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   259  /** \brief Modulator configuration structure
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   260   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   261  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   262  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   263      float32                        modulatorClockFreq;           /**< \brief Modulator clock frequency */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   264      IfxEdsadc_InputGain            inputGain;                    /**< \brief Modulator gain select of analog input path */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   265      IfxEdsadc_AnalogClockSyncDelay analogClockSyncDelay;         /**< \brief Define the delay in clock cycle after sync signal */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   266      IfxEdsadc_InputConfig          positiveInput;                /**< \brief Modulator configuration of positive input line */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   267      IfxEdsadc_InputConfig          negativeInput;                /**< \brief Modulator configuration of negative input line */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   268      IfxEdsadc_InputPin             inputPin;                     /**< \brief Modulator input pin selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   269      IfxEdsadc_dithering            ditheringEnabled;             /**< \brief Control the Dithering Function for each modulator */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   270      boolean                        integratorResetEnabled;       /**< \brief control the modulator overload handling */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   271      boolean                        inputMuxActionControl;        /**< \brief Defines the mechanism by which the input multiplexer is controlled */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   272      IfxEdsadc_InputMuxControlMode  triggerEvent;                 /**< \brief Defines the condition for a trigger event to control the input multiplexer */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   273  } IfxEdsadc_Edsadc_ModulatorConfig;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   274  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   275  /** \brief Rectifier configuration structure
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   276   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   277  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   278  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   279      uint8                         signDelay;        /**< \brief Sign delay value */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   280      uint8                         signPeriod;       /**< \brief Sign period */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   281      IfxEdsadc_RectifierSignSource signSource;       /**< \brief Rectifier sign source */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   282      boolean                       enabled;          /**< \brief Rectification enable/disable selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   283  } IfxEdsadc_Edsadc_RectifierConfig;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   284  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   285  /** \brief TimeStamp Counter Configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   286   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   287  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   288  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   289      IfxEdsadc_TimeStampCounterClockSelection timeStampCounterClock;            /**< \brief Timestamp Counter Clock Selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   290      IfxEdsadc_TimeStampCounterControl        timeStampCounterRunControl;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   291      IfxEdsadc_AnalogMux                      analogMuxCopy;                    /**< \brief Allows copying of bitfield AMX into bitfield TIMESTAMP */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   292  } IfxEdsadc_Edsadc_TimeStampCounter;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   293  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   294  /** \} */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   295  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   296  /** \brief Contains configurations for Gain Calibaration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   297   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   298  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   299  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   300      uint16 gainFactor;              /**< \brief Multiplication Factor for Gain Correction During Calibration(in GAINCTR register) */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   301      uint8  cicShift;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   302      uint8  cicDecimationRate;       /**< \brief Decimation Rate of the CIC Filter During Calibration(GAINCTR register) */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   303      uint16 calFactor;               /**< \brief Multiplication Factor for Gain Calibration */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   304      uint16 calTarget;               /**< \brief Target Value for Calibrated Fullscale */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   305  } IfxEdsadc_Edsadc_GainCalibrationConfig;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   306  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   307  /** \addtogroup IfxLld_Edsadc_Edsadc_DataStructures
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   308   * \{ */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   309  /** \brief EDSADC handle data structure
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   310   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   311  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   312  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   313      Ifx_EDSADC *edsadc;       /**< \brief Specifies the pointer to the EDSADC module registers */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   314  } IfxEdsadc_Edsadc;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   315  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   316  /** \brief Carrier generation configuration structure
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   317   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   318  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   319  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   320      IfxEdsadc_CarrierWaveformMode  carrierWaveformMode;       /**< \brief Carrier generation mode */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   321      float32                        frequency;                 /**< \brief Expected excitation frequency in Hz. */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   322      IFX_CONST IfxEdsadc_Cgpwm_Out *pinPos;                    /**< \brief Positive-carrier pin configuration */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   323      IFX_CONST IfxEdsadc_Cgpwm_Out *pinNeg;                    /**< \brief Negative-carrier pin configuration */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   324      IfxPort_OutputMode             pinMode;                   /**< \brief Carrier pins output mode */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   325      IfxPort_PadDriver              pinDriver;                 /**< \brief Carrier pins pad driver */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   326      boolean                        inverted;                  /**< \brief Signal polarity (Normal / Inverted) selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   327      boolean                        bitReversed;               /**< \brief Bit-Reverse PWM Generation (Normal / Bit reverse mode) selection */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   328  } IfxEdsadc_Edsadc_CarrierGenConfig;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   329  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   330  /** \brief Channel handle structure
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   331   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   332  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   333  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   334      Ifx_EDSADC         *module;          /**< \brief Specifies the pointer to the EDSADC module registers */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   335      Ifx_EDSADC_CH      *channel;         /**< \brief Specifies the pointer to the EDSADC channel registers */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   336      IfxEdsadc_ChannelId channelId;       /**< \brief Channel Id */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   337  } IfxEdsadc_Edsadc_Channel;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   338  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   339  /** \brief Single channel configuration structure
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   340   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   341  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   342  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   343      Ifx_EDSADC                              *module;                      /**< \brief Specifies the pointer to the EDSADC module registers */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   344      IfxEdsadc_ChannelId                      channelId;                   /**< \brief Channel Id */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   345      IfxEdsadc_Edsadc_FirFilterConfig         firFilter;                   /**< \brief FIR filters configuration structure */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   346      IfxEdsadc_Edsadc_ModulatorConfig         modulator;                   /**< \brief Modulator configuration structure */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   347      IfxEdsadc_Edsadc_DemodulatorConfig       demodulator;                 /**< \brief Demodulator configuration structure */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   348      IfxEdsadc_Edsadc_IntegratorConfig        integrator;                  /**< \brief Integrator configuration structure */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   349      IfxEdsadc_Edsadc_RectifierConfig         rectifier;                   /**< \brief Rectifier configuration structure */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   350      IfxEdsadc_Edsadc_CombFilterConfig        combFilter;                  /**< \brief Comb filter configuration structure */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   351      IfxEdsadc_Edsadc_TimeStampCounter        timeStamp;                   /**< \brief Configure Time Stamp Counter */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   352      IfxEdsadc_Edsadc_CommonModeVoltageConfig commonMode;                  /**< \brief Common Mode Voltage Configuration */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   353      uint16                                   gainFactor;                  /**< \brief Multiplication Factor for Gain Correction */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   354      uint8                                    cicShift;                    /**< \brief Position of the CIC Filter Output Shifter */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   355      IFX_CONST IfxEdsadc_Edsadc_ChannelPins  *channelPins;                 /**< \brief Channel Pins Configuration structure */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   356      IfxEdsadc_Edsadc_GainCalibrationConfig   gainCalibrationConfig;       /**< \brief Configuration Settings for Gain Calibration */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   357  } IfxEdsadc_Edsadc_ChannelConfig;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   358  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   359  /** \brief Clock configuration data structure
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   360   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   361  typedef struct
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   362  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   363      Ifx_EDSADC                        *edsadc;                   /**< \brief Specifies the pointer to the EDSADC module registers */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   364      IfxEdsadc_DitheringIntensity       ditheringIntensity;       /**< \brief Trimming Value for the Dithering Function */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   365      IfxEdsadc_ModulatorClockGeneration modulatorClockMode;       /**< \brief Defines the way the modulator clock is generated. */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   366      IfxEdsadc_SupplyVoltageLevel       supplyVoltageLevel;       /**< \brief Adjusts the analog circuitry to the supply voltage used in the application
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   367                                                                    * system */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   368  } IfxEdsadc_Edsadc_Config;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   369  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   370  /** \} */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   371  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   372  /** \addtogroup IfxLld_Edsadc_Edsadc_Module
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   373   * \{ */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   374  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   375  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   376  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   377  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   378  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   379  /** \brief Initialise the EDSADC carrier generator
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   380   * \param edsadc pointer to the EDSADC handle (it will be initialized by this function)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   381   * \param config pointer to the EDSADC carrier configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   382   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   383   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   384  IFX_EXTERN void IfxEdsadc_Edsadc_initCarrierGen(IfxEdsadc_Edsadc *edsadc, IfxEdsadc_Edsadc_CarrierGenConfig *config);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   385  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   386  /** \brief Initialises the comb filter
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   387   * \param channel Pointer to the EDSADC channel handle
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   388   * \param config pointer to the EDSADC comb filter configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   389   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   390   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   391  IFX_EXTERN void IfxEdsadc_Edsadc_initCombFilter(IfxEdsadc_Edsadc_Channel *channel, const IfxEdsadc_Edsadc_CombFilterConfig *config);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   392  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   393  /** \brief Initialises the demodulator
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   394   * \param channel Pointer to the EDSADC channel handle
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   395   * \param config pointer to the EDSADC demodulator configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   396   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   397   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   398  IFX_EXTERN void IfxEdsadc_Edsadc_initDemodulator(IfxEdsadc_Edsadc_Channel *channel, const IfxEdsadc_Edsadc_DemodulatorConfig *config);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   399  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   400  /** \brief Initialises the fir filter
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   401   * \param channel Pointer to the EDSADC channel handle
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   402   * \param config pointer to the EDSADC fir filter configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   403   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   404   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   405  IFX_EXTERN void IfxEdsadc_Edsadc_initFirFilter(IfxEdsadc_Edsadc_Channel *channel, const IfxEdsadc_Edsadc_FirFilterConfig *config);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   406  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   407  /** \brief Initialises the integrator
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   408   * \param channel Pointer to the EDSADC channel handle
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   409   * \param config pointer to the EDSADC fir integrator configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   410   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   411   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   412  IFX_EXTERN void IfxEdsadc_Edsadc_initIntegrator(IfxEdsadc_Edsadc_Channel *channel, const IfxEdsadc_Edsadc_IntegratorConfig *config);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   413  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   414  /** \brief Initialises the modulator
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   415   * \param channel Pointer to the EDSADC channel handle
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   416   * \param config pointer to the EDSADC modulator configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   417   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   418   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   419  IFX_EXTERN void IfxEdsadc_Edsadc_initModulator(IfxEdsadc_Edsadc_Channel *channel, const IfxEdsadc_Edsadc_ModulatorConfig *config);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   420  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   421  /** \brief Initialise the EDSADC with the supplied configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   422   * \param edsadc pointer to the EDSADC handle (it will be initialized by this function)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   423   * \param config pointer to the EDSADC module configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   424   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   425   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   426   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   427   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   428   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   429  IFX_EXTERN void IfxEdsadc_Edsadc_initModule(IfxEdsadc_Edsadc *edsadc, IfxEdsadc_Edsadc_Config *config);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   430  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   431  /** \brief Initialise the config struct with default EDSADC configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   432   * \param config pointer to the EDSADC module configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   433   * \param edsadc base address of the EDSADC register space
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   434   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   435   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   436   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   437   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   438   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   439  IFX_EXTERN void IfxEdsadc_Edsadc_initModuleConfig(IfxEdsadc_Edsadc_Config *config, Ifx_EDSADC *edsadc);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   440  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   441  /** \brief Initialises the rectifier
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   442   * \param channel Pointer to the EDSADC channel handle
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   443   * \param config pointer to the EDSADC fir rectifier configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   444   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   445   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   446  IFX_EXTERN void IfxEdsadc_Edsadc_initRectifier(IfxEdsadc_Edsadc_Channel *channel, const IfxEdsadc_Edsadc_RectifierConfig *config);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   447  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   448  /** \} */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   449  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   450  /** \addtogroup IfxLld_Edsadc_Edsadc_Channel
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   451   * \{ */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   452  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   453  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   454  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   455  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   456  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   457  /** \brief Initialise a EDSADC channel with the supplied configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   458   * \param channel pointer to the EDSADC channel handle (it will be initialized by this function)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   459   * \param config pointer to the EDSADCChannel configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   460   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   461   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   462   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   463   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   464   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   465  IFX_EXTERN void IfxEdsadc_Edsadc_initChannel(IfxEdsadc_Edsadc_Channel *channel, const IfxEdsadc_Edsadc_ChannelConfig *config);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   466  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   467  /** \brief Initialise the config struct with default EDSADC channel configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   468   * \param config pointer to the EDSADC Channel configuration  (it will be initialized by this function)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   469   * \param edsadc pointer to the EDSADC handle
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   471   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   472   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   473   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   474   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   475  IFX_EXTERN void IfxEdsadc_Edsadc_initChannelConfig(IfxEdsadc_Edsadc_ChannelConfig *config, IfxEdsadc_Edsadc *edsadc);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   476  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   477  /** \} */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   478  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   479  /** \addtogroup IfxLld_Edsadc_Edsadc_Operative
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   480   * \{ */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   481  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   482  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   483  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   484  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   485  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   486  /** \brief Enables the conversion of multiple channels
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   487   * \param edsadc EDSADC handle
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   488   * \param modulatorMask the modulator which should be running (bitwise selection)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   489   * \param channelMask the channels which should be scanned (bitwise selection)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   490   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   491   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   492   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   493   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   494   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   495  IFX_INLINE void IfxEdsadc_Edsadc_startScan(IfxEdsadc_Edsadc *edsadc, uint32 modulatorMask, uint32 channelMask);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   496  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   497  /** \brief Disables the conversion of multiple channels
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   498   * \param edsadc Pointer to the EDSADC handle
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   499   * \param modulatorMask the modulator which should be running (bitwise selection)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   500   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   501   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   502   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   503   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   504   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   505  IFX_INLINE void IfxEdsadc_Edsadc_stopScan(IfxEdsadc_Edsadc *edsadc, uint32 modulatorMask);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   506  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   507  /** \} */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   508  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   509  /** \addtogroup IfxLld_Edsadc_Edsadc_Results
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   510   * \{ */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   511  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   512  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   513  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   514  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   515  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   516  /** \brief Get result from the main chain
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   517   * \param channel Pointer to the EDSADC channel handle
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   518   * \return result from the main chain
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   519   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   520   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   521   *
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   522   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   523  IFX_INLINE sint16 IfxEdsadc_Edsadc_getMainResult(IfxEdsadc_Edsadc_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   524  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   525  /** \brief give the subsequent result
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   526   * \param channel channel ID
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   527   * \return return the Subsequent Result
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   528   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   529  IFX_INLINE sint32 IfxEdsadc_Edsadc_getSubsequentResult(IfxEdsadc_Edsadc_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   530  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   531  /** \} */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   532  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   533  /** \addtogroup IfxLld_Edsadc_Edsadc_Interrupt
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   534   * \{ */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   535  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   536  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   537  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   538  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   539  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   540  /** \brief Get the interrupt source register for a Aux event
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   541   * \param channel Pointer to the EDSADC channel handle
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   542   * \return Address/pointer to the interrupt source register
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   543   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   544  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEdsadc_Edsadc_getAuxSrc(IfxEdsadc_Edsadc_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   545  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   546  /** \brief Get the interrupt source register for a Main event
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   547   * \param channel Pointer to the EDSADC channel handle
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   548   * \return Address/pointer to the interrupt source register
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   549   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   550  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEdsadc_Edsadc_getMainSrc(IfxEdsadc_Edsadc_Channel *channel);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   551  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   552  /** \} */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   553  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   554  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   555  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   556  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   557  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   558  /** \brief set gain Correction Factor
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   559   * \param edsadc Pointer to edsadc Module space
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   560   * \param channel specifies channel number
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   561   * \param gainFactor Mulitiplication factor for gain correction
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   562   * \param cicShift Position of CIC filter output shifter
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   563   * Note:Value has to update according to application need
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   564   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   565   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   566  IFX_INLINE void IfxEdsadc_Edsadc_setGainCorrectionFactor(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   567  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   568  /** \brief Configure Time Stamp Counter
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   569   * \param edsadc pointer to Module Space
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   570   * \param channel specifies channel ID
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   571   * \param timeStamp specifies the timeStamp Configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   573   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   574  IFX_INLINE void IfxEdsadc_Edsadc_initTimeStampCounter(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, const IfxEdsadc_Edsadc_TimeStampCounter *timeStamp);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   575  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   576  /** \brief initialize common mode voltage configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   577   * \param edsadc pointer to Module space
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   578   * \param channel channel no
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   579   * \param commonMode pointer to common mode voltage config structure
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   580   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   581   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   582  IFX_INLINE void IfxEdsadc_Edsadc_initCommonModeVoltage(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, const IfxEdsadc_Edsadc_CommonModeVoltageConfig *commonMode);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   583  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   584  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   585  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   586  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   587  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   588  /**
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   589   * \param config Pointer to DSADC Carrier Configuration
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   590   * \return None
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   591   */
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   592  IFX_EXTERN void IfxEdsadc_Edsadc_initCarrierGenConfig(IfxEdsadc_Edsadc_CarrierGenConfig *config);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   593  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   594  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   595  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   596  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   597  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   598  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEdsadc_Edsadc_getAuxSrc(IfxEdsadc_Edsadc_Channel *channel)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   599  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   600      return IfxEdsadc_getAuxSrc(channel->module, channel->channelId);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   601  }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   602  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   603  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   604  IFX_INLINE sint16 IfxEdsadc_Edsadc_getMainResult(IfxEdsadc_Edsadc_Channel *channel)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   605  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   606      return IfxEdsadc_getMainResult(channel->module, channel->channelId);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   607  }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   608  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   609  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   610  IFX_INLINE volatile Ifx_SRC_SRCR *IfxEdsadc_Edsadc_getMainSrc(IfxEdsadc_Edsadc_Channel *channel)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   611  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   612      return IfxEdsadc_getMainSrc(channel->module, channel->channelId);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   613  }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   614  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   615  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   616  IFX_INLINE sint32 IfxEdsadc_Edsadc_getSubsequentResult(IfxEdsadc_Edsadc_Channel *channel)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   617  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   618      return IfxEdsadc_getSubsequentResult(channel->module, channel->channelId);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   619  }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   620  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   621  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   622  IFX_INLINE void IfxEdsadc_Edsadc_startScan(IfxEdsadc_Edsadc *edsadc, uint32 modulatorMask, uint32 channelMask)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   623  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   624      IfxEdsadc_startScan(edsadc->edsadc, modulatorMask, channelMask);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   625  }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   626  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   627  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   628  IFX_INLINE void IfxEdsadc_Edsadc_stopScan(IfxEdsadc_Edsadc *edsadc, uint32 modulatorMask)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   629  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   630      IfxEdsadc_stopScan(edsadc->edsadc, modulatorMask);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   631  }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   632  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   633  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   634  IFX_INLINE void IfxEdsadc_Edsadc_setGainCorrectionFactor(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   635  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   636      IfxEdsadc_setGainCorrectionFactor(edsadc, channel, gainFactor, cicShift);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   637  }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   638  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   639  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   640  IFX_INLINE void IfxEdsadc_Edsadc_initTimeStampCounter(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, const IfxEdsadc_Edsadc_TimeStampCounter *timeStamp)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   641  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   642      IfxEdsadc_setTimeStampCounter(edsadc, channel, timeStamp->timeStampCounterClock, timeStamp->timeStampCounterRunControl, timeStamp->analogMuxCopy);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   643  }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   644  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   645  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   646  IFX_INLINE void IfxEdsadc_Edsadc_initCommonModeVoltage(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, const IfxEdsadc_Edsadc_CommonModeVoltageConfig *commonMode)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   647  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.h	   648      IfxEdsadc_setCommonModeVoltage(edsadc, channel, commonMode->fractionalRefVoltage, commonMode->refVoltageEnable, commonMode->halfSupplyVoltge, commonMode->commonModeHoldVoltage, commonMode->positiveInput, commonMode->negativeInput);
	ld.bu	d5,[a12]76
.L644:
	ld.bu	d6,[a12]77
.L645:
	ld.bu	d7,[a12]78
	mov.aa	a4,a13
.L440:
	call	IfxEdsadc_setCommonModeVoltage
.L294:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   156      IfxEdsadc_setGainControl(edsadc, channel->channelId, config->gainCalibrationConfig.gainFactor, config->gainCalibrationConfig.cicShift, config->gainCalibrationConfig.cicDecimationRate);
	ld.bu	d4,[a15]8
.L646:
	ld.hu	d5,[a12]92
.L647:
	ld.bu	d6,[a12]94
.L648:
	ld.bu	d7,[a12]95
	mov.aa	a4,a13
.L441:
	call	IfxEdsadc_setGainControl
.L442:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   157      IfxEdsadc_setGainCalibration(edsadc, channel->channelId, config->gainCalibrationConfig.calFactor, config->gainCalibrationConfig.calTarget);
	ld.bu	d4,[a15]8
.L649:
	ld.hu	d5,[a12]96
.L650:
	ld.hu	d6,[a12]98
	mov.aa	a4,a13
.L443:
	call	IfxEdsadc_setGainCalibration
.L302:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   158  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   159      const IfxEdsadc_Edsadc_ChannelPins *pins = config->channelPins;
	ld.a	a12,[a12]88
.L426:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   160  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   161      if (pins != NULL_PTR)
	jz.a	a12,.L12
.L306:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   162      {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   163          const IfxEdsadc_Dsn_In *dsn = pins->dsn;
	ld.a	a15,[a12]24
.L428:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   164  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   165          if (dsn != NULL_PTR)
	jz.a	a15,.L13
.L651:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   166          {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   167              IfxEdsadc_initDsnPin(dsn, pins->dsnMode, pins->pinDriver);
	ld.b	d15,[a12]28
.L652:
	fcall	.cocofun_7
.L310:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   952      if (dsn->pin.port != NULL_PTR)      (inlined)
	jz.a	a4,.L14
.L320:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     2   * \file IfxEdsadc.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     3   * \brief EDSADC  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     4   * \ingroup IfxLld_Edsadc
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    41   * \defgroup IfxLld_Edsadc_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    42   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    43   * \defgroup IfxLld_Edsadc_Std_Operative Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    44   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    45   * \defgroup IfxLld_Edsadc_Std_Support Support Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    46   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    47   * \defgroup IfxLld_Edsadc_Std_Interrupt Interrupt Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    48   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    49   * \defgroup IfxLld_Edsadc_Std_IO IO Pin Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    50   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    53  #ifndef IFXEDSADC_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    54  #define IFXEDSADC_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    60  #include "_Impl/IfxEdsadc_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    61  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    62  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    63  #include "_PinMap/IfxEdsadc_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    64  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    65  #include "IfxEdsadc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    66  #include "IfxEdsadc_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    68  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    69  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    70  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    71  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    72  /** \addtogroup IfxLld_Edsadc_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    73   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    74  /** \brief Analog Clock Synchronization Delay
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    75   * Definition in Ifx_DSADC.MODCFG.B.ACSD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    79      IfxEdsadc_AnalogClockSyncDelay_noDelay     = 0,    /**< \brief no delay */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    80      IfxEdsadc_AnalogClockSyncDelay_cycleDelay1 = 1,    /**< \brief Delay of 1 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    81      IfxEdsadc_AnalogClockSyncDelay_cycleDelay2,        /**< \brief Delay of 2 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    82      IfxEdsadc_AnalogClockSyncDelay_cycleDelay3,        /**< \brief Delay of 3 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    83      IfxEdsadc_AnalogClockSyncDelay_cycleDelay4,        /**< \brief Delay of 4 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    84      IfxEdsadc_AnalogClockSyncDelay_cycleDelay5,        /**< \brief Delay of 5 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    85      IfxEdsadc_AnalogClockSyncDelay_cycleDelay6,        /**< \brief Delay of 6 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    86      IfxEdsadc_AnalogClockSyncDelay_cycleDelay7         /**< \brief Delay of 7 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    87  } IfxEdsadc_AnalogClockSyncDelay;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    89  /** \brief Service request generation (auxiliary)\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    90   * Definition in Ifx_EDSADC.FCFGM.B.SRGA
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    91   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    92  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    93  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    94      IfxEdsadc_AuxServiceRequest_never          = 0,  /**< \brief Never, service requests disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    95      IfxEdsadc_AuxServiceRequest_compEvent      = 1,  /**< \brief As selected by bitfield ESEL */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    96      IfxEdsadc_AuxServiceRequest_timestampEvent = 2,  /**< \brief Timestamp Event */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    97      IfxEdsadc_AuxServiceRequest_altSource      = 3   /**< \brief Alternate source: Capturing of a sign delay value to register CGSYNCx (x = 0 - 5) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    98  } IfxEdsadc_AuxServiceRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   100  /** \brief Carrier generation mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   101   * Definition in Ifx_EDSADC.CGCFG.B.CGMOD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   103  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   104  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   105      IfxEdsadc_CarrierWaveformMode_stopped  = 0,  /**< \brief Carrier Generator stopped */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   106      IfxEdsadc_CarrierWaveformMode_square   = 1,  /**< \brief Carrier Generator generates square wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   107      IfxEdsadc_CarrierWaveformMode_triangle = 2,  /**< \brief Carrier Generator generates triangle wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   108      IfxEdsadc_CarrierWaveformMode_sine     = 3   /**< \brief Carrier Generator generates sine wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   109  } IfxEdsadc_CarrierWaveformMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   111  /** \brief Common Mode Hold Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   115      IfxEdsadc_CommonModeHoldVoltage_disable = 0,  /**< \brief VCMH is off */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   116      IfxEdsadc_CommonModeHoldVoltage_enable  = 1   /**< \brief VCMH is generated */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   117  } IfxEdsadc_CommonModeHoldVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   119  /** \brief Select the data to be returned when register RESM is read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   120   * Definition in Ifx_DSADC.DICFG.B.DRM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   121   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   122  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   123  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   124      IfxEdsadc_DataRead_signOnHighbit      = 0,  /**< \brief Single: Issue one 16-bit value per read access (sign on high bits) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   125      IfxEdsadc_DataRead_timestampOnHighbit = 1,  /**< \brief Single: Issue one 16-bit value per read access (timestamp on high bits) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   126      IfxEdsadc_DataRead_double             = 2   /**< \brief Double: Issue two 16-bit values per read access */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   127  } IfxEdsadc_DataRead;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   129  /** \brief Data stream select
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   130   * Definition in Ifx_DSADC.DICFG.B.DSS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   131   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   132  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   133  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   134      IfxEdsadc_DataStream_onChipModulator        = 0,  /**< \brief select data stream from on chip modulator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   135      IfxEdsadc_DataStream_doubleDataClockEdge    = 3,  /**< \brief External modulator, use rising and falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   136      IfxEdsadc_DataStream_directFallingClockEdge = 4,  /**< \brief External modulator, use each falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   137      IfxEdsadc_DataStream_directRisingClockEdge  = 5,  /**< \brief External modulator, use each rising clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   138      IfxEdsadc_DataStream_secondFallingClockEdge = 6,  /**< \brief External modulator, use every 2nd falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   139      IfxEdsadc_DataStream_secondRisingClockEdge  = 7   /**< \brief External modulator, use every 2nd rising clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   140  } IfxEdsadc_DataStream;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   142  /** \brief Trimming Value for Dithering function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   143   * Definition in Ifx_DSADC.GLOBCFG.B.DITRIM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   144   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   145  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   146  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   147      IfxEdsadc_DitheringIntensity_minimum = 0,  /**< \brief Minimum dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   148      IfxEdsadc_DitheringIntensity_low     = 1,  /**< \brief Low dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   149      IfxEdsadc_DitheringIntensity_medium  = 2,  /**< \brief Medium dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   150      IfxEdsadc_DitheringIntensity_high    = 3   /**< \brief High */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   151  } IfxEdsadc_DitheringIntensity;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   152  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   153  /** \brief Define when comparator event is generated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   154   * Definition in Ifx_DSADC.FCFGM.B.ESEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   156  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   157  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   158      IfxEdsadc_EventSelect_everyNewResult = 0,  /**< \brief Always, for each new result value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   159      IfxEdsadc_EventSelect_insideBoundry  = 1,  /**< \brief If result is inside the boundary band */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   160      IfxEdsadc_EventSelect_outsideBoundry = 2   /**< \brief If result is outside the boundary band */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   161  } IfxEdsadc_EventSelect;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   163  /** \brief Defines the duration of the additional filter effect, based on values input to the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   164   * filter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   165   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   166  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   167  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   168      IfxEdsadc_FilterRunTimeInputCycle_2  = 0, /**< \brief 2 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   169      IfxEdsadc_FilterRunTimeInputCycle_4  = 1, /**< \brief 4 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   170      IfxEdsadc_FilterRunTimeInputCycle_8  = 2, /**< \brief 8 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   171      IfxEdsadc_FilterRunTimeInputCycle_16 = 3  /**< \brief 16 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   172  } IfxEdsadc_FilterRunTimeInputCycle;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   173  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   174  /** \brief Specifies Slew Rate Filter Strength
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   175   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   176  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   177  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   178      IfxEdsadc_FilterStrength_minimum = 0,  /**< \brief Minimum filter effect, early attenuation, linear operation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   179      IfxEdsadc_FilterStrength_weak    = 1,  /**< \brief Weak filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   180      IfxEdsadc_FilterStrength_medium  = 2,  /**< \brief Medium filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   181      IfxEdsadc_FilterStrength_maximum = 3   /**< \brief maximum filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   182  } IfxEdsadc_FilterStrength;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   184  /** \brief Fractional Reference Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   185   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   186  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   187  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   188      IfxEdsadc_FractionalRefVoltage_disable = 0,  /**< \brief VREFX is not connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   189      IfxEdsadc_FractionalRefVoltage_enable  = 1   /**< \brief VREFX is connected, value according to VREFXSEL */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   190  } IfxEdsadc_FractionalRefVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   192  /** \brief Fraction reference voltage selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   194  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   195  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   196      IfxEdsadc_FractionalRefVoltageSelection_div2  = 0, /**< \brief VREFX = VAREF / 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   197      IfxEdsadc_FractionalRefVoltageSelection_div4  = 1, /**< \brief VREFX = VAREF / 4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   198      IfxEdsadc_FractionalRefVoltageSelection_div8  = 2, /**< \brief VREFX = VAREF / 8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   199      IfxEdsadc_FractionalRefVoltageSelection_div16 = 3  /**< \brief VREFX = VAREF / 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   200  } IfxEdsadc_FractionalRefVoltageSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   202  /** \brief Half Supply Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   204  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   205  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   206      IfxEdsadc_HalfSupplyVoltage_disable = 0,  /**< \brief VDDM / 2 is not connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   207      IfxEdsadc_HalfSupplyVoltage_enable  = 1   /**< \brief VDDM / 2 is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   208  } IfxEdsadc_HalfSupplyVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   209  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   210  /** \brief Modulator configuration of positive/negative input line\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   211   * Definition in Ifx_DSADC.MODCFGx.B.INCFGP and Ifx_DSADC.MODCFGx.B.INCFGN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   213  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   214  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   215      IfxEdsadc_InputConfig_inputPin          = 0,  /**< \brief Modulator input connected to external pin */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   216      IfxEdsadc_InputConfig_supplyVoltage     = 1,  /**< \brief Modulator input connected to supply voltage V_ddm */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   217      IfxEdsadc_InputConfig_commonModeVoltage = 2,  /**< \brief Modulator input connected to common mode voltage V_cm */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   218      IfxEdsadc_InputConfig_referenceGround   = 3   /**< \brief Modulator input connected to reference ground V_ref */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   219  } IfxEdsadc_InputConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   221  /** \brief Demodulator input data source selection\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   222   * Definition in Ifx_EDSADC.DICFG.B.DSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   223   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   224  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   225  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   226      IfxEdsadc_InputDataSource_directInputA   = 0,  /**< \brief External, from input A, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   227      IfxEdsadc_InputDataSource_invertedInputA = 1,  /**< \brief External, from input A, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   228      IfxEdsadc_InputDataSource_directInputB   = 2,  /**< \brief External, from input B, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   229      IfxEdsadc_InputDataSource_invertedInputB = 3,  /**< \brief External, from input B, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   230      IfxEdsadc_InputDataSource_directInputC   = 4,  /**< \brief External, from input C, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   231      IfxEdsadc_InputDataSource_invertedInputC = 5,  /**< \brief External, from input C, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   232      IfxEdsadc_InputDataSource_directInputD   = 6,  /**< \brief External, from input D, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   233      IfxEdsadc_InputDataSource_invertedInputD = 7   /**< \brief External, from input D, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   234  } IfxEdsadc_InputDataSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   235  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   236  /** \brief Modulator gain select of analog input path\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   237   * Definition in Ifx_DSADC.MODCFGx.B.GAINSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   239  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   240  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   241      IfxEdsadc_InputGain_factor1  = 0, /**< \brief Input gain factor: 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   242      IfxEdsadc_InputGain_factor2  = 1, /**< \brief Input gain factor: 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   243      IfxEdsadc_InputGain_factor4  = 2, /**< \brief Input gain factor: 4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   244      IfxEdsadc_InputGain_factor8  = 3, /**< \brief Input gain factor: 8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   245      IfxEdsadc_InputGain_factor16 = 4  /**< \brief Input gain factor: 16 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   246  } IfxEdsadc_InputGain;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   247  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   248  /** \brief specifies input multiplexer control mode defined in MODULE_EDSADC.MODCFG.B.INMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   250  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   251  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   252      IfxEdsadc_InputMuxControlMode_softwareControl = 0,  /**< \brief Trigger Event by software (INMUX follows INSEL) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   253      IfxEdsadc_InputMuxControlMode_fallingEdge     = 1,  /**< \brief Trigger Event on Falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   254      IfxEdsadc_InputMuxControlMode_risingEdge      = 2,  /**< \brief Trigger Event on Rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   255      IfxEdsadc_InputMuxControlMode_always          = 3   /**< \brief Trigger event on any edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   256  } IfxEdsadc_InputMuxControlMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   258  /** \brief Modulator input pin selection\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   259   * Definition in Ifx_DSADC.MODCFGx.B.INMUX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   260   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   261  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   262  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   263      IfxEdsadc_InputPin_a = 0,  /**< \brief Pin A connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   264      IfxEdsadc_InputPin_b = 1,  /**< \brief Pin B connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   265      IfxEdsadc_InputPin_c = 2,  /**< \brief Pin C connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   266      IfxEdsadc_InputPin_d = 3   /**< \brief Pin D connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   267  } IfxEdsadc_InputPin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   269  /** \brief Controls the data shifter after the integrator that selects the portion of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   270   * integrator data for the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   271   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   272  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   274      IfxEdsadc_IntegrationShiftControl_0 = 0,      /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   275      IfxEdsadc_IntegrationShiftControl_1,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   276      IfxEdsadc_IntegrationShiftControl_2,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   277      IfxEdsadc_IntegrationShiftControl_3,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   278      IfxEdsadc_IntegrationShiftControl_4,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   279      IfxEdsadc_IntegrationShiftControl_5           /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   280  } IfxEdsadc_IntegrationShiftControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   281  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   282  /** \brief Integrator window size\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   283   * Definition in Ifx_DSADC.IWCTR.B.IWS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   284   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   285  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   286  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   287      IfxEdsadc_IntegrationWindowSize_internalControl = 0,  /**< \brief Internal control: stop integrator after REPVAL+1 integration cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   288      IfxEdsadc_IntegrationWindowSize_externalControl = 1   /**< \brief External control: stop integrator when bit INTEN becomes 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   289  } IfxEdsadc_IntegrationWindowSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   291  /** \brief Integrator trigger mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   292   * NOTE: switch-first to bypassed before using other mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   293   * Definition in Ifx_EDSADC.DICFG.B.ITRMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   295  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   296  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   297      IfxEdsadc_IntegratorTrigger_bypassed     = 0, /**< \brief No integration trigger, integrator bypassed */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   298      IfxEdsadc_IntegratorTrigger_fallingEdge  = 1, /**< \brief Trigger event upon a falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   299      IfxEdsadc_IntegratorTrigger_risingEdge   = 2, /**< \brief Trigger event upon a rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   300      IfxEdsadc_IntegratorTrigger_alwaysActive = 3  /**< \brief No trigger, integrator active all the time */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   301  } IfxEdsadc_IntegratorTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   303  /** \brief Service request generation (main chain)\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   304   * Definition in Ifx_EDSADC.FCFGM.B.SRGM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   305   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   306  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   307  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   308      IfxEdsadc_MainServiceRequest_never          = 0,  /**< \brief Never, service requests disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   309      IfxEdsadc_MainServiceRequest_highGateSignal = 1,  /**< \brief While gate (selected trigger signal) is high */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   310      IfxEdsadc_MainServiceRequest_lowGateSignal  = 2,  /**< \brief While gate (selected trigger signal) is low */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   311      IfxEdsadc_MainServiceRequest_everyNewResult = 3   /**< \brief Always, for each new result value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   312  } IfxEdsadc_MainServiceRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   313  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   314  /** \brief Modulator divider factor for modulator clock\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   315   * Definition in Ifx_EDSADC.MODCFGx.B.DIVM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   317  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   318  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   319      IfxEdsadc_ModulatorClockDivider_div4 = 0,      /**< \brief f_mod = f_clk / 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   320      IfxEdsadc_ModulatorClockDivider_div6,          /**< \brief f_mod = f_clk / 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   321      IfxEdsadc_ModulatorClockDivider_div8,          /**< \brief f_mod = f_clk / 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   322      IfxEdsadc_ModulatorClockDivider_div10,         /**< \brief f_mod = f_clk / 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   323      IfxEdsadc_ModulatorClockDivider_div12,         /**< \brief f_mod = f_clk / 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   324      IfxEdsadc_ModulatorClockDivider_div14,         /**< \brief f_mod = f_clk / 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   325      IfxEdsadc_ModulatorClockDivider_div16,         /**< \brief f_mod = f_clk / 16  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   326      IfxEdsadc_ModulatorClockDivider_div18          /**< \brief f_mod = f_clk / 18  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   327  } IfxEdsadc_ModulatorClockDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   329  /** \brief Defines the way the modulator clock is generated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   330   * Definition in Ifx_DSADC.GLOBCFG.B.USC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   331   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   332  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   333  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   334      IfxEdsadc_ModulatorClockGeneration_syncMode   = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   335      IfxEdsadc_ModulatorClockGeneration_unsyncMode = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   336  } IfxEdsadc_ModulatorClockGeneration;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   338  /** \brief Enable the offset compensation filter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   339   * Definition in Ifx_DSADC.FCFGM.B.OCEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   340   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   341  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   342  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   343      IfxEdsadc_OffsetCompensationFilter_disabled        = 0,  /**< \brief Offset Compensation filter disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   344      IfxEdsadc_OffsetCompensationFilter_enablewithRateA = 1,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   345      IfxEdsadc_OffsetCompensationFilter_enablewithRateB = 2,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   346      IfxEdsadc_OffsetCompensationFilter_enablewithRateC = 3,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate C */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   347      IfxEdsadc_OffsetCompensationFilter_enablewithRateD = 4,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate D */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   348      IfxEdsadc_OffsetCompensationFilter_enablewithRateE = 5,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate E */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   349      IfxEdsadc_OffsetCompensationFilter_enablewithRateF = 6,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate F */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   350      IfxEdsadc_OffsetCompensationFilter_enablewithRateG = 7   /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate G */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   351  } IfxEdsadc_OffsetCompensationFilter;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   353  /** \brief Overshoot Compensation Enable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   354   * Defined in fx_DSADC.FCFGM.B.OVCEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   355   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   356  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   357  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   358      IfxEdsadc_OvershootCompensation_disabled = 0,  /**< \brief Disabled, feed FIR filter directly */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   359      IfxEdsadc_OvershootCompensation_enabled  = 1   /**< \brief Attenuate response to fast edges */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   360  } IfxEdsadc_OvershootCompensation;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   362  /** \brief Rectifier sign source\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   363   * Selects the sign signal that is to be delayed.\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   364   * Definition in Ifx_DSADC.RECT.B.SSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   365   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   366  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   367  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   368      IfxEdsadc_RectifierSignSource_onChipGenerator = 0,  /**< \brief On-chip carrier generator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   369      IfxEdsadc_RectifierSignSource_nextChannel     = 1,  /**< \brief Sign of result of next channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   370      IfxEdsadc_RectifierSignSource_externalA       = 2,  /**< \brief External sign signal A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   371      IfxEdsadc_RectifierSignSource_externalB       = 3   /**< \brief External sign signal B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   372  } IfxEdsadc_RectifierSignSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   373  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   374  /** \brief Restart the filter chain when an integration window starts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   375   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   376  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   377  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   378      IfxEdsadc_RestartFilterChain_on  = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   379      IfxEdsadc_RestartFilterChain_off = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   380  } IfxEdsadc_RestartFilterChain;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   382  /** \brief specifies result display mode (signed/unsigned)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   383   * Definition in Ifx_DSADC.DICFG.B.RDM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   385  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   386  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   387      IfxEdsadc_ResultDisplayMode_signed   = 0, /**< \brief Signed: result values range from -215 to +215 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   388      IfxEdsadc_ResultDisplayMode_unsigned = 1  /**< \brief Unsigned: result values range from 0 to +216 (shifted by 215) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   389  } IfxEdsadc_ResultDisplayMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   390  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   391  /** \brief Demodulator sample clock source select\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   392   * Definition in Ifx_EDSADC.DICFG.B.CSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   393   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   394  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   395  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   396      IfxEdsadc_SampleClockSource_internal = 0,  /**< \brief Internal clock */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   397      IfxEdsadc_SampleClockSource_inputA   = 3,  /**< \brief External clock, from Input A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   398      IfxEdsadc_SampleClockSource_inputB   = 4,  /**< \brief External clock, from Input B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   399      IfxEdsadc_SampleClockSource_inputC   = 5   /**< \brief External clock, from Input C */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   400  } IfxEdsadc_SampleClockSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   402  /** \brief Service request fifo level
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   403   * Definition in Ifx_EDSADC.RFC.B.SRLVL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   405  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   406  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   407      IfxEdsadc_ServiceRequestFifolevel_1 = 0,      /**< \brief Generate a service request when Fifo contain level 1 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   408      IfxEdsadc_ServiceRequestFifolevel_2,          /**< \brief Generate a service request when Fifo contain level 2 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   409      IfxEdsadc_ServiceRequestFifolevel_3,          /**< \brief Generate a service request when Fifo contain level 3 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   410      IfxEdsadc_ServiceRequestFifolevel_4           /**< \brief Generate a service request when Fifo contain level 4 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   411  } IfxEdsadc_ServiceRequestFifolevel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   413  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   414   * Definition in Ifx_EDSADC.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   415   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   416  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   417  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   418      IfxEdsadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   419      IfxEdsadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   420  } IfxEdsadc_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   422  /** \brief Defines when the slew rate filter is activated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   424  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   425  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   426      IfxEdsadc_StepDetectionMode_lastInput       = 0, /**< \brief Compare threshold to difference of current and last input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   427      IfxEdsadc_StepDetectionMode_secondlastInput = 1  /**< \brief Compare threshold to difference of current and second-last input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   428  } IfxEdsadc_StepDetectionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   430  /** \brief Adjusts the analog circuitry to the supply voltage used in the application
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   431   * system.Defined In defined in MODULE_EDSADC.GLOBCFG.B.SUPLEV
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   433  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   434  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   435      IfxEdsadc_SupplyVoltageLevel_automaticControl = 0,  /**< \brief voltage range is controlled by the power supply */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   436      IfxEdsadc_SupplyVoltageLevel_upperVoltage     = 1,  /**< \brief Upper voltage range: assume a 5 V power supply is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   437      IfxEdsadc_SupplyVoltageLevel_lowerVoltage     = 2   /**< \brief Lower voltage range: assume a 3.3 V power supply is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   438  } IfxEdsadc_SupplyVoltageLevel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   439  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   440  /** \brief OCDS Suspend Control (OCDS.SUS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   441   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   442  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   443  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   444      IfxEdsadc_SuspendMode_none = 0,  /**< \brief No suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   445      IfxEdsadc_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   446      IfxEdsadc_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   447  } IfxEdsadc_SuspendMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   448  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   449  /** \brief Time Stamp Counter Clock Selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   450   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   451  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   452  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   453      IfxEdsadc_TimeStampCounterClockSelection_div1 = 0,  /**< \brief fTSTMP = fMOD */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   454      IfxEdsadc_TimeStampCounterClockSelection_div2 = 1,  /**< \brief fTSTMP = fMOD/2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   455      IfxEdsadc_TimeStampCounterClockSelection_div4 = 2,  /**< \brief fTSTMP = fMOD/4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   456      IfxEdsadc_TimeStampCounterClockSelection_div8 = 3   /**< \brief fTSTMP = fMOD/8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   457  } IfxEdsadc_TimeStampCounterClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   458  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   459  /** \brief Timestamp trigger mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   460   * Definition in Ifx_EDSADC.DICFG.B.TSTRMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   462  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   463  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   464      IfxEdsadc_TimestampTrigger_noTrigger   = 0,  /**< \brief No timestamp trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   465      IfxEdsadc_TimestampTrigger_fallingEdge = 1,  /**< \brief Trigger event upon a falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   466      IfxEdsadc_TimestampTrigger_risingEdge  = 2,  /**< \brief Trigger event upon a rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   467      IfxEdsadc_TimestampTrigger_eachEdge    = 3   /**< \brief Trigger event upon each edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   468  } IfxEdsadc_TimestampTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   469  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   470  /** \brief Trigger select\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   471   * Definition in Ifx_EDSADC.DICFG.B.TRSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   473  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   474  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   475      IfxEdsadc_TriggerInput_a = 0,   /**< \brief GTM EDSADC Trigger 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   476      IfxEdsadc_TriggerInput_b = 1,   /**< \brief GTM EDSADC Trigger 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   477      IfxEdsadc_TriggerInput_c = 2,   /**< \brief GTM ADC Trigger 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   478      IfxEdsadc_TriggerInput_d = 3,   /**< \brief GTM ADC Trigger 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   479      IfxEdsadc_TriggerInput_e = 4,   /**< \brief Trigger/gate via port input P33.0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   480      IfxEdsadc_TriggerInput_f = 5,   /**< \brief Trigger/gate via port input P33.4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   481      IfxEdsadc_TriggerInput_g = 6,   /**< \brief ERU pattern detection output 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   482      IfxEdsadc_TriggerInput_h = 7,   /**< \brief Trigger/gate, channel 0,input H */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   483      IfxEdsadc_TriggerInput_i = 8,   /**< \brief Trigger/gate, channel 0,input I */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   484      IfxEdsadc_TriggerInput_j = 9,   /**< \brief Trigger/gate, channel 0,input J */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   485      IfxEdsadc_TriggerInput_k = 10,  /**< \brief GTM ADC Trigger 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   486      IfxEdsadc_TriggerInput_l = 11,  /**< \brief GTM ADC Trigger 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   487      IfxEdsadc_TriggerInput_m = 12,  /**< \brief GTM DSADC Trigger 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   488      IfxEdsadc_TriggerInput_n = 13,  /**< \brief GTM DSADC Trigger 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   489      IfxEdsadc_TriggerInput_o = 14,  /**< \brief Trigger/gate, channel 0,input O */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   490      IfxEdsadc_TriggerInput_p = 15   /**< \brief Trigger/gate, channel 0,input P */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   491  } IfxEdsadc_TriggerInput;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   492  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   493  /** \brief Controls the dithering function for each modulator separately
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   494   * Definition in Ifx_DSADC.MODCFG.B.DITHEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   496  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   497  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   498      IfxEdsadc_dithering_disabled = 0,  /**< \brief dithering function disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   499      IfxEdsadc_dithering_enabled  = 1   /**< \brief dithering function enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   500  } IfxEdsadc_dithering;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   501  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   502  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   504  /** \brief Allows copying of bitfield AMX into bitfield TIMESTAMP
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   505   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   506  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   507  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   508      IfxEdsadc_AnalogMux_doNotCopyAmx = 0,  /**< \brief Do not copy, timestamp uses all 16 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   509      IfxEdsadc_AnalogMux_copyAmx      = 1   /**< \brief Copy AMX to bits TIMESTAMP[15:14], timestamp uses lower 14 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   510  } IfxEdsadc_AnalogMux;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   511  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   512  /** \brief Timestamp Counter Run Control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   513   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   514  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   515  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   516      IfxEdsadc_TimeStampCounterControl_off = 0,  /**< \brief Timestamp counter is off */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   517      IfxEdsadc_TimeStampCounterControl_on  = 1   /**< \brief Timestamp counter is counting at the rate selected by bitfield TSCLK */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   518  } IfxEdsadc_TimeStampCounterControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   519  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   520  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   521  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   523  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   524  /** \brief Modulator Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   526  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   527  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   528      float32                        modulatorClockPeriod;         /**< \brief Modulator clock period */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   529      IfxEdsadc_InputGain            inputGain;                    /**< \brief Modulator gain select of analog input path */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   530      IfxEdsadc_AnalogClockSyncDelay analogClockSyncDelay;         /**< \brief Define the delay in clock cycle after sync signal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   531      IfxEdsadc_InputConfig          positiveInput;                /**< \brief Modulator configuration of positive input line */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   532      IfxEdsadc_InputConfig          negativeInput;                /**< \brief Modulator configuration of negative input line */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   533      IfxEdsadc_InputPin             inputPin;                     /**< \brief Modulator input pin selection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   534      IfxEdsadc_dithering            ditheringEnabled;             /**< \brief Control the Dithering Function for each modulator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   535      boolean                        integratorResetEnabled;       /**< \brief Control the modulator overload handling */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   536      boolean                        inputMuxActionControl;        /**< \brief Defines the mechanism by which the input multiplexer is controlled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   537      IfxEdsadc_InputMuxControlMode  triggerEvent;                 /**< \brief Defines the condition for a trigger event to control the input multiplexer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   538  } IfxEdsadc_ModulatorConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   539  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   540  /** \addtogroup IfxLld_Edsadc_Std_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   541   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   542  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   543  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   544  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   545  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   547  /** \brief Returns the module's suspend state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   548   * TRUE :if module is suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   549   * FALSE:if module is not yet suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   550   * \param edsadc Pointer to EDSADC module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   551   * \return Suspend status (TRUE / FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   552   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   553  IFX_INLINE boolean IfxEdsadc_isModuleSuspended(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   555  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   556   * \param edsadc pointer to EDSADC registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   557   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   558   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   560  IFX_INLINE void IfxEdsadc_setSleepMode(Ifx_EDSADC *edsadc, IfxEdsadc_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   561  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   562  /** \brief Configure the Module to Hard/Soft suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   563   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   564   * \param edsadc Pointer to EDSADC module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   565   * \param mode Module suspend mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   566   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   567   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   568  IFX_INLINE void IfxEdsadc_setSuspendMode(Ifx_EDSADC *edsadc, IfxEdsadc_SuspendMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   569  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   570  /** \brief Enables the conversion of multiple channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   571   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   572   * \param modulatorMask the modulator which should be running (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   573   * \param channelMask the channels which should be scanned (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   574   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   575   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   576   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   578   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   579  IFX_INLINE void IfxEdsadc_startScan(Ifx_EDSADC *edsadc, uint32 modulatorMask, uint32 channelMask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   580  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   581  /** \brief Disables the conversion of multiple channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   582   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   583   * \param modulatorMask the modulator which should be disabled (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   584   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   585   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   586   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   587   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   589  IFX_INLINE void IfxEdsadc_stopScan(Ifx_EDSADC *edsadc, uint32 modulatorMask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   592  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   593  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   594  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   595  /** \brief Disables the module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   596   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   598   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   599  IFX_EXTERN void IfxEdsadc_disableModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   600  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   601  /** \brief Enables the module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   602   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   603   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   604   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   605  IFX_EXTERN void IfxEdsadc_enableModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   606  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   607  /** \brief resets EDSADC kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   608   * \param edsadc pointer to EDSADC registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   609   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   611  IFX_EXTERN void IfxEdsadc_resetModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   613  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   615  /** \addtogroup IfxLld_Edsadc_Std_Support
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   616   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   617  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   618  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   619  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   620  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   622  /** \brief Get the main comb decimation factor
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   623   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   624   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   625   * \return the main comb decimation factor
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   626   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   627  IFX_INLINE uint16 IfxEdsadc_getMainCombDecimation(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   629  /** \brief Get result from the main chain
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   630   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   631   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   632   * \return result from the main chain
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   633   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   634   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   635   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   636   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   637  IFX_INLINE sint16 IfxEdsadc_getMainResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   639  /** \brief Get the subsequent result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   640   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   641  IFX_INLINE sint32 IfxEdsadc_getSubsequentResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   642  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   643  /** \brief Return TRUE if EDSADC module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   644   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   645   * \return TRUE if EDSADC module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   646   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   647  IFX_INLINE boolean IfxEdsadc_isModuleEnabled(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   648  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   649  /** \brief Set the carrier waveform mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   650   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   651   * \param waveformMode the waveform mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   652   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   653   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   654  IFX_INLINE void IfxEdsadc_setCarrierMode(Ifx_EDSADC *edsadc, IfxEdsadc_CarrierWaveformMode waveformMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   656  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   657  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   658  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   659  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   660  /** \brief Get the sample frequency of the integrator output in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   661   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   662   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   663   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   664   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   665  IFX_EXTERN float32 IfxEdsadc_getIntegratorOutFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   667  /** \brief Get the sample frequency of the main COMB filter output in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   668   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   669   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   670   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   671   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   672  IFX_EXTERN float32 IfxEdsadc_getMainCombOutFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   674  /** \brief Estimate the group delay of main-chain filters in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   675   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   676   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   677   * \return delay in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   678   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   679  IFX_EXTERN float32 IfxEdsadc_getMainGroupDelay(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   681  /** \brief Get the modulator clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   682   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   683   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   684   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   685   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   686  IFX_EXTERN float32 IfxEdsadc_getModulatorClockFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   687  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   688  /** \brief Get the input frequency of EDSADC in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   689   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   690   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   691   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   692  IFX_EXTERN float32 IfxEdsadc_getModulatorInputClockFreq(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   693  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   694  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   695  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   696  /** \addtogroup IfxLld_Edsadc_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   697   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   698  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   699  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   700  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   701  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   702  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   703  /** \brief Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   704   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   705   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   706   * \return Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   708  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxEdsadc_getAuxSrc(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   710  /** \brief Get the interrupt source register for a Main event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   711   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   712   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   713   * \return Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   714   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   715  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxEdsadc_getMainSrc(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   716  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   717  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   718  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   719  /** \addtogroup IfxLld_Edsadc_Std_IO
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   720   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   721  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   722  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   723  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   724  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   725  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   726  /** \brief Initializes a CGPWM output
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   727   * \param cgPwm the CGPWM Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   728   * \param pinMode the pin output mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   729   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   730   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   731   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   732  IFX_INLINE void IfxEdsadc_initCgPwmPin(const IfxEdsadc_Cgpwm_Out *cgPwm, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   733  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   734  /** \brief Initializes a CIN input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   735   * \param cIn the CIN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   736   * \param cInMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   737   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   738   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   739   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   740  IFX_INLINE void IfxEdsadc_initCinPin(const IfxEdsadc_Cin_In *cIn, IfxPort_InputMode cInMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   741  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   742  /** \brief Initializes a COUT output
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   743   * \param cout the COUT Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   744   * \param pinMode the pin output mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   745   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   746   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   748  IFX_INLINE void IfxEdsadc_initCoutPin(const IfxEdsadc_Cout_Out *cout, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   750  /** \brief Initializes a DIN input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   751   * \param dIn the DIN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   752   * \param dInMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   753   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   754   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   755   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   756  IFX_INLINE void IfxEdsadc_initDinPin(const IfxEdsadc_Din_In *dIn, IfxPort_InputMode dInMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   757  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   758  /** \brief Initializes a DS input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   759   * \param dsn the DSN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   760   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   761   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   762   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   763   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   764  IFX_INLINE void IfxEdsadc_initDsnPin(const IfxEdsadc_Dsn_In *dsn, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   765  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   766  /** \brief Initializes a DS input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   767   * \param dsp the DSP Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   768   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   769   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   770   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   771   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   772  IFX_INLINE void IfxEdsadc_initDspPin(const IfxEdsadc_Dsp_In *dsp, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   774  /** \brief Initializes a ITR input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   775   * \param itr the ITR Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   776   * \param itrMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   777   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   778   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   779   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   780  IFX_INLINE void IfxEdsadc_initItrPin(const IfxEdsadc_Itr_In *itr, IfxPort_InputMode itrMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   781  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   782  /** \brief Initializes a SG input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   783   * \param sg the SG Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   784   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   785   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   786   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   787   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   788  IFX_INLINE void IfxEdsadc_initSgPin(const IfxEdsadc_Sg_In *sg, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   789  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   790  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   791  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   792  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   793  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   794  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   795  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   796  /** \brief Returns the positive input line configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   797   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   798   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   799   * \return Positive Input Line Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   800   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   801  IFX_INLINE uint8 IfxEdsadc_getPositiveInputLineConfiguration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   802  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   803  /** \brief Returns the negative input line configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   804   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   805   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   806   * \return Negative Input Line Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   807   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   808  IFX_INLINE uint8 IfxEdsadc_getNegativeInputLineConfiguration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   809  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   810  /** \brief Sets the Offset compensation Value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   811   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   812   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   813   * \param value Value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   814   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   815   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   816  IFX_INLINE void IfxEdsadc_setOffsetCompensationValue(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   818  /** \brief Returns the address of the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   819   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   820   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   821   * \return Address of the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   822   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   823  IFX_INLINE uint32 *IfxEdsadc_getResultRegisterAddress(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   824  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   825  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   826  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   827  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   828  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   829  /** \brief set common mode voltage Parameters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   830   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   831   * \param channel specifies channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   832   * \param voltage select Fractional reference Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   833   * \param refMode Fractional Reference Voltage Enable/ Disable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   834   * \param hsvMode Enable / Disable Half Supply Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   835   * \param cmhvMode Enable / Disable Common Mode Hold Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   836   * \param positiveInput Defines the connection of the respective positive input y to the common mode hold voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   837   * \param negativeInput Defines the connection of the respective negative input y to the common mode hold voltage.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   838   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   839   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   840  IFX_EXTERN void IfxEdsadc_setCommonModeVoltage(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_FractionalRefVoltageSelection voltage, IfxEdsadc_FractionalRefVoltage refMode, IfxEdsadc_HalfSupplyVoltage hsvMode, IfxEdsadc_CommonModeHoldVoltage cmhvMode, uint8 positiveInput, uint8 negativeInput);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   842  /** \brief configure gain correction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   843   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   844   * \param channel Specifies channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   845   * \param gainFactor Multiplication Factor for gain correction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   846   * \param cicShift Position of CIC filter output shifter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   847   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   848   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   849  IFX_EXTERN void IfxEdsadc_setGainCorrectionFactor(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   851  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   852   * \param edsadc Pointer to module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   853   * \param channel specifies channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   854   * \param timeStampCounterClock Time Stamp Counter Clock selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   855   * \param runControl TimeStamp Counter Run Control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   856   * \param analogMuxCopy Analog MUX Setting Copy Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   857   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   858   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   859  IFX_EXTERN void IfxEdsadc_setTimeStampCounter(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_TimeStampCounterClockSelection timeStampCounterClock, IfxEdsadc_TimeStampCounterControl runControl, IfxEdsadc_AnalogMux analogMuxCopy);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   861  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   862   * \param edsadc Pointer to EDSADC SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   863   * \param channel chanel no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   864   * \param gainFactor Multiplication Factor for Gain Correction During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   865   * \param cicShift Position of the CIC Filter Output Shifter During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   866   * \param cicDecimationRate Decimation Rate of the CIC Filter During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   867   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   868   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   869  IFX_EXTERN void IfxEdsadc_setGainControl(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift, uint8 cicDecimationRate);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   870  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   871  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   872   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   873   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   874   * \param calFactor Multiplication Factor for Gain Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   875   * \param calTarget Target Value for Calibrated Fullscale
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   876   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   877   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   878  IFX_EXTERN void IfxEdsadc_setGainCalibration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 calFactor, uint16 calTarget);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   879  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   880  /** \brief Set the Modulator configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   881   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   882   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   883   * \param config Modulator Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   884   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   885   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   886  IFX_EXTERN void IfxEdsadc_configureModulator(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_ModulatorConfig *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   887  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   888  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   889  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   890  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   891  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   892  IFX_INLINE uint16 IfxEdsadc_getMainCombDecimation(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   893  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   894      return (uint16)(1U + edsadc->CH[channel].FCFGC.B.CFMDF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   895  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   896  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   897  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   898  IFX_INLINE sint16 IfxEdsadc_getMainResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   899  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   900      return edsadc->CH[channel].RESM.B.RESULTLO;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   901  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   902  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   903  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   904  IFX_INLINE sint32 IfxEdsadc_getSubsequentResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   905  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   906      return (sint32)(edsadc->CH[channel].RESM.U);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   907  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   908  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   909  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   910  IFX_INLINE void IfxEdsadc_initCgPwmPin(const IfxEdsadc_Cgpwm_Out *cgPwm, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   911  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   912      if (cgPwm->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   913      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   914          IfxPort_setPinModeOutput(cgPwm->pin.port, cgPwm->pin.pinIndex, pinMode, cgPwm->select);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   915          IfxPort_setPinPadDriver(cgPwm->pin.port, cgPwm->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   916      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   917  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   918  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   920  IFX_INLINE void IfxEdsadc_initCinPin(const IfxEdsadc_Cin_In *cIn, IfxPort_InputMode cInMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   921  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   922      if (cIn->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   923      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   924          IfxPort_setPinModeInput(cIn->pin.port, cIn->pin.pinIndex, cInMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   925          IfxPort_setPinPadDriver(cIn->pin.port, cIn->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   926      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   927  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   928  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   929  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   930  IFX_INLINE void IfxEdsadc_initCoutPin(const IfxEdsadc_Cout_Out *cout, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   931  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   932      if (cout->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   933      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   934          IfxPort_setPinModeOutput(cout->pin.port, cout->pin.pinIndex, pinMode, cout->select);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   935          IfxPort_setPinPadDriver(cout->pin.port, cout->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   936      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   937  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   938  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   939  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   940  IFX_INLINE void IfxEdsadc_initDinPin(const IfxEdsadc_Din_In *dIn, IfxPort_InputMode dInMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   941  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   942      if (dIn->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   943      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   944          IfxPort_setPinModeInput(dIn->pin.port, dIn->pin.pinIndex, dInMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   945          IfxPort_setPinPadDriver(dIn->pin.port, dIn->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   946      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   947  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   948  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   949  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   950  IFX_INLINE void IfxEdsadc_initDsnPin(const IfxEdsadc_Dsn_In *dsn, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   951  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   952      if (dsn->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   953      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   954          IfxPort_setPinModeInput(dsn->pin.port, dsn->pin.pinIndex, pinMode);
	fcall	.cocofun_8
.L444:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
	call	IfxPort_setPinMode
.L321:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   955          IfxPort_setPinPadDriver(dsn->pin.port, dsn->pin.pinIndex, padDriver);
	fcall	.cocofun_9
.L653:
	call	IfxPort_setPinPadDriver

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   952      if (dsn->pin.port != NULL_PTR)      (inlined)
.L14:
.L13:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   168          }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   169  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   170          const IfxEdsadc_Dsp_In *dsp = pins->dsp;
	ld.a	a15,[a12]32
.L446:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   171  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   172          if (dsp != NULL_PTR)
	jz.a	a15,.L15
.L654:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   173          {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   174              IfxEdsadc_initDspPin(dsp, pins->dspMode, pins->pinDriver);
	ld.b	d15,[a12]36
.L655:
	fcall	.cocofun_7
.L333:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   962      if (dsp->pin.port != NULL_PTR)      (inlined)
	jz.a	a4,.L16
.L341:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     2   * \file IfxEdsadc.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     3   * \brief EDSADC  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     4   * \ingroup IfxLld_Edsadc
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    41   * \defgroup IfxLld_Edsadc_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    42   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    43   * \defgroup IfxLld_Edsadc_Std_Operative Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    44   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    45   * \defgroup IfxLld_Edsadc_Std_Support Support Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    46   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    47   * \defgroup IfxLld_Edsadc_Std_Interrupt Interrupt Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    48   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    49   * \defgroup IfxLld_Edsadc_Std_IO IO Pin Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    50   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    53  #ifndef IFXEDSADC_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    54  #define IFXEDSADC_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    60  #include "_Impl/IfxEdsadc_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    61  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    62  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    63  #include "_PinMap/IfxEdsadc_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    64  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    65  #include "IfxEdsadc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    66  #include "IfxEdsadc_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    68  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    69  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    70  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    71  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    72  /** \addtogroup IfxLld_Edsadc_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    73   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    74  /** \brief Analog Clock Synchronization Delay
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    75   * Definition in Ifx_DSADC.MODCFG.B.ACSD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    79      IfxEdsadc_AnalogClockSyncDelay_noDelay     = 0,    /**< \brief no delay */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    80      IfxEdsadc_AnalogClockSyncDelay_cycleDelay1 = 1,    /**< \brief Delay of 1 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    81      IfxEdsadc_AnalogClockSyncDelay_cycleDelay2,        /**< \brief Delay of 2 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    82      IfxEdsadc_AnalogClockSyncDelay_cycleDelay3,        /**< \brief Delay of 3 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    83      IfxEdsadc_AnalogClockSyncDelay_cycleDelay4,        /**< \brief Delay of 4 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    84      IfxEdsadc_AnalogClockSyncDelay_cycleDelay5,        /**< \brief Delay of 5 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    85      IfxEdsadc_AnalogClockSyncDelay_cycleDelay6,        /**< \brief Delay of 6 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    86      IfxEdsadc_AnalogClockSyncDelay_cycleDelay7         /**< \brief Delay of 7 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    87  } IfxEdsadc_AnalogClockSyncDelay;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    89  /** \brief Service request generation (auxiliary)\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    90   * Definition in Ifx_EDSADC.FCFGM.B.SRGA
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    91   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    92  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    93  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    94      IfxEdsadc_AuxServiceRequest_never          = 0,  /**< \brief Never, service requests disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    95      IfxEdsadc_AuxServiceRequest_compEvent      = 1,  /**< \brief As selected by bitfield ESEL */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    96      IfxEdsadc_AuxServiceRequest_timestampEvent = 2,  /**< \brief Timestamp Event */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    97      IfxEdsadc_AuxServiceRequest_altSource      = 3   /**< \brief Alternate source: Capturing of a sign delay value to register CGSYNCx (x = 0 - 5) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    98  } IfxEdsadc_AuxServiceRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   100  /** \brief Carrier generation mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   101   * Definition in Ifx_EDSADC.CGCFG.B.CGMOD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   103  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   104  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   105      IfxEdsadc_CarrierWaveformMode_stopped  = 0,  /**< \brief Carrier Generator stopped */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   106      IfxEdsadc_CarrierWaveformMode_square   = 1,  /**< \brief Carrier Generator generates square wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   107      IfxEdsadc_CarrierWaveformMode_triangle = 2,  /**< \brief Carrier Generator generates triangle wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   108      IfxEdsadc_CarrierWaveformMode_sine     = 3   /**< \brief Carrier Generator generates sine wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   109  } IfxEdsadc_CarrierWaveformMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   111  /** \brief Common Mode Hold Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   115      IfxEdsadc_CommonModeHoldVoltage_disable = 0,  /**< \brief VCMH is off */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   116      IfxEdsadc_CommonModeHoldVoltage_enable  = 1   /**< \brief VCMH is generated */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   117  } IfxEdsadc_CommonModeHoldVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   119  /** \brief Select the data to be returned when register RESM is read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   120   * Definition in Ifx_DSADC.DICFG.B.DRM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   121   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   122  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   123  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   124      IfxEdsadc_DataRead_signOnHighbit      = 0,  /**< \brief Single: Issue one 16-bit value per read access (sign on high bits) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   125      IfxEdsadc_DataRead_timestampOnHighbit = 1,  /**< \brief Single: Issue one 16-bit value per read access (timestamp on high bits) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   126      IfxEdsadc_DataRead_double             = 2   /**< \brief Double: Issue two 16-bit values per read access */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   127  } IfxEdsadc_DataRead;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   129  /** \brief Data stream select
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   130   * Definition in Ifx_DSADC.DICFG.B.DSS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   131   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   132  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   133  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   134      IfxEdsadc_DataStream_onChipModulator        = 0,  /**< \brief select data stream from on chip modulator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   135      IfxEdsadc_DataStream_doubleDataClockEdge    = 3,  /**< \brief External modulator, use rising and falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   136      IfxEdsadc_DataStream_directFallingClockEdge = 4,  /**< \brief External modulator, use each falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   137      IfxEdsadc_DataStream_directRisingClockEdge  = 5,  /**< \brief External modulator, use each rising clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   138      IfxEdsadc_DataStream_secondFallingClockEdge = 6,  /**< \brief External modulator, use every 2nd falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   139      IfxEdsadc_DataStream_secondRisingClockEdge  = 7   /**< \brief External modulator, use every 2nd rising clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   140  } IfxEdsadc_DataStream;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   142  /** \brief Trimming Value for Dithering function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   143   * Definition in Ifx_DSADC.GLOBCFG.B.DITRIM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   144   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   145  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   146  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   147      IfxEdsadc_DitheringIntensity_minimum = 0,  /**< \brief Minimum dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   148      IfxEdsadc_DitheringIntensity_low     = 1,  /**< \brief Low dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   149      IfxEdsadc_DitheringIntensity_medium  = 2,  /**< \brief Medium dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   150      IfxEdsadc_DitheringIntensity_high    = 3   /**< \brief High */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   151  } IfxEdsadc_DitheringIntensity;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   152  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   153  /** \brief Define when comparator event is generated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   154   * Definition in Ifx_DSADC.FCFGM.B.ESEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   156  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   157  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   158      IfxEdsadc_EventSelect_everyNewResult = 0,  /**< \brief Always, for each new result value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   159      IfxEdsadc_EventSelect_insideBoundry  = 1,  /**< \brief If result is inside the boundary band */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   160      IfxEdsadc_EventSelect_outsideBoundry = 2   /**< \brief If result is outside the boundary band */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   161  } IfxEdsadc_EventSelect;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   163  /** \brief Defines the duration of the additional filter effect, based on values input to the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   164   * filter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   165   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   166  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   167  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   168      IfxEdsadc_FilterRunTimeInputCycle_2  = 0, /**< \brief 2 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   169      IfxEdsadc_FilterRunTimeInputCycle_4  = 1, /**< \brief 4 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   170      IfxEdsadc_FilterRunTimeInputCycle_8  = 2, /**< \brief 8 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   171      IfxEdsadc_FilterRunTimeInputCycle_16 = 3  /**< \brief 16 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   172  } IfxEdsadc_FilterRunTimeInputCycle;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   173  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   174  /** \brief Specifies Slew Rate Filter Strength
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   175   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   176  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   177  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   178      IfxEdsadc_FilterStrength_minimum = 0,  /**< \brief Minimum filter effect, early attenuation, linear operation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   179      IfxEdsadc_FilterStrength_weak    = 1,  /**< \brief Weak filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   180      IfxEdsadc_FilterStrength_medium  = 2,  /**< \brief Medium filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   181      IfxEdsadc_FilterStrength_maximum = 3   /**< \brief maximum filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   182  } IfxEdsadc_FilterStrength;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   184  /** \brief Fractional Reference Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   185   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   186  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   187  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   188      IfxEdsadc_FractionalRefVoltage_disable = 0,  /**< \brief VREFX is not connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   189      IfxEdsadc_FractionalRefVoltage_enable  = 1   /**< \brief VREFX is connected, value according to VREFXSEL */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   190  } IfxEdsadc_FractionalRefVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   192  /** \brief Fraction reference voltage selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   194  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   195  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   196      IfxEdsadc_FractionalRefVoltageSelection_div2  = 0, /**< \brief VREFX = VAREF / 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   197      IfxEdsadc_FractionalRefVoltageSelection_div4  = 1, /**< \brief VREFX = VAREF / 4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   198      IfxEdsadc_FractionalRefVoltageSelection_div8  = 2, /**< \brief VREFX = VAREF / 8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   199      IfxEdsadc_FractionalRefVoltageSelection_div16 = 3  /**< \brief VREFX = VAREF / 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   200  } IfxEdsadc_FractionalRefVoltageSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   202  /** \brief Half Supply Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   204  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   205  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   206      IfxEdsadc_HalfSupplyVoltage_disable = 0,  /**< \brief VDDM / 2 is not connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   207      IfxEdsadc_HalfSupplyVoltage_enable  = 1   /**< \brief VDDM / 2 is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   208  } IfxEdsadc_HalfSupplyVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   209  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   210  /** \brief Modulator configuration of positive/negative input line\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   211   * Definition in Ifx_DSADC.MODCFGx.B.INCFGP and Ifx_DSADC.MODCFGx.B.INCFGN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   213  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   214  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   215      IfxEdsadc_InputConfig_inputPin          = 0,  /**< \brief Modulator input connected to external pin */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   216      IfxEdsadc_InputConfig_supplyVoltage     = 1,  /**< \brief Modulator input connected to supply voltage V_ddm */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   217      IfxEdsadc_InputConfig_commonModeVoltage = 2,  /**< \brief Modulator input connected to common mode voltage V_cm */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   218      IfxEdsadc_InputConfig_referenceGround   = 3   /**< \brief Modulator input connected to reference ground V_ref */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   219  } IfxEdsadc_InputConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   221  /** \brief Demodulator input data source selection\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   222   * Definition in Ifx_EDSADC.DICFG.B.DSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   223   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   224  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   225  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   226      IfxEdsadc_InputDataSource_directInputA   = 0,  /**< \brief External, from input A, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   227      IfxEdsadc_InputDataSource_invertedInputA = 1,  /**< \brief External, from input A, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   228      IfxEdsadc_InputDataSource_directInputB   = 2,  /**< \brief External, from input B, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   229      IfxEdsadc_InputDataSource_invertedInputB = 3,  /**< \brief External, from input B, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   230      IfxEdsadc_InputDataSource_directInputC   = 4,  /**< \brief External, from input C, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   231      IfxEdsadc_InputDataSource_invertedInputC = 5,  /**< \brief External, from input C, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   232      IfxEdsadc_InputDataSource_directInputD   = 6,  /**< \brief External, from input D, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   233      IfxEdsadc_InputDataSource_invertedInputD = 7   /**< \brief External, from input D, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   234  } IfxEdsadc_InputDataSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   235  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   236  /** \brief Modulator gain select of analog input path\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   237   * Definition in Ifx_DSADC.MODCFGx.B.GAINSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   239  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   240  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   241      IfxEdsadc_InputGain_factor1  = 0, /**< \brief Input gain factor: 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   242      IfxEdsadc_InputGain_factor2  = 1, /**< \brief Input gain factor: 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   243      IfxEdsadc_InputGain_factor4  = 2, /**< \brief Input gain factor: 4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   244      IfxEdsadc_InputGain_factor8  = 3, /**< \brief Input gain factor: 8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   245      IfxEdsadc_InputGain_factor16 = 4  /**< \brief Input gain factor: 16 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   246  } IfxEdsadc_InputGain;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   247  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   248  /** \brief specifies input multiplexer control mode defined in MODULE_EDSADC.MODCFG.B.INMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   250  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   251  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   252      IfxEdsadc_InputMuxControlMode_softwareControl = 0,  /**< \brief Trigger Event by software (INMUX follows INSEL) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   253      IfxEdsadc_InputMuxControlMode_fallingEdge     = 1,  /**< \brief Trigger Event on Falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   254      IfxEdsadc_InputMuxControlMode_risingEdge      = 2,  /**< \brief Trigger Event on Rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   255      IfxEdsadc_InputMuxControlMode_always          = 3   /**< \brief Trigger event on any edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   256  } IfxEdsadc_InputMuxControlMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   258  /** \brief Modulator input pin selection\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   259   * Definition in Ifx_DSADC.MODCFGx.B.INMUX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   260   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   261  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   262  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   263      IfxEdsadc_InputPin_a = 0,  /**< \brief Pin A connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   264      IfxEdsadc_InputPin_b = 1,  /**< \brief Pin B connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   265      IfxEdsadc_InputPin_c = 2,  /**< \brief Pin C connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   266      IfxEdsadc_InputPin_d = 3   /**< \brief Pin D connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   267  } IfxEdsadc_InputPin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   269  /** \brief Controls the data shifter after the integrator that selects the portion of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   270   * integrator data for the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   271   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   272  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   274      IfxEdsadc_IntegrationShiftControl_0 = 0,      /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   275      IfxEdsadc_IntegrationShiftControl_1,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   276      IfxEdsadc_IntegrationShiftControl_2,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   277      IfxEdsadc_IntegrationShiftControl_3,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   278      IfxEdsadc_IntegrationShiftControl_4,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   279      IfxEdsadc_IntegrationShiftControl_5           /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   280  } IfxEdsadc_IntegrationShiftControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   281  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   282  /** \brief Integrator window size\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   283   * Definition in Ifx_DSADC.IWCTR.B.IWS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   284   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   285  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   286  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   287      IfxEdsadc_IntegrationWindowSize_internalControl = 0,  /**< \brief Internal control: stop integrator after REPVAL+1 integration cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   288      IfxEdsadc_IntegrationWindowSize_externalControl = 1   /**< \brief External control: stop integrator when bit INTEN becomes 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   289  } IfxEdsadc_IntegrationWindowSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   291  /** \brief Integrator trigger mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   292   * NOTE: switch-first to bypassed before using other mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   293   * Definition in Ifx_EDSADC.DICFG.B.ITRMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   295  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   296  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   297      IfxEdsadc_IntegratorTrigger_bypassed     = 0, /**< \brief No integration trigger, integrator bypassed */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   298      IfxEdsadc_IntegratorTrigger_fallingEdge  = 1, /**< \brief Trigger event upon a falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   299      IfxEdsadc_IntegratorTrigger_risingEdge   = 2, /**< \brief Trigger event upon a rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   300      IfxEdsadc_IntegratorTrigger_alwaysActive = 3  /**< \brief No trigger, integrator active all the time */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   301  } IfxEdsadc_IntegratorTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   303  /** \brief Service request generation (main chain)\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   304   * Definition in Ifx_EDSADC.FCFGM.B.SRGM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   305   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   306  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   307  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   308      IfxEdsadc_MainServiceRequest_never          = 0,  /**< \brief Never, service requests disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   309      IfxEdsadc_MainServiceRequest_highGateSignal = 1,  /**< \brief While gate (selected trigger signal) is high */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   310      IfxEdsadc_MainServiceRequest_lowGateSignal  = 2,  /**< \brief While gate (selected trigger signal) is low */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   311      IfxEdsadc_MainServiceRequest_everyNewResult = 3   /**< \brief Always, for each new result value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   312  } IfxEdsadc_MainServiceRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   313  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   314  /** \brief Modulator divider factor for modulator clock\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   315   * Definition in Ifx_EDSADC.MODCFGx.B.DIVM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   317  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   318  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   319      IfxEdsadc_ModulatorClockDivider_div4 = 0,      /**< \brief f_mod = f_clk / 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   320      IfxEdsadc_ModulatorClockDivider_div6,          /**< \brief f_mod = f_clk / 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   321      IfxEdsadc_ModulatorClockDivider_div8,          /**< \brief f_mod = f_clk / 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   322      IfxEdsadc_ModulatorClockDivider_div10,         /**< \brief f_mod = f_clk / 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   323      IfxEdsadc_ModulatorClockDivider_div12,         /**< \brief f_mod = f_clk / 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   324      IfxEdsadc_ModulatorClockDivider_div14,         /**< \brief f_mod = f_clk / 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   325      IfxEdsadc_ModulatorClockDivider_div16,         /**< \brief f_mod = f_clk / 16  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   326      IfxEdsadc_ModulatorClockDivider_div18          /**< \brief f_mod = f_clk / 18  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   327  } IfxEdsadc_ModulatorClockDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   329  /** \brief Defines the way the modulator clock is generated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   330   * Definition in Ifx_DSADC.GLOBCFG.B.USC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   331   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   332  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   333  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   334      IfxEdsadc_ModulatorClockGeneration_syncMode   = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   335      IfxEdsadc_ModulatorClockGeneration_unsyncMode = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   336  } IfxEdsadc_ModulatorClockGeneration;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   338  /** \brief Enable the offset compensation filter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   339   * Definition in Ifx_DSADC.FCFGM.B.OCEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   340   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   341  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   342  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   343      IfxEdsadc_OffsetCompensationFilter_disabled        = 0,  /**< \brief Offset Compensation filter disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   344      IfxEdsadc_OffsetCompensationFilter_enablewithRateA = 1,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   345      IfxEdsadc_OffsetCompensationFilter_enablewithRateB = 2,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   346      IfxEdsadc_OffsetCompensationFilter_enablewithRateC = 3,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate C */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   347      IfxEdsadc_OffsetCompensationFilter_enablewithRateD = 4,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate D */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   348      IfxEdsadc_OffsetCompensationFilter_enablewithRateE = 5,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate E */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   349      IfxEdsadc_OffsetCompensationFilter_enablewithRateF = 6,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate F */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   350      IfxEdsadc_OffsetCompensationFilter_enablewithRateG = 7   /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate G */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   351  } IfxEdsadc_OffsetCompensationFilter;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   353  /** \brief Overshoot Compensation Enable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   354   * Defined in fx_DSADC.FCFGM.B.OVCEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   355   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   356  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   357  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   358      IfxEdsadc_OvershootCompensation_disabled = 0,  /**< \brief Disabled, feed FIR filter directly */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   359      IfxEdsadc_OvershootCompensation_enabled  = 1   /**< \brief Attenuate response to fast edges */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   360  } IfxEdsadc_OvershootCompensation;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   362  /** \brief Rectifier sign source\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   363   * Selects the sign signal that is to be delayed.\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   364   * Definition in Ifx_DSADC.RECT.B.SSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   365   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   366  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   367  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   368      IfxEdsadc_RectifierSignSource_onChipGenerator = 0,  /**< \brief On-chip carrier generator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   369      IfxEdsadc_RectifierSignSource_nextChannel     = 1,  /**< \brief Sign of result of next channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   370      IfxEdsadc_RectifierSignSource_externalA       = 2,  /**< \brief External sign signal A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   371      IfxEdsadc_RectifierSignSource_externalB       = 3   /**< \brief External sign signal B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   372  } IfxEdsadc_RectifierSignSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   373  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   374  /** \brief Restart the filter chain when an integration window starts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   375   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   376  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   377  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   378      IfxEdsadc_RestartFilterChain_on  = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   379      IfxEdsadc_RestartFilterChain_off = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   380  } IfxEdsadc_RestartFilterChain;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   382  /** \brief specifies result display mode (signed/unsigned)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   383   * Definition in Ifx_DSADC.DICFG.B.RDM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   385  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   386  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   387      IfxEdsadc_ResultDisplayMode_signed   = 0, /**< \brief Signed: result values range from -215 to +215 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   388      IfxEdsadc_ResultDisplayMode_unsigned = 1  /**< \brief Unsigned: result values range from 0 to +216 (shifted by 215) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   389  } IfxEdsadc_ResultDisplayMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   390  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   391  /** \brief Demodulator sample clock source select\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   392   * Definition in Ifx_EDSADC.DICFG.B.CSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   393   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   394  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   395  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   396      IfxEdsadc_SampleClockSource_internal = 0,  /**< \brief Internal clock */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   397      IfxEdsadc_SampleClockSource_inputA   = 3,  /**< \brief External clock, from Input A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   398      IfxEdsadc_SampleClockSource_inputB   = 4,  /**< \brief External clock, from Input B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   399      IfxEdsadc_SampleClockSource_inputC   = 5   /**< \brief External clock, from Input C */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   400  } IfxEdsadc_SampleClockSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   402  /** \brief Service request fifo level
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   403   * Definition in Ifx_EDSADC.RFC.B.SRLVL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   405  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   406  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   407      IfxEdsadc_ServiceRequestFifolevel_1 = 0,      /**< \brief Generate a service request when Fifo contain level 1 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   408      IfxEdsadc_ServiceRequestFifolevel_2,          /**< \brief Generate a service request when Fifo contain level 2 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   409      IfxEdsadc_ServiceRequestFifolevel_3,          /**< \brief Generate a service request when Fifo contain level 3 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   410      IfxEdsadc_ServiceRequestFifolevel_4           /**< \brief Generate a service request when Fifo contain level 4 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   411  } IfxEdsadc_ServiceRequestFifolevel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   413  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   414   * Definition in Ifx_EDSADC.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   415   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   416  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   417  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   418      IfxEdsadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   419      IfxEdsadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   420  } IfxEdsadc_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   422  /** \brief Defines when the slew rate filter is activated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   424  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   425  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   426      IfxEdsadc_StepDetectionMode_lastInput       = 0, /**< \brief Compare threshold to difference of current and last input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   427      IfxEdsadc_StepDetectionMode_secondlastInput = 1  /**< \brief Compare threshold to difference of current and second-last input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   428  } IfxEdsadc_StepDetectionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   430  /** \brief Adjusts the analog circuitry to the supply voltage used in the application
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   431   * system.Defined In defined in MODULE_EDSADC.GLOBCFG.B.SUPLEV
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   433  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   434  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   435      IfxEdsadc_SupplyVoltageLevel_automaticControl = 0,  /**< \brief voltage range is controlled by the power supply */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   436      IfxEdsadc_SupplyVoltageLevel_upperVoltage     = 1,  /**< \brief Upper voltage range: assume a 5 V power supply is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   437      IfxEdsadc_SupplyVoltageLevel_lowerVoltage     = 2   /**< \brief Lower voltage range: assume a 3.3 V power supply is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   438  } IfxEdsadc_SupplyVoltageLevel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   439  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   440  /** \brief OCDS Suspend Control (OCDS.SUS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   441   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   442  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   443  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   444      IfxEdsadc_SuspendMode_none = 0,  /**< \brief No suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   445      IfxEdsadc_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   446      IfxEdsadc_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   447  } IfxEdsadc_SuspendMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   448  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   449  /** \brief Time Stamp Counter Clock Selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   450   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   451  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   452  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   453      IfxEdsadc_TimeStampCounterClockSelection_div1 = 0,  /**< \brief fTSTMP = fMOD */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   454      IfxEdsadc_TimeStampCounterClockSelection_div2 = 1,  /**< \brief fTSTMP = fMOD/2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   455      IfxEdsadc_TimeStampCounterClockSelection_div4 = 2,  /**< \brief fTSTMP = fMOD/4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   456      IfxEdsadc_TimeStampCounterClockSelection_div8 = 3   /**< \brief fTSTMP = fMOD/8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   457  } IfxEdsadc_TimeStampCounterClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   458  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   459  /** \brief Timestamp trigger mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   460   * Definition in Ifx_EDSADC.DICFG.B.TSTRMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   462  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   463  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   464      IfxEdsadc_TimestampTrigger_noTrigger   = 0,  /**< \brief No timestamp trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   465      IfxEdsadc_TimestampTrigger_fallingEdge = 1,  /**< \brief Trigger event upon a falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   466      IfxEdsadc_TimestampTrigger_risingEdge  = 2,  /**< \brief Trigger event upon a rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   467      IfxEdsadc_TimestampTrigger_eachEdge    = 3   /**< \brief Trigger event upon each edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   468  } IfxEdsadc_TimestampTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   469  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   470  /** \brief Trigger select\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   471   * Definition in Ifx_EDSADC.DICFG.B.TRSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   473  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   474  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   475      IfxEdsadc_TriggerInput_a = 0,   /**< \brief GTM EDSADC Trigger 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   476      IfxEdsadc_TriggerInput_b = 1,   /**< \brief GTM EDSADC Trigger 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   477      IfxEdsadc_TriggerInput_c = 2,   /**< \brief GTM ADC Trigger 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   478      IfxEdsadc_TriggerInput_d = 3,   /**< \brief GTM ADC Trigger 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   479      IfxEdsadc_TriggerInput_e = 4,   /**< \brief Trigger/gate via port input P33.0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   480      IfxEdsadc_TriggerInput_f = 5,   /**< \brief Trigger/gate via port input P33.4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   481      IfxEdsadc_TriggerInput_g = 6,   /**< \brief ERU pattern detection output 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   482      IfxEdsadc_TriggerInput_h = 7,   /**< \brief Trigger/gate, channel 0,input H */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   483      IfxEdsadc_TriggerInput_i = 8,   /**< \brief Trigger/gate, channel 0,input I */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   484      IfxEdsadc_TriggerInput_j = 9,   /**< \brief Trigger/gate, channel 0,input J */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   485      IfxEdsadc_TriggerInput_k = 10,  /**< \brief GTM ADC Trigger 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   486      IfxEdsadc_TriggerInput_l = 11,  /**< \brief GTM ADC Trigger 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   487      IfxEdsadc_TriggerInput_m = 12,  /**< \brief GTM DSADC Trigger 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   488      IfxEdsadc_TriggerInput_n = 13,  /**< \brief GTM DSADC Trigger 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   489      IfxEdsadc_TriggerInput_o = 14,  /**< \brief Trigger/gate, channel 0,input O */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   490      IfxEdsadc_TriggerInput_p = 15   /**< \brief Trigger/gate, channel 0,input P */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   491  } IfxEdsadc_TriggerInput;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   492  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   493  /** \brief Controls the dithering function for each modulator separately
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   494   * Definition in Ifx_DSADC.MODCFG.B.DITHEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   496  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   497  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   498      IfxEdsadc_dithering_disabled = 0,  /**< \brief dithering function disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   499      IfxEdsadc_dithering_enabled  = 1   /**< \brief dithering function enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   500  } IfxEdsadc_dithering;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   501  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   502  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   504  /** \brief Allows copying of bitfield AMX into bitfield TIMESTAMP
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   505   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   506  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   507  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   508      IfxEdsadc_AnalogMux_doNotCopyAmx = 0,  /**< \brief Do not copy, timestamp uses all 16 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   509      IfxEdsadc_AnalogMux_copyAmx      = 1   /**< \brief Copy AMX to bits TIMESTAMP[15:14], timestamp uses lower 14 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   510  } IfxEdsadc_AnalogMux;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   511  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   512  /** \brief Timestamp Counter Run Control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   513   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   514  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   515  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   516      IfxEdsadc_TimeStampCounterControl_off = 0,  /**< \brief Timestamp counter is off */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   517      IfxEdsadc_TimeStampCounterControl_on  = 1   /**< \brief Timestamp counter is counting at the rate selected by bitfield TSCLK */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   518  } IfxEdsadc_TimeStampCounterControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   519  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   520  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   521  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   523  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   524  /** \brief Modulator Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   526  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   527  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   528      float32                        modulatorClockPeriod;         /**< \brief Modulator clock period */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   529      IfxEdsadc_InputGain            inputGain;                    /**< \brief Modulator gain select of analog input path */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   530      IfxEdsadc_AnalogClockSyncDelay analogClockSyncDelay;         /**< \brief Define the delay in clock cycle after sync signal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   531      IfxEdsadc_InputConfig          positiveInput;                /**< \brief Modulator configuration of positive input line */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   532      IfxEdsadc_InputConfig          negativeInput;                /**< \brief Modulator configuration of negative input line */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   533      IfxEdsadc_InputPin             inputPin;                     /**< \brief Modulator input pin selection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   534      IfxEdsadc_dithering            ditheringEnabled;             /**< \brief Control the Dithering Function for each modulator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   535      boolean                        integratorResetEnabled;       /**< \brief Control the modulator overload handling */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   536      boolean                        inputMuxActionControl;        /**< \brief Defines the mechanism by which the input multiplexer is controlled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   537      IfxEdsadc_InputMuxControlMode  triggerEvent;                 /**< \brief Defines the condition for a trigger event to control the input multiplexer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   538  } IfxEdsadc_ModulatorConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   539  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   540  /** \addtogroup IfxLld_Edsadc_Std_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   541   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   542  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   543  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   544  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   545  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   547  /** \brief Returns the module's suspend state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   548   * TRUE :if module is suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   549   * FALSE:if module is not yet suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   550   * \param edsadc Pointer to EDSADC module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   551   * \return Suspend status (TRUE / FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   552   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   553  IFX_INLINE boolean IfxEdsadc_isModuleSuspended(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   555  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   556   * \param edsadc pointer to EDSADC registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   557   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   558   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   560  IFX_INLINE void IfxEdsadc_setSleepMode(Ifx_EDSADC *edsadc, IfxEdsadc_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   561  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   562  /** \brief Configure the Module to Hard/Soft suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   563   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   564   * \param edsadc Pointer to EDSADC module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   565   * \param mode Module suspend mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   566   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   567   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   568  IFX_INLINE void IfxEdsadc_setSuspendMode(Ifx_EDSADC *edsadc, IfxEdsadc_SuspendMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   569  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   570  /** \brief Enables the conversion of multiple channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   571   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   572   * \param modulatorMask the modulator which should be running (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   573   * \param channelMask the channels which should be scanned (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   574   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   575   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   576   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   578   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   579  IFX_INLINE void IfxEdsadc_startScan(Ifx_EDSADC *edsadc, uint32 modulatorMask, uint32 channelMask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   580  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   581  /** \brief Disables the conversion of multiple channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   582   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   583   * \param modulatorMask the modulator which should be disabled (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   584   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   585   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   586   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   587   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   589  IFX_INLINE void IfxEdsadc_stopScan(Ifx_EDSADC *edsadc, uint32 modulatorMask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   592  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   593  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   594  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   595  /** \brief Disables the module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   596   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   598   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   599  IFX_EXTERN void IfxEdsadc_disableModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   600  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   601  /** \brief Enables the module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   602   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   603   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   604   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   605  IFX_EXTERN void IfxEdsadc_enableModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   606  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   607  /** \brief resets EDSADC kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   608   * \param edsadc pointer to EDSADC registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   609   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   611  IFX_EXTERN void IfxEdsadc_resetModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   613  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   615  /** \addtogroup IfxLld_Edsadc_Std_Support
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   616   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   617  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   618  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   619  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   620  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   622  /** \brief Get the main comb decimation factor
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   623   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   624   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   625   * \return the main comb decimation factor
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   626   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   627  IFX_INLINE uint16 IfxEdsadc_getMainCombDecimation(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   629  /** \brief Get result from the main chain
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   630   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   631   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   632   * \return result from the main chain
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   633   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   634   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   635   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   636   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   637  IFX_INLINE sint16 IfxEdsadc_getMainResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   639  /** \brief Get the subsequent result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   640   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   641  IFX_INLINE sint32 IfxEdsadc_getSubsequentResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   642  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   643  /** \brief Return TRUE if EDSADC module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   644   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   645   * \return TRUE if EDSADC module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   646   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   647  IFX_INLINE boolean IfxEdsadc_isModuleEnabled(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   648  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   649  /** \brief Set the carrier waveform mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   650   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   651   * \param waveformMode the waveform mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   652   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   653   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   654  IFX_INLINE void IfxEdsadc_setCarrierMode(Ifx_EDSADC *edsadc, IfxEdsadc_CarrierWaveformMode waveformMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   656  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   657  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   658  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   659  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   660  /** \brief Get the sample frequency of the integrator output in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   661   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   662   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   663   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   664   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   665  IFX_EXTERN float32 IfxEdsadc_getIntegratorOutFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   667  /** \brief Get the sample frequency of the main COMB filter output in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   668   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   669   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   670   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   671   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   672  IFX_EXTERN float32 IfxEdsadc_getMainCombOutFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   674  /** \brief Estimate the group delay of main-chain filters in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   675   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   676   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   677   * \return delay in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   678   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   679  IFX_EXTERN float32 IfxEdsadc_getMainGroupDelay(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   681  /** \brief Get the modulator clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   682   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   683   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   684   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   685   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   686  IFX_EXTERN float32 IfxEdsadc_getModulatorClockFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   687  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   688  /** \brief Get the input frequency of EDSADC in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   689   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   690   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   691   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   692  IFX_EXTERN float32 IfxEdsadc_getModulatorInputClockFreq(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   693  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   694  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   695  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   696  /** \addtogroup IfxLld_Edsadc_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   697   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   698  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   699  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   700  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   701  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   702  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   703  /** \brief Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   704   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   705   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   706   * \return Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   708  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxEdsadc_getAuxSrc(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   710  /** \brief Get the interrupt source register for a Main event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   711   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   712   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   713   * \return Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   714   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   715  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxEdsadc_getMainSrc(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   716  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   717  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   718  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   719  /** \addtogroup IfxLld_Edsadc_Std_IO
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   720   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   721  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   722  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   723  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   724  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   725  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   726  /** \brief Initializes a CGPWM output
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   727   * \param cgPwm the CGPWM Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   728   * \param pinMode the pin output mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   729   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   730   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   731   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   732  IFX_INLINE void IfxEdsadc_initCgPwmPin(const IfxEdsadc_Cgpwm_Out *cgPwm, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   733  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   734  /** \brief Initializes a CIN input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   735   * \param cIn the CIN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   736   * \param cInMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   737   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   738   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   739   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   740  IFX_INLINE void IfxEdsadc_initCinPin(const IfxEdsadc_Cin_In *cIn, IfxPort_InputMode cInMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   741  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   742  /** \brief Initializes a COUT output
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   743   * \param cout the COUT Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   744   * \param pinMode the pin output mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   745   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   746   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   748  IFX_INLINE void IfxEdsadc_initCoutPin(const IfxEdsadc_Cout_Out *cout, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   750  /** \brief Initializes a DIN input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   751   * \param dIn the DIN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   752   * \param dInMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   753   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   754   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   755   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   756  IFX_INLINE void IfxEdsadc_initDinPin(const IfxEdsadc_Din_In *dIn, IfxPort_InputMode dInMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   757  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   758  /** \brief Initializes a DS input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   759   * \param dsn the DSN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   760   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   761   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   762   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   763   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   764  IFX_INLINE void IfxEdsadc_initDsnPin(const IfxEdsadc_Dsn_In *dsn, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   765  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   766  /** \brief Initializes a DS input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   767   * \param dsp the DSP Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   768   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   769   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   770   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   771   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   772  IFX_INLINE void IfxEdsadc_initDspPin(const IfxEdsadc_Dsp_In *dsp, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   774  /** \brief Initializes a ITR input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   775   * \param itr the ITR Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   776   * \param itrMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   777   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   778   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   779   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   780  IFX_INLINE void IfxEdsadc_initItrPin(const IfxEdsadc_Itr_In *itr, IfxPort_InputMode itrMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   781  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   782  /** \brief Initializes a SG input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   783   * \param sg the SG Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   784   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   785   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   786   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   787   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   788  IFX_INLINE void IfxEdsadc_initSgPin(const IfxEdsadc_Sg_In *sg, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   789  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   790  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   791  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   792  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   793  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   794  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   795  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   796  /** \brief Returns the positive input line configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   797   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   798   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   799   * \return Positive Input Line Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   800   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   801  IFX_INLINE uint8 IfxEdsadc_getPositiveInputLineConfiguration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   802  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   803  /** \brief Returns the negative input line configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   804   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   805   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   806   * \return Negative Input Line Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   807   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   808  IFX_INLINE uint8 IfxEdsadc_getNegativeInputLineConfiguration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   809  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   810  /** \brief Sets the Offset compensation Value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   811   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   812   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   813   * \param value Value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   814   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   815   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   816  IFX_INLINE void IfxEdsadc_setOffsetCompensationValue(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   818  /** \brief Returns the address of the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   819   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   820   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   821   * \return Address of the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   822   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   823  IFX_INLINE uint32 *IfxEdsadc_getResultRegisterAddress(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   824  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   825  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   826  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   827  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   828  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   829  /** \brief set common mode voltage Parameters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   830   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   831   * \param channel specifies channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   832   * \param voltage select Fractional reference Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   833   * \param refMode Fractional Reference Voltage Enable/ Disable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   834   * \param hsvMode Enable / Disable Half Supply Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   835   * \param cmhvMode Enable / Disable Common Mode Hold Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   836   * \param positiveInput Defines the connection of the respective positive input y to the common mode hold voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   837   * \param negativeInput Defines the connection of the respective negative input y to the common mode hold voltage.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   838   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   839   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   840  IFX_EXTERN void IfxEdsadc_setCommonModeVoltage(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_FractionalRefVoltageSelection voltage, IfxEdsadc_FractionalRefVoltage refMode, IfxEdsadc_HalfSupplyVoltage hsvMode, IfxEdsadc_CommonModeHoldVoltage cmhvMode, uint8 positiveInput, uint8 negativeInput);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   842  /** \brief configure gain correction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   843   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   844   * \param channel Specifies channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   845   * \param gainFactor Multiplication Factor for gain correction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   846   * \param cicShift Position of CIC filter output shifter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   847   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   848   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   849  IFX_EXTERN void IfxEdsadc_setGainCorrectionFactor(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   851  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   852   * \param edsadc Pointer to module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   853   * \param channel specifies channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   854   * \param timeStampCounterClock Time Stamp Counter Clock selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   855   * \param runControl TimeStamp Counter Run Control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   856   * \param analogMuxCopy Analog MUX Setting Copy Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   857   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   858   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   859  IFX_EXTERN void IfxEdsadc_setTimeStampCounter(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_TimeStampCounterClockSelection timeStampCounterClock, IfxEdsadc_TimeStampCounterControl runControl, IfxEdsadc_AnalogMux analogMuxCopy);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   861  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   862   * \param edsadc Pointer to EDSADC SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   863   * \param channel chanel no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   864   * \param gainFactor Multiplication Factor for Gain Correction During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   865   * \param cicShift Position of the CIC Filter Output Shifter During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   866   * \param cicDecimationRate Decimation Rate of the CIC Filter During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   867   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   868   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   869  IFX_EXTERN void IfxEdsadc_setGainControl(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift, uint8 cicDecimationRate);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   870  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   871  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   872   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   873   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   874   * \param calFactor Multiplication Factor for Gain Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   875   * \param calTarget Target Value for Calibrated Fullscale
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   876   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   877   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   878  IFX_EXTERN void IfxEdsadc_setGainCalibration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 calFactor, uint16 calTarget);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   879  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   880  /** \brief Set the Modulator configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   881   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   882   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   883   * \param config Modulator Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   884   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   885   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   886  IFX_EXTERN void IfxEdsadc_configureModulator(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_ModulatorConfig *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   887  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   888  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   889  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   890  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   891  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   892  IFX_INLINE uint16 IfxEdsadc_getMainCombDecimation(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   893  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   894      return (uint16)(1U + edsadc->CH[channel].FCFGC.B.CFMDF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   895  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   896  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   897  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   898  IFX_INLINE sint16 IfxEdsadc_getMainResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   899  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   900      return edsadc->CH[channel].RESM.B.RESULTLO;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   901  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   902  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   903  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   904  IFX_INLINE sint32 IfxEdsadc_getSubsequentResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   905  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   906      return (sint32)(edsadc->CH[channel].RESM.U);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   907  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   908  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   909  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   910  IFX_INLINE void IfxEdsadc_initCgPwmPin(const IfxEdsadc_Cgpwm_Out *cgPwm, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   911  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   912      if (cgPwm->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   913      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   914          IfxPort_setPinModeOutput(cgPwm->pin.port, cgPwm->pin.pinIndex, pinMode, cgPwm->select);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   915          IfxPort_setPinPadDriver(cgPwm->pin.port, cgPwm->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   916      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   917  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   918  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   920  IFX_INLINE void IfxEdsadc_initCinPin(const IfxEdsadc_Cin_In *cIn, IfxPort_InputMode cInMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   921  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   922      if (cIn->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   923      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   924          IfxPort_setPinModeInput(cIn->pin.port, cIn->pin.pinIndex, cInMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   925          IfxPort_setPinPadDriver(cIn->pin.port, cIn->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   926      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   927  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   928  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   929  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   930  IFX_INLINE void IfxEdsadc_initCoutPin(const IfxEdsadc_Cout_Out *cout, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   931  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   932      if (cout->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   933      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   934          IfxPort_setPinModeOutput(cout->pin.port, cout->pin.pinIndex, pinMode, cout->select);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   935          IfxPort_setPinPadDriver(cout->pin.port, cout->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   936      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   937  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   938  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   939  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   940  IFX_INLINE void IfxEdsadc_initDinPin(const IfxEdsadc_Din_In *dIn, IfxPort_InputMode dInMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   941  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   942      if (dIn->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   943      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   944          IfxPort_setPinModeInput(dIn->pin.port, dIn->pin.pinIndex, dInMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   945          IfxPort_setPinPadDriver(dIn->pin.port, dIn->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   946      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   947  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   948  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   949  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   950  IFX_INLINE void IfxEdsadc_initDsnPin(const IfxEdsadc_Dsn_In *dsn, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   951  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   952      if (dsn->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   953      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   954          IfxPort_setPinModeInput(dsn->pin.port, dsn->pin.pinIndex, pinMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   955          IfxPort_setPinPadDriver(dsn->pin.port, dsn->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   956      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   957  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   958  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   959  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   960  IFX_INLINE void IfxEdsadc_initDspPin(const IfxEdsadc_Dsp_In *dsp, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   961  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   962      if (dsp->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   963      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   964          IfxPort_setPinModeInput(dsp->pin.port, dsp->pin.pinIndex, pinMode);
	fcall	.cocofun_8
.L656:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
	call	IfxPort_setPinMode
.L342:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   965          IfxPort_setPinPadDriver(dsp->pin.port, dsp->pin.pinIndex, padDriver);
	fcall	.cocofun_9
.L657:
	call	IfxPort_setPinPadDriver

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   962      if (dsp->pin.port != NULL_PTR)      (inlined)
.L16:
.L15:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   175          }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   176  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   177          const IfxEdsadc_Cin_In *cin = pins->cin;
	ld.a	a15,[a12]
.L447:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   178  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   179          if (cin != NULL_PTR)
	jz.a	a15,.L17
.L658:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   180          {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   181              IfxEdsadc_initCinPin(cin, pins->cinMode, pins->pinDriver);
	ld.b	d15,[a12]4
.L659:
	fcall	.cocofun_7
.L346:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   922      if (cIn->pin.port != NULL_PTR)      (inlined)
	jz.a	a4,.L18
.L354:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     2   * \file IfxEdsadc.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     3   * \brief EDSADC  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     4   * \ingroup IfxLld_Edsadc
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    41   * \defgroup IfxLld_Edsadc_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    42   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    43   * \defgroup IfxLld_Edsadc_Std_Operative Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    44   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    45   * \defgroup IfxLld_Edsadc_Std_Support Support Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    46   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    47   * \defgroup IfxLld_Edsadc_Std_Interrupt Interrupt Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    48   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    49   * \defgroup IfxLld_Edsadc_Std_IO IO Pin Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    50   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    53  #ifndef IFXEDSADC_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    54  #define IFXEDSADC_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    60  #include "_Impl/IfxEdsadc_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    61  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    62  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    63  #include "_PinMap/IfxEdsadc_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    64  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    65  #include "IfxEdsadc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    66  #include "IfxEdsadc_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    68  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    69  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    70  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    71  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    72  /** \addtogroup IfxLld_Edsadc_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    73   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    74  /** \brief Analog Clock Synchronization Delay
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    75   * Definition in Ifx_DSADC.MODCFG.B.ACSD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    79      IfxEdsadc_AnalogClockSyncDelay_noDelay     = 0,    /**< \brief no delay */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    80      IfxEdsadc_AnalogClockSyncDelay_cycleDelay1 = 1,    /**< \brief Delay of 1 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    81      IfxEdsadc_AnalogClockSyncDelay_cycleDelay2,        /**< \brief Delay of 2 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    82      IfxEdsadc_AnalogClockSyncDelay_cycleDelay3,        /**< \brief Delay of 3 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    83      IfxEdsadc_AnalogClockSyncDelay_cycleDelay4,        /**< \brief Delay of 4 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    84      IfxEdsadc_AnalogClockSyncDelay_cycleDelay5,        /**< \brief Delay of 5 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    85      IfxEdsadc_AnalogClockSyncDelay_cycleDelay6,        /**< \brief Delay of 6 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    86      IfxEdsadc_AnalogClockSyncDelay_cycleDelay7         /**< \brief Delay of 7 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    87  } IfxEdsadc_AnalogClockSyncDelay;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    89  /** \brief Service request generation (auxiliary)\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    90   * Definition in Ifx_EDSADC.FCFGM.B.SRGA
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    91   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    92  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    93  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    94      IfxEdsadc_AuxServiceRequest_never          = 0,  /**< \brief Never, service requests disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    95      IfxEdsadc_AuxServiceRequest_compEvent      = 1,  /**< \brief As selected by bitfield ESEL */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    96      IfxEdsadc_AuxServiceRequest_timestampEvent = 2,  /**< \brief Timestamp Event */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    97      IfxEdsadc_AuxServiceRequest_altSource      = 3   /**< \brief Alternate source: Capturing of a sign delay value to register CGSYNCx (x = 0 - 5) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    98  } IfxEdsadc_AuxServiceRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   100  /** \brief Carrier generation mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   101   * Definition in Ifx_EDSADC.CGCFG.B.CGMOD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   103  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   104  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   105      IfxEdsadc_CarrierWaveformMode_stopped  = 0,  /**< \brief Carrier Generator stopped */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   106      IfxEdsadc_CarrierWaveformMode_square   = 1,  /**< \brief Carrier Generator generates square wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   107      IfxEdsadc_CarrierWaveformMode_triangle = 2,  /**< \brief Carrier Generator generates triangle wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   108      IfxEdsadc_CarrierWaveformMode_sine     = 3   /**< \brief Carrier Generator generates sine wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   109  } IfxEdsadc_CarrierWaveformMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   111  /** \brief Common Mode Hold Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   115      IfxEdsadc_CommonModeHoldVoltage_disable = 0,  /**< \brief VCMH is off */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   116      IfxEdsadc_CommonModeHoldVoltage_enable  = 1   /**< \brief VCMH is generated */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   117  } IfxEdsadc_CommonModeHoldVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   119  /** \brief Select the data to be returned when register RESM is read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   120   * Definition in Ifx_DSADC.DICFG.B.DRM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   121   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   122  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   123  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   124      IfxEdsadc_DataRead_signOnHighbit      = 0,  /**< \brief Single: Issue one 16-bit value per read access (sign on high bits) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   125      IfxEdsadc_DataRead_timestampOnHighbit = 1,  /**< \brief Single: Issue one 16-bit value per read access (timestamp on high bits) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   126      IfxEdsadc_DataRead_double             = 2   /**< \brief Double: Issue two 16-bit values per read access */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   127  } IfxEdsadc_DataRead;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   129  /** \brief Data stream select
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   130   * Definition in Ifx_DSADC.DICFG.B.DSS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   131   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   132  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   133  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   134      IfxEdsadc_DataStream_onChipModulator        = 0,  /**< \brief select data stream from on chip modulator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   135      IfxEdsadc_DataStream_doubleDataClockEdge    = 3,  /**< \brief External modulator, use rising and falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   136      IfxEdsadc_DataStream_directFallingClockEdge = 4,  /**< \brief External modulator, use each falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   137      IfxEdsadc_DataStream_directRisingClockEdge  = 5,  /**< \brief External modulator, use each rising clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   138      IfxEdsadc_DataStream_secondFallingClockEdge = 6,  /**< \brief External modulator, use every 2nd falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   139      IfxEdsadc_DataStream_secondRisingClockEdge  = 7   /**< \brief External modulator, use every 2nd rising clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   140  } IfxEdsadc_DataStream;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   142  /** \brief Trimming Value for Dithering function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   143   * Definition in Ifx_DSADC.GLOBCFG.B.DITRIM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   144   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   145  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   146  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   147      IfxEdsadc_DitheringIntensity_minimum = 0,  /**< \brief Minimum dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   148      IfxEdsadc_DitheringIntensity_low     = 1,  /**< \brief Low dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   149      IfxEdsadc_DitheringIntensity_medium  = 2,  /**< \brief Medium dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   150      IfxEdsadc_DitheringIntensity_high    = 3   /**< \brief High */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   151  } IfxEdsadc_DitheringIntensity;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   152  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   153  /** \brief Define when comparator event is generated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   154   * Definition in Ifx_DSADC.FCFGM.B.ESEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   156  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   157  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   158      IfxEdsadc_EventSelect_everyNewResult = 0,  /**< \brief Always, for each new result value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   159      IfxEdsadc_EventSelect_insideBoundry  = 1,  /**< \brief If result is inside the boundary band */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   160      IfxEdsadc_EventSelect_outsideBoundry = 2   /**< \brief If result is outside the boundary band */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   161  } IfxEdsadc_EventSelect;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   163  /** \brief Defines the duration of the additional filter effect, based on values input to the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   164   * filter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   165   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   166  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   167  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   168      IfxEdsadc_FilterRunTimeInputCycle_2  = 0, /**< \brief 2 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   169      IfxEdsadc_FilterRunTimeInputCycle_4  = 1, /**< \brief 4 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   170      IfxEdsadc_FilterRunTimeInputCycle_8  = 2, /**< \brief 8 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   171      IfxEdsadc_FilterRunTimeInputCycle_16 = 3  /**< \brief 16 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   172  } IfxEdsadc_FilterRunTimeInputCycle;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   173  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   174  /** \brief Specifies Slew Rate Filter Strength
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   175   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   176  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   177  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   178      IfxEdsadc_FilterStrength_minimum = 0,  /**< \brief Minimum filter effect, early attenuation, linear operation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   179      IfxEdsadc_FilterStrength_weak    = 1,  /**< \brief Weak filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   180      IfxEdsadc_FilterStrength_medium  = 2,  /**< \brief Medium filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   181      IfxEdsadc_FilterStrength_maximum = 3   /**< \brief maximum filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   182  } IfxEdsadc_FilterStrength;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   184  /** \brief Fractional Reference Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   185   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   186  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   187  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   188      IfxEdsadc_FractionalRefVoltage_disable = 0,  /**< \brief VREFX is not connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   189      IfxEdsadc_FractionalRefVoltage_enable  = 1   /**< \brief VREFX is connected, value according to VREFXSEL */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   190  } IfxEdsadc_FractionalRefVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   192  /** \brief Fraction reference voltage selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   194  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   195  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   196      IfxEdsadc_FractionalRefVoltageSelection_div2  = 0, /**< \brief VREFX = VAREF / 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   197      IfxEdsadc_FractionalRefVoltageSelection_div4  = 1, /**< \brief VREFX = VAREF / 4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   198      IfxEdsadc_FractionalRefVoltageSelection_div8  = 2, /**< \brief VREFX = VAREF / 8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   199      IfxEdsadc_FractionalRefVoltageSelection_div16 = 3  /**< \brief VREFX = VAREF / 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   200  } IfxEdsadc_FractionalRefVoltageSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   202  /** \brief Half Supply Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   204  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   205  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   206      IfxEdsadc_HalfSupplyVoltage_disable = 0,  /**< \brief VDDM / 2 is not connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   207      IfxEdsadc_HalfSupplyVoltage_enable  = 1   /**< \brief VDDM / 2 is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   208  } IfxEdsadc_HalfSupplyVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   209  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   210  /** \brief Modulator configuration of positive/negative input line\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   211   * Definition in Ifx_DSADC.MODCFGx.B.INCFGP and Ifx_DSADC.MODCFGx.B.INCFGN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   213  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   214  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   215      IfxEdsadc_InputConfig_inputPin          = 0,  /**< \brief Modulator input connected to external pin */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   216      IfxEdsadc_InputConfig_supplyVoltage     = 1,  /**< \brief Modulator input connected to supply voltage V_ddm */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   217      IfxEdsadc_InputConfig_commonModeVoltage = 2,  /**< \brief Modulator input connected to common mode voltage V_cm */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   218      IfxEdsadc_InputConfig_referenceGround   = 3   /**< \brief Modulator input connected to reference ground V_ref */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   219  } IfxEdsadc_InputConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   221  /** \brief Demodulator input data source selection\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   222   * Definition in Ifx_EDSADC.DICFG.B.DSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   223   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   224  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   225  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   226      IfxEdsadc_InputDataSource_directInputA   = 0,  /**< \brief External, from input A, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   227      IfxEdsadc_InputDataSource_invertedInputA = 1,  /**< \brief External, from input A, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   228      IfxEdsadc_InputDataSource_directInputB   = 2,  /**< \brief External, from input B, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   229      IfxEdsadc_InputDataSource_invertedInputB = 3,  /**< \brief External, from input B, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   230      IfxEdsadc_InputDataSource_directInputC   = 4,  /**< \brief External, from input C, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   231      IfxEdsadc_InputDataSource_invertedInputC = 5,  /**< \brief External, from input C, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   232      IfxEdsadc_InputDataSource_directInputD   = 6,  /**< \brief External, from input D, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   233      IfxEdsadc_InputDataSource_invertedInputD = 7   /**< \brief External, from input D, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   234  } IfxEdsadc_InputDataSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   235  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   236  /** \brief Modulator gain select of analog input path\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   237   * Definition in Ifx_DSADC.MODCFGx.B.GAINSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   239  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   240  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   241      IfxEdsadc_InputGain_factor1  = 0, /**< \brief Input gain factor: 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   242      IfxEdsadc_InputGain_factor2  = 1, /**< \brief Input gain factor: 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   243      IfxEdsadc_InputGain_factor4  = 2, /**< \brief Input gain factor: 4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   244      IfxEdsadc_InputGain_factor8  = 3, /**< \brief Input gain factor: 8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   245      IfxEdsadc_InputGain_factor16 = 4  /**< \brief Input gain factor: 16 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   246  } IfxEdsadc_InputGain;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   247  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   248  /** \brief specifies input multiplexer control mode defined in MODULE_EDSADC.MODCFG.B.INMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   250  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   251  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   252      IfxEdsadc_InputMuxControlMode_softwareControl = 0,  /**< \brief Trigger Event by software (INMUX follows INSEL) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   253      IfxEdsadc_InputMuxControlMode_fallingEdge     = 1,  /**< \brief Trigger Event on Falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   254      IfxEdsadc_InputMuxControlMode_risingEdge      = 2,  /**< \brief Trigger Event on Rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   255      IfxEdsadc_InputMuxControlMode_always          = 3   /**< \brief Trigger event on any edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   256  } IfxEdsadc_InputMuxControlMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   258  /** \brief Modulator input pin selection\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   259   * Definition in Ifx_DSADC.MODCFGx.B.INMUX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   260   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   261  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   262  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   263      IfxEdsadc_InputPin_a = 0,  /**< \brief Pin A connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   264      IfxEdsadc_InputPin_b = 1,  /**< \brief Pin B connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   265      IfxEdsadc_InputPin_c = 2,  /**< \brief Pin C connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   266      IfxEdsadc_InputPin_d = 3   /**< \brief Pin D connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   267  } IfxEdsadc_InputPin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   269  /** \brief Controls the data shifter after the integrator that selects the portion of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   270   * integrator data for the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   271   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   272  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   274      IfxEdsadc_IntegrationShiftControl_0 = 0,      /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   275      IfxEdsadc_IntegrationShiftControl_1,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   276      IfxEdsadc_IntegrationShiftControl_2,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   277      IfxEdsadc_IntegrationShiftControl_3,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   278      IfxEdsadc_IntegrationShiftControl_4,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   279      IfxEdsadc_IntegrationShiftControl_5           /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   280  } IfxEdsadc_IntegrationShiftControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   281  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   282  /** \brief Integrator window size\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   283   * Definition in Ifx_DSADC.IWCTR.B.IWS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   284   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   285  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   286  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   287      IfxEdsadc_IntegrationWindowSize_internalControl = 0,  /**< \brief Internal control: stop integrator after REPVAL+1 integration cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   288      IfxEdsadc_IntegrationWindowSize_externalControl = 1   /**< \brief External control: stop integrator when bit INTEN becomes 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   289  } IfxEdsadc_IntegrationWindowSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   291  /** \brief Integrator trigger mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   292   * NOTE: switch-first to bypassed before using other mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   293   * Definition in Ifx_EDSADC.DICFG.B.ITRMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   295  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   296  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   297      IfxEdsadc_IntegratorTrigger_bypassed     = 0, /**< \brief No integration trigger, integrator bypassed */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   298      IfxEdsadc_IntegratorTrigger_fallingEdge  = 1, /**< \brief Trigger event upon a falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   299      IfxEdsadc_IntegratorTrigger_risingEdge   = 2, /**< \brief Trigger event upon a rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   300      IfxEdsadc_IntegratorTrigger_alwaysActive = 3  /**< \brief No trigger, integrator active all the time */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   301  } IfxEdsadc_IntegratorTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   303  /** \brief Service request generation (main chain)\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   304   * Definition in Ifx_EDSADC.FCFGM.B.SRGM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   305   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   306  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   307  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   308      IfxEdsadc_MainServiceRequest_never          = 0,  /**< \brief Never, service requests disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   309      IfxEdsadc_MainServiceRequest_highGateSignal = 1,  /**< \brief While gate (selected trigger signal) is high */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   310      IfxEdsadc_MainServiceRequest_lowGateSignal  = 2,  /**< \brief While gate (selected trigger signal) is low */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   311      IfxEdsadc_MainServiceRequest_everyNewResult = 3   /**< \brief Always, for each new result value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   312  } IfxEdsadc_MainServiceRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   313  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   314  /** \brief Modulator divider factor for modulator clock\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   315   * Definition in Ifx_EDSADC.MODCFGx.B.DIVM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   317  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   318  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   319      IfxEdsadc_ModulatorClockDivider_div4 = 0,      /**< \brief f_mod = f_clk / 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   320      IfxEdsadc_ModulatorClockDivider_div6,          /**< \brief f_mod = f_clk / 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   321      IfxEdsadc_ModulatorClockDivider_div8,          /**< \brief f_mod = f_clk / 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   322      IfxEdsadc_ModulatorClockDivider_div10,         /**< \brief f_mod = f_clk / 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   323      IfxEdsadc_ModulatorClockDivider_div12,         /**< \brief f_mod = f_clk / 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   324      IfxEdsadc_ModulatorClockDivider_div14,         /**< \brief f_mod = f_clk / 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   325      IfxEdsadc_ModulatorClockDivider_div16,         /**< \brief f_mod = f_clk / 16  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   326      IfxEdsadc_ModulatorClockDivider_div18          /**< \brief f_mod = f_clk / 18  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   327  } IfxEdsadc_ModulatorClockDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   329  /** \brief Defines the way the modulator clock is generated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   330   * Definition in Ifx_DSADC.GLOBCFG.B.USC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   331   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   332  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   333  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   334      IfxEdsadc_ModulatorClockGeneration_syncMode   = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   335      IfxEdsadc_ModulatorClockGeneration_unsyncMode = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   336  } IfxEdsadc_ModulatorClockGeneration;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   338  /** \brief Enable the offset compensation filter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   339   * Definition in Ifx_DSADC.FCFGM.B.OCEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   340   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   341  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   342  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   343      IfxEdsadc_OffsetCompensationFilter_disabled        = 0,  /**< \brief Offset Compensation filter disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   344      IfxEdsadc_OffsetCompensationFilter_enablewithRateA = 1,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   345      IfxEdsadc_OffsetCompensationFilter_enablewithRateB = 2,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   346      IfxEdsadc_OffsetCompensationFilter_enablewithRateC = 3,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate C */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   347      IfxEdsadc_OffsetCompensationFilter_enablewithRateD = 4,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate D */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   348      IfxEdsadc_OffsetCompensationFilter_enablewithRateE = 5,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate E */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   349      IfxEdsadc_OffsetCompensationFilter_enablewithRateF = 6,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate F */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   350      IfxEdsadc_OffsetCompensationFilter_enablewithRateG = 7   /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate G */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   351  } IfxEdsadc_OffsetCompensationFilter;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   353  /** \brief Overshoot Compensation Enable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   354   * Defined in fx_DSADC.FCFGM.B.OVCEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   355   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   356  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   357  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   358      IfxEdsadc_OvershootCompensation_disabled = 0,  /**< \brief Disabled, feed FIR filter directly */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   359      IfxEdsadc_OvershootCompensation_enabled  = 1   /**< \brief Attenuate response to fast edges */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   360  } IfxEdsadc_OvershootCompensation;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   362  /** \brief Rectifier sign source\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   363   * Selects the sign signal that is to be delayed.\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   364   * Definition in Ifx_DSADC.RECT.B.SSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   365   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   366  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   367  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   368      IfxEdsadc_RectifierSignSource_onChipGenerator = 0,  /**< \brief On-chip carrier generator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   369      IfxEdsadc_RectifierSignSource_nextChannel     = 1,  /**< \brief Sign of result of next channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   370      IfxEdsadc_RectifierSignSource_externalA       = 2,  /**< \brief External sign signal A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   371      IfxEdsadc_RectifierSignSource_externalB       = 3   /**< \brief External sign signal B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   372  } IfxEdsadc_RectifierSignSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   373  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   374  /** \brief Restart the filter chain when an integration window starts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   375   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   376  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   377  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   378      IfxEdsadc_RestartFilterChain_on  = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   379      IfxEdsadc_RestartFilterChain_off = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   380  } IfxEdsadc_RestartFilterChain;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   382  /** \brief specifies result display mode (signed/unsigned)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   383   * Definition in Ifx_DSADC.DICFG.B.RDM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   385  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   386  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   387      IfxEdsadc_ResultDisplayMode_signed   = 0, /**< \brief Signed: result values range from -215 to +215 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   388      IfxEdsadc_ResultDisplayMode_unsigned = 1  /**< \brief Unsigned: result values range from 0 to +216 (shifted by 215) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   389  } IfxEdsadc_ResultDisplayMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   390  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   391  /** \brief Demodulator sample clock source select\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   392   * Definition in Ifx_EDSADC.DICFG.B.CSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   393   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   394  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   395  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   396      IfxEdsadc_SampleClockSource_internal = 0,  /**< \brief Internal clock */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   397      IfxEdsadc_SampleClockSource_inputA   = 3,  /**< \brief External clock, from Input A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   398      IfxEdsadc_SampleClockSource_inputB   = 4,  /**< \brief External clock, from Input B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   399      IfxEdsadc_SampleClockSource_inputC   = 5   /**< \brief External clock, from Input C */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   400  } IfxEdsadc_SampleClockSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   402  /** \brief Service request fifo level
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   403   * Definition in Ifx_EDSADC.RFC.B.SRLVL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   405  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   406  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   407      IfxEdsadc_ServiceRequestFifolevel_1 = 0,      /**< \brief Generate a service request when Fifo contain level 1 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   408      IfxEdsadc_ServiceRequestFifolevel_2,          /**< \brief Generate a service request when Fifo contain level 2 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   409      IfxEdsadc_ServiceRequestFifolevel_3,          /**< \brief Generate a service request when Fifo contain level 3 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   410      IfxEdsadc_ServiceRequestFifolevel_4           /**< \brief Generate a service request when Fifo contain level 4 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   411  } IfxEdsadc_ServiceRequestFifolevel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   413  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   414   * Definition in Ifx_EDSADC.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   415   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   416  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   417  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   418      IfxEdsadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   419      IfxEdsadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   420  } IfxEdsadc_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   422  /** \brief Defines when the slew rate filter is activated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   424  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   425  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   426      IfxEdsadc_StepDetectionMode_lastInput       = 0, /**< \brief Compare threshold to difference of current and last input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   427      IfxEdsadc_StepDetectionMode_secondlastInput = 1  /**< \brief Compare threshold to difference of current and second-last input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   428  } IfxEdsadc_StepDetectionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   430  /** \brief Adjusts the analog circuitry to the supply voltage used in the application
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   431   * system.Defined In defined in MODULE_EDSADC.GLOBCFG.B.SUPLEV
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   433  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   434  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   435      IfxEdsadc_SupplyVoltageLevel_automaticControl = 0,  /**< \brief voltage range is controlled by the power supply */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   436      IfxEdsadc_SupplyVoltageLevel_upperVoltage     = 1,  /**< \brief Upper voltage range: assume a 5 V power supply is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   437      IfxEdsadc_SupplyVoltageLevel_lowerVoltage     = 2   /**< \brief Lower voltage range: assume a 3.3 V power supply is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   438  } IfxEdsadc_SupplyVoltageLevel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   439  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   440  /** \brief OCDS Suspend Control (OCDS.SUS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   441   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   442  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   443  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   444      IfxEdsadc_SuspendMode_none = 0,  /**< \brief No suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   445      IfxEdsadc_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   446      IfxEdsadc_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   447  } IfxEdsadc_SuspendMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   448  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   449  /** \brief Time Stamp Counter Clock Selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   450   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   451  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   452  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   453      IfxEdsadc_TimeStampCounterClockSelection_div1 = 0,  /**< \brief fTSTMP = fMOD */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   454      IfxEdsadc_TimeStampCounterClockSelection_div2 = 1,  /**< \brief fTSTMP = fMOD/2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   455      IfxEdsadc_TimeStampCounterClockSelection_div4 = 2,  /**< \brief fTSTMP = fMOD/4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   456      IfxEdsadc_TimeStampCounterClockSelection_div8 = 3   /**< \brief fTSTMP = fMOD/8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   457  } IfxEdsadc_TimeStampCounterClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   458  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   459  /** \brief Timestamp trigger mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   460   * Definition in Ifx_EDSADC.DICFG.B.TSTRMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   462  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   463  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   464      IfxEdsadc_TimestampTrigger_noTrigger   = 0,  /**< \brief No timestamp trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   465      IfxEdsadc_TimestampTrigger_fallingEdge = 1,  /**< \brief Trigger event upon a falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   466      IfxEdsadc_TimestampTrigger_risingEdge  = 2,  /**< \brief Trigger event upon a rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   467      IfxEdsadc_TimestampTrigger_eachEdge    = 3   /**< \brief Trigger event upon each edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   468  } IfxEdsadc_TimestampTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   469  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   470  /** \brief Trigger select\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   471   * Definition in Ifx_EDSADC.DICFG.B.TRSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   473  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   474  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   475      IfxEdsadc_TriggerInput_a = 0,   /**< \brief GTM EDSADC Trigger 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   476      IfxEdsadc_TriggerInput_b = 1,   /**< \brief GTM EDSADC Trigger 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   477      IfxEdsadc_TriggerInput_c = 2,   /**< \brief GTM ADC Trigger 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   478      IfxEdsadc_TriggerInput_d = 3,   /**< \brief GTM ADC Trigger 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   479      IfxEdsadc_TriggerInput_e = 4,   /**< \brief Trigger/gate via port input P33.0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   480      IfxEdsadc_TriggerInput_f = 5,   /**< \brief Trigger/gate via port input P33.4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   481      IfxEdsadc_TriggerInput_g = 6,   /**< \brief ERU pattern detection output 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   482      IfxEdsadc_TriggerInput_h = 7,   /**< \brief Trigger/gate, channel 0,input H */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   483      IfxEdsadc_TriggerInput_i = 8,   /**< \brief Trigger/gate, channel 0,input I */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   484      IfxEdsadc_TriggerInput_j = 9,   /**< \brief Trigger/gate, channel 0,input J */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   485      IfxEdsadc_TriggerInput_k = 10,  /**< \brief GTM ADC Trigger 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   486      IfxEdsadc_TriggerInput_l = 11,  /**< \brief GTM ADC Trigger 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   487      IfxEdsadc_TriggerInput_m = 12,  /**< \brief GTM DSADC Trigger 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   488      IfxEdsadc_TriggerInput_n = 13,  /**< \brief GTM DSADC Trigger 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   489      IfxEdsadc_TriggerInput_o = 14,  /**< \brief Trigger/gate, channel 0,input O */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   490      IfxEdsadc_TriggerInput_p = 15   /**< \brief Trigger/gate, channel 0,input P */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   491  } IfxEdsadc_TriggerInput;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   492  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   493  /** \brief Controls the dithering function for each modulator separately
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   494   * Definition in Ifx_DSADC.MODCFG.B.DITHEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   496  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   497  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   498      IfxEdsadc_dithering_disabled = 0,  /**< \brief dithering function disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   499      IfxEdsadc_dithering_enabled  = 1   /**< \brief dithering function enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   500  } IfxEdsadc_dithering;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   501  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   502  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   504  /** \brief Allows copying of bitfield AMX into bitfield TIMESTAMP
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   505   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   506  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   507  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   508      IfxEdsadc_AnalogMux_doNotCopyAmx = 0,  /**< \brief Do not copy, timestamp uses all 16 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   509      IfxEdsadc_AnalogMux_copyAmx      = 1   /**< \brief Copy AMX to bits TIMESTAMP[15:14], timestamp uses lower 14 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   510  } IfxEdsadc_AnalogMux;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   511  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   512  /** \brief Timestamp Counter Run Control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   513   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   514  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   515  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   516      IfxEdsadc_TimeStampCounterControl_off = 0,  /**< \brief Timestamp counter is off */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   517      IfxEdsadc_TimeStampCounterControl_on  = 1   /**< \brief Timestamp counter is counting at the rate selected by bitfield TSCLK */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   518  } IfxEdsadc_TimeStampCounterControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   519  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   520  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   521  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   523  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   524  /** \brief Modulator Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   526  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   527  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   528      float32                        modulatorClockPeriod;         /**< \brief Modulator clock period */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   529      IfxEdsadc_InputGain            inputGain;                    /**< \brief Modulator gain select of analog input path */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   530      IfxEdsadc_AnalogClockSyncDelay analogClockSyncDelay;         /**< \brief Define the delay in clock cycle after sync signal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   531      IfxEdsadc_InputConfig          positiveInput;                /**< \brief Modulator configuration of positive input line */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   532      IfxEdsadc_InputConfig          negativeInput;                /**< \brief Modulator configuration of negative input line */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   533      IfxEdsadc_InputPin             inputPin;                     /**< \brief Modulator input pin selection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   534      IfxEdsadc_dithering            ditheringEnabled;             /**< \brief Control the Dithering Function for each modulator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   535      boolean                        integratorResetEnabled;       /**< \brief Control the modulator overload handling */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   536      boolean                        inputMuxActionControl;        /**< \brief Defines the mechanism by which the input multiplexer is controlled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   537      IfxEdsadc_InputMuxControlMode  triggerEvent;                 /**< \brief Defines the condition for a trigger event to control the input multiplexer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   538  } IfxEdsadc_ModulatorConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   539  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   540  /** \addtogroup IfxLld_Edsadc_Std_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   541   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   542  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   543  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   544  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   545  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   547  /** \brief Returns the module's suspend state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   548   * TRUE :if module is suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   549   * FALSE:if module is not yet suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   550   * \param edsadc Pointer to EDSADC module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   551   * \return Suspend status (TRUE / FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   552   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   553  IFX_INLINE boolean IfxEdsadc_isModuleSuspended(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   555  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   556   * \param edsadc pointer to EDSADC registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   557   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   558   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   560  IFX_INLINE void IfxEdsadc_setSleepMode(Ifx_EDSADC *edsadc, IfxEdsadc_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   561  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   562  /** \brief Configure the Module to Hard/Soft suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   563   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   564   * \param edsadc Pointer to EDSADC module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   565   * \param mode Module suspend mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   566   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   567   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   568  IFX_INLINE void IfxEdsadc_setSuspendMode(Ifx_EDSADC *edsadc, IfxEdsadc_SuspendMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   569  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   570  /** \brief Enables the conversion of multiple channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   571   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   572   * \param modulatorMask the modulator which should be running (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   573   * \param channelMask the channels which should be scanned (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   574   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   575   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   576   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   578   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   579  IFX_INLINE void IfxEdsadc_startScan(Ifx_EDSADC *edsadc, uint32 modulatorMask, uint32 channelMask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   580  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   581  /** \brief Disables the conversion of multiple channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   582   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   583   * \param modulatorMask the modulator which should be disabled (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   584   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   585   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   586   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   587   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   589  IFX_INLINE void IfxEdsadc_stopScan(Ifx_EDSADC *edsadc, uint32 modulatorMask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   592  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   593  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   594  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   595  /** \brief Disables the module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   596   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   598   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   599  IFX_EXTERN void IfxEdsadc_disableModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   600  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   601  /** \brief Enables the module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   602   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   603   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   604   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   605  IFX_EXTERN void IfxEdsadc_enableModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   606  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   607  /** \brief resets EDSADC kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   608   * \param edsadc pointer to EDSADC registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   609   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   611  IFX_EXTERN void IfxEdsadc_resetModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   613  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   615  /** \addtogroup IfxLld_Edsadc_Std_Support
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   616   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   617  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   618  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   619  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   620  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   622  /** \brief Get the main comb decimation factor
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   623   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   624   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   625   * \return the main comb decimation factor
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   626   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   627  IFX_INLINE uint16 IfxEdsadc_getMainCombDecimation(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   629  /** \brief Get result from the main chain
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   630   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   631   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   632   * \return result from the main chain
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   633   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   634   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   635   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   636   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   637  IFX_INLINE sint16 IfxEdsadc_getMainResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   639  /** \brief Get the subsequent result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   640   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   641  IFX_INLINE sint32 IfxEdsadc_getSubsequentResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   642  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   643  /** \brief Return TRUE if EDSADC module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   644   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   645   * \return TRUE if EDSADC module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   646   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   647  IFX_INLINE boolean IfxEdsadc_isModuleEnabled(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   648  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   649  /** \brief Set the carrier waveform mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   650   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   651   * \param waveformMode the waveform mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   652   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   653   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   654  IFX_INLINE void IfxEdsadc_setCarrierMode(Ifx_EDSADC *edsadc, IfxEdsadc_CarrierWaveformMode waveformMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   656  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   657  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   658  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   659  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   660  /** \brief Get the sample frequency of the integrator output in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   661   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   662   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   663   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   664   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   665  IFX_EXTERN float32 IfxEdsadc_getIntegratorOutFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   667  /** \brief Get the sample frequency of the main COMB filter output in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   668   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   669   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   670   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   671   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   672  IFX_EXTERN float32 IfxEdsadc_getMainCombOutFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   674  /** \brief Estimate the group delay of main-chain filters in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   675   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   676   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   677   * \return delay in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   678   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   679  IFX_EXTERN float32 IfxEdsadc_getMainGroupDelay(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   681  /** \brief Get the modulator clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   682   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   683   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   684   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   685   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   686  IFX_EXTERN float32 IfxEdsadc_getModulatorClockFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   687  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   688  /** \brief Get the input frequency of EDSADC in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   689   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   690   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   691   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   692  IFX_EXTERN float32 IfxEdsadc_getModulatorInputClockFreq(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   693  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   694  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   695  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   696  /** \addtogroup IfxLld_Edsadc_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   697   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   698  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   699  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   700  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   701  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   702  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   703  /** \brief Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   704   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   705   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   706   * \return Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   708  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxEdsadc_getAuxSrc(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   710  /** \brief Get the interrupt source register for a Main event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   711   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   712   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   713   * \return Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   714   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   715  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxEdsadc_getMainSrc(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   716  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   717  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   718  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   719  /** \addtogroup IfxLld_Edsadc_Std_IO
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   720   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   721  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   722  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   723  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   724  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   725  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   726  /** \brief Initializes a CGPWM output
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   727   * \param cgPwm the CGPWM Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   728   * \param pinMode the pin output mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   729   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   730   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   731   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   732  IFX_INLINE void IfxEdsadc_initCgPwmPin(const IfxEdsadc_Cgpwm_Out *cgPwm, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   733  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   734  /** \brief Initializes a CIN input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   735   * \param cIn the CIN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   736   * \param cInMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   737   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   738   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   739   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   740  IFX_INLINE void IfxEdsadc_initCinPin(const IfxEdsadc_Cin_In *cIn, IfxPort_InputMode cInMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   741  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   742  /** \brief Initializes a COUT output
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   743   * \param cout the COUT Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   744   * \param pinMode the pin output mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   745   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   746   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   748  IFX_INLINE void IfxEdsadc_initCoutPin(const IfxEdsadc_Cout_Out *cout, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   750  /** \brief Initializes a DIN input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   751   * \param dIn the DIN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   752   * \param dInMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   753   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   754   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   755   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   756  IFX_INLINE void IfxEdsadc_initDinPin(const IfxEdsadc_Din_In *dIn, IfxPort_InputMode dInMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   757  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   758  /** \brief Initializes a DS input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   759   * \param dsn the DSN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   760   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   761   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   762   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   763   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   764  IFX_INLINE void IfxEdsadc_initDsnPin(const IfxEdsadc_Dsn_In *dsn, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   765  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   766  /** \brief Initializes a DS input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   767   * \param dsp the DSP Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   768   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   769   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   770   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   771   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   772  IFX_INLINE void IfxEdsadc_initDspPin(const IfxEdsadc_Dsp_In *dsp, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   774  /** \brief Initializes a ITR input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   775   * \param itr the ITR Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   776   * \param itrMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   777   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   778   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   779   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   780  IFX_INLINE void IfxEdsadc_initItrPin(const IfxEdsadc_Itr_In *itr, IfxPort_InputMode itrMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   781  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   782  /** \brief Initializes a SG input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   783   * \param sg the SG Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   784   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   785   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   786   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   787   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   788  IFX_INLINE void IfxEdsadc_initSgPin(const IfxEdsadc_Sg_In *sg, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   789  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   790  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   791  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   792  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   793  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   794  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   795  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   796  /** \brief Returns the positive input line configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   797   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   798   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   799   * \return Positive Input Line Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   800   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   801  IFX_INLINE uint8 IfxEdsadc_getPositiveInputLineConfiguration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   802  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   803  /** \brief Returns the negative input line configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   804   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   805   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   806   * \return Negative Input Line Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   807   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   808  IFX_INLINE uint8 IfxEdsadc_getNegativeInputLineConfiguration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   809  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   810  /** \brief Sets the Offset compensation Value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   811   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   812   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   813   * \param value Value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   814   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   815   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   816  IFX_INLINE void IfxEdsadc_setOffsetCompensationValue(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   818  /** \brief Returns the address of the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   819   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   820   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   821   * \return Address of the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   822   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   823  IFX_INLINE uint32 *IfxEdsadc_getResultRegisterAddress(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   824  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   825  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   826  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   827  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   828  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   829  /** \brief set common mode voltage Parameters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   830   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   831   * \param channel specifies channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   832   * \param voltage select Fractional reference Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   833   * \param refMode Fractional Reference Voltage Enable/ Disable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   834   * \param hsvMode Enable / Disable Half Supply Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   835   * \param cmhvMode Enable / Disable Common Mode Hold Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   836   * \param positiveInput Defines the connection of the respective positive input y to the common mode hold voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   837   * \param negativeInput Defines the connection of the respective negative input y to the common mode hold voltage.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   838   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   839   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   840  IFX_EXTERN void IfxEdsadc_setCommonModeVoltage(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_FractionalRefVoltageSelection voltage, IfxEdsadc_FractionalRefVoltage refMode, IfxEdsadc_HalfSupplyVoltage hsvMode, IfxEdsadc_CommonModeHoldVoltage cmhvMode, uint8 positiveInput, uint8 negativeInput);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   842  /** \brief configure gain correction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   843   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   844   * \param channel Specifies channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   845   * \param gainFactor Multiplication Factor for gain correction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   846   * \param cicShift Position of CIC filter output shifter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   847   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   848   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   849  IFX_EXTERN void IfxEdsadc_setGainCorrectionFactor(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   851  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   852   * \param edsadc Pointer to module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   853   * \param channel specifies channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   854   * \param timeStampCounterClock Time Stamp Counter Clock selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   855   * \param runControl TimeStamp Counter Run Control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   856   * \param analogMuxCopy Analog MUX Setting Copy Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   857   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   858   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   859  IFX_EXTERN void IfxEdsadc_setTimeStampCounter(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_TimeStampCounterClockSelection timeStampCounterClock, IfxEdsadc_TimeStampCounterControl runControl, IfxEdsadc_AnalogMux analogMuxCopy);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   861  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   862   * \param edsadc Pointer to EDSADC SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   863   * \param channel chanel no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   864   * \param gainFactor Multiplication Factor for Gain Correction During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   865   * \param cicShift Position of the CIC Filter Output Shifter During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   866   * \param cicDecimationRate Decimation Rate of the CIC Filter During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   867   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   868   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   869  IFX_EXTERN void IfxEdsadc_setGainControl(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift, uint8 cicDecimationRate);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   870  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   871  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   872   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   873   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   874   * \param calFactor Multiplication Factor for Gain Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   875   * \param calTarget Target Value for Calibrated Fullscale
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   876   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   877   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   878  IFX_EXTERN void IfxEdsadc_setGainCalibration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 calFactor, uint16 calTarget);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   879  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   880  /** \brief Set the Modulator configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   881   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   882   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   883   * \param config Modulator Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   884   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   885   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   886  IFX_EXTERN void IfxEdsadc_configureModulator(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_ModulatorConfig *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   887  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   888  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   889  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   890  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   891  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   892  IFX_INLINE uint16 IfxEdsadc_getMainCombDecimation(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   893  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   894      return (uint16)(1U + edsadc->CH[channel].FCFGC.B.CFMDF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   895  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   896  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   897  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   898  IFX_INLINE sint16 IfxEdsadc_getMainResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   899  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   900      return edsadc->CH[channel].RESM.B.RESULTLO;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   901  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   902  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   903  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   904  IFX_INLINE sint32 IfxEdsadc_getSubsequentResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   905  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   906      return (sint32)(edsadc->CH[channel].RESM.U);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   907  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   908  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   909  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   910  IFX_INLINE void IfxEdsadc_initCgPwmPin(const IfxEdsadc_Cgpwm_Out *cgPwm, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   911  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   912      if (cgPwm->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   913      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   914          IfxPort_setPinModeOutput(cgPwm->pin.port, cgPwm->pin.pinIndex, pinMode, cgPwm->select);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   915          IfxPort_setPinPadDriver(cgPwm->pin.port, cgPwm->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   916      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   917  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   918  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   920  IFX_INLINE void IfxEdsadc_initCinPin(const IfxEdsadc_Cin_In *cIn, IfxPort_InputMode cInMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   921  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   922      if (cIn->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   923      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   924          IfxPort_setPinModeInput(cIn->pin.port, cIn->pin.pinIndex, cInMode);
	fcall	.cocofun_8
.L660:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
	call	IfxPort_setPinMode
.L355:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   925          IfxPort_setPinPadDriver(cIn->pin.port, cIn->pin.pinIndex, padDriver);
	fcall	.cocofun_9
.L661:
	call	IfxPort_setPinPadDriver

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   922      if (cIn->pin.port != NULL_PTR)      (inlined)
.L18:
.L17:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   182          }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   183  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   184          const IfxEdsadc_Din_In *din = pins->din;
	ld.a	a15,[a12]8
.L448:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   185  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   186          if (din != NULL_PTR)
	jz.a	a15,.L19
.L662:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   187          {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   188              IfxEdsadc_initDinPin(din, pins->dinMode, pins->pinDriver);
	ld.b	d15,[a12]12
.L663:
	fcall	.cocofun_7
.L359:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   942      if (dIn->pin.port != NULL_PTR)      (inlined)
	jz.a	a4,.L20
.L367:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     2   * \file IfxEdsadc.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     3   * \brief EDSADC  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     4   * \ingroup IfxLld_Edsadc
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    41   * \defgroup IfxLld_Edsadc_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    42   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    43   * \defgroup IfxLld_Edsadc_Std_Operative Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    44   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    45   * \defgroup IfxLld_Edsadc_Std_Support Support Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    46   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    47   * \defgroup IfxLld_Edsadc_Std_Interrupt Interrupt Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    48   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    49   * \defgroup IfxLld_Edsadc_Std_IO IO Pin Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    50   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    53  #ifndef IFXEDSADC_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    54  #define IFXEDSADC_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    60  #include "_Impl/IfxEdsadc_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    61  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    62  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    63  #include "_PinMap/IfxEdsadc_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    64  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    65  #include "IfxEdsadc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    66  #include "IfxEdsadc_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    68  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    69  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    70  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    71  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    72  /** \addtogroup IfxLld_Edsadc_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    73   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    74  /** \brief Analog Clock Synchronization Delay
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    75   * Definition in Ifx_DSADC.MODCFG.B.ACSD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    79      IfxEdsadc_AnalogClockSyncDelay_noDelay     = 0,    /**< \brief no delay */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    80      IfxEdsadc_AnalogClockSyncDelay_cycleDelay1 = 1,    /**< \brief Delay of 1 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    81      IfxEdsadc_AnalogClockSyncDelay_cycleDelay2,        /**< \brief Delay of 2 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    82      IfxEdsadc_AnalogClockSyncDelay_cycleDelay3,        /**< \brief Delay of 3 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    83      IfxEdsadc_AnalogClockSyncDelay_cycleDelay4,        /**< \brief Delay of 4 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    84      IfxEdsadc_AnalogClockSyncDelay_cycleDelay5,        /**< \brief Delay of 5 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    85      IfxEdsadc_AnalogClockSyncDelay_cycleDelay6,        /**< \brief Delay of 6 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    86      IfxEdsadc_AnalogClockSyncDelay_cycleDelay7         /**< \brief Delay of 7 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    87  } IfxEdsadc_AnalogClockSyncDelay;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    89  /** \brief Service request generation (auxiliary)\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    90   * Definition in Ifx_EDSADC.FCFGM.B.SRGA
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    91   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    92  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    93  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    94      IfxEdsadc_AuxServiceRequest_never          = 0,  /**< \brief Never, service requests disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    95      IfxEdsadc_AuxServiceRequest_compEvent      = 1,  /**< \brief As selected by bitfield ESEL */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    96      IfxEdsadc_AuxServiceRequest_timestampEvent = 2,  /**< \brief Timestamp Event */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    97      IfxEdsadc_AuxServiceRequest_altSource      = 3   /**< \brief Alternate source: Capturing of a sign delay value to register CGSYNCx (x = 0 - 5) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    98  } IfxEdsadc_AuxServiceRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   100  /** \brief Carrier generation mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   101   * Definition in Ifx_EDSADC.CGCFG.B.CGMOD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   103  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   104  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   105      IfxEdsadc_CarrierWaveformMode_stopped  = 0,  /**< \brief Carrier Generator stopped */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   106      IfxEdsadc_CarrierWaveformMode_square   = 1,  /**< \brief Carrier Generator generates square wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   107      IfxEdsadc_CarrierWaveformMode_triangle = 2,  /**< \brief Carrier Generator generates triangle wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   108      IfxEdsadc_CarrierWaveformMode_sine     = 3   /**< \brief Carrier Generator generates sine wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   109  } IfxEdsadc_CarrierWaveformMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   111  /** \brief Common Mode Hold Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   115      IfxEdsadc_CommonModeHoldVoltage_disable = 0,  /**< \brief VCMH is off */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   116      IfxEdsadc_CommonModeHoldVoltage_enable  = 1   /**< \brief VCMH is generated */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   117  } IfxEdsadc_CommonModeHoldVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   119  /** \brief Select the data to be returned when register RESM is read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   120   * Definition in Ifx_DSADC.DICFG.B.DRM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   121   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   122  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   123  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   124      IfxEdsadc_DataRead_signOnHighbit      = 0,  /**< \brief Single: Issue one 16-bit value per read access (sign on high bits) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   125      IfxEdsadc_DataRead_timestampOnHighbit = 1,  /**< \brief Single: Issue one 16-bit value per read access (timestamp on high bits) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   126      IfxEdsadc_DataRead_double             = 2   /**< \brief Double: Issue two 16-bit values per read access */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   127  } IfxEdsadc_DataRead;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   129  /** \brief Data stream select
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   130   * Definition in Ifx_DSADC.DICFG.B.DSS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   131   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   132  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   133  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   134      IfxEdsadc_DataStream_onChipModulator        = 0,  /**< \brief select data stream from on chip modulator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   135      IfxEdsadc_DataStream_doubleDataClockEdge    = 3,  /**< \brief External modulator, use rising and falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   136      IfxEdsadc_DataStream_directFallingClockEdge = 4,  /**< \brief External modulator, use each falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   137      IfxEdsadc_DataStream_directRisingClockEdge  = 5,  /**< \brief External modulator, use each rising clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   138      IfxEdsadc_DataStream_secondFallingClockEdge = 6,  /**< \brief External modulator, use every 2nd falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   139      IfxEdsadc_DataStream_secondRisingClockEdge  = 7   /**< \brief External modulator, use every 2nd rising clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   140  } IfxEdsadc_DataStream;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   142  /** \brief Trimming Value for Dithering function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   143   * Definition in Ifx_DSADC.GLOBCFG.B.DITRIM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   144   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   145  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   146  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   147      IfxEdsadc_DitheringIntensity_minimum = 0,  /**< \brief Minimum dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   148      IfxEdsadc_DitheringIntensity_low     = 1,  /**< \brief Low dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   149      IfxEdsadc_DitheringIntensity_medium  = 2,  /**< \brief Medium dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   150      IfxEdsadc_DitheringIntensity_high    = 3   /**< \brief High */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   151  } IfxEdsadc_DitheringIntensity;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   152  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   153  /** \brief Define when comparator event is generated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   154   * Definition in Ifx_DSADC.FCFGM.B.ESEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   156  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   157  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   158      IfxEdsadc_EventSelect_everyNewResult = 0,  /**< \brief Always, for each new result value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   159      IfxEdsadc_EventSelect_insideBoundry  = 1,  /**< \brief If result is inside the boundary band */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   160      IfxEdsadc_EventSelect_outsideBoundry = 2   /**< \brief If result is outside the boundary band */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   161  } IfxEdsadc_EventSelect;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   163  /** \brief Defines the duration of the additional filter effect, based on values input to the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   164   * filter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   165   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   166  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   167  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   168      IfxEdsadc_FilterRunTimeInputCycle_2  = 0, /**< \brief 2 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   169      IfxEdsadc_FilterRunTimeInputCycle_4  = 1, /**< \brief 4 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   170      IfxEdsadc_FilterRunTimeInputCycle_8  = 2, /**< \brief 8 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   171      IfxEdsadc_FilterRunTimeInputCycle_16 = 3  /**< \brief 16 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   172  } IfxEdsadc_FilterRunTimeInputCycle;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   173  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   174  /** \brief Specifies Slew Rate Filter Strength
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   175   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   176  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   177  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   178      IfxEdsadc_FilterStrength_minimum = 0,  /**< \brief Minimum filter effect, early attenuation, linear operation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   179      IfxEdsadc_FilterStrength_weak    = 1,  /**< \brief Weak filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   180      IfxEdsadc_FilterStrength_medium  = 2,  /**< \brief Medium filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   181      IfxEdsadc_FilterStrength_maximum = 3   /**< \brief maximum filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   182  } IfxEdsadc_FilterStrength;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   184  /** \brief Fractional Reference Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   185   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   186  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   187  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   188      IfxEdsadc_FractionalRefVoltage_disable = 0,  /**< \brief VREFX is not connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   189      IfxEdsadc_FractionalRefVoltage_enable  = 1   /**< \brief VREFX is connected, value according to VREFXSEL */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   190  } IfxEdsadc_FractionalRefVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   192  /** \brief Fraction reference voltage selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   194  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   195  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   196      IfxEdsadc_FractionalRefVoltageSelection_div2  = 0, /**< \brief VREFX = VAREF / 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   197      IfxEdsadc_FractionalRefVoltageSelection_div4  = 1, /**< \brief VREFX = VAREF / 4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   198      IfxEdsadc_FractionalRefVoltageSelection_div8  = 2, /**< \brief VREFX = VAREF / 8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   199      IfxEdsadc_FractionalRefVoltageSelection_div16 = 3  /**< \brief VREFX = VAREF / 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   200  } IfxEdsadc_FractionalRefVoltageSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   202  /** \brief Half Supply Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   204  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   205  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   206      IfxEdsadc_HalfSupplyVoltage_disable = 0,  /**< \brief VDDM / 2 is not connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   207      IfxEdsadc_HalfSupplyVoltage_enable  = 1   /**< \brief VDDM / 2 is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   208  } IfxEdsadc_HalfSupplyVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   209  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   210  /** \brief Modulator configuration of positive/negative input line\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   211   * Definition in Ifx_DSADC.MODCFGx.B.INCFGP and Ifx_DSADC.MODCFGx.B.INCFGN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   213  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   214  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   215      IfxEdsadc_InputConfig_inputPin          = 0,  /**< \brief Modulator input connected to external pin */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   216      IfxEdsadc_InputConfig_supplyVoltage     = 1,  /**< \brief Modulator input connected to supply voltage V_ddm */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   217      IfxEdsadc_InputConfig_commonModeVoltage = 2,  /**< \brief Modulator input connected to common mode voltage V_cm */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   218      IfxEdsadc_InputConfig_referenceGround   = 3   /**< \brief Modulator input connected to reference ground V_ref */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   219  } IfxEdsadc_InputConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   221  /** \brief Demodulator input data source selection\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   222   * Definition in Ifx_EDSADC.DICFG.B.DSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   223   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   224  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   225  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   226      IfxEdsadc_InputDataSource_directInputA   = 0,  /**< \brief External, from input A, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   227      IfxEdsadc_InputDataSource_invertedInputA = 1,  /**< \brief External, from input A, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   228      IfxEdsadc_InputDataSource_directInputB   = 2,  /**< \brief External, from input B, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   229      IfxEdsadc_InputDataSource_invertedInputB = 3,  /**< \brief External, from input B, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   230      IfxEdsadc_InputDataSource_directInputC   = 4,  /**< \brief External, from input C, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   231      IfxEdsadc_InputDataSource_invertedInputC = 5,  /**< \brief External, from input C, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   232      IfxEdsadc_InputDataSource_directInputD   = 6,  /**< \brief External, from input D, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   233      IfxEdsadc_InputDataSource_invertedInputD = 7   /**< \brief External, from input D, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   234  } IfxEdsadc_InputDataSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   235  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   236  /** \brief Modulator gain select of analog input path\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   237   * Definition in Ifx_DSADC.MODCFGx.B.GAINSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   239  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   240  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   241      IfxEdsadc_InputGain_factor1  = 0, /**< \brief Input gain factor: 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   242      IfxEdsadc_InputGain_factor2  = 1, /**< \brief Input gain factor: 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   243      IfxEdsadc_InputGain_factor4  = 2, /**< \brief Input gain factor: 4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   244      IfxEdsadc_InputGain_factor8  = 3, /**< \brief Input gain factor: 8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   245      IfxEdsadc_InputGain_factor16 = 4  /**< \brief Input gain factor: 16 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   246  } IfxEdsadc_InputGain;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   247  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   248  /** \brief specifies input multiplexer control mode defined in MODULE_EDSADC.MODCFG.B.INMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   250  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   251  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   252      IfxEdsadc_InputMuxControlMode_softwareControl = 0,  /**< \brief Trigger Event by software (INMUX follows INSEL) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   253      IfxEdsadc_InputMuxControlMode_fallingEdge     = 1,  /**< \brief Trigger Event on Falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   254      IfxEdsadc_InputMuxControlMode_risingEdge      = 2,  /**< \brief Trigger Event on Rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   255      IfxEdsadc_InputMuxControlMode_always          = 3   /**< \brief Trigger event on any edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   256  } IfxEdsadc_InputMuxControlMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   258  /** \brief Modulator input pin selection\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   259   * Definition in Ifx_DSADC.MODCFGx.B.INMUX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   260   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   261  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   262  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   263      IfxEdsadc_InputPin_a = 0,  /**< \brief Pin A connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   264      IfxEdsadc_InputPin_b = 1,  /**< \brief Pin B connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   265      IfxEdsadc_InputPin_c = 2,  /**< \brief Pin C connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   266      IfxEdsadc_InputPin_d = 3   /**< \brief Pin D connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   267  } IfxEdsadc_InputPin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   269  /** \brief Controls the data shifter after the integrator that selects the portion of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   270   * integrator data for the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   271   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   272  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   274      IfxEdsadc_IntegrationShiftControl_0 = 0,      /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   275      IfxEdsadc_IntegrationShiftControl_1,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   276      IfxEdsadc_IntegrationShiftControl_2,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   277      IfxEdsadc_IntegrationShiftControl_3,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   278      IfxEdsadc_IntegrationShiftControl_4,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   279      IfxEdsadc_IntegrationShiftControl_5           /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   280  } IfxEdsadc_IntegrationShiftControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   281  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   282  /** \brief Integrator window size\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   283   * Definition in Ifx_DSADC.IWCTR.B.IWS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   284   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   285  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   286  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   287      IfxEdsadc_IntegrationWindowSize_internalControl = 0,  /**< \brief Internal control: stop integrator after REPVAL+1 integration cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   288      IfxEdsadc_IntegrationWindowSize_externalControl = 1   /**< \brief External control: stop integrator when bit INTEN becomes 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   289  } IfxEdsadc_IntegrationWindowSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   291  /** \brief Integrator trigger mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   292   * NOTE: switch-first to bypassed before using other mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   293   * Definition in Ifx_EDSADC.DICFG.B.ITRMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   295  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   296  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   297      IfxEdsadc_IntegratorTrigger_bypassed     = 0, /**< \brief No integration trigger, integrator bypassed */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   298      IfxEdsadc_IntegratorTrigger_fallingEdge  = 1, /**< \brief Trigger event upon a falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   299      IfxEdsadc_IntegratorTrigger_risingEdge   = 2, /**< \brief Trigger event upon a rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   300      IfxEdsadc_IntegratorTrigger_alwaysActive = 3  /**< \brief No trigger, integrator active all the time */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   301  } IfxEdsadc_IntegratorTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   303  /** \brief Service request generation (main chain)\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   304   * Definition in Ifx_EDSADC.FCFGM.B.SRGM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   305   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   306  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   307  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   308      IfxEdsadc_MainServiceRequest_never          = 0,  /**< \brief Never, service requests disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   309      IfxEdsadc_MainServiceRequest_highGateSignal = 1,  /**< \brief While gate (selected trigger signal) is high */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   310      IfxEdsadc_MainServiceRequest_lowGateSignal  = 2,  /**< \brief While gate (selected trigger signal) is low */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   311      IfxEdsadc_MainServiceRequest_everyNewResult = 3   /**< \brief Always, for each new result value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   312  } IfxEdsadc_MainServiceRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   313  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   314  /** \brief Modulator divider factor for modulator clock\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   315   * Definition in Ifx_EDSADC.MODCFGx.B.DIVM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   317  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   318  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   319      IfxEdsadc_ModulatorClockDivider_div4 = 0,      /**< \brief f_mod = f_clk / 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   320      IfxEdsadc_ModulatorClockDivider_div6,          /**< \brief f_mod = f_clk / 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   321      IfxEdsadc_ModulatorClockDivider_div8,          /**< \brief f_mod = f_clk / 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   322      IfxEdsadc_ModulatorClockDivider_div10,         /**< \brief f_mod = f_clk / 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   323      IfxEdsadc_ModulatorClockDivider_div12,         /**< \brief f_mod = f_clk / 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   324      IfxEdsadc_ModulatorClockDivider_div14,         /**< \brief f_mod = f_clk / 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   325      IfxEdsadc_ModulatorClockDivider_div16,         /**< \brief f_mod = f_clk / 16  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   326      IfxEdsadc_ModulatorClockDivider_div18          /**< \brief f_mod = f_clk / 18  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   327  } IfxEdsadc_ModulatorClockDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   329  /** \brief Defines the way the modulator clock is generated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   330   * Definition in Ifx_DSADC.GLOBCFG.B.USC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   331   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   332  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   333  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   334      IfxEdsadc_ModulatorClockGeneration_syncMode   = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   335      IfxEdsadc_ModulatorClockGeneration_unsyncMode = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   336  } IfxEdsadc_ModulatorClockGeneration;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   338  /** \brief Enable the offset compensation filter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   339   * Definition in Ifx_DSADC.FCFGM.B.OCEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   340   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   341  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   342  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   343      IfxEdsadc_OffsetCompensationFilter_disabled        = 0,  /**< \brief Offset Compensation filter disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   344      IfxEdsadc_OffsetCompensationFilter_enablewithRateA = 1,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   345      IfxEdsadc_OffsetCompensationFilter_enablewithRateB = 2,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   346      IfxEdsadc_OffsetCompensationFilter_enablewithRateC = 3,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate C */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   347      IfxEdsadc_OffsetCompensationFilter_enablewithRateD = 4,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate D */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   348      IfxEdsadc_OffsetCompensationFilter_enablewithRateE = 5,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate E */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   349      IfxEdsadc_OffsetCompensationFilter_enablewithRateF = 6,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate F */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   350      IfxEdsadc_OffsetCompensationFilter_enablewithRateG = 7   /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate G */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   351  } IfxEdsadc_OffsetCompensationFilter;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   353  /** \brief Overshoot Compensation Enable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   354   * Defined in fx_DSADC.FCFGM.B.OVCEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   355   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   356  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   357  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   358      IfxEdsadc_OvershootCompensation_disabled = 0,  /**< \brief Disabled, feed FIR filter directly */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   359      IfxEdsadc_OvershootCompensation_enabled  = 1   /**< \brief Attenuate response to fast edges */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   360  } IfxEdsadc_OvershootCompensation;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   362  /** \brief Rectifier sign source\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   363   * Selects the sign signal that is to be delayed.\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   364   * Definition in Ifx_DSADC.RECT.B.SSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   365   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   366  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   367  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   368      IfxEdsadc_RectifierSignSource_onChipGenerator = 0,  /**< \brief On-chip carrier generator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   369      IfxEdsadc_RectifierSignSource_nextChannel     = 1,  /**< \brief Sign of result of next channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   370      IfxEdsadc_RectifierSignSource_externalA       = 2,  /**< \brief External sign signal A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   371      IfxEdsadc_RectifierSignSource_externalB       = 3   /**< \brief External sign signal B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   372  } IfxEdsadc_RectifierSignSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   373  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   374  /** \brief Restart the filter chain when an integration window starts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   375   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   376  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   377  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   378      IfxEdsadc_RestartFilterChain_on  = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   379      IfxEdsadc_RestartFilterChain_off = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   380  } IfxEdsadc_RestartFilterChain;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   382  /** \brief specifies result display mode (signed/unsigned)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   383   * Definition in Ifx_DSADC.DICFG.B.RDM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   385  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   386  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   387      IfxEdsadc_ResultDisplayMode_signed   = 0, /**< \brief Signed: result values range from -215 to +215 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   388      IfxEdsadc_ResultDisplayMode_unsigned = 1  /**< \brief Unsigned: result values range from 0 to +216 (shifted by 215) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   389  } IfxEdsadc_ResultDisplayMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   390  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   391  /** \brief Demodulator sample clock source select\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   392   * Definition in Ifx_EDSADC.DICFG.B.CSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   393   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   394  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   395  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   396      IfxEdsadc_SampleClockSource_internal = 0,  /**< \brief Internal clock */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   397      IfxEdsadc_SampleClockSource_inputA   = 3,  /**< \brief External clock, from Input A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   398      IfxEdsadc_SampleClockSource_inputB   = 4,  /**< \brief External clock, from Input B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   399      IfxEdsadc_SampleClockSource_inputC   = 5   /**< \brief External clock, from Input C */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   400  } IfxEdsadc_SampleClockSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   402  /** \brief Service request fifo level
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   403   * Definition in Ifx_EDSADC.RFC.B.SRLVL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   405  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   406  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   407      IfxEdsadc_ServiceRequestFifolevel_1 = 0,      /**< \brief Generate a service request when Fifo contain level 1 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   408      IfxEdsadc_ServiceRequestFifolevel_2,          /**< \brief Generate a service request when Fifo contain level 2 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   409      IfxEdsadc_ServiceRequestFifolevel_3,          /**< \brief Generate a service request when Fifo contain level 3 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   410      IfxEdsadc_ServiceRequestFifolevel_4           /**< \brief Generate a service request when Fifo contain level 4 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   411  } IfxEdsadc_ServiceRequestFifolevel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   413  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   414   * Definition in Ifx_EDSADC.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   415   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   416  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   417  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   418      IfxEdsadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   419      IfxEdsadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   420  } IfxEdsadc_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   422  /** \brief Defines when the slew rate filter is activated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   424  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   425  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   426      IfxEdsadc_StepDetectionMode_lastInput       = 0, /**< \brief Compare threshold to difference of current and last input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   427      IfxEdsadc_StepDetectionMode_secondlastInput = 1  /**< \brief Compare threshold to difference of current and second-last input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   428  } IfxEdsadc_StepDetectionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   430  /** \brief Adjusts the analog circuitry to the supply voltage used in the application
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   431   * system.Defined In defined in MODULE_EDSADC.GLOBCFG.B.SUPLEV
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   433  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   434  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   435      IfxEdsadc_SupplyVoltageLevel_automaticControl = 0,  /**< \brief voltage range is controlled by the power supply */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   436      IfxEdsadc_SupplyVoltageLevel_upperVoltage     = 1,  /**< \brief Upper voltage range: assume a 5 V power supply is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   437      IfxEdsadc_SupplyVoltageLevel_lowerVoltage     = 2   /**< \brief Lower voltage range: assume a 3.3 V power supply is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   438  } IfxEdsadc_SupplyVoltageLevel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   439  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   440  /** \brief OCDS Suspend Control (OCDS.SUS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   441   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   442  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   443  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   444      IfxEdsadc_SuspendMode_none = 0,  /**< \brief No suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   445      IfxEdsadc_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   446      IfxEdsadc_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   447  } IfxEdsadc_SuspendMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   448  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   449  /** \brief Time Stamp Counter Clock Selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   450   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   451  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   452  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   453      IfxEdsadc_TimeStampCounterClockSelection_div1 = 0,  /**< \brief fTSTMP = fMOD */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   454      IfxEdsadc_TimeStampCounterClockSelection_div2 = 1,  /**< \brief fTSTMP = fMOD/2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   455      IfxEdsadc_TimeStampCounterClockSelection_div4 = 2,  /**< \brief fTSTMP = fMOD/4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   456      IfxEdsadc_TimeStampCounterClockSelection_div8 = 3   /**< \brief fTSTMP = fMOD/8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   457  } IfxEdsadc_TimeStampCounterClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   458  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   459  /** \brief Timestamp trigger mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   460   * Definition in Ifx_EDSADC.DICFG.B.TSTRMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   462  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   463  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   464      IfxEdsadc_TimestampTrigger_noTrigger   = 0,  /**< \brief No timestamp trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   465      IfxEdsadc_TimestampTrigger_fallingEdge = 1,  /**< \brief Trigger event upon a falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   466      IfxEdsadc_TimestampTrigger_risingEdge  = 2,  /**< \brief Trigger event upon a rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   467      IfxEdsadc_TimestampTrigger_eachEdge    = 3   /**< \brief Trigger event upon each edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   468  } IfxEdsadc_TimestampTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   469  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   470  /** \brief Trigger select\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   471   * Definition in Ifx_EDSADC.DICFG.B.TRSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   473  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   474  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   475      IfxEdsadc_TriggerInput_a = 0,   /**< \brief GTM EDSADC Trigger 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   476      IfxEdsadc_TriggerInput_b = 1,   /**< \brief GTM EDSADC Trigger 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   477      IfxEdsadc_TriggerInput_c = 2,   /**< \brief GTM ADC Trigger 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   478      IfxEdsadc_TriggerInput_d = 3,   /**< \brief GTM ADC Trigger 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   479      IfxEdsadc_TriggerInput_e = 4,   /**< \brief Trigger/gate via port input P33.0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   480      IfxEdsadc_TriggerInput_f = 5,   /**< \brief Trigger/gate via port input P33.4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   481      IfxEdsadc_TriggerInput_g = 6,   /**< \brief ERU pattern detection output 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   482      IfxEdsadc_TriggerInput_h = 7,   /**< \brief Trigger/gate, channel 0,input H */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   483      IfxEdsadc_TriggerInput_i = 8,   /**< \brief Trigger/gate, channel 0,input I */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   484      IfxEdsadc_TriggerInput_j = 9,   /**< \brief Trigger/gate, channel 0,input J */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   485      IfxEdsadc_TriggerInput_k = 10,  /**< \brief GTM ADC Trigger 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   486      IfxEdsadc_TriggerInput_l = 11,  /**< \brief GTM ADC Trigger 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   487      IfxEdsadc_TriggerInput_m = 12,  /**< \brief GTM DSADC Trigger 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   488      IfxEdsadc_TriggerInput_n = 13,  /**< \brief GTM DSADC Trigger 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   489      IfxEdsadc_TriggerInput_o = 14,  /**< \brief Trigger/gate, channel 0,input O */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   490      IfxEdsadc_TriggerInput_p = 15   /**< \brief Trigger/gate, channel 0,input P */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   491  } IfxEdsadc_TriggerInput;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   492  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   493  /** \brief Controls the dithering function for each modulator separately
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   494   * Definition in Ifx_DSADC.MODCFG.B.DITHEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   496  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   497  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   498      IfxEdsadc_dithering_disabled = 0,  /**< \brief dithering function disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   499      IfxEdsadc_dithering_enabled  = 1   /**< \brief dithering function enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   500  } IfxEdsadc_dithering;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   501  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   502  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   504  /** \brief Allows copying of bitfield AMX into bitfield TIMESTAMP
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   505   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   506  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   507  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   508      IfxEdsadc_AnalogMux_doNotCopyAmx = 0,  /**< \brief Do not copy, timestamp uses all 16 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   509      IfxEdsadc_AnalogMux_copyAmx      = 1   /**< \brief Copy AMX to bits TIMESTAMP[15:14], timestamp uses lower 14 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   510  } IfxEdsadc_AnalogMux;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   511  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   512  /** \brief Timestamp Counter Run Control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   513   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   514  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   515  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   516      IfxEdsadc_TimeStampCounterControl_off = 0,  /**< \brief Timestamp counter is off */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   517      IfxEdsadc_TimeStampCounterControl_on  = 1   /**< \brief Timestamp counter is counting at the rate selected by bitfield TSCLK */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   518  } IfxEdsadc_TimeStampCounterControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   519  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   520  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   521  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   523  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   524  /** \brief Modulator Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   526  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   527  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   528      float32                        modulatorClockPeriod;         /**< \brief Modulator clock period */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   529      IfxEdsadc_InputGain            inputGain;                    /**< \brief Modulator gain select of analog input path */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   530      IfxEdsadc_AnalogClockSyncDelay analogClockSyncDelay;         /**< \brief Define the delay in clock cycle after sync signal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   531      IfxEdsadc_InputConfig          positiveInput;                /**< \brief Modulator configuration of positive input line */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   532      IfxEdsadc_InputConfig          negativeInput;                /**< \brief Modulator configuration of negative input line */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   533      IfxEdsadc_InputPin             inputPin;                     /**< \brief Modulator input pin selection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   534      IfxEdsadc_dithering            ditheringEnabled;             /**< \brief Control the Dithering Function for each modulator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   535      boolean                        integratorResetEnabled;       /**< \brief Control the modulator overload handling */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   536      boolean                        inputMuxActionControl;        /**< \brief Defines the mechanism by which the input multiplexer is controlled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   537      IfxEdsadc_InputMuxControlMode  triggerEvent;                 /**< \brief Defines the condition for a trigger event to control the input multiplexer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   538  } IfxEdsadc_ModulatorConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   539  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   540  /** \addtogroup IfxLld_Edsadc_Std_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   541   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   542  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   543  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   544  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   545  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   547  /** \brief Returns the module's suspend state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   548   * TRUE :if module is suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   549   * FALSE:if module is not yet suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   550   * \param edsadc Pointer to EDSADC module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   551   * \return Suspend status (TRUE / FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   552   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   553  IFX_INLINE boolean IfxEdsadc_isModuleSuspended(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   555  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   556   * \param edsadc pointer to EDSADC registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   557   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   558   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   560  IFX_INLINE void IfxEdsadc_setSleepMode(Ifx_EDSADC *edsadc, IfxEdsadc_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   561  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   562  /** \brief Configure the Module to Hard/Soft suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   563   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   564   * \param edsadc Pointer to EDSADC module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   565   * \param mode Module suspend mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   566   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   567   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   568  IFX_INLINE void IfxEdsadc_setSuspendMode(Ifx_EDSADC *edsadc, IfxEdsadc_SuspendMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   569  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   570  /** \brief Enables the conversion of multiple channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   571   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   572   * \param modulatorMask the modulator which should be running (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   573   * \param channelMask the channels which should be scanned (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   574   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   575   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   576   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   578   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   579  IFX_INLINE void IfxEdsadc_startScan(Ifx_EDSADC *edsadc, uint32 modulatorMask, uint32 channelMask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   580  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   581  /** \brief Disables the conversion of multiple channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   582   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   583   * \param modulatorMask the modulator which should be disabled (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   584   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   585   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   586   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   587   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   589  IFX_INLINE void IfxEdsadc_stopScan(Ifx_EDSADC *edsadc, uint32 modulatorMask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   592  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   593  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   594  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   595  /** \brief Disables the module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   596   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   598   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   599  IFX_EXTERN void IfxEdsadc_disableModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   600  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   601  /** \brief Enables the module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   602   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   603   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   604   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   605  IFX_EXTERN void IfxEdsadc_enableModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   606  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   607  /** \brief resets EDSADC kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   608   * \param edsadc pointer to EDSADC registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   609   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   611  IFX_EXTERN void IfxEdsadc_resetModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   613  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   615  /** \addtogroup IfxLld_Edsadc_Std_Support
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   616   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   617  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   618  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   619  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   620  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   622  /** \brief Get the main comb decimation factor
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   623   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   624   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   625   * \return the main comb decimation factor
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   626   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   627  IFX_INLINE uint16 IfxEdsadc_getMainCombDecimation(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   629  /** \brief Get result from the main chain
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   630   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   631   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   632   * \return result from the main chain
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   633   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   634   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   635   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   636   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   637  IFX_INLINE sint16 IfxEdsadc_getMainResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   639  /** \brief Get the subsequent result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   640   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   641  IFX_INLINE sint32 IfxEdsadc_getSubsequentResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   642  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   643  /** \brief Return TRUE if EDSADC module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   644   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   645   * \return TRUE if EDSADC module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   646   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   647  IFX_INLINE boolean IfxEdsadc_isModuleEnabled(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   648  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   649  /** \brief Set the carrier waveform mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   650   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   651   * \param waveformMode the waveform mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   652   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   653   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   654  IFX_INLINE void IfxEdsadc_setCarrierMode(Ifx_EDSADC *edsadc, IfxEdsadc_CarrierWaveformMode waveformMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   656  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   657  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   658  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   659  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   660  /** \brief Get the sample frequency of the integrator output in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   661   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   662   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   663   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   664   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   665  IFX_EXTERN float32 IfxEdsadc_getIntegratorOutFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   667  /** \brief Get the sample frequency of the main COMB filter output in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   668   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   669   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   670   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   671   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   672  IFX_EXTERN float32 IfxEdsadc_getMainCombOutFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   674  /** \brief Estimate the group delay of main-chain filters in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   675   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   676   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   677   * \return delay in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   678   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   679  IFX_EXTERN float32 IfxEdsadc_getMainGroupDelay(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   681  /** \brief Get the modulator clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   682   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   683   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   684   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   685   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   686  IFX_EXTERN float32 IfxEdsadc_getModulatorClockFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   687  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   688  /** \brief Get the input frequency of EDSADC in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   689   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   690   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   691   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   692  IFX_EXTERN float32 IfxEdsadc_getModulatorInputClockFreq(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   693  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   694  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   695  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   696  /** \addtogroup IfxLld_Edsadc_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   697   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   698  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   699  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   700  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   701  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   702  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   703  /** \brief Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   704   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   705   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   706   * \return Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   708  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxEdsadc_getAuxSrc(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   710  /** \brief Get the interrupt source register for a Main event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   711   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   712   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   713   * \return Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   714   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   715  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxEdsadc_getMainSrc(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   716  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   717  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   718  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   719  /** \addtogroup IfxLld_Edsadc_Std_IO
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   720   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   721  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   722  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   723  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   724  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   725  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   726  /** \brief Initializes a CGPWM output
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   727   * \param cgPwm the CGPWM Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   728   * \param pinMode the pin output mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   729   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   730   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   731   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   732  IFX_INLINE void IfxEdsadc_initCgPwmPin(const IfxEdsadc_Cgpwm_Out *cgPwm, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   733  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   734  /** \brief Initializes a CIN input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   735   * \param cIn the CIN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   736   * \param cInMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   737   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   738   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   739   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   740  IFX_INLINE void IfxEdsadc_initCinPin(const IfxEdsadc_Cin_In *cIn, IfxPort_InputMode cInMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   741  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   742  /** \brief Initializes a COUT output
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   743   * \param cout the COUT Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   744   * \param pinMode the pin output mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   745   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   746   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   748  IFX_INLINE void IfxEdsadc_initCoutPin(const IfxEdsadc_Cout_Out *cout, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   750  /** \brief Initializes a DIN input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   751   * \param dIn the DIN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   752   * \param dInMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   753   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   754   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   755   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   756  IFX_INLINE void IfxEdsadc_initDinPin(const IfxEdsadc_Din_In *dIn, IfxPort_InputMode dInMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   757  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   758  /** \brief Initializes a DS input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   759   * \param dsn the DSN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   760   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   761   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   762   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   763   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   764  IFX_INLINE void IfxEdsadc_initDsnPin(const IfxEdsadc_Dsn_In *dsn, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   765  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   766  /** \brief Initializes a DS input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   767   * \param dsp the DSP Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   768   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   769   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   770   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   771   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   772  IFX_INLINE void IfxEdsadc_initDspPin(const IfxEdsadc_Dsp_In *dsp, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   774  /** \brief Initializes a ITR input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   775   * \param itr the ITR Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   776   * \param itrMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   777   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   778   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   779   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   780  IFX_INLINE void IfxEdsadc_initItrPin(const IfxEdsadc_Itr_In *itr, IfxPort_InputMode itrMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   781  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   782  /** \brief Initializes a SG input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   783   * \param sg the SG Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   784   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   785   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   786   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   787   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   788  IFX_INLINE void IfxEdsadc_initSgPin(const IfxEdsadc_Sg_In *sg, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   789  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   790  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   791  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   792  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   793  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   794  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   795  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   796  /** \brief Returns the positive input line configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   797   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   798   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   799   * \return Positive Input Line Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   800   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   801  IFX_INLINE uint8 IfxEdsadc_getPositiveInputLineConfiguration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   802  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   803  /** \brief Returns the negative input line configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   804   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   805   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   806   * \return Negative Input Line Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   807   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   808  IFX_INLINE uint8 IfxEdsadc_getNegativeInputLineConfiguration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   809  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   810  /** \brief Sets the Offset compensation Value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   811   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   812   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   813   * \param value Value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   814   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   815   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   816  IFX_INLINE void IfxEdsadc_setOffsetCompensationValue(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   818  /** \brief Returns the address of the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   819   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   820   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   821   * \return Address of the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   822   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   823  IFX_INLINE uint32 *IfxEdsadc_getResultRegisterAddress(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   824  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   825  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   826  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   827  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   828  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   829  /** \brief set common mode voltage Parameters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   830   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   831   * \param channel specifies channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   832   * \param voltage select Fractional reference Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   833   * \param refMode Fractional Reference Voltage Enable/ Disable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   834   * \param hsvMode Enable / Disable Half Supply Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   835   * \param cmhvMode Enable / Disable Common Mode Hold Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   836   * \param positiveInput Defines the connection of the respective positive input y to the common mode hold voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   837   * \param negativeInput Defines the connection of the respective negative input y to the common mode hold voltage.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   838   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   839   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   840  IFX_EXTERN void IfxEdsadc_setCommonModeVoltage(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_FractionalRefVoltageSelection voltage, IfxEdsadc_FractionalRefVoltage refMode, IfxEdsadc_HalfSupplyVoltage hsvMode, IfxEdsadc_CommonModeHoldVoltage cmhvMode, uint8 positiveInput, uint8 negativeInput);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   842  /** \brief configure gain correction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   843   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   844   * \param channel Specifies channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   845   * \param gainFactor Multiplication Factor for gain correction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   846   * \param cicShift Position of CIC filter output shifter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   847   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   848   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   849  IFX_EXTERN void IfxEdsadc_setGainCorrectionFactor(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   851  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   852   * \param edsadc Pointer to module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   853   * \param channel specifies channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   854   * \param timeStampCounterClock Time Stamp Counter Clock selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   855   * \param runControl TimeStamp Counter Run Control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   856   * \param analogMuxCopy Analog MUX Setting Copy Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   857   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   858   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   859  IFX_EXTERN void IfxEdsadc_setTimeStampCounter(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_TimeStampCounterClockSelection timeStampCounterClock, IfxEdsadc_TimeStampCounterControl runControl, IfxEdsadc_AnalogMux analogMuxCopy);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   861  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   862   * \param edsadc Pointer to EDSADC SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   863   * \param channel chanel no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   864   * \param gainFactor Multiplication Factor for Gain Correction During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   865   * \param cicShift Position of the CIC Filter Output Shifter During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   866   * \param cicDecimationRate Decimation Rate of the CIC Filter During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   867   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   868   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   869  IFX_EXTERN void IfxEdsadc_setGainControl(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift, uint8 cicDecimationRate);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   870  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   871  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   872   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   873   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   874   * \param calFactor Multiplication Factor for Gain Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   875   * \param calTarget Target Value for Calibrated Fullscale
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   876   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   877   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   878  IFX_EXTERN void IfxEdsadc_setGainCalibration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 calFactor, uint16 calTarget);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   879  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   880  /** \brief Set the Modulator configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   881   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   882   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   883   * \param config Modulator Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   884   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   885   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   886  IFX_EXTERN void IfxEdsadc_configureModulator(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_ModulatorConfig *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   887  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   888  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   889  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   890  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   891  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   892  IFX_INLINE uint16 IfxEdsadc_getMainCombDecimation(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   893  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   894      return (uint16)(1U + edsadc->CH[channel].FCFGC.B.CFMDF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   895  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   896  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   897  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   898  IFX_INLINE sint16 IfxEdsadc_getMainResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   899  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   900      return edsadc->CH[channel].RESM.B.RESULTLO;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   901  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   902  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   903  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   904  IFX_INLINE sint32 IfxEdsadc_getSubsequentResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   905  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   906      return (sint32)(edsadc->CH[channel].RESM.U);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   907  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   908  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   909  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   910  IFX_INLINE void IfxEdsadc_initCgPwmPin(const IfxEdsadc_Cgpwm_Out *cgPwm, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   911  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   912      if (cgPwm->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   913      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   914          IfxPort_setPinModeOutput(cgPwm->pin.port, cgPwm->pin.pinIndex, pinMode, cgPwm->select);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   915          IfxPort_setPinPadDriver(cgPwm->pin.port, cgPwm->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   916      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   917  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   918  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   920  IFX_INLINE void IfxEdsadc_initCinPin(const IfxEdsadc_Cin_In *cIn, IfxPort_InputMode cInMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   921  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   922      if (cIn->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   923      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   924          IfxPort_setPinModeInput(cIn->pin.port, cIn->pin.pinIndex, cInMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   925          IfxPort_setPinPadDriver(cIn->pin.port, cIn->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   926      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   927  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   928  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   929  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   930  IFX_INLINE void IfxEdsadc_initCoutPin(const IfxEdsadc_Cout_Out *cout, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   931  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   932      if (cout->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   933      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   934          IfxPort_setPinModeOutput(cout->pin.port, cout->pin.pinIndex, pinMode, cout->select);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   935          IfxPort_setPinPadDriver(cout->pin.port, cout->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   936      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   937  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   938  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   939  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   940  IFX_INLINE void IfxEdsadc_initDinPin(const IfxEdsadc_Din_In *dIn, IfxPort_InputMode dInMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   941  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   942      if (dIn->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   943      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   944          IfxPort_setPinModeInput(dIn->pin.port, dIn->pin.pinIndex, dInMode);
	fcall	.cocofun_8
.L664:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
	call	IfxPort_setPinMode
.L368:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   945          IfxPort_setPinPadDriver(dIn->pin.port, dIn->pin.pinIndex, padDriver);
	fcall	.cocofun_9
.L665:
	call	IfxPort_setPinPadDriver

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   942      if (dIn->pin.port != NULL_PTR)      (inlined)
.L20:
.L19:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   189          }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   190  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   191          const IfxEdsadc_Itr_In *itr = pins->itr;
	ld.a	a15,[a12]16
.L449:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   192  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   193          if (itr != NULL_PTR)
	jz.a	a15,.L21
.L666:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   194          {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   195              IfxEdsadc_initItrPin(itr, pins->itrMode, pins->pinDriver);
	ld.b	d15,[a12]20
.L667:
	fcall	.cocofun_7
.L372:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   972      if (itr->pin.port != NULL_PTR)      (inlined)
	jz.a	a4,.L22
.L380:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     2   * \file IfxEdsadc.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     3   * \brief EDSADC  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     4   * \ingroup IfxLld_Edsadc
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    41   * \defgroup IfxLld_Edsadc_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    42   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    43   * \defgroup IfxLld_Edsadc_Std_Operative Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    44   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    45   * \defgroup IfxLld_Edsadc_Std_Support Support Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    46   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    47   * \defgroup IfxLld_Edsadc_Std_Interrupt Interrupt Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    48   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    49   * \defgroup IfxLld_Edsadc_Std_IO IO Pin Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    50   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    53  #ifndef IFXEDSADC_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    54  #define IFXEDSADC_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    60  #include "_Impl/IfxEdsadc_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    61  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    62  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    63  #include "_PinMap/IfxEdsadc_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    64  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    65  #include "IfxEdsadc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    66  #include "IfxEdsadc_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    68  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    69  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    70  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    71  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    72  /** \addtogroup IfxLld_Edsadc_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    73   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    74  /** \brief Analog Clock Synchronization Delay
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    75   * Definition in Ifx_DSADC.MODCFG.B.ACSD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    79      IfxEdsadc_AnalogClockSyncDelay_noDelay     = 0,    /**< \brief no delay */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    80      IfxEdsadc_AnalogClockSyncDelay_cycleDelay1 = 1,    /**< \brief Delay of 1 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    81      IfxEdsadc_AnalogClockSyncDelay_cycleDelay2,        /**< \brief Delay of 2 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    82      IfxEdsadc_AnalogClockSyncDelay_cycleDelay3,        /**< \brief Delay of 3 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    83      IfxEdsadc_AnalogClockSyncDelay_cycleDelay4,        /**< \brief Delay of 4 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    84      IfxEdsadc_AnalogClockSyncDelay_cycleDelay5,        /**< \brief Delay of 5 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    85      IfxEdsadc_AnalogClockSyncDelay_cycleDelay6,        /**< \brief Delay of 6 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    86      IfxEdsadc_AnalogClockSyncDelay_cycleDelay7         /**< \brief Delay of 7 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    87  } IfxEdsadc_AnalogClockSyncDelay;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    89  /** \brief Service request generation (auxiliary)\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    90   * Definition in Ifx_EDSADC.FCFGM.B.SRGA
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    91   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    92  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    93  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    94      IfxEdsadc_AuxServiceRequest_never          = 0,  /**< \brief Never, service requests disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    95      IfxEdsadc_AuxServiceRequest_compEvent      = 1,  /**< \brief As selected by bitfield ESEL */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    96      IfxEdsadc_AuxServiceRequest_timestampEvent = 2,  /**< \brief Timestamp Event */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    97      IfxEdsadc_AuxServiceRequest_altSource      = 3   /**< \brief Alternate source: Capturing of a sign delay value to register CGSYNCx (x = 0 - 5) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    98  } IfxEdsadc_AuxServiceRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   100  /** \brief Carrier generation mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   101   * Definition in Ifx_EDSADC.CGCFG.B.CGMOD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   103  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   104  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   105      IfxEdsadc_CarrierWaveformMode_stopped  = 0,  /**< \brief Carrier Generator stopped */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   106      IfxEdsadc_CarrierWaveformMode_square   = 1,  /**< \brief Carrier Generator generates square wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   107      IfxEdsadc_CarrierWaveformMode_triangle = 2,  /**< \brief Carrier Generator generates triangle wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   108      IfxEdsadc_CarrierWaveformMode_sine     = 3   /**< \brief Carrier Generator generates sine wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   109  } IfxEdsadc_CarrierWaveformMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   111  /** \brief Common Mode Hold Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   115      IfxEdsadc_CommonModeHoldVoltage_disable = 0,  /**< \brief VCMH is off */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   116      IfxEdsadc_CommonModeHoldVoltage_enable  = 1   /**< \brief VCMH is generated */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   117  } IfxEdsadc_CommonModeHoldVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   119  /** \brief Select the data to be returned when register RESM is read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   120   * Definition in Ifx_DSADC.DICFG.B.DRM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   121   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   122  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   123  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   124      IfxEdsadc_DataRead_signOnHighbit      = 0,  /**< \brief Single: Issue one 16-bit value per read access (sign on high bits) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   125      IfxEdsadc_DataRead_timestampOnHighbit = 1,  /**< \brief Single: Issue one 16-bit value per read access (timestamp on high bits) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   126      IfxEdsadc_DataRead_double             = 2   /**< \brief Double: Issue two 16-bit values per read access */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   127  } IfxEdsadc_DataRead;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   129  /** \brief Data stream select
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   130   * Definition in Ifx_DSADC.DICFG.B.DSS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   131   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   132  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   133  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   134      IfxEdsadc_DataStream_onChipModulator        = 0,  /**< \brief select data stream from on chip modulator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   135      IfxEdsadc_DataStream_doubleDataClockEdge    = 3,  /**< \brief External modulator, use rising and falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   136      IfxEdsadc_DataStream_directFallingClockEdge = 4,  /**< \brief External modulator, use each falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   137      IfxEdsadc_DataStream_directRisingClockEdge  = 5,  /**< \brief External modulator, use each rising clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   138      IfxEdsadc_DataStream_secondFallingClockEdge = 6,  /**< \brief External modulator, use every 2nd falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   139      IfxEdsadc_DataStream_secondRisingClockEdge  = 7   /**< \brief External modulator, use every 2nd rising clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   140  } IfxEdsadc_DataStream;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   142  /** \brief Trimming Value for Dithering function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   143   * Definition in Ifx_DSADC.GLOBCFG.B.DITRIM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   144   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   145  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   146  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   147      IfxEdsadc_DitheringIntensity_minimum = 0,  /**< \brief Minimum dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   148      IfxEdsadc_DitheringIntensity_low     = 1,  /**< \brief Low dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   149      IfxEdsadc_DitheringIntensity_medium  = 2,  /**< \brief Medium dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   150      IfxEdsadc_DitheringIntensity_high    = 3   /**< \brief High */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   151  } IfxEdsadc_DitheringIntensity;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   152  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   153  /** \brief Define when comparator event is generated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   154   * Definition in Ifx_DSADC.FCFGM.B.ESEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   156  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   157  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   158      IfxEdsadc_EventSelect_everyNewResult = 0,  /**< \brief Always, for each new result value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   159      IfxEdsadc_EventSelect_insideBoundry  = 1,  /**< \brief If result is inside the boundary band */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   160      IfxEdsadc_EventSelect_outsideBoundry = 2   /**< \brief If result is outside the boundary band */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   161  } IfxEdsadc_EventSelect;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   163  /** \brief Defines the duration of the additional filter effect, based on values input to the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   164   * filter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   165   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   166  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   167  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   168      IfxEdsadc_FilterRunTimeInputCycle_2  = 0, /**< \brief 2 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   169      IfxEdsadc_FilterRunTimeInputCycle_4  = 1, /**< \brief 4 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   170      IfxEdsadc_FilterRunTimeInputCycle_8  = 2, /**< \brief 8 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   171      IfxEdsadc_FilterRunTimeInputCycle_16 = 3  /**< \brief 16 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   172  } IfxEdsadc_FilterRunTimeInputCycle;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   173  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   174  /** \brief Specifies Slew Rate Filter Strength
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   175   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   176  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   177  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   178      IfxEdsadc_FilterStrength_minimum = 0,  /**< \brief Minimum filter effect, early attenuation, linear operation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   179      IfxEdsadc_FilterStrength_weak    = 1,  /**< \brief Weak filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   180      IfxEdsadc_FilterStrength_medium  = 2,  /**< \brief Medium filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   181      IfxEdsadc_FilterStrength_maximum = 3   /**< \brief maximum filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   182  } IfxEdsadc_FilterStrength;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   184  /** \brief Fractional Reference Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   185   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   186  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   187  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   188      IfxEdsadc_FractionalRefVoltage_disable = 0,  /**< \brief VREFX is not connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   189      IfxEdsadc_FractionalRefVoltage_enable  = 1   /**< \brief VREFX is connected, value according to VREFXSEL */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   190  } IfxEdsadc_FractionalRefVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   192  /** \brief Fraction reference voltage selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   194  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   195  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   196      IfxEdsadc_FractionalRefVoltageSelection_div2  = 0, /**< \brief VREFX = VAREF / 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   197      IfxEdsadc_FractionalRefVoltageSelection_div4  = 1, /**< \brief VREFX = VAREF / 4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   198      IfxEdsadc_FractionalRefVoltageSelection_div8  = 2, /**< \brief VREFX = VAREF / 8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   199      IfxEdsadc_FractionalRefVoltageSelection_div16 = 3  /**< \brief VREFX = VAREF / 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   200  } IfxEdsadc_FractionalRefVoltageSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   202  /** \brief Half Supply Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   204  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   205  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   206      IfxEdsadc_HalfSupplyVoltage_disable = 0,  /**< \brief VDDM / 2 is not connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   207      IfxEdsadc_HalfSupplyVoltage_enable  = 1   /**< \brief VDDM / 2 is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   208  } IfxEdsadc_HalfSupplyVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   209  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   210  /** \brief Modulator configuration of positive/negative input line\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   211   * Definition in Ifx_DSADC.MODCFGx.B.INCFGP and Ifx_DSADC.MODCFGx.B.INCFGN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   213  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   214  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   215      IfxEdsadc_InputConfig_inputPin          = 0,  /**< \brief Modulator input connected to external pin */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   216      IfxEdsadc_InputConfig_supplyVoltage     = 1,  /**< \brief Modulator input connected to supply voltage V_ddm */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   217      IfxEdsadc_InputConfig_commonModeVoltage = 2,  /**< \brief Modulator input connected to common mode voltage V_cm */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   218      IfxEdsadc_InputConfig_referenceGround   = 3   /**< \brief Modulator input connected to reference ground V_ref */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   219  } IfxEdsadc_InputConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   221  /** \brief Demodulator input data source selection\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   222   * Definition in Ifx_EDSADC.DICFG.B.DSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   223   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   224  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   225  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   226      IfxEdsadc_InputDataSource_directInputA   = 0,  /**< \brief External, from input A, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   227      IfxEdsadc_InputDataSource_invertedInputA = 1,  /**< \brief External, from input A, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   228      IfxEdsadc_InputDataSource_directInputB   = 2,  /**< \brief External, from input B, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   229      IfxEdsadc_InputDataSource_invertedInputB = 3,  /**< \brief External, from input B, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   230      IfxEdsadc_InputDataSource_directInputC   = 4,  /**< \brief External, from input C, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   231      IfxEdsadc_InputDataSource_invertedInputC = 5,  /**< \brief External, from input C, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   232      IfxEdsadc_InputDataSource_directInputD   = 6,  /**< \brief External, from input D, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   233      IfxEdsadc_InputDataSource_invertedInputD = 7   /**< \brief External, from input D, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   234  } IfxEdsadc_InputDataSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   235  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   236  /** \brief Modulator gain select of analog input path\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   237   * Definition in Ifx_DSADC.MODCFGx.B.GAINSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   239  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   240  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   241      IfxEdsadc_InputGain_factor1  = 0, /**< \brief Input gain factor: 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   242      IfxEdsadc_InputGain_factor2  = 1, /**< \brief Input gain factor: 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   243      IfxEdsadc_InputGain_factor4  = 2, /**< \brief Input gain factor: 4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   244      IfxEdsadc_InputGain_factor8  = 3, /**< \brief Input gain factor: 8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   245      IfxEdsadc_InputGain_factor16 = 4  /**< \brief Input gain factor: 16 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   246  } IfxEdsadc_InputGain;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   247  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   248  /** \brief specifies input multiplexer control mode defined in MODULE_EDSADC.MODCFG.B.INMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   250  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   251  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   252      IfxEdsadc_InputMuxControlMode_softwareControl = 0,  /**< \brief Trigger Event by software (INMUX follows INSEL) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   253      IfxEdsadc_InputMuxControlMode_fallingEdge     = 1,  /**< \brief Trigger Event on Falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   254      IfxEdsadc_InputMuxControlMode_risingEdge      = 2,  /**< \brief Trigger Event on Rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   255      IfxEdsadc_InputMuxControlMode_always          = 3   /**< \brief Trigger event on any edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   256  } IfxEdsadc_InputMuxControlMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   258  /** \brief Modulator input pin selection\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   259   * Definition in Ifx_DSADC.MODCFGx.B.INMUX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   260   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   261  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   262  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   263      IfxEdsadc_InputPin_a = 0,  /**< \brief Pin A connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   264      IfxEdsadc_InputPin_b = 1,  /**< \brief Pin B connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   265      IfxEdsadc_InputPin_c = 2,  /**< \brief Pin C connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   266      IfxEdsadc_InputPin_d = 3   /**< \brief Pin D connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   267  } IfxEdsadc_InputPin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   269  /** \brief Controls the data shifter after the integrator that selects the portion of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   270   * integrator data for the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   271   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   272  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   274      IfxEdsadc_IntegrationShiftControl_0 = 0,      /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   275      IfxEdsadc_IntegrationShiftControl_1,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   276      IfxEdsadc_IntegrationShiftControl_2,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   277      IfxEdsadc_IntegrationShiftControl_3,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   278      IfxEdsadc_IntegrationShiftControl_4,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   279      IfxEdsadc_IntegrationShiftControl_5           /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   280  } IfxEdsadc_IntegrationShiftControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   281  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   282  /** \brief Integrator window size\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   283   * Definition in Ifx_DSADC.IWCTR.B.IWS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   284   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   285  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   286  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   287      IfxEdsadc_IntegrationWindowSize_internalControl = 0,  /**< \brief Internal control: stop integrator after REPVAL+1 integration cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   288      IfxEdsadc_IntegrationWindowSize_externalControl = 1   /**< \brief External control: stop integrator when bit INTEN becomes 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   289  } IfxEdsadc_IntegrationWindowSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   291  /** \brief Integrator trigger mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   292   * NOTE: switch-first to bypassed before using other mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   293   * Definition in Ifx_EDSADC.DICFG.B.ITRMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   295  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   296  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   297      IfxEdsadc_IntegratorTrigger_bypassed     = 0, /**< \brief No integration trigger, integrator bypassed */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   298      IfxEdsadc_IntegratorTrigger_fallingEdge  = 1, /**< \brief Trigger event upon a falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   299      IfxEdsadc_IntegratorTrigger_risingEdge   = 2, /**< \brief Trigger event upon a rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   300      IfxEdsadc_IntegratorTrigger_alwaysActive = 3  /**< \brief No trigger, integrator active all the time */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   301  } IfxEdsadc_IntegratorTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   303  /** \brief Service request generation (main chain)\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   304   * Definition in Ifx_EDSADC.FCFGM.B.SRGM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   305   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   306  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   307  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   308      IfxEdsadc_MainServiceRequest_never          = 0,  /**< \brief Never, service requests disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   309      IfxEdsadc_MainServiceRequest_highGateSignal = 1,  /**< \brief While gate (selected trigger signal) is high */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   310      IfxEdsadc_MainServiceRequest_lowGateSignal  = 2,  /**< \brief While gate (selected trigger signal) is low */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   311      IfxEdsadc_MainServiceRequest_everyNewResult = 3   /**< \brief Always, for each new result value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   312  } IfxEdsadc_MainServiceRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   313  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   314  /** \brief Modulator divider factor for modulator clock\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   315   * Definition in Ifx_EDSADC.MODCFGx.B.DIVM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   317  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   318  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   319      IfxEdsadc_ModulatorClockDivider_div4 = 0,      /**< \brief f_mod = f_clk / 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   320      IfxEdsadc_ModulatorClockDivider_div6,          /**< \brief f_mod = f_clk / 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   321      IfxEdsadc_ModulatorClockDivider_div8,          /**< \brief f_mod = f_clk / 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   322      IfxEdsadc_ModulatorClockDivider_div10,         /**< \brief f_mod = f_clk / 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   323      IfxEdsadc_ModulatorClockDivider_div12,         /**< \brief f_mod = f_clk / 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   324      IfxEdsadc_ModulatorClockDivider_div14,         /**< \brief f_mod = f_clk / 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   325      IfxEdsadc_ModulatorClockDivider_div16,         /**< \brief f_mod = f_clk / 16  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   326      IfxEdsadc_ModulatorClockDivider_div18          /**< \brief f_mod = f_clk / 18  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   327  } IfxEdsadc_ModulatorClockDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   329  /** \brief Defines the way the modulator clock is generated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   330   * Definition in Ifx_DSADC.GLOBCFG.B.USC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   331   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   332  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   333  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   334      IfxEdsadc_ModulatorClockGeneration_syncMode   = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   335      IfxEdsadc_ModulatorClockGeneration_unsyncMode = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   336  } IfxEdsadc_ModulatorClockGeneration;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   338  /** \brief Enable the offset compensation filter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   339   * Definition in Ifx_DSADC.FCFGM.B.OCEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   340   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   341  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   342  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   343      IfxEdsadc_OffsetCompensationFilter_disabled        = 0,  /**< \brief Offset Compensation filter disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   344      IfxEdsadc_OffsetCompensationFilter_enablewithRateA = 1,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   345      IfxEdsadc_OffsetCompensationFilter_enablewithRateB = 2,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   346      IfxEdsadc_OffsetCompensationFilter_enablewithRateC = 3,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate C */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   347      IfxEdsadc_OffsetCompensationFilter_enablewithRateD = 4,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate D */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   348      IfxEdsadc_OffsetCompensationFilter_enablewithRateE = 5,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate E */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   349      IfxEdsadc_OffsetCompensationFilter_enablewithRateF = 6,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate F */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   350      IfxEdsadc_OffsetCompensationFilter_enablewithRateG = 7   /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate G */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   351  } IfxEdsadc_OffsetCompensationFilter;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   353  /** \brief Overshoot Compensation Enable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   354   * Defined in fx_DSADC.FCFGM.B.OVCEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   355   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   356  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   357  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   358      IfxEdsadc_OvershootCompensation_disabled = 0,  /**< \brief Disabled, feed FIR filter directly */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   359      IfxEdsadc_OvershootCompensation_enabled  = 1   /**< \brief Attenuate response to fast edges */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   360  } IfxEdsadc_OvershootCompensation;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   362  /** \brief Rectifier sign source\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   363   * Selects the sign signal that is to be delayed.\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   364   * Definition in Ifx_DSADC.RECT.B.SSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   365   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   366  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   367  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   368      IfxEdsadc_RectifierSignSource_onChipGenerator = 0,  /**< \brief On-chip carrier generator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   369      IfxEdsadc_RectifierSignSource_nextChannel     = 1,  /**< \brief Sign of result of next channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   370      IfxEdsadc_RectifierSignSource_externalA       = 2,  /**< \brief External sign signal A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   371      IfxEdsadc_RectifierSignSource_externalB       = 3   /**< \brief External sign signal B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   372  } IfxEdsadc_RectifierSignSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   373  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   374  /** \brief Restart the filter chain when an integration window starts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   375   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   376  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   377  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   378      IfxEdsadc_RestartFilterChain_on  = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   379      IfxEdsadc_RestartFilterChain_off = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   380  } IfxEdsadc_RestartFilterChain;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   382  /** \brief specifies result display mode (signed/unsigned)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   383   * Definition in Ifx_DSADC.DICFG.B.RDM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   385  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   386  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   387      IfxEdsadc_ResultDisplayMode_signed   = 0, /**< \brief Signed: result values range from -215 to +215 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   388      IfxEdsadc_ResultDisplayMode_unsigned = 1  /**< \brief Unsigned: result values range from 0 to +216 (shifted by 215) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   389  } IfxEdsadc_ResultDisplayMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   390  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   391  /** \brief Demodulator sample clock source select\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   392   * Definition in Ifx_EDSADC.DICFG.B.CSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   393   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   394  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   395  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   396      IfxEdsadc_SampleClockSource_internal = 0,  /**< \brief Internal clock */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   397      IfxEdsadc_SampleClockSource_inputA   = 3,  /**< \brief External clock, from Input A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   398      IfxEdsadc_SampleClockSource_inputB   = 4,  /**< \brief External clock, from Input B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   399      IfxEdsadc_SampleClockSource_inputC   = 5   /**< \brief External clock, from Input C */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   400  } IfxEdsadc_SampleClockSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   402  /** \brief Service request fifo level
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   403   * Definition in Ifx_EDSADC.RFC.B.SRLVL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   405  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   406  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   407      IfxEdsadc_ServiceRequestFifolevel_1 = 0,      /**< \brief Generate a service request when Fifo contain level 1 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   408      IfxEdsadc_ServiceRequestFifolevel_2,          /**< \brief Generate a service request when Fifo contain level 2 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   409      IfxEdsadc_ServiceRequestFifolevel_3,          /**< \brief Generate a service request when Fifo contain level 3 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   410      IfxEdsadc_ServiceRequestFifolevel_4           /**< \brief Generate a service request when Fifo contain level 4 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   411  } IfxEdsadc_ServiceRequestFifolevel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   413  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   414   * Definition in Ifx_EDSADC.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   415   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   416  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   417  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   418      IfxEdsadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   419      IfxEdsadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   420  } IfxEdsadc_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   422  /** \brief Defines when the slew rate filter is activated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   424  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   425  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   426      IfxEdsadc_StepDetectionMode_lastInput       = 0, /**< \brief Compare threshold to difference of current and last input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   427      IfxEdsadc_StepDetectionMode_secondlastInput = 1  /**< \brief Compare threshold to difference of current and second-last input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   428  } IfxEdsadc_StepDetectionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   430  /** \brief Adjusts the analog circuitry to the supply voltage used in the application
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   431   * system.Defined In defined in MODULE_EDSADC.GLOBCFG.B.SUPLEV
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   433  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   434  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   435      IfxEdsadc_SupplyVoltageLevel_automaticControl = 0,  /**< \brief voltage range is controlled by the power supply */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   436      IfxEdsadc_SupplyVoltageLevel_upperVoltage     = 1,  /**< \brief Upper voltage range: assume a 5 V power supply is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   437      IfxEdsadc_SupplyVoltageLevel_lowerVoltage     = 2   /**< \brief Lower voltage range: assume a 3.3 V power supply is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   438  } IfxEdsadc_SupplyVoltageLevel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   439  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   440  /** \brief OCDS Suspend Control (OCDS.SUS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   441   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   442  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   443  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   444      IfxEdsadc_SuspendMode_none = 0,  /**< \brief No suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   445      IfxEdsadc_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   446      IfxEdsadc_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   447  } IfxEdsadc_SuspendMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   448  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   449  /** \brief Time Stamp Counter Clock Selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   450   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   451  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   452  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   453      IfxEdsadc_TimeStampCounterClockSelection_div1 = 0,  /**< \brief fTSTMP = fMOD */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   454      IfxEdsadc_TimeStampCounterClockSelection_div2 = 1,  /**< \brief fTSTMP = fMOD/2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   455      IfxEdsadc_TimeStampCounterClockSelection_div4 = 2,  /**< \brief fTSTMP = fMOD/4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   456      IfxEdsadc_TimeStampCounterClockSelection_div8 = 3   /**< \brief fTSTMP = fMOD/8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   457  } IfxEdsadc_TimeStampCounterClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   458  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   459  /** \brief Timestamp trigger mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   460   * Definition in Ifx_EDSADC.DICFG.B.TSTRMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   462  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   463  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   464      IfxEdsadc_TimestampTrigger_noTrigger   = 0,  /**< \brief No timestamp trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   465      IfxEdsadc_TimestampTrigger_fallingEdge = 1,  /**< \brief Trigger event upon a falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   466      IfxEdsadc_TimestampTrigger_risingEdge  = 2,  /**< \brief Trigger event upon a rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   467      IfxEdsadc_TimestampTrigger_eachEdge    = 3   /**< \brief Trigger event upon each edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   468  } IfxEdsadc_TimestampTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   469  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   470  /** \brief Trigger select\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   471   * Definition in Ifx_EDSADC.DICFG.B.TRSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   473  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   474  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   475      IfxEdsadc_TriggerInput_a = 0,   /**< \brief GTM EDSADC Trigger 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   476      IfxEdsadc_TriggerInput_b = 1,   /**< \brief GTM EDSADC Trigger 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   477      IfxEdsadc_TriggerInput_c = 2,   /**< \brief GTM ADC Trigger 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   478      IfxEdsadc_TriggerInput_d = 3,   /**< \brief GTM ADC Trigger 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   479      IfxEdsadc_TriggerInput_e = 4,   /**< \brief Trigger/gate via port input P33.0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   480      IfxEdsadc_TriggerInput_f = 5,   /**< \brief Trigger/gate via port input P33.4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   481      IfxEdsadc_TriggerInput_g = 6,   /**< \brief ERU pattern detection output 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   482      IfxEdsadc_TriggerInput_h = 7,   /**< \brief Trigger/gate, channel 0,input H */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   483      IfxEdsadc_TriggerInput_i = 8,   /**< \brief Trigger/gate, channel 0,input I */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   484      IfxEdsadc_TriggerInput_j = 9,   /**< \brief Trigger/gate, channel 0,input J */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   485      IfxEdsadc_TriggerInput_k = 10,  /**< \brief GTM ADC Trigger 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   486      IfxEdsadc_TriggerInput_l = 11,  /**< \brief GTM ADC Trigger 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   487      IfxEdsadc_TriggerInput_m = 12,  /**< \brief GTM DSADC Trigger 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   488      IfxEdsadc_TriggerInput_n = 13,  /**< \brief GTM DSADC Trigger 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   489      IfxEdsadc_TriggerInput_o = 14,  /**< \brief Trigger/gate, channel 0,input O */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   490      IfxEdsadc_TriggerInput_p = 15   /**< \brief Trigger/gate, channel 0,input P */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   491  } IfxEdsadc_TriggerInput;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   492  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   493  /** \brief Controls the dithering function for each modulator separately
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   494   * Definition in Ifx_DSADC.MODCFG.B.DITHEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   496  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   497  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   498      IfxEdsadc_dithering_disabled = 0,  /**< \brief dithering function disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   499      IfxEdsadc_dithering_enabled  = 1   /**< \brief dithering function enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   500  } IfxEdsadc_dithering;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   501  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   502  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   504  /** \brief Allows copying of bitfield AMX into bitfield TIMESTAMP
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   505   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   506  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   507  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   508      IfxEdsadc_AnalogMux_doNotCopyAmx = 0,  /**< \brief Do not copy, timestamp uses all 16 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   509      IfxEdsadc_AnalogMux_copyAmx      = 1   /**< \brief Copy AMX to bits TIMESTAMP[15:14], timestamp uses lower 14 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   510  } IfxEdsadc_AnalogMux;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   511  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   512  /** \brief Timestamp Counter Run Control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   513   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   514  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   515  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   516      IfxEdsadc_TimeStampCounterControl_off = 0,  /**< \brief Timestamp counter is off */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   517      IfxEdsadc_TimeStampCounterControl_on  = 1   /**< \brief Timestamp counter is counting at the rate selected by bitfield TSCLK */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   518  } IfxEdsadc_TimeStampCounterControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   519  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   520  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   521  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   523  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   524  /** \brief Modulator Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   526  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   527  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   528      float32                        modulatorClockPeriod;         /**< \brief Modulator clock period */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   529      IfxEdsadc_InputGain            inputGain;                    /**< \brief Modulator gain select of analog input path */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   530      IfxEdsadc_AnalogClockSyncDelay analogClockSyncDelay;         /**< \brief Define the delay in clock cycle after sync signal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   531      IfxEdsadc_InputConfig          positiveInput;                /**< \brief Modulator configuration of positive input line */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   532      IfxEdsadc_InputConfig          negativeInput;                /**< \brief Modulator configuration of negative input line */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   533      IfxEdsadc_InputPin             inputPin;                     /**< \brief Modulator input pin selection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   534      IfxEdsadc_dithering            ditheringEnabled;             /**< \brief Control the Dithering Function for each modulator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   535      boolean                        integratorResetEnabled;       /**< \brief Control the modulator overload handling */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   536      boolean                        inputMuxActionControl;        /**< \brief Defines the mechanism by which the input multiplexer is controlled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   537      IfxEdsadc_InputMuxControlMode  triggerEvent;                 /**< \brief Defines the condition for a trigger event to control the input multiplexer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   538  } IfxEdsadc_ModulatorConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   539  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   540  /** \addtogroup IfxLld_Edsadc_Std_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   541   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   542  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   543  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   544  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   545  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   547  /** \brief Returns the module's suspend state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   548   * TRUE :if module is suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   549   * FALSE:if module is not yet suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   550   * \param edsadc Pointer to EDSADC module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   551   * \return Suspend status (TRUE / FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   552   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   553  IFX_INLINE boolean IfxEdsadc_isModuleSuspended(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   555  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   556   * \param edsadc pointer to EDSADC registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   557   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   558   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   560  IFX_INLINE void IfxEdsadc_setSleepMode(Ifx_EDSADC *edsadc, IfxEdsadc_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   561  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   562  /** \brief Configure the Module to Hard/Soft suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   563   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   564   * \param edsadc Pointer to EDSADC module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   565   * \param mode Module suspend mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   566   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   567   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   568  IFX_INLINE void IfxEdsadc_setSuspendMode(Ifx_EDSADC *edsadc, IfxEdsadc_SuspendMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   569  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   570  /** \brief Enables the conversion of multiple channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   571   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   572   * \param modulatorMask the modulator which should be running (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   573   * \param channelMask the channels which should be scanned (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   574   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   575   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   576   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   578   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   579  IFX_INLINE void IfxEdsadc_startScan(Ifx_EDSADC *edsadc, uint32 modulatorMask, uint32 channelMask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   580  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   581  /** \brief Disables the conversion of multiple channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   582   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   583   * \param modulatorMask the modulator which should be disabled (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   584   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   585   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   586   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   587   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   589  IFX_INLINE void IfxEdsadc_stopScan(Ifx_EDSADC *edsadc, uint32 modulatorMask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   592  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   593  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   594  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   595  /** \brief Disables the module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   596   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   598   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   599  IFX_EXTERN void IfxEdsadc_disableModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   600  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   601  /** \brief Enables the module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   602   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   603   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   604   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   605  IFX_EXTERN void IfxEdsadc_enableModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   606  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   607  /** \brief resets EDSADC kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   608   * \param edsadc pointer to EDSADC registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   609   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   611  IFX_EXTERN void IfxEdsadc_resetModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   613  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   615  /** \addtogroup IfxLld_Edsadc_Std_Support
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   616   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   617  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   618  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   619  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   620  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   622  /** \brief Get the main comb decimation factor
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   623   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   624   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   625   * \return the main comb decimation factor
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   626   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   627  IFX_INLINE uint16 IfxEdsadc_getMainCombDecimation(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   629  /** \brief Get result from the main chain
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   630   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   631   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   632   * \return result from the main chain
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   633   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   634   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   635   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   636   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   637  IFX_INLINE sint16 IfxEdsadc_getMainResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   639  /** \brief Get the subsequent result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   640   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   641  IFX_INLINE sint32 IfxEdsadc_getSubsequentResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   642  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   643  /** \brief Return TRUE if EDSADC module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   644   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   645   * \return TRUE if EDSADC module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   646   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   647  IFX_INLINE boolean IfxEdsadc_isModuleEnabled(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   648  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   649  /** \brief Set the carrier waveform mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   650   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   651   * \param waveformMode the waveform mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   652   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   653   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   654  IFX_INLINE void IfxEdsadc_setCarrierMode(Ifx_EDSADC *edsadc, IfxEdsadc_CarrierWaveformMode waveformMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   656  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   657  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   658  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   659  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   660  /** \brief Get the sample frequency of the integrator output in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   661   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   662   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   663   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   664   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   665  IFX_EXTERN float32 IfxEdsadc_getIntegratorOutFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   667  /** \brief Get the sample frequency of the main COMB filter output in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   668   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   669   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   670   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   671   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   672  IFX_EXTERN float32 IfxEdsadc_getMainCombOutFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   674  /** \brief Estimate the group delay of main-chain filters in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   675   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   676   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   677   * \return delay in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   678   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   679  IFX_EXTERN float32 IfxEdsadc_getMainGroupDelay(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   681  /** \brief Get the modulator clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   682   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   683   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   684   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   685   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   686  IFX_EXTERN float32 IfxEdsadc_getModulatorClockFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   687  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   688  /** \brief Get the input frequency of EDSADC in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   689   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   690   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   691   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   692  IFX_EXTERN float32 IfxEdsadc_getModulatorInputClockFreq(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   693  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   694  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   695  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   696  /** \addtogroup IfxLld_Edsadc_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   697   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   698  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   699  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   700  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   701  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   702  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   703  /** \brief Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   704   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   705   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   706   * \return Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   708  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxEdsadc_getAuxSrc(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   710  /** \brief Get the interrupt source register for a Main event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   711   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   712   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   713   * \return Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   714   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   715  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxEdsadc_getMainSrc(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   716  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   717  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   718  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   719  /** \addtogroup IfxLld_Edsadc_Std_IO
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   720   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   721  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   722  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   723  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   724  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   725  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   726  /** \brief Initializes a CGPWM output
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   727   * \param cgPwm the CGPWM Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   728   * \param pinMode the pin output mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   729   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   730   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   731   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   732  IFX_INLINE void IfxEdsadc_initCgPwmPin(const IfxEdsadc_Cgpwm_Out *cgPwm, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   733  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   734  /** \brief Initializes a CIN input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   735   * \param cIn the CIN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   736   * \param cInMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   737   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   738   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   739   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   740  IFX_INLINE void IfxEdsadc_initCinPin(const IfxEdsadc_Cin_In *cIn, IfxPort_InputMode cInMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   741  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   742  /** \brief Initializes a COUT output
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   743   * \param cout the COUT Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   744   * \param pinMode the pin output mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   745   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   746   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   748  IFX_INLINE void IfxEdsadc_initCoutPin(const IfxEdsadc_Cout_Out *cout, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   750  /** \brief Initializes a DIN input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   751   * \param dIn the DIN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   752   * \param dInMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   753   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   754   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   755   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   756  IFX_INLINE void IfxEdsadc_initDinPin(const IfxEdsadc_Din_In *dIn, IfxPort_InputMode dInMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   757  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   758  /** \brief Initializes a DS input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   759   * \param dsn the DSN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   760   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   761   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   762   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   763   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   764  IFX_INLINE void IfxEdsadc_initDsnPin(const IfxEdsadc_Dsn_In *dsn, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   765  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   766  /** \brief Initializes a DS input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   767   * \param dsp the DSP Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   768   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   769   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   770   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   771   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   772  IFX_INLINE void IfxEdsadc_initDspPin(const IfxEdsadc_Dsp_In *dsp, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   774  /** \brief Initializes a ITR input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   775   * \param itr the ITR Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   776   * \param itrMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   777   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   778   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   779   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   780  IFX_INLINE void IfxEdsadc_initItrPin(const IfxEdsadc_Itr_In *itr, IfxPort_InputMode itrMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   781  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   782  /** \brief Initializes a SG input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   783   * \param sg the SG Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   784   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   785   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   786   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   787   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   788  IFX_INLINE void IfxEdsadc_initSgPin(const IfxEdsadc_Sg_In *sg, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   789  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   790  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   791  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   792  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   793  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   794  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   795  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   796  /** \brief Returns the positive input line configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   797   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   798   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   799   * \return Positive Input Line Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   800   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   801  IFX_INLINE uint8 IfxEdsadc_getPositiveInputLineConfiguration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   802  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   803  /** \brief Returns the negative input line configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   804   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   805   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   806   * \return Negative Input Line Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   807   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   808  IFX_INLINE uint8 IfxEdsadc_getNegativeInputLineConfiguration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   809  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   810  /** \brief Sets the Offset compensation Value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   811   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   812   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   813   * \param value Value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   814   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   815   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   816  IFX_INLINE void IfxEdsadc_setOffsetCompensationValue(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   818  /** \brief Returns the address of the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   819   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   820   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   821   * \return Address of the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   822   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   823  IFX_INLINE uint32 *IfxEdsadc_getResultRegisterAddress(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   824  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   825  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   826  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   827  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   828  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   829  /** \brief set common mode voltage Parameters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   830   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   831   * \param channel specifies channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   832   * \param voltage select Fractional reference Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   833   * \param refMode Fractional Reference Voltage Enable/ Disable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   834   * \param hsvMode Enable / Disable Half Supply Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   835   * \param cmhvMode Enable / Disable Common Mode Hold Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   836   * \param positiveInput Defines the connection of the respective positive input y to the common mode hold voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   837   * \param negativeInput Defines the connection of the respective negative input y to the common mode hold voltage.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   838   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   839   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   840  IFX_EXTERN void IfxEdsadc_setCommonModeVoltage(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_FractionalRefVoltageSelection voltage, IfxEdsadc_FractionalRefVoltage refMode, IfxEdsadc_HalfSupplyVoltage hsvMode, IfxEdsadc_CommonModeHoldVoltage cmhvMode, uint8 positiveInput, uint8 negativeInput);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   842  /** \brief configure gain correction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   843   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   844   * \param channel Specifies channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   845   * \param gainFactor Multiplication Factor for gain correction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   846   * \param cicShift Position of CIC filter output shifter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   847   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   848   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   849  IFX_EXTERN void IfxEdsadc_setGainCorrectionFactor(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   851  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   852   * \param edsadc Pointer to module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   853   * \param channel specifies channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   854   * \param timeStampCounterClock Time Stamp Counter Clock selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   855   * \param runControl TimeStamp Counter Run Control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   856   * \param analogMuxCopy Analog MUX Setting Copy Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   857   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   858   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   859  IFX_EXTERN void IfxEdsadc_setTimeStampCounter(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_TimeStampCounterClockSelection timeStampCounterClock, IfxEdsadc_TimeStampCounterControl runControl, IfxEdsadc_AnalogMux analogMuxCopy);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   861  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   862   * \param edsadc Pointer to EDSADC SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   863   * \param channel chanel no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   864   * \param gainFactor Multiplication Factor for Gain Correction During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   865   * \param cicShift Position of the CIC Filter Output Shifter During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   866   * \param cicDecimationRate Decimation Rate of the CIC Filter During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   867   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   868   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   869  IFX_EXTERN void IfxEdsadc_setGainControl(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift, uint8 cicDecimationRate);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   870  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   871  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   872   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   873   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   874   * \param calFactor Multiplication Factor for Gain Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   875   * \param calTarget Target Value for Calibrated Fullscale
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   876   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   877   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   878  IFX_EXTERN void IfxEdsadc_setGainCalibration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 calFactor, uint16 calTarget);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   879  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   880  /** \brief Set the Modulator configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   881   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   882   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   883   * \param config Modulator Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   884   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   885   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   886  IFX_EXTERN void IfxEdsadc_configureModulator(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_ModulatorConfig *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   887  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   888  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   889  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   890  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   891  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   892  IFX_INLINE uint16 IfxEdsadc_getMainCombDecimation(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   893  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   894      return (uint16)(1U + edsadc->CH[channel].FCFGC.B.CFMDF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   895  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   896  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   897  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   898  IFX_INLINE sint16 IfxEdsadc_getMainResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   899  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   900      return edsadc->CH[channel].RESM.B.RESULTLO;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   901  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   902  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   903  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   904  IFX_INLINE sint32 IfxEdsadc_getSubsequentResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   905  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   906      return (sint32)(edsadc->CH[channel].RESM.U);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   907  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   908  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   909  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   910  IFX_INLINE void IfxEdsadc_initCgPwmPin(const IfxEdsadc_Cgpwm_Out *cgPwm, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   911  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   912      if (cgPwm->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   913      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   914          IfxPort_setPinModeOutput(cgPwm->pin.port, cgPwm->pin.pinIndex, pinMode, cgPwm->select);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   915          IfxPort_setPinPadDriver(cgPwm->pin.port, cgPwm->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   916      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   917  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   918  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   920  IFX_INLINE void IfxEdsadc_initCinPin(const IfxEdsadc_Cin_In *cIn, IfxPort_InputMode cInMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   921  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   922      if (cIn->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   923      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   924          IfxPort_setPinModeInput(cIn->pin.port, cIn->pin.pinIndex, cInMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   925          IfxPort_setPinPadDriver(cIn->pin.port, cIn->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   926      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   927  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   928  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   929  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   930  IFX_INLINE void IfxEdsadc_initCoutPin(const IfxEdsadc_Cout_Out *cout, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   931  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   932      if (cout->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   933      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   934          IfxPort_setPinModeOutput(cout->pin.port, cout->pin.pinIndex, pinMode, cout->select);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   935          IfxPort_setPinPadDriver(cout->pin.port, cout->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   936      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   937  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   938  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   939  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   940  IFX_INLINE void IfxEdsadc_initDinPin(const IfxEdsadc_Din_In *dIn, IfxPort_InputMode dInMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   941  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   942      if (dIn->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   943      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   944          IfxPort_setPinModeInput(dIn->pin.port, dIn->pin.pinIndex, dInMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   945          IfxPort_setPinPadDriver(dIn->pin.port, dIn->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   946      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   947  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   948  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   949  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   950  IFX_INLINE void IfxEdsadc_initDsnPin(const IfxEdsadc_Dsn_In *dsn, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   951  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   952      if (dsn->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   953      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   954          IfxPort_setPinModeInput(dsn->pin.port, dsn->pin.pinIndex, pinMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   955          IfxPort_setPinPadDriver(dsn->pin.port, dsn->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   956      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   957  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   958  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   959  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   960  IFX_INLINE void IfxEdsadc_initDspPin(const IfxEdsadc_Dsp_In *dsp, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   961  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   962      if (dsp->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   963      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   964          IfxPort_setPinModeInput(dsp->pin.port, dsp->pin.pinIndex, pinMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   965          IfxPort_setPinPadDriver(dsp->pin.port, dsp->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   966      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   967  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   968  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   969  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   970  IFX_INLINE void IfxEdsadc_initItrPin(const IfxEdsadc_Itr_In *itr, IfxPort_InputMode itrMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   971  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   972      if (itr->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   973      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   974          IfxPort_setPinModeInput(itr->pin.port, itr->pin.pinIndex, itrMode);
	fcall	.cocofun_8
.L668:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
	call	IfxPort_setPinMode
.L381:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   975          IfxPort_setPinPadDriver(itr->pin.port, itr->pin.pinIndex, padDriver);
	fcall	.cocofun_9
.L669:
	j	IfxPort_setPinPadDriver

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   972      if (itr->pin.port != NULL_PTR)      (inlined)
.L22:
.L21:
.L12:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   196          }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   197      }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   198  }
	ret
.L267:
	
__IfxEdsadc_Edsadc_initChannel_function_end:
	.size	IfxEdsadc_Edsadc_initChannel,__IfxEdsadc_Edsadc_initChannel_function_end-IfxEdsadc_Edsadc_initChannel
.L121:
	; End of function
	
	.sdecl	'.text.IfxEdsadc_Edsadc..cocofun_9',code,cluster('.cocofun_9')
	.sect	'.text.IfxEdsadc_Edsadc..cocofun_9'
	.align	2
; Function .cocofun_9
.L41:
.cocofun_9:	.type	func
; Function body .cocofun_9, coco_iter:0

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     2   * \file IfxEdsadc.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     3   * \brief EDSADC  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     4   * \ingroup IfxLld_Edsadc
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    41   * \defgroup IfxLld_Edsadc_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    42   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    43   * \defgroup IfxLld_Edsadc_Std_Operative Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    44   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    45   * \defgroup IfxLld_Edsadc_Std_Support Support Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    46   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    47   * \defgroup IfxLld_Edsadc_Std_Interrupt Interrupt Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    48   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    49   * \defgroup IfxLld_Edsadc_Std_IO IO Pin Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    50   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    53  #ifndef IFXEDSADC_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    54  #define IFXEDSADC_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    60  #include "_Impl/IfxEdsadc_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    61  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    62  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    63  #include "_PinMap/IfxEdsadc_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    64  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    65  #include "IfxEdsadc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    66  #include "IfxEdsadc_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    68  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    69  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    70  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    71  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    72  /** \addtogroup IfxLld_Edsadc_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    73   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    74  /** \brief Analog Clock Synchronization Delay
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    75   * Definition in Ifx_DSADC.MODCFG.B.ACSD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    79      IfxEdsadc_AnalogClockSyncDelay_noDelay     = 0,    /**< \brief no delay */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    80      IfxEdsadc_AnalogClockSyncDelay_cycleDelay1 = 1,    /**< \brief Delay of 1 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    81      IfxEdsadc_AnalogClockSyncDelay_cycleDelay2,        /**< \brief Delay of 2 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    82      IfxEdsadc_AnalogClockSyncDelay_cycleDelay3,        /**< \brief Delay of 3 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    83      IfxEdsadc_AnalogClockSyncDelay_cycleDelay4,        /**< \brief Delay of 4 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    84      IfxEdsadc_AnalogClockSyncDelay_cycleDelay5,        /**< \brief Delay of 5 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    85      IfxEdsadc_AnalogClockSyncDelay_cycleDelay6,        /**< \brief Delay of 6 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    86      IfxEdsadc_AnalogClockSyncDelay_cycleDelay7         /**< \brief Delay of 7 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    87  } IfxEdsadc_AnalogClockSyncDelay;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    89  /** \brief Service request generation (auxiliary)\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    90   * Definition in Ifx_EDSADC.FCFGM.B.SRGA
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    91   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    92  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    93  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    94      IfxEdsadc_AuxServiceRequest_never          = 0,  /**< \brief Never, service requests disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    95      IfxEdsadc_AuxServiceRequest_compEvent      = 1,  /**< \brief As selected by bitfield ESEL */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    96      IfxEdsadc_AuxServiceRequest_timestampEvent = 2,  /**< \brief Timestamp Event */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    97      IfxEdsadc_AuxServiceRequest_altSource      = 3   /**< \brief Alternate source: Capturing of a sign delay value to register CGSYNCx (x = 0 - 5) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    98  } IfxEdsadc_AuxServiceRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   100  /** \brief Carrier generation mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   101   * Definition in Ifx_EDSADC.CGCFG.B.CGMOD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   103  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   104  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   105      IfxEdsadc_CarrierWaveformMode_stopped  = 0,  /**< \brief Carrier Generator stopped */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   106      IfxEdsadc_CarrierWaveformMode_square   = 1,  /**< \brief Carrier Generator generates square wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   107      IfxEdsadc_CarrierWaveformMode_triangle = 2,  /**< \brief Carrier Generator generates triangle wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   108      IfxEdsadc_CarrierWaveformMode_sine     = 3   /**< \brief Carrier Generator generates sine wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   109  } IfxEdsadc_CarrierWaveformMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   111  /** \brief Common Mode Hold Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   115      IfxEdsadc_CommonModeHoldVoltage_disable = 0,  /**< \brief VCMH is off */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   116      IfxEdsadc_CommonModeHoldVoltage_enable  = 1   /**< \brief VCMH is generated */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   117  } IfxEdsadc_CommonModeHoldVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   119  /** \brief Select the data to be returned when register RESM is read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   120   * Definition in Ifx_DSADC.DICFG.B.DRM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   121   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   122  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   123  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   124      IfxEdsadc_DataRead_signOnHighbit      = 0,  /**< \brief Single: Issue one 16-bit value per read access (sign on high bits) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   125      IfxEdsadc_DataRead_timestampOnHighbit = 1,  /**< \brief Single: Issue one 16-bit value per read access (timestamp on high bits) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   126      IfxEdsadc_DataRead_double             = 2   /**< \brief Double: Issue two 16-bit values per read access */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   127  } IfxEdsadc_DataRead;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   129  /** \brief Data stream select
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   130   * Definition in Ifx_DSADC.DICFG.B.DSS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   131   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   132  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   133  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   134      IfxEdsadc_DataStream_onChipModulator        = 0,  /**< \brief select data stream from on chip modulator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   135      IfxEdsadc_DataStream_doubleDataClockEdge    = 3,  /**< \brief External modulator, use rising and falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   136      IfxEdsadc_DataStream_directFallingClockEdge = 4,  /**< \brief External modulator, use each falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   137      IfxEdsadc_DataStream_directRisingClockEdge  = 5,  /**< \brief External modulator, use each rising clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   138      IfxEdsadc_DataStream_secondFallingClockEdge = 6,  /**< \brief External modulator, use every 2nd falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   139      IfxEdsadc_DataStream_secondRisingClockEdge  = 7   /**< \brief External modulator, use every 2nd rising clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   140  } IfxEdsadc_DataStream;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   142  /** \brief Trimming Value for Dithering function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   143   * Definition in Ifx_DSADC.GLOBCFG.B.DITRIM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   144   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   145  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   146  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   147      IfxEdsadc_DitheringIntensity_minimum = 0,  /**< \brief Minimum dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   148      IfxEdsadc_DitheringIntensity_low     = 1,  /**< \brief Low dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   149      IfxEdsadc_DitheringIntensity_medium  = 2,  /**< \brief Medium dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   150      IfxEdsadc_DitheringIntensity_high    = 3   /**< \brief High */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   151  } IfxEdsadc_DitheringIntensity;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   152  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   153  /** \brief Define when comparator event is generated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   154   * Definition in Ifx_DSADC.FCFGM.B.ESEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   156  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   157  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   158      IfxEdsadc_EventSelect_everyNewResult = 0,  /**< \brief Always, for each new result value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   159      IfxEdsadc_EventSelect_insideBoundry  = 1,  /**< \brief If result is inside the boundary band */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   160      IfxEdsadc_EventSelect_outsideBoundry = 2   /**< \brief If result is outside the boundary band */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   161  } IfxEdsadc_EventSelect;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   163  /** \brief Defines the duration of the additional filter effect, based on values input to the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   164   * filter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   165   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   166  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   167  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   168      IfxEdsadc_FilterRunTimeInputCycle_2  = 0, /**< \brief 2 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   169      IfxEdsadc_FilterRunTimeInputCycle_4  = 1, /**< \brief 4 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   170      IfxEdsadc_FilterRunTimeInputCycle_8  = 2, /**< \brief 8 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   171      IfxEdsadc_FilterRunTimeInputCycle_16 = 3  /**< \brief 16 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   172  } IfxEdsadc_FilterRunTimeInputCycle;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   173  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   174  /** \brief Specifies Slew Rate Filter Strength
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   175   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   176  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   177  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   178      IfxEdsadc_FilterStrength_minimum = 0,  /**< \brief Minimum filter effect, early attenuation, linear operation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   179      IfxEdsadc_FilterStrength_weak    = 1,  /**< \brief Weak filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   180      IfxEdsadc_FilterStrength_medium  = 2,  /**< \brief Medium filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   181      IfxEdsadc_FilterStrength_maximum = 3   /**< \brief maximum filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   182  } IfxEdsadc_FilterStrength;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   184  /** \brief Fractional Reference Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   185   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   186  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   187  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   188      IfxEdsadc_FractionalRefVoltage_disable = 0,  /**< \brief VREFX is not connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   189      IfxEdsadc_FractionalRefVoltage_enable  = 1   /**< \brief VREFX is connected, value according to VREFXSEL */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   190  } IfxEdsadc_FractionalRefVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   192  /** \brief Fraction reference voltage selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   194  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   195  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   196      IfxEdsadc_FractionalRefVoltageSelection_div2  = 0, /**< \brief VREFX = VAREF / 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   197      IfxEdsadc_FractionalRefVoltageSelection_div4  = 1, /**< \brief VREFX = VAREF / 4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   198      IfxEdsadc_FractionalRefVoltageSelection_div8  = 2, /**< \brief VREFX = VAREF / 8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   199      IfxEdsadc_FractionalRefVoltageSelection_div16 = 3  /**< \brief VREFX = VAREF / 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   200  } IfxEdsadc_FractionalRefVoltageSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   202  /** \brief Half Supply Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   204  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   205  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   206      IfxEdsadc_HalfSupplyVoltage_disable = 0,  /**< \brief VDDM / 2 is not connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   207      IfxEdsadc_HalfSupplyVoltage_enable  = 1   /**< \brief VDDM / 2 is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   208  } IfxEdsadc_HalfSupplyVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   209  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   210  /** \brief Modulator configuration of positive/negative input line\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   211   * Definition in Ifx_DSADC.MODCFGx.B.INCFGP and Ifx_DSADC.MODCFGx.B.INCFGN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   213  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   214  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   215      IfxEdsadc_InputConfig_inputPin          = 0,  /**< \brief Modulator input connected to external pin */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   216      IfxEdsadc_InputConfig_supplyVoltage     = 1,  /**< \brief Modulator input connected to supply voltage V_ddm */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   217      IfxEdsadc_InputConfig_commonModeVoltage = 2,  /**< \brief Modulator input connected to common mode voltage V_cm */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   218      IfxEdsadc_InputConfig_referenceGround   = 3   /**< \brief Modulator input connected to reference ground V_ref */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   219  } IfxEdsadc_InputConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   221  /** \brief Demodulator input data source selection\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   222   * Definition in Ifx_EDSADC.DICFG.B.DSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   223   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   224  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   225  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   226      IfxEdsadc_InputDataSource_directInputA   = 0,  /**< \brief External, from input A, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   227      IfxEdsadc_InputDataSource_invertedInputA = 1,  /**< \brief External, from input A, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   228      IfxEdsadc_InputDataSource_directInputB   = 2,  /**< \brief External, from input B, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   229      IfxEdsadc_InputDataSource_invertedInputB = 3,  /**< \brief External, from input B, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   230      IfxEdsadc_InputDataSource_directInputC   = 4,  /**< \brief External, from input C, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   231      IfxEdsadc_InputDataSource_invertedInputC = 5,  /**< \brief External, from input C, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   232      IfxEdsadc_InputDataSource_directInputD   = 6,  /**< \brief External, from input D, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   233      IfxEdsadc_InputDataSource_invertedInputD = 7   /**< \brief External, from input D, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   234  } IfxEdsadc_InputDataSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   235  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   236  /** \brief Modulator gain select of analog input path\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   237   * Definition in Ifx_DSADC.MODCFGx.B.GAINSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   239  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   240  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   241      IfxEdsadc_InputGain_factor1  = 0, /**< \brief Input gain factor: 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   242      IfxEdsadc_InputGain_factor2  = 1, /**< \brief Input gain factor: 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   243      IfxEdsadc_InputGain_factor4  = 2, /**< \brief Input gain factor: 4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   244      IfxEdsadc_InputGain_factor8  = 3, /**< \brief Input gain factor: 8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   245      IfxEdsadc_InputGain_factor16 = 4  /**< \brief Input gain factor: 16 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   246  } IfxEdsadc_InputGain;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   247  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   248  /** \brief specifies input multiplexer control mode defined in MODULE_EDSADC.MODCFG.B.INMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   250  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   251  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   252      IfxEdsadc_InputMuxControlMode_softwareControl = 0,  /**< \brief Trigger Event by software (INMUX follows INSEL) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   253      IfxEdsadc_InputMuxControlMode_fallingEdge     = 1,  /**< \brief Trigger Event on Falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   254      IfxEdsadc_InputMuxControlMode_risingEdge      = 2,  /**< \brief Trigger Event on Rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   255      IfxEdsadc_InputMuxControlMode_always          = 3   /**< \brief Trigger event on any edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   256  } IfxEdsadc_InputMuxControlMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   258  /** \brief Modulator input pin selection\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   259   * Definition in Ifx_DSADC.MODCFGx.B.INMUX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   260   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   261  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   262  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   263      IfxEdsadc_InputPin_a = 0,  /**< \brief Pin A connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   264      IfxEdsadc_InputPin_b = 1,  /**< \brief Pin B connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   265      IfxEdsadc_InputPin_c = 2,  /**< \brief Pin C connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   266      IfxEdsadc_InputPin_d = 3   /**< \brief Pin D connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   267  } IfxEdsadc_InputPin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   269  /** \brief Controls the data shifter after the integrator that selects the portion of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   270   * integrator data for the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   271   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   272  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   274      IfxEdsadc_IntegrationShiftControl_0 = 0,      /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   275      IfxEdsadc_IntegrationShiftControl_1,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   276      IfxEdsadc_IntegrationShiftControl_2,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   277      IfxEdsadc_IntegrationShiftControl_3,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   278      IfxEdsadc_IntegrationShiftControl_4,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   279      IfxEdsadc_IntegrationShiftControl_5           /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   280  } IfxEdsadc_IntegrationShiftControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   281  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   282  /** \brief Integrator window size\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   283   * Definition in Ifx_DSADC.IWCTR.B.IWS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   284   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   285  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   286  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   287      IfxEdsadc_IntegrationWindowSize_internalControl = 0,  /**< \brief Internal control: stop integrator after REPVAL+1 integration cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   288      IfxEdsadc_IntegrationWindowSize_externalControl = 1   /**< \brief External control: stop integrator when bit INTEN becomes 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   289  } IfxEdsadc_IntegrationWindowSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   291  /** \brief Integrator trigger mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   292   * NOTE: switch-first to bypassed before using other mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   293   * Definition in Ifx_EDSADC.DICFG.B.ITRMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   295  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   296  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   297      IfxEdsadc_IntegratorTrigger_bypassed     = 0, /**< \brief No integration trigger, integrator bypassed */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   298      IfxEdsadc_IntegratorTrigger_fallingEdge  = 1, /**< \brief Trigger event upon a falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   299      IfxEdsadc_IntegratorTrigger_risingEdge   = 2, /**< \brief Trigger event upon a rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   300      IfxEdsadc_IntegratorTrigger_alwaysActive = 3  /**< \brief No trigger, integrator active all the time */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   301  } IfxEdsadc_IntegratorTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   303  /** \brief Service request generation (main chain)\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   304   * Definition in Ifx_EDSADC.FCFGM.B.SRGM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   305   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   306  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   307  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   308      IfxEdsadc_MainServiceRequest_never          = 0,  /**< \brief Never, service requests disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   309      IfxEdsadc_MainServiceRequest_highGateSignal = 1,  /**< \brief While gate (selected trigger signal) is high */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   310      IfxEdsadc_MainServiceRequest_lowGateSignal  = 2,  /**< \brief While gate (selected trigger signal) is low */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   311      IfxEdsadc_MainServiceRequest_everyNewResult = 3   /**< \brief Always, for each new result value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   312  } IfxEdsadc_MainServiceRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   313  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   314  /** \brief Modulator divider factor for modulator clock\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   315   * Definition in Ifx_EDSADC.MODCFGx.B.DIVM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   317  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   318  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   319      IfxEdsadc_ModulatorClockDivider_div4 = 0,      /**< \brief f_mod = f_clk / 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   320      IfxEdsadc_ModulatorClockDivider_div6,          /**< \brief f_mod = f_clk / 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   321      IfxEdsadc_ModulatorClockDivider_div8,          /**< \brief f_mod = f_clk / 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   322      IfxEdsadc_ModulatorClockDivider_div10,         /**< \brief f_mod = f_clk / 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   323      IfxEdsadc_ModulatorClockDivider_div12,         /**< \brief f_mod = f_clk / 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   324      IfxEdsadc_ModulatorClockDivider_div14,         /**< \brief f_mod = f_clk / 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   325      IfxEdsadc_ModulatorClockDivider_div16,         /**< \brief f_mod = f_clk / 16  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   326      IfxEdsadc_ModulatorClockDivider_div18          /**< \brief f_mod = f_clk / 18  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   327  } IfxEdsadc_ModulatorClockDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   329  /** \brief Defines the way the modulator clock is generated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   330   * Definition in Ifx_DSADC.GLOBCFG.B.USC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   331   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   332  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   333  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   334      IfxEdsadc_ModulatorClockGeneration_syncMode   = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   335      IfxEdsadc_ModulatorClockGeneration_unsyncMode = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   336  } IfxEdsadc_ModulatorClockGeneration;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   338  /** \brief Enable the offset compensation filter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   339   * Definition in Ifx_DSADC.FCFGM.B.OCEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   340   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   341  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   342  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   343      IfxEdsadc_OffsetCompensationFilter_disabled        = 0,  /**< \brief Offset Compensation filter disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   344      IfxEdsadc_OffsetCompensationFilter_enablewithRateA = 1,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   345      IfxEdsadc_OffsetCompensationFilter_enablewithRateB = 2,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   346      IfxEdsadc_OffsetCompensationFilter_enablewithRateC = 3,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate C */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   347      IfxEdsadc_OffsetCompensationFilter_enablewithRateD = 4,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate D */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   348      IfxEdsadc_OffsetCompensationFilter_enablewithRateE = 5,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate E */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   349      IfxEdsadc_OffsetCompensationFilter_enablewithRateF = 6,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate F */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   350      IfxEdsadc_OffsetCompensationFilter_enablewithRateG = 7   /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate G */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   351  } IfxEdsadc_OffsetCompensationFilter;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   353  /** \brief Overshoot Compensation Enable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   354   * Defined in fx_DSADC.FCFGM.B.OVCEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   355   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   356  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   357  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   358      IfxEdsadc_OvershootCompensation_disabled = 0,  /**< \brief Disabled, feed FIR filter directly */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   359      IfxEdsadc_OvershootCompensation_enabled  = 1   /**< \brief Attenuate response to fast edges */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   360  } IfxEdsadc_OvershootCompensation;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   362  /** \brief Rectifier sign source\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   363   * Selects the sign signal that is to be delayed.\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   364   * Definition in Ifx_DSADC.RECT.B.SSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   365   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   366  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   367  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   368      IfxEdsadc_RectifierSignSource_onChipGenerator = 0,  /**< \brief On-chip carrier generator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   369      IfxEdsadc_RectifierSignSource_nextChannel     = 1,  /**< \brief Sign of result of next channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   370      IfxEdsadc_RectifierSignSource_externalA       = 2,  /**< \brief External sign signal A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   371      IfxEdsadc_RectifierSignSource_externalB       = 3   /**< \brief External sign signal B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   372  } IfxEdsadc_RectifierSignSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   373  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   374  /** \brief Restart the filter chain when an integration window starts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   375   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   376  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   377  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   378      IfxEdsadc_RestartFilterChain_on  = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   379      IfxEdsadc_RestartFilterChain_off = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   380  } IfxEdsadc_RestartFilterChain;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   382  /** \brief specifies result display mode (signed/unsigned)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   383   * Definition in Ifx_DSADC.DICFG.B.RDM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   385  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   386  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   387      IfxEdsadc_ResultDisplayMode_signed   = 0, /**< \brief Signed: result values range from -215 to +215 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   388      IfxEdsadc_ResultDisplayMode_unsigned = 1  /**< \brief Unsigned: result values range from 0 to +216 (shifted by 215) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   389  } IfxEdsadc_ResultDisplayMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   390  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   391  /** \brief Demodulator sample clock source select\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   392   * Definition in Ifx_EDSADC.DICFG.B.CSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   393   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   394  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   395  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   396      IfxEdsadc_SampleClockSource_internal = 0,  /**< \brief Internal clock */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   397      IfxEdsadc_SampleClockSource_inputA   = 3,  /**< \brief External clock, from Input A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   398      IfxEdsadc_SampleClockSource_inputB   = 4,  /**< \brief External clock, from Input B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   399      IfxEdsadc_SampleClockSource_inputC   = 5   /**< \brief External clock, from Input C */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   400  } IfxEdsadc_SampleClockSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   402  /** \brief Service request fifo level
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   403   * Definition in Ifx_EDSADC.RFC.B.SRLVL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   405  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   406  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   407      IfxEdsadc_ServiceRequestFifolevel_1 = 0,      /**< \brief Generate a service request when Fifo contain level 1 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   408      IfxEdsadc_ServiceRequestFifolevel_2,          /**< \brief Generate a service request when Fifo contain level 2 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   409      IfxEdsadc_ServiceRequestFifolevel_3,          /**< \brief Generate a service request when Fifo contain level 3 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   410      IfxEdsadc_ServiceRequestFifolevel_4           /**< \brief Generate a service request when Fifo contain level 4 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   411  } IfxEdsadc_ServiceRequestFifolevel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   413  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   414   * Definition in Ifx_EDSADC.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   415   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   416  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   417  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   418      IfxEdsadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   419      IfxEdsadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   420  } IfxEdsadc_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   422  /** \brief Defines when the slew rate filter is activated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   424  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   425  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   426      IfxEdsadc_StepDetectionMode_lastInput       = 0, /**< \brief Compare threshold to difference of current and last input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   427      IfxEdsadc_StepDetectionMode_secondlastInput = 1  /**< \brief Compare threshold to difference of current and second-last input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   428  } IfxEdsadc_StepDetectionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   430  /** \brief Adjusts the analog circuitry to the supply voltage used in the application
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   431   * system.Defined In defined in MODULE_EDSADC.GLOBCFG.B.SUPLEV
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   433  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   434  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   435      IfxEdsadc_SupplyVoltageLevel_automaticControl = 0,  /**< \brief voltage range is controlled by the power supply */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   436      IfxEdsadc_SupplyVoltageLevel_upperVoltage     = 1,  /**< \brief Upper voltage range: assume a 5 V power supply is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   437      IfxEdsadc_SupplyVoltageLevel_lowerVoltage     = 2   /**< \brief Lower voltage range: assume a 3.3 V power supply is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   438  } IfxEdsadc_SupplyVoltageLevel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   439  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   440  /** \brief OCDS Suspend Control (OCDS.SUS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   441   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   442  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   443  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   444      IfxEdsadc_SuspendMode_none = 0,  /**< \brief No suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   445      IfxEdsadc_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   446      IfxEdsadc_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   447  } IfxEdsadc_SuspendMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   448  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   449  /** \brief Time Stamp Counter Clock Selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   450   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   451  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   452  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   453      IfxEdsadc_TimeStampCounterClockSelection_div1 = 0,  /**< \brief fTSTMP = fMOD */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   454      IfxEdsadc_TimeStampCounterClockSelection_div2 = 1,  /**< \brief fTSTMP = fMOD/2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   455      IfxEdsadc_TimeStampCounterClockSelection_div4 = 2,  /**< \brief fTSTMP = fMOD/4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   456      IfxEdsadc_TimeStampCounterClockSelection_div8 = 3   /**< \brief fTSTMP = fMOD/8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   457  } IfxEdsadc_TimeStampCounterClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   458  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   459  /** \brief Timestamp trigger mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   460   * Definition in Ifx_EDSADC.DICFG.B.TSTRMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   462  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   463  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   464      IfxEdsadc_TimestampTrigger_noTrigger   = 0,  /**< \brief No timestamp trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   465      IfxEdsadc_TimestampTrigger_fallingEdge = 1,  /**< \brief Trigger event upon a falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   466      IfxEdsadc_TimestampTrigger_risingEdge  = 2,  /**< \brief Trigger event upon a rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   467      IfxEdsadc_TimestampTrigger_eachEdge    = 3   /**< \brief Trigger event upon each edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   468  } IfxEdsadc_TimestampTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   469  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   470  /** \brief Trigger select\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   471   * Definition in Ifx_EDSADC.DICFG.B.TRSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   473  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   474  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   475      IfxEdsadc_TriggerInput_a = 0,   /**< \brief GTM EDSADC Trigger 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   476      IfxEdsadc_TriggerInput_b = 1,   /**< \brief GTM EDSADC Trigger 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   477      IfxEdsadc_TriggerInput_c = 2,   /**< \brief GTM ADC Trigger 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   478      IfxEdsadc_TriggerInput_d = 3,   /**< \brief GTM ADC Trigger 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   479      IfxEdsadc_TriggerInput_e = 4,   /**< \brief Trigger/gate via port input P33.0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   480      IfxEdsadc_TriggerInput_f = 5,   /**< \brief Trigger/gate via port input P33.4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   481      IfxEdsadc_TriggerInput_g = 6,   /**< \brief ERU pattern detection output 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   482      IfxEdsadc_TriggerInput_h = 7,   /**< \brief Trigger/gate, channel 0,input H */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   483      IfxEdsadc_TriggerInput_i = 8,   /**< \brief Trigger/gate, channel 0,input I */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   484      IfxEdsadc_TriggerInput_j = 9,   /**< \brief Trigger/gate, channel 0,input J */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   485      IfxEdsadc_TriggerInput_k = 10,  /**< \brief GTM ADC Trigger 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   486      IfxEdsadc_TriggerInput_l = 11,  /**< \brief GTM ADC Trigger 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   487      IfxEdsadc_TriggerInput_m = 12,  /**< \brief GTM DSADC Trigger 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   488      IfxEdsadc_TriggerInput_n = 13,  /**< \brief GTM DSADC Trigger 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   489      IfxEdsadc_TriggerInput_o = 14,  /**< \brief Trigger/gate, channel 0,input O */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   490      IfxEdsadc_TriggerInput_p = 15   /**< \brief Trigger/gate, channel 0,input P */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   491  } IfxEdsadc_TriggerInput;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   492  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   493  /** \brief Controls the dithering function for each modulator separately
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   494   * Definition in Ifx_DSADC.MODCFG.B.DITHEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   496  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   497  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   498      IfxEdsadc_dithering_disabled = 0,  /**< \brief dithering function disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   499      IfxEdsadc_dithering_enabled  = 1   /**< \brief dithering function enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   500  } IfxEdsadc_dithering;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   501  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   502  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   504  /** \brief Allows copying of bitfield AMX into bitfield TIMESTAMP
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   505   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   506  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   507  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   508      IfxEdsadc_AnalogMux_doNotCopyAmx = 0,  /**< \brief Do not copy, timestamp uses all 16 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   509      IfxEdsadc_AnalogMux_copyAmx      = 1   /**< \brief Copy AMX to bits TIMESTAMP[15:14], timestamp uses lower 14 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   510  } IfxEdsadc_AnalogMux;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   511  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   512  /** \brief Timestamp Counter Run Control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   513   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   514  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   515  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   516      IfxEdsadc_TimeStampCounterControl_off = 0,  /**< \brief Timestamp counter is off */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   517      IfxEdsadc_TimeStampCounterControl_on  = 1   /**< \brief Timestamp counter is counting at the rate selected by bitfield TSCLK */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   518  } IfxEdsadc_TimeStampCounterControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   519  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   520  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   521  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   523  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   524  /** \brief Modulator Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   526  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   527  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   528      float32                        modulatorClockPeriod;         /**< \brief Modulator clock period */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   529      IfxEdsadc_InputGain            inputGain;                    /**< \brief Modulator gain select of analog input path */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   530      IfxEdsadc_AnalogClockSyncDelay analogClockSyncDelay;         /**< \brief Define the delay in clock cycle after sync signal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   531      IfxEdsadc_InputConfig          positiveInput;                /**< \brief Modulator configuration of positive input line */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   532      IfxEdsadc_InputConfig          negativeInput;                /**< \brief Modulator configuration of negative input line */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   533      IfxEdsadc_InputPin             inputPin;                     /**< \brief Modulator input pin selection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   534      IfxEdsadc_dithering            ditheringEnabled;             /**< \brief Control the Dithering Function for each modulator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   535      boolean                        integratorResetEnabled;       /**< \brief Control the modulator overload handling */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   536      boolean                        inputMuxActionControl;        /**< \brief Defines the mechanism by which the input multiplexer is controlled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   537      IfxEdsadc_InputMuxControlMode  triggerEvent;                 /**< \brief Defines the condition for a trigger event to control the input multiplexer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   538  } IfxEdsadc_ModulatorConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   539  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   540  /** \addtogroup IfxLld_Edsadc_Std_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   541   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   542  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   543  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   544  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   545  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   547  /** \brief Returns the module's suspend state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   548   * TRUE :if module is suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   549   * FALSE:if module is not yet suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   550   * \param edsadc Pointer to EDSADC module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   551   * \return Suspend status (TRUE / FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   552   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   553  IFX_INLINE boolean IfxEdsadc_isModuleSuspended(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   555  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   556   * \param edsadc pointer to EDSADC registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   557   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   558   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   560  IFX_INLINE void IfxEdsadc_setSleepMode(Ifx_EDSADC *edsadc, IfxEdsadc_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   561  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   562  /** \brief Configure the Module to Hard/Soft suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   563   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   564   * \param edsadc Pointer to EDSADC module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   565   * \param mode Module suspend mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   566   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   567   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   568  IFX_INLINE void IfxEdsadc_setSuspendMode(Ifx_EDSADC *edsadc, IfxEdsadc_SuspendMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   569  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   570  /** \brief Enables the conversion of multiple channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   571   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   572   * \param modulatorMask the modulator which should be running (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   573   * \param channelMask the channels which should be scanned (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   574   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   575   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   576   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   578   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   579  IFX_INLINE void IfxEdsadc_startScan(Ifx_EDSADC *edsadc, uint32 modulatorMask, uint32 channelMask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   580  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   581  /** \brief Disables the conversion of multiple channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   582   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   583   * \param modulatorMask the modulator which should be disabled (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   584   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   585   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   586   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   587   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   589  IFX_INLINE void IfxEdsadc_stopScan(Ifx_EDSADC *edsadc, uint32 modulatorMask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   592  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   593  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   594  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   595  /** \brief Disables the module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   596   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   598   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   599  IFX_EXTERN void IfxEdsadc_disableModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   600  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   601  /** \brief Enables the module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   602   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   603   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   604   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   605  IFX_EXTERN void IfxEdsadc_enableModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   606  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   607  /** \brief resets EDSADC kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   608   * \param edsadc pointer to EDSADC registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   609   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   611  IFX_EXTERN void IfxEdsadc_resetModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   613  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   615  /** \addtogroup IfxLld_Edsadc_Std_Support
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   616   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   617  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   618  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   619  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   620  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   622  /** \brief Get the main comb decimation factor
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   623   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   624   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   625   * \return the main comb decimation factor
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   626   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   627  IFX_INLINE uint16 IfxEdsadc_getMainCombDecimation(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   629  /** \brief Get result from the main chain
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   630   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   631   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   632   * \return result from the main chain
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   633   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   634   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   635   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   636   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   637  IFX_INLINE sint16 IfxEdsadc_getMainResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   639  /** \brief Get the subsequent result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   640   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   641  IFX_INLINE sint32 IfxEdsadc_getSubsequentResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   642  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   643  /** \brief Return TRUE if EDSADC module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   644   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   645   * \return TRUE if EDSADC module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   646   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   647  IFX_INLINE boolean IfxEdsadc_isModuleEnabled(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   648  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   649  /** \brief Set the carrier waveform mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   650   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   651   * \param waveformMode the waveform mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   652   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   653   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   654  IFX_INLINE void IfxEdsadc_setCarrierMode(Ifx_EDSADC *edsadc, IfxEdsadc_CarrierWaveformMode waveformMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   656  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   657  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   658  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   659  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   660  /** \brief Get the sample frequency of the integrator output in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   661   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   662   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   663   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   664   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   665  IFX_EXTERN float32 IfxEdsadc_getIntegratorOutFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   667  /** \brief Get the sample frequency of the main COMB filter output in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   668   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   669   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   670   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   671   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   672  IFX_EXTERN float32 IfxEdsadc_getMainCombOutFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   674  /** \brief Estimate the group delay of main-chain filters in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   675   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   676   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   677   * \return delay in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   678   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   679  IFX_EXTERN float32 IfxEdsadc_getMainGroupDelay(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   681  /** \brief Get the modulator clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   682   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   683   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   684   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   685   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   686  IFX_EXTERN float32 IfxEdsadc_getModulatorClockFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   687  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   688  /** \brief Get the input frequency of EDSADC in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   689   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   690   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   691   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   692  IFX_EXTERN float32 IfxEdsadc_getModulatorInputClockFreq(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   693  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   694  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   695  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   696  /** \addtogroup IfxLld_Edsadc_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   697   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   698  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   699  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   700  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   701  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   702  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   703  /** \brief Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   704   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   705   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   706   * \return Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   708  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxEdsadc_getAuxSrc(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   710  /** \brief Get the interrupt source register for a Main event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   711   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   712   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   713   * \return Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   714   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   715  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxEdsadc_getMainSrc(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   716  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   717  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   718  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   719  /** \addtogroup IfxLld_Edsadc_Std_IO
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   720   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   721  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   722  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   723  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   724  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   725  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   726  /** \brief Initializes a CGPWM output
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   727   * \param cgPwm the CGPWM Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   728   * \param pinMode the pin output mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   729   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   730   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   731   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   732  IFX_INLINE void IfxEdsadc_initCgPwmPin(const IfxEdsadc_Cgpwm_Out *cgPwm, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   733  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   734  /** \brief Initializes a CIN input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   735   * \param cIn the CIN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   736   * \param cInMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   737   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   738   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   739   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   740  IFX_INLINE void IfxEdsadc_initCinPin(const IfxEdsadc_Cin_In *cIn, IfxPort_InputMode cInMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   741  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   742  /** \brief Initializes a COUT output
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   743   * \param cout the COUT Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   744   * \param pinMode the pin output mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   745   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   746   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   748  IFX_INLINE void IfxEdsadc_initCoutPin(const IfxEdsadc_Cout_Out *cout, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   750  /** \brief Initializes a DIN input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   751   * \param dIn the DIN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   752   * \param dInMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   753   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   754   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   755   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   756  IFX_INLINE void IfxEdsadc_initDinPin(const IfxEdsadc_Din_In *dIn, IfxPort_InputMode dInMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   757  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   758  /** \brief Initializes a DS input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   759   * \param dsn the DSN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   760   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   761   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   762   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   763   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   764  IFX_INLINE void IfxEdsadc_initDsnPin(const IfxEdsadc_Dsn_In *dsn, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   765  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   766  /** \brief Initializes a DS input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   767   * \param dsp the DSP Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   768   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   769   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   770   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   771   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   772  IFX_INLINE void IfxEdsadc_initDspPin(const IfxEdsadc_Dsp_In *dsp, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   774  /** \brief Initializes a ITR input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   775   * \param itr the ITR Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   776   * \param itrMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   777   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   778   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   779   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   780  IFX_INLINE void IfxEdsadc_initItrPin(const IfxEdsadc_Itr_In *itr, IfxPort_InputMode itrMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   781  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   782  /** \brief Initializes a SG input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   783   * \param sg the SG Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   784   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   785   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   786   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   787   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   788  IFX_INLINE void IfxEdsadc_initSgPin(const IfxEdsadc_Sg_In *sg, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   789  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   790  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   791  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   792  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   793  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   794  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   795  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   796  /** \brief Returns the positive input line configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   797   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   798   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   799   * \return Positive Input Line Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   800   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   801  IFX_INLINE uint8 IfxEdsadc_getPositiveInputLineConfiguration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   802  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   803  /** \brief Returns the negative input line configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   804   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   805   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   806   * \return Negative Input Line Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   807   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   808  IFX_INLINE uint8 IfxEdsadc_getNegativeInputLineConfiguration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   809  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   810  /** \brief Sets the Offset compensation Value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   811   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   812   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   813   * \param value Value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   814   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   815   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   816  IFX_INLINE void IfxEdsadc_setOffsetCompensationValue(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   818  /** \brief Returns the address of the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   819   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   820   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   821   * \return Address of the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   822   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   823  IFX_INLINE uint32 *IfxEdsadc_getResultRegisterAddress(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   824  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   825  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   826  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   827  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   828  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   829  /** \brief set common mode voltage Parameters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   830   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   831   * \param channel specifies channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   832   * \param voltage select Fractional reference Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   833   * \param refMode Fractional Reference Voltage Enable/ Disable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   834   * \param hsvMode Enable / Disable Half Supply Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   835   * \param cmhvMode Enable / Disable Common Mode Hold Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   836   * \param positiveInput Defines the connection of the respective positive input y to the common mode hold voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   837   * \param negativeInput Defines the connection of the respective negative input y to the common mode hold voltage.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   838   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   839   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   840  IFX_EXTERN void IfxEdsadc_setCommonModeVoltage(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_FractionalRefVoltageSelection voltage, IfxEdsadc_FractionalRefVoltage refMode, IfxEdsadc_HalfSupplyVoltage hsvMode, IfxEdsadc_CommonModeHoldVoltage cmhvMode, uint8 positiveInput, uint8 negativeInput);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   842  /** \brief configure gain correction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   843   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   844   * \param channel Specifies channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   845   * \param gainFactor Multiplication Factor for gain correction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   846   * \param cicShift Position of CIC filter output shifter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   847   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   848   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   849  IFX_EXTERN void IfxEdsadc_setGainCorrectionFactor(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   851  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   852   * \param edsadc Pointer to module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   853   * \param channel specifies channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   854   * \param timeStampCounterClock Time Stamp Counter Clock selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   855   * \param runControl TimeStamp Counter Run Control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   856   * \param analogMuxCopy Analog MUX Setting Copy Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   857   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   858   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   859  IFX_EXTERN void IfxEdsadc_setTimeStampCounter(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_TimeStampCounterClockSelection timeStampCounterClock, IfxEdsadc_TimeStampCounterControl runControl, IfxEdsadc_AnalogMux analogMuxCopy);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   861  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   862   * \param edsadc Pointer to EDSADC SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   863   * \param channel chanel no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   864   * \param gainFactor Multiplication Factor for Gain Correction During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   865   * \param cicShift Position of the CIC Filter Output Shifter During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   866   * \param cicDecimationRate Decimation Rate of the CIC Filter During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   867   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   868   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   869  IFX_EXTERN void IfxEdsadc_setGainControl(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift, uint8 cicDecimationRate);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   870  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   871  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   872   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   873   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   874   * \param calFactor Multiplication Factor for Gain Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   875   * \param calTarget Target Value for Calibrated Fullscale
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   876   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   877   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   878  IFX_EXTERN void IfxEdsadc_setGainCalibration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 calFactor, uint16 calTarget);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   879  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   880  /** \brief Set the Modulator configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   881   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   882   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   883   * \param config Modulator Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   884   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   885   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   886  IFX_EXTERN void IfxEdsadc_configureModulator(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_ModulatorConfig *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   887  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   888  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   889  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   890  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   891  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   892  IFX_INLINE uint16 IfxEdsadc_getMainCombDecimation(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   893  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   894      return (uint16)(1U + edsadc->CH[channel].FCFGC.B.CFMDF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   895  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   896  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   897  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   898  IFX_INLINE sint16 IfxEdsadc_getMainResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   899  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   900      return edsadc->CH[channel].RESM.B.RESULTLO;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   901  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   902  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   903  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   904  IFX_INLINE sint32 IfxEdsadc_getSubsequentResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   905  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   906      return (sint32)(edsadc->CH[channel].RESM.U);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   907  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   908  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   909  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   910  IFX_INLINE void IfxEdsadc_initCgPwmPin(const IfxEdsadc_Cgpwm_Out *cgPwm, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   911  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   912      if (cgPwm->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   913      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   914          IfxPort_setPinModeOutput(cgPwm->pin.port, cgPwm->pin.pinIndex, pinMode, cgPwm->select);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   915          IfxPort_setPinPadDriver(cgPwm->pin.port, cgPwm->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   916      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   917  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   918  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   920  IFX_INLINE void IfxEdsadc_initCinPin(const IfxEdsadc_Cin_In *cIn, IfxPort_InputMode cInMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   921  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   922      if (cIn->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   923      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   924          IfxPort_setPinModeInput(cIn->pin.port, cIn->pin.pinIndex, cInMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   925          IfxPort_setPinPadDriver(cIn->pin.port, cIn->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   926      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   927  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   928  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   929  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   930  IFX_INLINE void IfxEdsadc_initCoutPin(const IfxEdsadc_Cout_Out *cout, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   931  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   932      if (cout->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   933      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   934          IfxPort_setPinModeOutput(cout->pin.port, cout->pin.pinIndex, pinMode, cout->select);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   935          IfxPort_setPinPadDriver(cout->pin.port, cout->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   936      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   937  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   938  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   939  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   940  IFX_INLINE void IfxEdsadc_initDinPin(const IfxEdsadc_Din_In *dIn, IfxPort_InputMode dInMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   941  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   942      if (dIn->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   943      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   944          IfxPort_setPinModeInput(dIn->pin.port, dIn->pin.pinIndex, dInMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   945          IfxPort_setPinPadDriver(dIn->pin.port, dIn->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   946      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   947  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   948  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   949  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   950  IFX_INLINE void IfxEdsadc_initDsnPin(const IfxEdsadc_Dsn_In *dsn, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   951  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   952      if (dsn->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   953      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   954          IfxPort_setPinModeInput(dsn->pin.port, dsn->pin.pinIndex, pinMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   955          IfxPort_setPinPadDriver(dsn->pin.port, dsn->pin.pinIndex, padDriver);
	ld.a	a4,[a15]8
.L722:
	ld.bu	d4,[a15]12
.L723:
	mov	d5,d8
	fret
.L161:
	; End of function
	.sdecl	'.text.IfxEdsadc_Edsadc..cocofun_8',code,cluster('.cocofun_8')
	.sect	'.text.IfxEdsadc_Edsadc..cocofun_8'
	.align	2
; Function .cocofun_8
.L43:
.cocofun_8:	.type	func
; Function body .cocofun_8, coco_iter:0
	ld.bu	d4,[a15]12
.L717:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
	extr.u	d5,d15,#0,#8
	fret
.L156:
	; End of function
	.sdecl	'.text.IfxEdsadc_Edsadc..cocofun_7',code,cluster('.cocofun_7')
	.sect	'.text.IfxEdsadc_Edsadc..cocofun_7'
	.align	2
; Function .cocofun_7
.L45:
.cocofun_7:	.type	func
; Function body .cocofun_7, coco_iter:0
	ld.bu	d8,[a12]37
.L711:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     2   * \file IfxEdsadc.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     3   * \brief EDSADC  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     4   * \ingroup IfxLld_Edsadc
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    41   * \defgroup IfxLld_Edsadc_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    42   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    43   * \defgroup IfxLld_Edsadc_Std_Operative Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    44   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    45   * \defgroup IfxLld_Edsadc_Std_Support Support Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    46   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    47   * \defgroup IfxLld_Edsadc_Std_Interrupt Interrupt Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    48   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    49   * \defgroup IfxLld_Edsadc_Std_IO IO Pin Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    50   * \ingroup IfxLld_Edsadc_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    53  #ifndef IFXEDSADC_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    54  #define IFXEDSADC_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    60  #include "_Impl/IfxEdsadc_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    61  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    62  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    63  #include "_PinMap/IfxEdsadc_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    64  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    65  #include "IfxEdsadc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    66  #include "IfxEdsadc_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    68  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    69  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    70  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    71  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    72  /** \addtogroup IfxLld_Edsadc_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    73   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    74  /** \brief Analog Clock Synchronization Delay
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    75   * Definition in Ifx_DSADC.MODCFG.B.ACSD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    76   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    77  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    78  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    79      IfxEdsadc_AnalogClockSyncDelay_noDelay     = 0,    /**< \brief no delay */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    80      IfxEdsadc_AnalogClockSyncDelay_cycleDelay1 = 1,    /**< \brief Delay of 1 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    81      IfxEdsadc_AnalogClockSyncDelay_cycleDelay2,        /**< \brief Delay of 2 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    82      IfxEdsadc_AnalogClockSyncDelay_cycleDelay3,        /**< \brief Delay of 3 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    83      IfxEdsadc_AnalogClockSyncDelay_cycleDelay4,        /**< \brief Delay of 4 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    84      IfxEdsadc_AnalogClockSyncDelay_cycleDelay5,        /**< \brief Delay of 5 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    85      IfxEdsadc_AnalogClockSyncDelay_cycleDelay6,        /**< \brief Delay of 6 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    86      IfxEdsadc_AnalogClockSyncDelay_cycleDelay7         /**< \brief Delay of 7 Cycle  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    87  } IfxEdsadc_AnalogClockSyncDelay;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    89  /** \brief Service request generation (auxiliary)\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    90   * Definition in Ifx_EDSADC.FCFGM.B.SRGA
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    91   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    92  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    93  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    94      IfxEdsadc_AuxServiceRequest_never          = 0,  /**< \brief Never, service requests disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    95      IfxEdsadc_AuxServiceRequest_compEvent      = 1,  /**< \brief As selected by bitfield ESEL */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    96      IfxEdsadc_AuxServiceRequest_timestampEvent = 2,  /**< \brief Timestamp Event */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    97      IfxEdsadc_AuxServiceRequest_altSource      = 3   /**< \brief Alternate source: Capturing of a sign delay value to register CGSYNCx (x = 0 - 5) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    98  } IfxEdsadc_AuxServiceRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   100  /** \brief Carrier generation mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   101   * Definition in Ifx_EDSADC.CGCFG.B.CGMOD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   103  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   104  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   105      IfxEdsadc_CarrierWaveformMode_stopped  = 0,  /**< \brief Carrier Generator stopped */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   106      IfxEdsadc_CarrierWaveformMode_square   = 1,  /**< \brief Carrier Generator generates square wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   107      IfxEdsadc_CarrierWaveformMode_triangle = 2,  /**< \brief Carrier Generator generates triangle wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   108      IfxEdsadc_CarrierWaveformMode_sine     = 3   /**< \brief Carrier Generator generates sine wave */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   109  } IfxEdsadc_CarrierWaveformMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   110  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   111  /** \brief Common Mode Hold Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   112   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   113  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   114  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   115      IfxEdsadc_CommonModeHoldVoltage_disable = 0,  /**< \brief VCMH is off */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   116      IfxEdsadc_CommonModeHoldVoltage_enable  = 1   /**< \brief VCMH is generated */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   117  } IfxEdsadc_CommonModeHoldVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   118  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   119  /** \brief Select the data to be returned when register RESM is read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   120   * Definition in Ifx_DSADC.DICFG.B.DRM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   121   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   122  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   123  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   124      IfxEdsadc_DataRead_signOnHighbit      = 0,  /**< \brief Single: Issue one 16-bit value per read access (sign on high bits) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   125      IfxEdsadc_DataRead_timestampOnHighbit = 1,  /**< \brief Single: Issue one 16-bit value per read access (timestamp on high bits) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   126      IfxEdsadc_DataRead_double             = 2   /**< \brief Double: Issue two 16-bit values per read access */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   127  } IfxEdsadc_DataRead;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   129  /** \brief Data stream select
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   130   * Definition in Ifx_DSADC.DICFG.B.DSS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   131   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   132  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   133  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   134      IfxEdsadc_DataStream_onChipModulator        = 0,  /**< \brief select data stream from on chip modulator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   135      IfxEdsadc_DataStream_doubleDataClockEdge    = 3,  /**< \brief External modulator, use rising and falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   136      IfxEdsadc_DataStream_directFallingClockEdge = 4,  /**< \brief External modulator, use each falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   137      IfxEdsadc_DataStream_directRisingClockEdge  = 5,  /**< \brief External modulator, use each rising clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   138      IfxEdsadc_DataStream_secondFallingClockEdge = 6,  /**< \brief External modulator, use every 2nd falling clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   139      IfxEdsadc_DataStream_secondRisingClockEdge  = 7   /**< \brief External modulator, use every 2nd rising clock edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   140  } IfxEdsadc_DataStream;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   142  /** \brief Trimming Value for Dithering function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   143   * Definition in Ifx_DSADC.GLOBCFG.B.DITRIM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   144   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   145  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   146  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   147      IfxEdsadc_DitheringIntensity_minimum = 0,  /**< \brief Minimum dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   148      IfxEdsadc_DitheringIntensity_low     = 1,  /**< \brief Low dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   149      IfxEdsadc_DitheringIntensity_medium  = 2,  /**< \brief Medium dithering intensity */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   150      IfxEdsadc_DitheringIntensity_high    = 3   /**< \brief High */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   151  } IfxEdsadc_DitheringIntensity;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   152  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   153  /** \brief Define when comparator event is generated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   154   * Definition in Ifx_DSADC.FCFGM.B.ESEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   156  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   157  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   158      IfxEdsadc_EventSelect_everyNewResult = 0,  /**< \brief Always, for each new result value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   159      IfxEdsadc_EventSelect_insideBoundry  = 1,  /**< \brief If result is inside the boundary band */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   160      IfxEdsadc_EventSelect_outsideBoundry = 2   /**< \brief If result is outside the boundary band */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   161  } IfxEdsadc_EventSelect;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   163  /** \brief Defines the duration of the additional filter effect, based on values input to the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   164   * filter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   165   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   166  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   167  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   168      IfxEdsadc_FilterRunTimeInputCycle_2  = 0, /**< \brief 2 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   169      IfxEdsadc_FilterRunTimeInputCycle_4  = 1, /**< \brief 4 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   170      IfxEdsadc_FilterRunTimeInputCycle_8  = 2, /**< \brief 8 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   171      IfxEdsadc_FilterRunTimeInputCycle_16 = 3  /**< \brief 16 input cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   172  } IfxEdsadc_FilterRunTimeInputCycle;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   173  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   174  /** \brief Specifies Slew Rate Filter Strength
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   175   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   176  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   177  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   178      IfxEdsadc_FilterStrength_minimum = 0,  /**< \brief Minimum filter effect, early attenuation, linear operation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   179      IfxEdsadc_FilterStrength_weak    = 1,  /**< \brief Weak filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   180      IfxEdsadc_FilterStrength_medium  = 2,  /**< \brief Medium filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   181      IfxEdsadc_FilterStrength_maximum = 3   /**< \brief maximum filter effect */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   182  } IfxEdsadc_FilterStrength;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   184  /** \brief Fractional Reference Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   185   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   186  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   187  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   188      IfxEdsadc_FractionalRefVoltage_disable = 0,  /**< \brief VREFX is not connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   189      IfxEdsadc_FractionalRefVoltage_enable  = 1   /**< \brief VREFX is connected, value according to VREFXSEL */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   190  } IfxEdsadc_FractionalRefVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   192  /** \brief Fraction reference voltage selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   194  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   195  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   196      IfxEdsadc_FractionalRefVoltageSelection_div2  = 0, /**< \brief VREFX = VAREF / 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   197      IfxEdsadc_FractionalRefVoltageSelection_div4  = 1, /**< \brief VREFX = VAREF / 4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   198      IfxEdsadc_FractionalRefVoltageSelection_div8  = 2, /**< \brief VREFX = VAREF / 8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   199      IfxEdsadc_FractionalRefVoltageSelection_div16 = 3  /**< \brief VREFX = VAREF / 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   200  } IfxEdsadc_FractionalRefVoltageSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   201  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   202  /** \brief Half Supply Voltage Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   203   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   204  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   205  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   206      IfxEdsadc_HalfSupplyVoltage_disable = 0,  /**< \brief VDDM / 2 is not connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   207      IfxEdsadc_HalfSupplyVoltage_enable  = 1   /**< \brief VDDM / 2 is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   208  } IfxEdsadc_HalfSupplyVoltage;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   209  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   210  /** \brief Modulator configuration of positive/negative input line\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   211   * Definition in Ifx_DSADC.MODCFGx.B.INCFGP and Ifx_DSADC.MODCFGx.B.INCFGN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   213  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   214  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   215      IfxEdsadc_InputConfig_inputPin          = 0,  /**< \brief Modulator input connected to external pin */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   216      IfxEdsadc_InputConfig_supplyVoltage     = 1,  /**< \brief Modulator input connected to supply voltage V_ddm */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   217      IfxEdsadc_InputConfig_commonModeVoltage = 2,  /**< \brief Modulator input connected to common mode voltage V_cm */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   218      IfxEdsadc_InputConfig_referenceGround   = 3   /**< \brief Modulator input connected to reference ground V_ref */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   219  } IfxEdsadc_InputConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   221  /** \brief Demodulator input data source selection\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   222   * Definition in Ifx_EDSADC.DICFG.B.DSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   223   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   224  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   225  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   226      IfxEdsadc_InputDataSource_directInputA   = 0,  /**< \brief External, from input A, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   227      IfxEdsadc_InputDataSource_invertedInputA = 1,  /**< \brief External, from input A, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   228      IfxEdsadc_InputDataSource_directInputB   = 2,  /**< \brief External, from input B, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   229      IfxEdsadc_InputDataSource_invertedInputB = 3,  /**< \brief External, from input B, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   230      IfxEdsadc_InputDataSource_directInputC   = 4,  /**< \brief External, from input C, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   231      IfxEdsadc_InputDataSource_invertedInputC = 5,  /**< \brief External, from input C, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   232      IfxEdsadc_InputDataSource_directInputD   = 6,  /**< \brief External, from input D, direct */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   233      IfxEdsadc_InputDataSource_invertedInputD = 7   /**< \brief External, from input D, inverted */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   234  } IfxEdsadc_InputDataSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   235  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   236  /** \brief Modulator gain select of analog input path\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   237   * Definition in Ifx_DSADC.MODCFGx.B.GAINSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   239  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   240  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   241      IfxEdsadc_InputGain_factor1  = 0, /**< \brief Input gain factor: 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   242      IfxEdsadc_InputGain_factor2  = 1, /**< \brief Input gain factor: 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   243      IfxEdsadc_InputGain_factor4  = 2, /**< \brief Input gain factor: 4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   244      IfxEdsadc_InputGain_factor8  = 3, /**< \brief Input gain factor: 8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   245      IfxEdsadc_InputGain_factor16 = 4  /**< \brief Input gain factor: 16 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   246  } IfxEdsadc_InputGain;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   247  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   248  /** \brief specifies input multiplexer control mode defined in MODULE_EDSADC.MODCFG.B.INMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   250  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   251  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   252      IfxEdsadc_InputMuxControlMode_softwareControl = 0,  /**< \brief Trigger Event by software (INMUX follows INSEL) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   253      IfxEdsadc_InputMuxControlMode_fallingEdge     = 1,  /**< \brief Trigger Event on Falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   254      IfxEdsadc_InputMuxControlMode_risingEdge      = 2,  /**< \brief Trigger Event on Rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   255      IfxEdsadc_InputMuxControlMode_always          = 3   /**< \brief Trigger event on any edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   256  } IfxEdsadc_InputMuxControlMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   258  /** \brief Modulator input pin selection\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   259   * Definition in Ifx_DSADC.MODCFGx.B.INMUX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   260   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   261  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   262  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   263      IfxEdsadc_InputPin_a = 0,  /**< \brief Pin A connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   264      IfxEdsadc_InputPin_b = 1,  /**< \brief Pin B connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   265      IfxEdsadc_InputPin_c = 2,  /**< \brief Pin C connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   266      IfxEdsadc_InputPin_d = 3   /**< \brief Pin D connected to modulator input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   267  } IfxEdsadc_InputPin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   269  /** \brief Controls the data shifter after the integrator that selects the portion of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   270   * integrator data for the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   271   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   272  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   274      IfxEdsadc_IntegrationShiftControl_0 = 0,      /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   275      IfxEdsadc_IntegrationShiftControl_1,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   276      IfxEdsadc_IntegrationShiftControl_2,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   277      IfxEdsadc_IntegrationShiftControl_3,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   278      IfxEdsadc_IntegrationShiftControl_4,          /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   279      IfxEdsadc_IntegrationShiftControl_5           /**< \brief Integration Shift value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   280  } IfxEdsadc_IntegrationShiftControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   281  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   282  /** \brief Integrator window size\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   283   * Definition in Ifx_DSADC.IWCTR.B.IWS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   284   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   285  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   286  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   287      IfxEdsadc_IntegrationWindowSize_internalControl = 0,  /**< \brief Internal control: stop integrator after REPVAL+1 integration cycles */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   288      IfxEdsadc_IntegrationWindowSize_externalControl = 1   /**< \brief External control: stop integrator when bit INTEN becomes 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   289  } IfxEdsadc_IntegrationWindowSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   291  /** \brief Integrator trigger mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   292   * NOTE: switch-first to bypassed before using other mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   293   * Definition in Ifx_EDSADC.DICFG.B.ITRMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   294   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   295  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   296  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   297      IfxEdsadc_IntegratorTrigger_bypassed     = 0, /**< \brief No integration trigger, integrator bypassed */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   298      IfxEdsadc_IntegratorTrigger_fallingEdge  = 1, /**< \brief Trigger event upon a falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   299      IfxEdsadc_IntegratorTrigger_risingEdge   = 2, /**< \brief Trigger event upon a rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   300      IfxEdsadc_IntegratorTrigger_alwaysActive = 3  /**< \brief No trigger, integrator active all the time */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   301  } IfxEdsadc_IntegratorTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   302  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   303  /** \brief Service request generation (main chain)\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   304   * Definition in Ifx_EDSADC.FCFGM.B.SRGM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   305   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   306  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   307  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   308      IfxEdsadc_MainServiceRequest_never          = 0,  /**< \brief Never, service requests disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   309      IfxEdsadc_MainServiceRequest_highGateSignal = 1,  /**< \brief While gate (selected trigger signal) is high */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   310      IfxEdsadc_MainServiceRequest_lowGateSignal  = 2,  /**< \brief While gate (selected trigger signal) is low */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   311      IfxEdsadc_MainServiceRequest_everyNewResult = 3   /**< \brief Always, for each new result value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   312  } IfxEdsadc_MainServiceRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   313  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   314  /** \brief Modulator divider factor for modulator clock\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   315   * Definition in Ifx_EDSADC.MODCFGx.B.DIVM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   317  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   318  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   319      IfxEdsadc_ModulatorClockDivider_div4 = 0,      /**< \brief f_mod = f_clk / 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   320      IfxEdsadc_ModulatorClockDivider_div6,          /**< \brief f_mod = f_clk / 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   321      IfxEdsadc_ModulatorClockDivider_div8,          /**< \brief f_mod = f_clk / 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   322      IfxEdsadc_ModulatorClockDivider_div10,         /**< \brief f_mod = f_clk / 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   323      IfxEdsadc_ModulatorClockDivider_div12,         /**< \brief f_mod = f_clk / 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   324      IfxEdsadc_ModulatorClockDivider_div14,         /**< \brief f_mod = f_clk / 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   325      IfxEdsadc_ModulatorClockDivider_div16,         /**< \brief f_mod = f_clk / 16  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   326      IfxEdsadc_ModulatorClockDivider_div18          /**< \brief f_mod = f_clk / 18  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   327  } IfxEdsadc_ModulatorClockDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   329  /** \brief Defines the way the modulator clock is generated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   330   * Definition in Ifx_DSADC.GLOBCFG.B.USC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   331   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   332  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   333  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   334      IfxEdsadc_ModulatorClockGeneration_syncMode   = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   335      IfxEdsadc_ModulatorClockGeneration_unsyncMode = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   336  } IfxEdsadc_ModulatorClockGeneration;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   338  /** \brief Enable the offset compensation filter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   339   * Definition in Ifx_DSADC.FCFGM.B.OCEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   340   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   341  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   342  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   343      IfxEdsadc_OffsetCompensationFilter_disabled        = 0,  /**< \brief Offset Compensation filter disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   344      IfxEdsadc_OffsetCompensationFilter_enablewithRateA = 1,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   345      IfxEdsadc_OffsetCompensationFilter_enablewithRateB = 2,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   346      IfxEdsadc_OffsetCompensationFilter_enablewithRateC = 3,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate C */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   347      IfxEdsadc_OffsetCompensationFilter_enablewithRateD = 4,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate D */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   348      IfxEdsadc_OffsetCompensationFilter_enablewithRateE = 5,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate E */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   349      IfxEdsadc_OffsetCompensationFilter_enablewithRateF = 6,  /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate F */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   350      IfxEdsadc_OffsetCompensationFilter_enablewithRateG = 7   /**< \brief Enable offset compensation filter, adjust OFFCOMP with rate G */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   351  } IfxEdsadc_OffsetCompensationFilter;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   353  /** \brief Overshoot Compensation Enable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   354   * Defined in fx_DSADC.FCFGM.B.OVCEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   355   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   356  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   357  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   358      IfxEdsadc_OvershootCompensation_disabled = 0,  /**< \brief Disabled, feed FIR filter directly */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   359      IfxEdsadc_OvershootCompensation_enabled  = 1   /**< \brief Attenuate response to fast edges */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   360  } IfxEdsadc_OvershootCompensation;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   361  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   362  /** \brief Rectifier sign source\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   363   * Selects the sign signal that is to be delayed.\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   364   * Definition in Ifx_DSADC.RECT.B.SSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   365   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   366  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   367  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   368      IfxEdsadc_RectifierSignSource_onChipGenerator = 0,  /**< \brief On-chip carrier generator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   369      IfxEdsadc_RectifierSignSource_nextChannel     = 1,  /**< \brief Sign of result of next channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   370      IfxEdsadc_RectifierSignSource_externalA       = 2,  /**< \brief External sign signal A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   371      IfxEdsadc_RectifierSignSource_externalB       = 3   /**< \brief External sign signal B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   372  } IfxEdsadc_RectifierSignSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   373  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   374  /** \brief Restart the filter chain when an integration window starts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   375   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   376  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   377  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   378      IfxEdsadc_RestartFilterChain_on  = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   379      IfxEdsadc_RestartFilterChain_off = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   380  } IfxEdsadc_RestartFilterChain;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   381  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   382  /** \brief specifies result display mode (signed/unsigned)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   383   * Definition in Ifx_DSADC.DICFG.B.RDM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   384   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   385  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   386  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   387      IfxEdsadc_ResultDisplayMode_signed   = 0, /**< \brief Signed: result values range from -215 to +215 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   388      IfxEdsadc_ResultDisplayMode_unsigned = 1  /**< \brief Unsigned: result values range from 0 to +216 (shifted by 215) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   389  } IfxEdsadc_ResultDisplayMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   390  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   391  /** \brief Demodulator sample clock source select\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   392   * Definition in Ifx_EDSADC.DICFG.B.CSRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   393   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   394  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   395  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   396      IfxEdsadc_SampleClockSource_internal = 0,  /**< \brief Internal clock */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   397      IfxEdsadc_SampleClockSource_inputA   = 3,  /**< \brief External clock, from Input A */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   398      IfxEdsadc_SampleClockSource_inputB   = 4,  /**< \brief External clock, from Input B */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   399      IfxEdsadc_SampleClockSource_inputC   = 5   /**< \brief External clock, from Input C */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   400  } IfxEdsadc_SampleClockSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   401  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   402  /** \brief Service request fifo level
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   403   * Definition in Ifx_EDSADC.RFC.B.SRLVL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   405  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   406  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   407      IfxEdsadc_ServiceRequestFifolevel_1 = 0,      /**< \brief Generate a service request when Fifo contain level 1 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   408      IfxEdsadc_ServiceRequestFifolevel_2,          /**< \brief Generate a service request when Fifo contain level 2 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   409      IfxEdsadc_ServiceRequestFifolevel_3,          /**< \brief Generate a service request when Fifo contain level 3 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   410      IfxEdsadc_ServiceRequestFifolevel_4           /**< \brief Generate a service request when Fifo contain level 4 Value  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   411  } IfxEdsadc_ServiceRequestFifolevel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   412  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   413  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   414   * Definition in Ifx_EDSADC.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   415   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   416  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   417  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   418      IfxEdsadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   419      IfxEdsadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   420  } IfxEdsadc_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   421  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   422  /** \brief Defines when the slew rate filter is activated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   424  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   425  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   426      IfxEdsadc_StepDetectionMode_lastInput       = 0, /**< \brief Compare threshold to difference of current and last input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   427      IfxEdsadc_StepDetectionMode_secondlastInput = 1  /**< \brief Compare threshold to difference of current and second-last input */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   428  } IfxEdsadc_StepDetectionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   429  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   430  /** \brief Adjusts the analog circuitry to the supply voltage used in the application
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   431   * system.Defined In defined in MODULE_EDSADC.GLOBCFG.B.SUPLEV
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   433  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   434  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   435      IfxEdsadc_SupplyVoltageLevel_automaticControl = 0,  /**< \brief voltage range is controlled by the power supply */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   436      IfxEdsadc_SupplyVoltageLevel_upperVoltage     = 1,  /**< \brief Upper voltage range: assume a 5 V power supply is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   437      IfxEdsadc_SupplyVoltageLevel_lowerVoltage     = 2   /**< \brief Lower voltage range: assume a 3.3 V power supply is connected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   438  } IfxEdsadc_SupplyVoltageLevel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   439  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   440  /** \brief OCDS Suspend Control (OCDS.SUS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   441   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   442  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   443  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   444      IfxEdsadc_SuspendMode_none = 0,  /**< \brief No suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   445      IfxEdsadc_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   446      IfxEdsadc_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   447  } IfxEdsadc_SuspendMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   448  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   449  /** \brief Time Stamp Counter Clock Selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   450   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   451  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   452  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   453      IfxEdsadc_TimeStampCounterClockSelection_div1 = 0,  /**< \brief fTSTMP = fMOD */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   454      IfxEdsadc_TimeStampCounterClockSelection_div2 = 1,  /**< \brief fTSTMP = fMOD/2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   455      IfxEdsadc_TimeStampCounterClockSelection_div4 = 2,  /**< \brief fTSTMP = fMOD/4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   456      IfxEdsadc_TimeStampCounterClockSelection_div8 = 3   /**< \brief fTSTMP = fMOD/8 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   457  } IfxEdsadc_TimeStampCounterClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   458  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   459  /** \brief Timestamp trigger mode\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   460   * Definition in Ifx_EDSADC.DICFG.B.TSTRMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   462  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   463  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   464      IfxEdsadc_TimestampTrigger_noTrigger   = 0,  /**< \brief No timestamp trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   465      IfxEdsadc_TimestampTrigger_fallingEdge = 1,  /**< \brief Trigger event upon a falling edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   466      IfxEdsadc_TimestampTrigger_risingEdge  = 2,  /**< \brief Trigger event upon a rising edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   467      IfxEdsadc_TimestampTrigger_eachEdge    = 3   /**< \brief Trigger event upon each edge */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   468  } IfxEdsadc_TimestampTrigger;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   469  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   470  /** \brief Trigger select\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   471   * Definition in Ifx_EDSADC.DICFG.B.TRSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   473  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   474  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   475      IfxEdsadc_TriggerInput_a = 0,   /**< \brief GTM EDSADC Trigger 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   476      IfxEdsadc_TriggerInput_b = 1,   /**< \brief GTM EDSADC Trigger 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   477      IfxEdsadc_TriggerInput_c = 2,   /**< \brief GTM ADC Trigger 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   478      IfxEdsadc_TriggerInput_d = 3,   /**< \brief GTM ADC Trigger 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   479      IfxEdsadc_TriggerInput_e = 4,   /**< \brief Trigger/gate via port input P33.0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   480      IfxEdsadc_TriggerInput_f = 5,   /**< \brief Trigger/gate via port input P33.4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   481      IfxEdsadc_TriggerInput_g = 6,   /**< \brief ERU pattern detection output 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   482      IfxEdsadc_TriggerInput_h = 7,   /**< \brief Trigger/gate, channel 0,input H */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   483      IfxEdsadc_TriggerInput_i = 8,   /**< \brief Trigger/gate, channel 0,input I */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   484      IfxEdsadc_TriggerInput_j = 9,   /**< \brief Trigger/gate, channel 0,input J */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   485      IfxEdsadc_TriggerInput_k = 10,  /**< \brief GTM ADC Trigger 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   486      IfxEdsadc_TriggerInput_l = 11,  /**< \brief GTM ADC Trigger 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   487      IfxEdsadc_TriggerInput_m = 12,  /**< \brief GTM DSADC Trigger 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   488      IfxEdsadc_TriggerInput_n = 13,  /**< \brief GTM DSADC Trigger 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   489      IfxEdsadc_TriggerInput_o = 14,  /**< \brief Trigger/gate, channel 0,input O */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   490      IfxEdsadc_TriggerInput_p = 15   /**< \brief Trigger/gate, channel 0,input P */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   491  } IfxEdsadc_TriggerInput;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   492  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   493  /** \brief Controls the dithering function for each modulator separately
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   494   * Definition in Ifx_DSADC.MODCFG.B.DITHEN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   496  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   497  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   498      IfxEdsadc_dithering_disabled = 0,  /**< \brief dithering function disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   499      IfxEdsadc_dithering_enabled  = 1   /**< \brief dithering function enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   500  } IfxEdsadc_dithering;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   501  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   502  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   503  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   504  /** \brief Allows copying of bitfield AMX into bitfield TIMESTAMP
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   505   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   506  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   507  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   508      IfxEdsadc_AnalogMux_doNotCopyAmx = 0,  /**< \brief Do not copy, timestamp uses all 16 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   509      IfxEdsadc_AnalogMux_copyAmx      = 1   /**< \brief Copy AMX to bits TIMESTAMP[15:14], timestamp uses lower 14 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   510  } IfxEdsadc_AnalogMux;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   511  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   512  /** \brief Timestamp Counter Run Control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   513   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   514  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   515  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   516      IfxEdsadc_TimeStampCounterControl_off = 0,  /**< \brief Timestamp counter is off */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   517      IfxEdsadc_TimeStampCounterControl_on  = 1   /**< \brief Timestamp counter is counting at the rate selected by bitfield TSCLK */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   518  } IfxEdsadc_TimeStampCounterControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   519  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   520  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   521  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   523  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   524  /** \brief Modulator Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   526  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   527  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   528      float32                        modulatorClockPeriod;         /**< \brief Modulator clock period */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   529      IfxEdsadc_InputGain            inputGain;                    /**< \brief Modulator gain select of analog input path */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   530      IfxEdsadc_AnalogClockSyncDelay analogClockSyncDelay;         /**< \brief Define the delay in clock cycle after sync signal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   531      IfxEdsadc_InputConfig          positiveInput;                /**< \brief Modulator configuration of positive input line */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   532      IfxEdsadc_InputConfig          negativeInput;                /**< \brief Modulator configuration of negative input line */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   533      IfxEdsadc_InputPin             inputPin;                     /**< \brief Modulator input pin selection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   534      IfxEdsadc_dithering            ditheringEnabled;             /**< \brief Control the Dithering Function for each modulator */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   535      boolean                        integratorResetEnabled;       /**< \brief Control the modulator overload handling */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   536      boolean                        inputMuxActionControl;        /**< \brief Defines the mechanism by which the input multiplexer is controlled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   537      IfxEdsadc_InputMuxControlMode  triggerEvent;                 /**< \brief Defines the condition for a trigger event to control the input multiplexer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   538  } IfxEdsadc_ModulatorConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   539  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   540  /** \addtogroup IfxLld_Edsadc_Std_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   541   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   542  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   543  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   544  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   545  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   547  /** \brief Returns the module's suspend state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   548   * TRUE :if module is suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   549   * FALSE:if module is not yet suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   550   * \param edsadc Pointer to EDSADC module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   551   * \return Suspend status (TRUE / FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   552   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   553  IFX_INLINE boolean IfxEdsadc_isModuleSuspended(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   555  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   556   * \param edsadc pointer to EDSADC registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   557   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   558   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   560  IFX_INLINE void IfxEdsadc_setSleepMode(Ifx_EDSADC *edsadc, IfxEdsadc_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   561  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   562  /** \brief Configure the Module to Hard/Soft suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   563   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   564   * \param edsadc Pointer to EDSADC module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   565   * \param mode Module suspend mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   566   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   567   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   568  IFX_INLINE void IfxEdsadc_setSuspendMode(Ifx_EDSADC *edsadc, IfxEdsadc_SuspendMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   569  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   570  /** \brief Enables the conversion of multiple channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   571   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   572   * \param modulatorMask the modulator which should be running (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   573   * \param channelMask the channels which should be scanned (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   574   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   575   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   576   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   578   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   579  IFX_INLINE void IfxEdsadc_startScan(Ifx_EDSADC *edsadc, uint32 modulatorMask, uint32 channelMask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   580  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   581  /** \brief Disables the conversion of multiple channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   582   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   583   * \param modulatorMask the modulator which should be disabled (bitwise selection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   584   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   585   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   586   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   587   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   589  IFX_INLINE void IfxEdsadc_stopScan(Ifx_EDSADC *edsadc, uint32 modulatorMask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   590  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   592  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   593  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   594  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   595  /** \brief Disables the module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   596   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   598   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   599  IFX_EXTERN void IfxEdsadc_disableModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   600  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   601  /** \brief Enables the module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   602   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   603   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   604   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   605  IFX_EXTERN void IfxEdsadc_enableModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   606  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   607  /** \brief resets EDSADC kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   608   * \param edsadc pointer to EDSADC registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   609   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   610   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   611  IFX_EXTERN void IfxEdsadc_resetModule(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   613  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   615  /** \addtogroup IfxLld_Edsadc_Std_Support
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   616   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   617  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   618  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   619  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   620  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   622  /** \brief Get the main comb decimation factor
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   623   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   624   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   625   * \return the main comb decimation factor
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   626   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   627  IFX_INLINE uint16 IfxEdsadc_getMainCombDecimation(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   629  /** \brief Get result from the main chain
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   630   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   631   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   632   * \return result from the main chain
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   633   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   634   * A coding example can be found in \ref IfxLld_Edsadc_Edsadc_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   635   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   636   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   637  IFX_INLINE sint16 IfxEdsadc_getMainResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   639  /** \brief Get the subsequent result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   640   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   641  IFX_INLINE sint32 IfxEdsadc_getSubsequentResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   642  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   643  /** \brief Return TRUE if EDSADC module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   644   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   645   * \return TRUE if EDSADC module is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   646   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   647  IFX_INLINE boolean IfxEdsadc_isModuleEnabled(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   648  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   649  /** \brief Set the carrier waveform mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   650   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   651   * \param waveformMode the waveform mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   652   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   653   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   654  IFX_INLINE void IfxEdsadc_setCarrierMode(Ifx_EDSADC *edsadc, IfxEdsadc_CarrierWaveformMode waveformMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   656  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   657  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   658  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   659  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   660  /** \brief Get the sample frequency of the integrator output in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   661   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   662   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   663   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   664   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   665  IFX_EXTERN float32 IfxEdsadc_getIntegratorOutFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   667  /** \brief Get the sample frequency of the main COMB filter output in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   668   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   669   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   670   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   671   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   672  IFX_EXTERN float32 IfxEdsadc_getMainCombOutFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   674  /** \brief Estimate the group delay of main-chain filters in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   675   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   676   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   677   * \return delay in seconds
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   678   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   679  IFX_EXTERN float32 IfxEdsadc_getMainGroupDelay(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   681  /** \brief Get the modulator clock frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   682   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   683   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   684   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   685   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   686  IFX_EXTERN float32 IfxEdsadc_getModulatorClockFreq(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   687  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   688  /** \brief Get the input frequency of EDSADC in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   689   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   690   * \return frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   691   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   692  IFX_EXTERN float32 IfxEdsadc_getModulatorInputClockFreq(Ifx_EDSADC *edsadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   693  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   694  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   695  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   696  /** \addtogroup IfxLld_Edsadc_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   697   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   698  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   699  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   700  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   701  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   702  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   703  /** \brief Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   704   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   705   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   706   * \return Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   708  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxEdsadc_getAuxSrc(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   710  /** \brief Get the interrupt source register for a Main event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   711   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   712   * \param channel Channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   713   * \return Address/pointer to the interrupt source register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   714   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   715  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxEdsadc_getMainSrc(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   716  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   717  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   718  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   719  /** \addtogroup IfxLld_Edsadc_Std_IO
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   720   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   721  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   722  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   723  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   724  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   725  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   726  /** \brief Initializes a CGPWM output
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   727   * \param cgPwm the CGPWM Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   728   * \param pinMode the pin output mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   729   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   730   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   731   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   732  IFX_INLINE void IfxEdsadc_initCgPwmPin(const IfxEdsadc_Cgpwm_Out *cgPwm, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   733  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   734  /** \brief Initializes a CIN input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   735   * \param cIn the CIN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   736   * \param cInMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   737   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   738   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   739   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   740  IFX_INLINE void IfxEdsadc_initCinPin(const IfxEdsadc_Cin_In *cIn, IfxPort_InputMode cInMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   741  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   742  /** \brief Initializes a COUT output
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   743   * \param cout the COUT Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   744   * \param pinMode the pin output mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   745   * \param padDriver the pad driver mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   746   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   748  IFX_INLINE void IfxEdsadc_initCoutPin(const IfxEdsadc_Cout_Out *cout, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   750  /** \brief Initializes a DIN input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   751   * \param dIn the DIN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   752   * \param dInMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   753   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   754   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   755   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   756  IFX_INLINE void IfxEdsadc_initDinPin(const IfxEdsadc_Din_In *dIn, IfxPort_InputMode dInMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   757  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   758  /** \brief Initializes a DS input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   759   * \param dsn the DSN Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   760   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   761   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   762   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   763   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   764  IFX_INLINE void IfxEdsadc_initDsnPin(const IfxEdsadc_Dsn_In *dsn, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   765  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   766  /** \brief Initializes a DS input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   767   * \param dsp the DSP Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   768   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   769   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   770   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   771   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   772  IFX_INLINE void IfxEdsadc_initDspPin(const IfxEdsadc_Dsp_In *dsp, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   774  /** \brief Initializes a ITR input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   775   * \param itr the ITR Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   776   * \param itrMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   777   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   778   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   779   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   780  IFX_INLINE void IfxEdsadc_initItrPin(const IfxEdsadc_Itr_In *itr, IfxPort_InputMode itrMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   781  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   782  /** \brief Initializes a SG input
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   783   * \param sg the SG Pin which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   784   * \param pinMode the pin input mode which should be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   785   * \param padDriver Pad Driver Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   786   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   787   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   788  IFX_INLINE void IfxEdsadc_initSgPin(const IfxEdsadc_Sg_In *sg, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   789  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   790  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   791  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   792  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   793  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   794  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   795  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   796  /** \brief Returns the positive input line configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   797   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   798   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   799   * \return Positive Input Line Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   800   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   801  IFX_INLINE uint8 IfxEdsadc_getPositiveInputLineConfiguration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   802  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   803  /** \brief Returns the negative input line configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   804   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   805   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   806   * \return Negative Input Line Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   807   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   808  IFX_INLINE uint8 IfxEdsadc_getNegativeInputLineConfiguration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   809  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   810  /** \brief Sets the Offset compensation Value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   811   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   812   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   813   * \param value Value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   814   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   815   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   816  IFX_INLINE void IfxEdsadc_setOffsetCompensationValue(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   818  /** \brief Returns the address of the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   819   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   820   * \param channel Channel Number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   821   * \return Address of the result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   822   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   823  IFX_INLINE uint32 *IfxEdsadc_getResultRegisterAddress(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   824  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   825  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   826  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   827  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   828  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   829  /** \brief set common mode voltage Parameters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   830   * \param edsadc Pointer to Module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   831   * \param channel specifies channel Id
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   832   * \param voltage select Fractional reference Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   833   * \param refMode Fractional Reference Voltage Enable/ Disable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   834   * \param hsvMode Enable / Disable Half Supply Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   835   * \param cmhvMode Enable / Disable Common Mode Hold Voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   836   * \param positiveInput Defines the connection of the respective positive input y to the common mode hold voltage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   837   * \param negativeInput Defines the connection of the respective negative input y to the common mode hold voltage.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   838   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   839   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   840  IFX_EXTERN void IfxEdsadc_setCommonModeVoltage(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_FractionalRefVoltageSelection voltage, IfxEdsadc_FractionalRefVoltage refMode, IfxEdsadc_HalfSupplyVoltage hsvMode, IfxEdsadc_CommonModeHoldVoltage cmhvMode, uint8 positiveInput, uint8 negativeInput);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   842  /** \brief configure gain correction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   843   * \param edsadc Pointer to the EDSADC register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   844   * \param channel Specifies channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   845   * \param gainFactor Multiplication Factor for gain correction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   846   * \param cicShift Position of CIC filter output shifter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   847   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   848   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   849  IFX_EXTERN void IfxEdsadc_setGainCorrectionFactor(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   851  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   852   * \param edsadc Pointer to module space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   853   * \param channel specifies channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   854   * \param timeStampCounterClock Time Stamp Counter Clock selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   855   * \param runControl TimeStamp Counter Run Control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   856   * \param analogMuxCopy Analog MUX Setting Copy Enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   857   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   858   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   859  IFX_EXTERN void IfxEdsadc_setTimeStampCounter(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_TimeStampCounterClockSelection timeStampCounterClock, IfxEdsadc_TimeStampCounterControl runControl, IfxEdsadc_AnalogMux analogMuxCopy);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   861  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   862   * \param edsadc Pointer to EDSADC SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   863   * \param channel chanel no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   864   * \param gainFactor Multiplication Factor for Gain Correction During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   865   * \param cicShift Position of the CIC Filter Output Shifter During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   866   * \param cicDecimationRate Decimation Rate of the CIC Filter During Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   867   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   868   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   869  IFX_EXTERN void IfxEdsadc_setGainControl(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 gainFactor, uint8 cicShift, uint8 cicDecimationRate);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   870  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   871  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   872   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   873   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   874   * \param calFactor Multiplication Factor for Gain Calibration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   875   * \param calTarget Target Value for Calibrated Fullscale
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   876   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   877   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   878  IFX_EXTERN void IfxEdsadc_setGainCalibration(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, uint16 calFactor, uint16 calTarget);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   879  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   880  /** \brief Set the Modulator configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   881   * \param edsadc Pointer to EDSADC module SFRs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   882   * \param channel Channel Number to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   883   * \param config Modulator Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   884   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   885   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   886  IFX_EXTERN void IfxEdsadc_configureModulator(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel, IfxEdsadc_ModulatorConfig *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   887  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   888  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   889  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   890  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   891  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   892  IFX_INLINE uint16 IfxEdsadc_getMainCombDecimation(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   893  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   894      return (uint16)(1U + edsadc->CH[channel].FCFGC.B.CFMDF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   895  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   896  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   897  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   898  IFX_INLINE sint16 IfxEdsadc_getMainResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   899  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   900      return edsadc->CH[channel].RESM.B.RESULTLO;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   901  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   902  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   903  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   904  IFX_INLINE sint32 IfxEdsadc_getSubsequentResult(Ifx_EDSADC *edsadc, IfxEdsadc_ChannelId channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   905  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   906      return (sint32)(edsadc->CH[channel].RESM.U);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   907  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   908  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   909  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   910  IFX_INLINE void IfxEdsadc_initCgPwmPin(const IfxEdsadc_Cgpwm_Out *cgPwm, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   911  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   912      if (cgPwm->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   913      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   914          IfxPort_setPinModeOutput(cgPwm->pin.port, cgPwm->pin.pinIndex, pinMode, cgPwm->select);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   915          IfxPort_setPinPadDriver(cgPwm->pin.port, cgPwm->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   916      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   917  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   918  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   920  IFX_INLINE void IfxEdsadc_initCinPin(const IfxEdsadc_Cin_In *cIn, IfxPort_InputMode cInMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   921  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   922      if (cIn->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   923      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   924          IfxPort_setPinModeInput(cIn->pin.port, cIn->pin.pinIndex, cInMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   925          IfxPort_setPinPadDriver(cIn->pin.port, cIn->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   926      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   927  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   928  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   929  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   930  IFX_INLINE void IfxEdsadc_initCoutPin(const IfxEdsadc_Cout_Out *cout, IfxPort_OutputMode pinMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   931  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   932      if (cout->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   933      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   934          IfxPort_setPinModeOutput(cout->pin.port, cout->pin.pinIndex, pinMode, cout->select);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   935          IfxPort_setPinPadDriver(cout->pin.port, cout->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   936      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   937  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   938  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   939  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   940  IFX_INLINE void IfxEdsadc_initDinPin(const IfxEdsadc_Din_In *dIn, IfxPort_InputMode dInMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   941  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   942      if (dIn->pin.port != NULL_PTR)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   943      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   944          IfxPort_setPinModeInput(dIn->pin.port, dIn->pin.pinIndex, dInMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   945          IfxPort_setPinPadDriver(dIn->pin.port, dIn->pin.pinIndex, padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   946      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   947  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   948  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   949  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   950  IFX_INLINE void IfxEdsadc_initDsnPin(const IfxEdsadc_Dsn_In *dsn, IfxPort_InputMode pinMode, IfxPort_PadDriver padDriver)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   951  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Edsadc\Std\IfxEdsadc.h	   952      if (dsn->pin.port != NULL_PTR)
	ld.a	a4,[a15]8
.L712:
	fret
.L151:
	; End of function
	.sdecl	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_initChannelConfig',code,cluster('IfxEdsadc_Edsadc_initChannelConfig')
	.sect	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_initChannelConfig'
	.align	2
	
	.global	IfxEdsadc_Edsadc_initChannelConfig

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   199  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   200  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   201  void IfxEdsadc_Edsadc_initChannelConfig(IfxEdsadc_Edsadc_ChannelConfig *config, IfxEdsadc_Edsadc *edsadc)
; Function IfxEdsadc_Edsadc_initChannelConfig
.L47:
IfxEdsadc_Edsadc_initChannelConfig:	.type	func

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   202  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   203      const IfxEdsadc_Edsadc_ChannelConfig IfxEdsadc_Edsadc_defaultChannelConfig = {
	movh.a	a15,#@his(.2.ini)
	lea	a15,[a15]@los(.2.ini)
.L674:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   204          .channelId = IfxEdsadc_ChannelId_0,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   205          .firFilter = {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   206              .serviceRequest            = IfxEdsadc_MainServiceRequest_everyNewResult,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   207              .auxServiceRequest         = IfxEdsadc_AuxServiceRequest_never,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   208              .serviceRequestLevel       = IfxEdsadc_ServiceRequestFifolevel_1,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   209              .eventSelect               = IfxEdsadc_EventSelect_everyNewResult,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   210              .offsetCompensation        = IfxEdsadc_OffsetCompensationFilter_disabled,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   211              .fir0Enabled               = TRUE,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   212              .fir1Enabled               = TRUE,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   213              .rippleCompensationEnabled = FALSE,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   214              .fir1DecimateRate          = FALSE,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   215              .cicMode                   = FALSE,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   216              .prefilterEnabled          = TRUE,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   217              .calibrationTrigger        = FALSE,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   218              .calibrationControl        = FALSE,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   219              .overshootCompensation     = IfxEdsadc_OvershootCompensation_disabled
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   220          },
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   221          .modulator                      = {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   222              .modulatorClockFreq     = 10.0e6,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   223              .inputGain              = IfxEdsadc_InputGain_factor1,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   224              .analogClockSyncDelay   = IfxEdsadc_AnalogClockSyncDelay_noDelay,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   225              .positiveInput          = IfxEdsadc_InputConfig_inputPin,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   226              .negativeInput          = IfxEdsadc_InputConfig_inputPin,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   227              .inputPin               = IfxEdsadc_InputPin_a,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   228              .ditheringEnabled       = IfxEdsadc_dithering_disabled,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   229              .integratorResetEnabled = FALSE,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   230              .inputMuxActionControl  = FALSE,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   231              .triggerEvent           = IfxEdsadc_InputMuxControlMode_softwareControl
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   232          },
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   233          .demodulator                    = {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   234              .triggerInput       = IfxEdsadc_TriggerInput_a,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   235              .inputDataSource    = IfxEdsadc_InputDataSource_directInputA,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   236              .dataStream         = IfxEdsadc_DataStream_onChipModulator,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   237              .sampleClockSource  = IfxEdsadc_SampleClockSource_internal,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   238              .integrationTrigger = IfxEdsadc_IntegratorTrigger_bypassed,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   239              .timestampTrigger   = IfxEdsadc_TimestampTrigger_noTrigger,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   240              .dataReadMode       = IfxEdsadc_DataRead_timestampOnHighbit,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   241              .timeStampMode      = FALSE,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   242              .resultDisplay      = IfxEdsadc_ResultDisplayMode_signed
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   243          },
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   244          .integrator                     = {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   245              .windowSize        = IfxEdsadc_IntegrationWindowSize_internalControl,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   246              .discardCount      = 0,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   247              .integrationCount  = 20,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   248              .integrationCycles = 1,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   249              .shiftControl      = IfxEdsadc_IntegrationShiftControl_0,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   250              .fcRestartControl  = IfxEdsadc_RestartFilterChain_on
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   251          },
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   252          .rectifier                      = {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   253              .signDelay  = 0,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   254              .signPeriod = 0,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   255              .signSource = IfxEdsadc_RectifierSignSource_onChipGenerator,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   256              .enabled    = FALSE
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   257          },
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   258          .combFilter                     = {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   259              .decimationFactor = 36,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   260              .startValue       = 36
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   261          },
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   262          .timeStamp                      = {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   263              .timeStampCounterClock      = IfxEdsadc_TimeStampCounterClockSelection_div1,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   264              .timeStampCounterRunControl = IfxEdsadc_TimeStampCounterControl_off,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   265              .analogMuxCopy              = IfxEdsadc_AnalogMux_doNotCopyAmx
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   266          },
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   267          .commonMode                     = {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   268              .fractionalRefVoltage  = IfxEdsadc_FractionalRefVoltageSelection_div2,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   269              .refVoltageEnable      = IfxEdsadc_FractionalRefVoltage_disable,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   270              .halfSupplyVoltge      = IfxEdsadc_HalfSupplyVoltage_disable,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   271              .commonModeHoldVoltage = IfxEdsadc_CommonModeHoldVoltage_disable,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   272              .positiveInput         = 0,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   273              .negativeInput         = 0
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   274          },
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   275          .gainFactor            = 8090,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   276          .cicShift              = 16,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   277          .channelPins           = NULL_PTR,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   278          .gainCalibrationConfig = {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   279              .gainFactor        = 5759,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   280              .cicShift          = 27,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   281              .cicDecimationRate = 6,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   282              .calFactor         = 4096,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   283              .calTarget         = 32000
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   284          }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   285      };
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   286      *config = IfxEdsadc_Edsadc_defaultChannelConfig;
	mov.aa	a2,a4
.L450:
	lea	a6,24
.L23:
	ld.w	d15,[a15+]
	st.w	[a2+],d15
	loop	a6,.L23
.L675:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   287  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   288      if (edsadc != NULL_PTR)
	jz.a	a5,.L24
.L676:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   289      {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   290          config->module = edsadc->edsadc;
	ld.a	a15,[a5]
.L677:
	j	.L25
.L24:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   291      }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   292      else
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   293      {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   294          config->module = NULL_PTR;
	mov.a	a15,#0
.L25:
	st.a	[a4],a15
.L451:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   295      }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   296  }
	ret
.L382:
	
__IfxEdsadc_Edsadc_initChannelConfig_function_end:
	.size	IfxEdsadc_Edsadc_initChannelConfig,__IfxEdsadc_Edsadc_initChannelConfig_function_end-IfxEdsadc_Edsadc_initChannelConfig
.L126:
	; End of function
	
	.sdecl	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_initCombFilter',code,cluster('IfxEdsadc_Edsadc_initCombFilter')
	.sect	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_initCombFilter'
	.align	2
	
	.global	IfxEdsadc_Edsadc_initCombFilter

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   297  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   298  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   299  void IfxEdsadc_Edsadc_initCombFilter(IfxEdsadc_Edsadc_Channel *channel, const IfxEdsadc_Edsadc_CombFilterConfig *config)
; Function IfxEdsadc_Edsadc_initCombFilter
.L49:
IfxEdsadc_Edsadc_initCombFilter:	.type	func

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   300  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   301      Ifx_EDSADC_CH_FCFGC fcfgc;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   302  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   303      fcfgc.U                   = 0;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   304  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   305      fcfgc.B.CFMDF             = config->decimationFactor - 1;
	ld.hu	d0,[a5]0
.L505:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   306      fcfgc.B.CFMSV             = config->startValue - 1;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   307  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   308      (channel->channel)->FCFGC = fcfgc;
	mov	d15,#0
	ld.a	a15,[a4]4
.L452:
	add	d0,#-1
	extr.u	d0,d0,#0,#16
.L506:
	insert	d15,d15,d0,#0,#9
	ld.hu	d0,[a5]2
.L507:
	add	d0,#-1
.L508:
	insert	d15,d15,d0,#16,#9
	st.w	[a15]20,d15
.L509:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   309  }
	ret
.L207:
	
__IfxEdsadc_Edsadc_initCombFilter_function_end:
	.size	IfxEdsadc_Edsadc_initCombFilter,__IfxEdsadc_Edsadc_initCombFilter_function_end-IfxEdsadc_Edsadc_initCombFilter
.L81:
	; End of function
	
	.sdecl	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_initDemodulator',code,cluster('IfxEdsadc_Edsadc_initDemodulator')
	.sect	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_initDemodulator'
	.align	2
	
	.global	IfxEdsadc_Edsadc_initDemodulator

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   310  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   311  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   312  void IfxEdsadc_Edsadc_initDemodulator(IfxEdsadc_Edsadc_Channel *channel, const IfxEdsadc_Edsadc_DemodulatorConfig *config)
; Function IfxEdsadc_Edsadc_initDemodulator
.L51:
IfxEdsadc_Edsadc_initDemodulator:	.type	func

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   313  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   314      Ifx_EDSADC_CH_DICFG dicfg;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   315  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   316      dicfg.U                   = 0;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   317  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   318      dicfg.B.DSS               = config->dataStream;
	mov	d0,#0
	ld.bu	d15,[a5]2
.L453:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   319      dicfg.B.DSRCEX            = config->inputDataSource;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   320      dicfg.B.DSWC              = 1; // enable write access for this bitfield
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   321  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   322      dicfg.B.ITRMODE           = config->integrationTrigger;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   323      dicfg.B.TSTRMODE          = config->timestampTrigger;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   324      dicfg.B.TRSEL             = config->triggerInput;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   325      dicfg.B.DRM               = config->dataReadMode;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   326      dicfg.B.TSM               = config->timeStampMode;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   327  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   328      dicfg.B.CSRCEX            = config->sampleClockSource;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   329      dicfg.B.RDM               = config->resultDisplay;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   330      dicfg.B.MSWC              = 1; // enable write access for these bitfields
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   331  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   332      (channel->channel)->DICFG = dicfg;
	ld.a	a15,[a4]4
.L514:
	insert	d0,d0,d15,#0,#3
	ld.bu	d15,[a5]1
.L515:
	insert	d0,d0,d15,#4,#3
	ld.bu	d15,[a5]4
.L516:
	insert	d0,d0,#1,#15,#1
.L517:
	insert	d0,d0,d15,#20,#2
	ld.bu	d15,[a5]5
.L518:
	extr.u	d1,d0,#16,#8
.L519:
	insert	d15,d1,d15,#6,#2
	ld.bu	d1,[a5]
.L520:
	insert	d15,d15,d1,#0,#4
.L521:
	insert	d0,d0,d15,#16,#8
	ld.bu	d15,[a5]6
.L522:
	insert	d0,d0,d15,#26,#2
	ld.bu	d15,[a5]7
.L523:
	insert	d0,d0,d15,#28,#1
	ld.bu	d15,[a5]3
.L524:
	insert	d0,d0,d15,#8,#3
	ld.bu	d15,[a5]8
.L525:
	extr.u	d1,d0,#24,#8
.L526:
	insert	d15,d1,d15,#5,#1
.L527:
	or	d15,#128
.L528:
	insert	d0,d0,d15,#24,#8
	st.w	[a15]8,d0
.L529:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   333  }
	ret
.L214:
	
__IfxEdsadc_Edsadc_initDemodulator_function_end:
	.size	IfxEdsadc_Edsadc_initDemodulator,__IfxEdsadc_Edsadc_initDemodulator_function_end-IfxEdsadc_Edsadc_initDemodulator
.L86:
	; End of function
	
	.sdecl	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_initFirFilter',code,cluster('IfxEdsadc_Edsadc_initFirFilter')
	.sect	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_initFirFilter'
	.align	2
	
	.global	IfxEdsadc_Edsadc_initFirFilter

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   334  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   335  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   336  void IfxEdsadc_Edsadc_initFirFilter(IfxEdsadc_Edsadc_Channel *channel, const IfxEdsadc_Edsadc_FirFilterConfig *config)
; Function IfxEdsadc_Edsadc_initFirFilter
.L53:
IfxEdsadc_Edsadc_initFirFilter:	.type	func

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   337  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   338      Ifx_EDSADC_CH_FCFGM fcfgm;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   339      Ifx_EDSADC_CH_RFC   rfc;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   340      fcfgm.U                   = 0;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   341      rfc.U                     = 0;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   342  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   343      fcfgm.B.FIR0EN            = (config->fir0Enabled != FALSE) ? 1 : 0;
	mov	d1,#0
	ld.bu	d15,[a5]5
.L454:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   344      fcfgm.B.FIR1EN            = (config->fir1Enabled != FALSE) ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   345      fcfgm.B.OCEN              = (config->offsetCompensation != FALSE) ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   346      fcfgm.B.OVCEN             = config->overshootCompensation;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   347      fcfgm.B.FIR1DEC           = config->fir1DecimateRate;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   348      fcfgm.B.CICMOD            = config->cicMode;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   349      fcfgm.B.PFEN              = config->prefilterEnabled;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   350      fcfgm.B.FMWC              = 1;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   351      fcfgm.B.SRGM              = config->serviceRequest;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   352      fcfgm.B.SRGA              = config->auxServiceRequest;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   353      fcfgm.B.ESEL              = config->eventSelect;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   354      fcfgm.B.CALIB             = config->calibrationTrigger;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   355      fcfgm.B.AUTOCAL           = config->calibrationControl;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   356      fcfgm.B.CSRWC             = 1;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   357  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   358      (channel->channel)->FCFGM = fcfgm;
	mov	d2,d1
	ld.a	a15,[a4]4
.L455:
	ne	d0,d15,#0
	ld.bu	d15,[a5]6
.L534:
	insert	d1,d1,d0,#0,#1
.L535:
	ne	d0,d15,#0
	ld.bu	d15,[a5]4
.L536:
	insert	d1,d1,d0,#1,#1
.L537:
	ne	d0,d15,#0
	ld.bu	d15,[a5]13
.L538:
	insert	d1,d1,d0,#8,#3
	ld.bu	d0,[a5]
.L539:
	insert	d1,d1,d15,#2,#1
	ld.bu	d15,[a5]8
.L540:
	insert	d1,d1,d15,#3,#1
	ld.bu	d15,[a5]9
.L541:
	insert	d1,d1,d15,#4,#1
	ld.bu	d15,[a5]10
.L542:
	insert	d1,d1,d15,#5,#1
	ld.bu	d15,[a5]1
.L543:
	insert	d1,d1,#1,#15,#1
.L544:
	insert	d1,d1,d0,#16,#2
.L545:
	insert	d1,d1,d15,#20,#2
	ld.bu	d15,[a5]3
.L546:
	insert	d1,d1,d15,#22,#2
	ld.bu	d15,[a5]11
.L547:
	insert	d1,d1,d15,#28,#1
	ld.bu	d15,[a5]12
.L548:
	extr.u	d0,d1,#24,#8
.L549:
	insert	d15,d0,d15,#5,#1
.L550:
	or	d15,#128
.L551:
	insert	d1,d1,d15,#24,#8
	st.w	[a15]16,d1
.L552:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   359      rfc.B.SRLVL               = config->serviceRequestLevel;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   360      channel->channel->RFC     = rfc;
	ld.a	a15,[a4]4
.L553:
	ld.bu	d15,[a5]2
.L554:
	insert	d2,d2,d15,#0,#2
	st.w	[a15]44,d2
.L555:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   361  }
	ret
.L220:
	
__IfxEdsadc_Edsadc_initFirFilter_function_end:
	.size	IfxEdsadc_Edsadc_initFirFilter,__IfxEdsadc_Edsadc_initFirFilter_function_end-IfxEdsadc_Edsadc_initFirFilter
.L91:
	; End of function
	
	.sdecl	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_initIntegrator',code,cluster('IfxEdsadc_Edsadc_initIntegrator')
	.sect	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_initIntegrator'
	.align	2
	
	.global	IfxEdsadc_Edsadc_initIntegrator

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   362  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   363  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   364  void IfxEdsadc_Edsadc_initIntegrator(IfxEdsadc_Edsadc_Channel *channel, const IfxEdsadc_Edsadc_IntegratorConfig *config)
; Function IfxEdsadc_Edsadc_initIntegrator
.L55:
IfxEdsadc_Edsadc_initIntegrator:	.type	func

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   365  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   366      Ifx_EDSADC_CH_IWCTR iwctr;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   367  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   368      iwctr.U                   = 0;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   369  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   370      iwctr.B.REPVAL            = config->integrationCycles - 1;
	ld.hu	d15,[a5]6
.L560:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   371      iwctr.B.NVALDIS           = config->discardCount;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   372      iwctr.B.IWS               = config->windowSize;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   373      iwctr.B.NVALINT           = config->integrationCount - 1;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   374      iwctr.B.ISC               = config->shiftControl;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   375      iwctr.B.FRC               = config->fcRestartControl;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   376  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   377      (channel->channel)->IWCTR = iwctr;
	mov	d0,#0
	ld.a	a15,[a4]4
.L456:
	add	d15,#-1
	extr.u	d15,d15,#0,#8
.L561:
	insert	d0,d0,d15,#8,#4
	ld.hu	d15,[a5]2
.L562:
	insert	d0,d0,d15,#16,#6
	ld.bu	d15,[a5]
.L563:
	insert	d0,d0,d15,#4,#1
	ld.hu	d15,[a5]4
.L564:
	add	d15,#-1
.L565:
	insert	d0,d0,d15,#24,#6
	ld.bu	d15,[a5]8
.L566:
	insert	d0,d0,d15,#0,#3
	ld.bu	d15,[a5]9
.L567:
	insert	d0,d0,d15,#5,#1
	st.w	[a15]32,d0
.L568:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   378  }
	ret
.L228:
	
__IfxEdsadc_Edsadc_initIntegrator_function_end:
	.size	IfxEdsadc_Edsadc_initIntegrator,__IfxEdsadc_Edsadc_initIntegrator_function_end-IfxEdsadc_Edsadc_initIntegrator
.L96:
	; End of function
	
	.sdecl	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_initModulator',code,cluster('IfxEdsadc_Edsadc_initModulator')
	.sect	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_initModulator'
	.align	2
	
	.global	IfxEdsadc_Edsadc_initModulator

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   379  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   380  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   381  void IfxEdsadc_Edsadc_initModulator(IfxEdsadc_Edsadc_Channel *channel, const IfxEdsadc_Edsadc_ModulatorConfig *config)
; Function IfxEdsadc_Edsadc_initModulator
.L57:
IfxEdsadc_Edsadc_initModulator:	.type	func
	mov.aa	a15,a5
.L459:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   382  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   383      Ifx_EDSADC_CH_MODCFG modcfg;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   384  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   385      modcfg.U         = 0;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   386  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   387      modcfg.B.INCFGP  = config->positiveInput;
	mov	d8,#0
	ld.bu	d15,[a15]6
.L461:
	sub.a	a10,#8
.L457:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   388      modcfg.B.INCFGN  = config->negativeInput;
	insert	d8,d8,d15,#0,#2
	ld.bu	d15,[a15]7
.L573:
	mov.aa	a12,a4
.L241:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   389      modcfg.B.GAINSEL = config->inputGain;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   390      modcfg.B.INSEL   = config->inputPin;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   391      modcfg.B.INMAC   = config->inputMuxActionControl;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   392      modcfg.B.INMODE  = config->triggerEvent;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   393      modcfg.B.INCWC   = 1;       // enable write access for these bitfields
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   394  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   395      float32 targetFreq = config->modulatorClockFreq;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   396      float32 sourceFreq = IfxEdsadc_getModulatorInputClockFreq(channel->module);
	ld.a	a4,[a12]
.L242:
	insert	d8,d8,d15,#2,#2
	ld.bu	d15,[a15]4
.L574:
	insert	d8,d8,d15,#4,#4
	ld.bu	d15,[a15]8
.L575:
	insert	d8,d8,d15,#8,#2
	ld.bu	d15,[a15]11
.L576:
	insert	d8,d8,d15,#14,#1
	ld.bu	d15,[a15]12
.L577:
	extr.u	d0,d8,#8,#8
.L578:
	insert	d15,d0,d15,#4,#2
.L579:
	or	d15,#128
.L580:
	insert	d8,d8,d15,#8,#8
	ld.w	d15,[a15]
.L243:
	st.w	[a10],d15
.L581:
	call	IfxEdsadc_getModulatorInputClockFreq
.L458:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   397      modcfg.B.DIVM              = IfxEdsadc_Edsadc_calcDIVM(sourceFreq, &targetFreq);
	mov.aa	a4,a10
	mov	d4,d2
	call	IfxEdsadc_Edsadc_calcDIVM
.L462:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   398      modcfg.B.ACSD              = config->analogClockSyncDelay;
	insert	d8,d8,d2,#16,#3
	ld.bu	d15,[a15]5
.L582:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   399      modcfg.B.DITHEN            = config->ditheringEnabled;
	insert	d8,d8,d15,#20,#3
	ld.bu	d15,[a15]9
.L583:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   400  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   401      modcfg.B.IREN              = config->integratorResetEnabled;
	insert	d8,d8,d15,#26,#1
	ld.bu	d15,[a15]10
.L584:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   402      modcfg.B.MMWC              = 1;  // enable write access for these bitfields
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   403  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   404      (channel->channel)->MODCFG = modcfg;
	ld.a	a15,[a12]4
.L460:
	extr.u	d0,d8,#24,#8
.L585:
	insert	d15,d0,d15,#3,#1
.L586:
	or	d15,#128
.L587:
	insert	d8,d8,d15,#24,#8
	st.w	[a15],d8
.L588:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   405  }
	ret
.L234:
	
__IfxEdsadc_Edsadc_initModulator_function_end:
	.size	IfxEdsadc_Edsadc_initModulator,__IfxEdsadc_Edsadc_initModulator_function_end-IfxEdsadc_Edsadc_initModulator
.L101:
	; End of function
	
	.sdecl	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_initModule',code,cluster('IfxEdsadc_Edsadc_initModule')
	.sect	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_initModule'
	.align	2
	
	.global	IfxEdsadc_Edsadc_initModule

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   406  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   407  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   408  void IfxEdsadc_Edsadc_initModule(IfxEdsadc_Edsadc *edsadc, IfxEdsadc_Edsadc_Config *config)
; Function IfxEdsadc_Edsadc_initModule
.L59:
IfxEdsadc_Edsadc_initModule:	.type	func
	mov.aa	a15,a5
.L464:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   409  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   410      Ifx_EDSADC *edsadcSFR = config->edsadc;
	ld.a	a12,[a15]
.L465:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   411  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   412      edsadc->edsadc = edsadcSFR;
	st.a	[a4],a12
.L593:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   413  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   414      {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   415          if (edsadcSFR->CLC.U != 0)
	ld.w	d15,[a12]
.L594:
	jeq	d15,#0,.L26
.L252:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   416          {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   417              uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L463:
	mov	d15,d2
.L467:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   418              IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d15
	call	IfxScuWdt_clearCpuEndinit
.L466:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   419              edsadcSFR->CLC.U = 0x00000000;
	mov	d0,#0
	st.w	[a12],d0
.L595:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   420  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   421              if (edsadcSFR->CLC.U)
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   422              {}                   // sync access
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   423  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   424              IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d15
.L468:
	ld.w	d0,[a12]
.L596:
	call	IfxScuWdt_setCpuEndinit
.L26:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   425          }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   426  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   427          {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   428              Ifx_EDSADC_GLOBCFG globcfg;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   429              globcfg.U            = edsadcSFR->GLOBCFG.U;
	ld.w	d0,[a12]128
.L469:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   430  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   431              globcfg.B.CPWC       = 1;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   432              globcfg.B.DITRIM     = config->ditheringIntensity;
	ld.bu	d15,[a15]4
.L597:
	insert	d0,d0,#1,#15,#1
.L598:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   433              globcfg.B.USC        = config->modulatorClockMode;
	insert	d0,d0,d15,#8,#3
	ld.bu	d15,[a15]5
.L599:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   434              globcfg.B.SUPLEV     = config->supplyVoltageLevel;
	insert	d0,d0,d15,#12,#1
	ld.bu	d15,[a15]6
.L600:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   435  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   436              edsadcSFR->GLOBCFG.U = globcfg.U;
	insert	d0,d0,d15,#13,#2
	st.w	[a12]128,d0
.L255:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   437          }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   438      }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   439  }
	ret
.L246:
	
__IfxEdsadc_Edsadc_initModule_function_end:
	.size	IfxEdsadc_Edsadc_initModule,__IfxEdsadc_Edsadc_initModule_function_end-IfxEdsadc_Edsadc_initModule
.L106:
	; End of function
	
	.sdecl	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_initModuleConfig',code,cluster('IfxEdsadc_Edsadc_initModuleConfig')
	.sect	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_initModuleConfig'
	.align	2
	
	.global	IfxEdsadc_Edsadc_initModuleConfig

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   440  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   441  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   442  void IfxEdsadc_Edsadc_initModuleConfig(IfxEdsadc_Edsadc_Config *config, Ifx_EDSADC *edsadc)
; Function IfxEdsadc_Edsadc_initModuleConfig
.L61:
IfxEdsadc_Edsadc_initModuleConfig:	.type	func

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   443  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   444      const IfxEdsadc_Edsadc_Config IfxEdsadc_Edsadc_defaultConfig = {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   445          .ditheringIntensity = IfxEdsadc_DitheringIntensity_minimum,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   446          .modulatorClockMode = IfxEdsadc_ModulatorClockGeneration_syncMode,
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   447          .supplyVoltageLevel = IfxEdsadc_SupplyVoltageLevel_automaticControl
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   448      };
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   449  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   450      *config        = IfxEdsadc_Edsadc_defaultConfig;
	mov	d15,#0
	st.b	[a4]4,d15
	st.b	[a4]5,d15
	st.b	[a4]6,d15
.L605:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   451      config->edsadc = edsadc;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   452  }
	st.a	[a4],a5
	ret
.L258:
	
__IfxEdsadc_Edsadc_initModuleConfig_function_end:
	.size	IfxEdsadc_Edsadc_initModuleConfig,__IfxEdsadc_Edsadc_initModuleConfig_function_end-IfxEdsadc_Edsadc_initModuleConfig
.L111:
	; End of function
	
	.sdecl	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_initRectifier',code,cluster('IfxEdsadc_Edsadc_initRectifier')
	.sect	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_initRectifier'
	.align	2
	
	.global	IfxEdsadc_Edsadc_initRectifier

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   453  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   454  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   455  void IfxEdsadc_Edsadc_initRectifier(IfxEdsadc_Edsadc_Channel *channel, const IfxEdsadc_Edsadc_RectifierConfig *config)
; Function IfxEdsadc_Edsadc_initRectifier
.L63:
IfxEdsadc_Edsadc_initRectifier:	.type	func

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   456  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   457      Ifx_EDSADC_CH_RECTCFG rect;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   458  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   459      rect.U                             = channel->module->CH[channel->channelId].RECTCFG.U;
	ld.a	a15,[a4]
.L610:
	ld.bu	d15,[a4]8
	sha	d15,d15,#8
.L611:
	addsc.a	a15,a15,d15,#0
.L612:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   460      rect.B.RFEN                        = config->enabled;
	ld.bu	d15,[a5]3
.L613:
	ld.w	d0,[a15]424
.L470:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   461      rect.B.SSRC                        = config->signSource;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   462      (channel->channel)->RECTCFG        = rect;
	ld.a	a15,[a4]4
.L614:
	insert	d0,d0,d15,#0,#1
	ld.bu	d15,[a5]2
.L615:
	insert	d0,d0,d15,#4,#2
	st.w	[a15]168,d0
.L616:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   463      (channel->channel)->CGSYNC.B.SDPOS = config->signDelay;
	ld.a	a15,[a4]4
.L617:
	ld.bu	d15,[a5]
.L618:
	st.b	[a15]162,d15
.L619:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   464      (channel->channel)->CGSYNC.B.SDNEG = config->signDelay + (config->signPeriod / 2);
	ld.a	a15,[a4]4
.L620:
	ld.bu	d15,[a5]1
.L621:
	ld.bu	d0,[a5]
.L471:
	sha	d15,#-1
.L622:
	add	d0,d15
	st.b	[a15]163,d0
.L623:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   465  }
	ret
.L261:
	
__IfxEdsadc_Edsadc_initRectifier_function_end:
	.size	IfxEdsadc_Edsadc_initRectifier,__IfxEdsadc_Edsadc_initRectifier_function_end-IfxEdsadc_Edsadc_initRectifier
.L116:
	; End of function
	
	.sdecl	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_calcDIVCG',code,cluster('IfxEdsadc_Edsadc_calcDIVCG')
	.sect	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_calcDIVCG'
	.align	2
	

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   466  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   467  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   468  IFX_STATIC sint32 IfxEdsadc_Edsadc_calcDIVCG(float32 sourceFreq, float32 *targetFreq)
; Function IfxEdsadc_Edsadc_calcDIVCG
.L65:
IfxEdsadc_Edsadc_calcDIVCG:	.type	func

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   469  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   470      float32 bestError = 10e6;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   471      sint32  bestDiv   = 2, i;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   472  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   473      for (i = 2; i <= 32; i += 2)
	mov	d0,#2
	mov.a	a15,#15
.L472:
	mov	d2,d0
	ld.w	d1,.4.cnt
.L406:
	mov	d3,#0
	fcall	.cocofun_6
.L407:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   474      {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   475          float32 freq  = sourceFreq / i;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   476          float32 error = __absf(freq - *targetFreq);
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   477  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   478          if (__leqf(error, bestError))
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   479          {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   480              bestError = error;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   481              bestDiv   = i;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   482  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   483              if (!__neqf(error, 0))
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   484              {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   485                  break;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   486              }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   487          }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   488      }
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   489  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   490      *targetFreq = sourceFreq / bestDiv;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   491  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   492      return (bestDiv / 2) - 1;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   493  }
	add	d2,d0,#-1
	ret
.L400:
	
__IfxEdsadc_Edsadc_calcDIVCG_function_end:
	.size	IfxEdsadc_Edsadc_calcDIVCG,__IfxEdsadc_Edsadc_calcDIVCG_function_end-IfxEdsadc_Edsadc_calcDIVCG
.L141:
	; End of function
	
	.sdecl	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_initCarrierGenConfig',code,cluster('IfxEdsadc_Edsadc_initCarrierGenConfig')
	.sect	'.text.IfxEdsadc_Edsadc.IfxEdsadc_Edsadc_initCarrierGenConfig'
	.align	2
	
	.global	IfxEdsadc_Edsadc_initCarrierGenConfig

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   494  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   495  
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   496  void IfxEdsadc_Edsadc_initCarrierGenConfig(IfxEdsadc_Edsadc_CarrierGenConfig *config)
; Function IfxEdsadc_Edsadc_initCarrierGenConfig
.L67:
IfxEdsadc_Edsadc_initCarrierGenConfig:	.type	func

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   497  {
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   498      config->bitReversed         = FALSE;
	mov	d15,#0
	st.b	[a4]19,d15
.L682:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   499      config->carrierWaveformMode = IfxEdsadc_CarrierWaveformMode_sine;
	mov	d0,#3
	st.b	[a4],d0
.L683:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   500      config->frequency           = 10000;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   501      config->inverted            = FALSE;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   502      config->pinDriver           = IfxPort_PadDriver_cmosAutomotiveSpeed1;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   503      config->pinMode             = IfxPort_OutputMode_pushPull;
; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   504      config->pinNeg              = NULL_PTR;
	mov.a	a15,#0
.L684:
	ld.w	d0,.5.cnt
.L685:
	st.w	[a4]2,d0
.L686:
	st.b	[a4]18,d15
.L687:
	st.b	[a4]17,d15
.L688:
	mov	d15,#128
	st.b	[a4]16,d15
.L689:
	st.a	[a4]12,a15
.L690:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   505      config->pinPos              = NULL_PTR;
	st.a	[a4]8,a15
.L691:

; ..\0_Src\4_McHal\Tricore\Edsadc\Edsadc\IfxEdsadc_Edsadc.c	   506  }
	ret
.L386:
	
__IfxEdsadc_Edsadc_initCarrierGenConfig_function_end:
	.size	IfxEdsadc_Edsadc_initCarrierGenConfig,__IfxEdsadc_Edsadc_initCarrierGenConfig_function_end-IfxEdsadc_Edsadc_initCarrierGenConfig
.L131:
	; End of function
	
	.sdecl	'.rodata.IfxEdsadc_Edsadc..2.ini',data,rom
	.sect	'.rodata.IfxEdsadc_Edsadc..2.ini'
	.align	4
.2.ini:	.type	object
	.size	.2.ini,100
	.space	8
	.byte	3
	.space	4
	.byte	1,1
	.space	3
	.byte	1
	.space	5
	.word	1259902592
	.space	18
	.byte	1
	.space	9
	.half	20,1
	.space	8
	.half	36,36
	.space	10
	.half	8090
	.byte	16
	.space	7
	.half	5759
	.byte	27,6
	.half	4096,32000
	.calls	'IfxEdsadc_Edsadc_initCarrierGen','IfxEdsadc_getModulatorInputClockFreq'
	.calls	'IfxEdsadc_Edsadc_initCarrierGen','IfxEdsadc_Edsadc_calcDIVCG'
	.calls	'IfxEdsadc_Edsadc_initCarrierGen','IfxPort_setPinMode'
	.calls	'IfxEdsadc_Edsadc_initCarrierGen','IfxPort_setPinPadDriver'
	.calls	'IfxEdsadc_Edsadc_initChannel','IfxEdsadc_Edsadc_initModulator'
	.calls	'IfxEdsadc_Edsadc_initChannel','IfxEdsadc_Edsadc_initDemodulator'
	.calls	'IfxEdsadc_Edsadc_initChannel','IfxEdsadc_Edsadc_initCombFilter'
	.calls	'IfxEdsadc_Edsadc_initChannel','IfxEdsadc_Edsadc_initFirFilter'
	.calls	'IfxEdsadc_Edsadc_initChannel','IfxEdsadc_Edsadc_initIntegrator'
	.calls	'IfxEdsadc_Edsadc_initChannel','IfxEdsadc_Edsadc_initRectifier'
	.calls	'IfxEdsadc_Edsadc_initChannel','IfxEdsadc_setGainCorrectionFactor'
	.calls	'IfxEdsadc_Edsadc_initChannel','IfxEdsadc_setTimeStampCounter'
	.calls	'IfxEdsadc_Edsadc_initChannel','IfxEdsadc_setCommonModeVoltage'
	.calls	'IfxEdsadc_Edsadc_initChannel','IfxEdsadc_setGainControl'
	.calls	'IfxEdsadc_Edsadc_initChannel','IfxEdsadc_setGainCalibration'
	.calls	'IfxEdsadc_Edsadc_initChannel','IfxPort_setPinMode'
	.calls	'IfxEdsadc_Edsadc_initChannel','IfxPort_setPinPadDriver'
	.calls	'IfxEdsadc_Edsadc_initModulator','IfxEdsadc_getModulatorInputClockFreq'
	.calls	'IfxEdsadc_Edsadc_initModulator','IfxEdsadc_Edsadc_calcDIVM'
	.calls	'IfxEdsadc_Edsadc_initModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxEdsadc_Edsadc_initModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxEdsadc_Edsadc_initModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxEdsadc_Edsadc_calcDIVM','.cocofun_6'
	.calls	'IfxEdsadc_Edsadc_initChannel','.cocofun_7'
	.calls	'IfxEdsadc_Edsadc_initChannel','.cocofun_8'
	.calls	'IfxEdsadc_Edsadc_initChannel','.cocofun_9'
	.calls	'IfxEdsadc_Edsadc_calcDIVCG','.cocofun_6'
	.calls	'IfxEdsadc_Edsadc_calcDIVM','',0
	.calls	'.cocofun_6','',0
	.calls	'IfxEdsadc_Edsadc_initCarrierGen','',8
	.calls	'IfxEdsadc_Edsadc_initChannel','',16
	.calls	'.cocofun_9','',0
	.calls	'.cocofun_8','',0
	.calls	'.cocofun_7','',0
	.calls	'IfxEdsadc_Edsadc_initChannelConfig','',0
	.calls	'IfxEdsadc_Edsadc_initCombFilter','',0
	.calls	'IfxEdsadc_Edsadc_initDemodulator','',0
	.calls	'IfxEdsadc_Edsadc_initFirFilter','',0
	.calls	'IfxEdsadc_Edsadc_initIntegrator','',0
	.calls	'IfxEdsadc_Edsadc_initModulator','',8
	.calls	'IfxEdsadc_Edsadc_initModule','',0
	.calls	'IfxEdsadc_Edsadc_initModuleConfig','',0
	.calls	'IfxEdsadc_Edsadc_initRectifier','',0
	.calls	'IfxEdsadc_Edsadc_calcDIVCG','',0
	.extern	IfxScuWdt_clearCpuEndinit
	.extern	IfxScuWdt_setCpuEndinit
	.extern	IfxScuWdt_getCpuWatchdogPassword
	.extern	IfxPort_setPinMode
	.extern	IfxPort_setPinPadDriver
	.extern	IfxEdsadc_getModulatorInputClockFreq
	.extern	IfxEdsadc_setCommonModeVoltage
	.extern	IfxEdsadc_setGainCorrectionFactor
	.extern	IfxEdsadc_setTimeStampCounter
	.extern	IfxEdsadc_setGainControl
	.extern	IfxEdsadc_setGainCalibration
	.calls	'IfxEdsadc_Edsadc_initCarrierGenConfig','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L69:
	.word	124466
	.half	3
	.word	.L70
	.byte	4
.L68:
	.byte	1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L71
	.byte	2,1,1,3
	.word	180
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,58,17,1,1,5
	.byte	'fun',0,1,58,43
	.word	183
	.byte	6,0,7
	.byte	'__fract',0,4,128,1
.L170:
	.byte	7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,149,2,18
	.word	228
	.byte	1,1,5
	.byte	'a',0,1,149,2,44
	.word	240
	.byte	6,0,4
	.byte	'Ifx__stopPerfCounters',0,3,1,169,2,17,1,1,6,0,7
	.byte	'unsigned long long int',0,8,7,9
	.byte	'void',0,3
	.word	352
	.byte	8
	.byte	'__ld64',0,3,2,132,1,19
	.word	326
	.byte	1,1,5
	.byte	'addr',0,2,132,1,32
	.word	358
	.byte	6,0,4
	.byte	'__st64',0,3,2,140,1,17,1,1,5
	.byte	'addr',0,2,140,1,30
	.word	358
	.byte	5
	.byte	'value',0,2,140,1,43
	.word	326
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,7
	.byte	'int',0,4,5,7
	.byte	'unsigned char',0,1,8,10
	.byte	'_Ifx_SRC_SRCR_Bits',0,4,68,16,4,11
	.byte	'SRPN',0,1
	.word	467
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	467
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	467
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	467
	.byte	3,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	467
	.byte	2,0,2,35,1,11
	.byte	'ECC',0,1
	.word	467
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	467
	.byte	3,0,2,35,2,11
	.byte	'SRR',0,1
	.word	467
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	467
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	467
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	467
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	467
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	467
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	467
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	467
	.byte	1,0,2,35,3,0,12,4,93,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	484
	.byte	4,2,35,0,0,14
	.word	774
	.byte	3
	.word	813
	.byte	4
	.byte	'IfxSrc_clearRequest',0,3,3,247,1,17,1,1,5
	.byte	'src',0,3,247,1,60
	.word	818
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,6,238,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	866
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	866
	.byte	16,0,2,35,0,0,12,6,189,16,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	882
	.byte	4,2,35,0,0
.L253:
	.byte	7
	.byte	'unsigned short int',0,2,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,6,247,9,16,4,11
	.byte	'reserved_0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	467
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1018
	.byte	16,0,2,35,2,0,12,6,197,16,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1040
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,6,135,10,16,4,11
	.byte	'AE',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	467
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	1018
	.byte	16,0,2,35,2,0,12,6,205,16,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1306
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU',0,6,136,17,25,12,13
	.byte	'CON0',0
	.word	978
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	1266
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	1497
	.byte	4,2,35,8,0,14
	.word	1537
	.byte	3
	.word	1600
	.byte	4
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,5,164,4,17,1,1,5
	.byte	'watchdog',0,5,164,4,65
	.word	1605
	.byte	5
	.byte	'password',0,5,164,4,82
	.word	1018
	.byte	6,0,4
	.byte	'IfxScuWdt_clearSafetyEndinitInline',0,3,5,197,4,17,1,1,5
	.byte	'password',0,5,197,4,59
	.word	1018
	.byte	6,0,4
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,5,144,5,17,1,1,5
	.byte	'watchdog',0,5,144,5,63
	.word	1605
	.byte	5
	.byte	'password',0,5,144,5,80
	.word	1018
	.byte	6,0,4
	.byte	'IfxScuWdt_setSafetyEndinitInline',0,3,5,177,5,17,1,1,5
	.byte	'password',0,5,177,5,57
	.word	1018
	.byte	6,0,8
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,5,220,4,19
	.word	1018
	.byte	1,1,5
	.byte	'watchdog',0,5,220,4,74
	.word	1605
	.byte	6,0,8
	.byte	'IfxScuWdt_getSafetyWatchdogPasswordInline',0,3,5,129,5,19
	.word	1018
	.byte	1,1,6,0,15,8,161,1,9,1,16
	.byte	'IfxCpu_ResourceCpu_0',0,0,16
	.byte	'IfxCpu_ResourceCpu_1',0,1,16
	.byte	'IfxCpu_ResourceCpu_2',0,2,16
	.byte	'IfxCpu_ResourceCpu_3',0,3,16
	.byte	'IfxCpu_ResourceCpu_4',0,4,16
	.byte	'IfxCpu_ResourceCpu_5',0,5,16
	.byte	'IfxCpu_ResourceCpu_none',0,6,0,8
	.byte	'IfxCpu_getCoreIndex',0,3,7,235,6,31
	.word	2015
	.byte	1,1,6,0,8
	.byte	'IfxCpu_areInterruptsEnabled',0,3,7,233,5,20
	.word	467
	.byte	1,1,6,0,7
	.byte	'unsigned long int',0,4,7,8
	.byte	'IfxCpu_getPerformanceCounter',0,3,7,255,6,19
	.word	2262
	.byte	1,1,5
	.byte	'address',0,7,255,6,55
	.word	1018
	.byte	6,0,8
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,7,156,7,20
	.word	467
	.byte	1,1,5
	.byte	'address',0,7,156,7,70
	.word	1018
	.byte	6,0,4
	.byte	'IfxCpu_updatePerformanceCounter',0,3,7,138,9,17,1,1,5
	.byte	'address',0,7,138,9,56
	.word	2262
	.byte	5
	.byte	'count',0,7,138,9,72
	.word	2262
	.byte	17,6,0,0,10
	.byte	'_Ifx_P_OUT_Bits',0,10,145,3,16,4,11
	.byte	'P0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	467
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	467
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	467
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	467
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1018
	.byte	16,0,2,35,2,0,12,10,171,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2493
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMR_Bits',0,10,171,2,16,4,11
	.byte	'PS0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	467
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	467
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	467
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	467
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'PCL0',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	467
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	467
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	467
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	467
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	467
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	467
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	467
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	467
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	467
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	467
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	467
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	467
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	467
	.byte	1,0,2,35,3,0,12,10,251,4,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2809
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ID_Bits',0,10,133,1,16,4,11
	.byte	'MODREV',0,1
	.word	467
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	467
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	1018
	.byte	16,0,2,35,2,0,12,10,155,4,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3380
	.byte	4,2,35,0,0,18,4
	.word	467
	.byte	19,3,0,10
	.byte	'_Ifx_P_IOCR0_Bits',0,10,163,1,16,4,11
	.byte	'reserved_0',0,1
	.word	467
	.byte	3,5,2,35,0,11
	.byte	'PC0',0,1
	.word	467
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	467
	.byte	3,5,2,35,1,11
	.byte	'PC1',0,1
	.word	467
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	467
	.byte	3,5,2,35,2,11
	.byte	'PC2',0,1
	.word	467
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	467
	.byte	3,5,2,35,3,11
	.byte	'PC3',0,1
	.word	467
	.byte	5,0,2,35,3,0,12,10,171,4,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3509
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR4_Bits',0,10,189,1,16,4,11
	.byte	'reserved_0',0,1
	.word	467
	.byte	3,5,2,35,0,11
	.byte	'PC4',0,1
	.word	467
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	467
	.byte	3,5,2,35,1,11
	.byte	'PC5',0,1
	.word	467
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	467
	.byte	3,5,2,35,2,11
	.byte	'PC6',0,1
	.word	467
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	467
	.byte	3,5,2,35,3,11
	.byte	'PC7',0,1
	.word	467
	.byte	5,0,2,35,3,0,12,10,187,4,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3724
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR8_Bits',0,10,202,1,16,4,11
	.byte	'reserved_0',0,1
	.word	467
	.byte	3,5,2,35,0,11
	.byte	'PC8',0,1
	.word	467
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	467
	.byte	3,5,2,35,1,11
	.byte	'PC9',0,1
	.word	467
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	467
	.byte	3,5,2,35,2,11
	.byte	'PC10',0,1
	.word	467
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	467
	.byte	3,5,2,35,3,11
	.byte	'PC11',0,1
	.word	467
	.byte	5,0,2,35,3,0,12,10,195,4,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3939
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR12_Bits',0,10,176,1,16,4,11
	.byte	'reserved_0',0,1
	.word	467
	.byte	3,5,2,35,0,11
	.byte	'PC12',0,1
	.word	467
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	467
	.byte	3,5,2,35,1,11
	.byte	'PC13',0,1
	.word	467
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	467
	.byte	3,5,2,35,2,11
	.byte	'PC14',0,1
	.word	467
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	467
	.byte	3,5,2,35,3,11
	.byte	'PC15',0,1
	.word	467
	.byte	5,0,2,35,3,0,12,10,179,4,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4156
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IN_Bits',0,10,141,1,16,4,11
	.byte	'P0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	467
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	467
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	467
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	467
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1018
	.byte	16,0,2,35,2,0,12,10,163,4,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4376
	.byte	4,2,35,0,0,18,24
	.word	467
	.byte	19,23,0,10
	.byte	'_Ifx_P_PDR0_Bits',0,10,212,3,16,4,11
	.byte	'PD0',0,1
	.word	467
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	467
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	467
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	467
	.byte	2,0,2,35,0,11
	.byte	'PD2',0,1
	.word	467
	.byte	2,6,2,35,1,11
	.byte	'PL2',0,1
	.word	467
	.byte	2,4,2,35,1,11
	.byte	'PD3',0,1
	.word	467
	.byte	2,2,2,35,1,11
	.byte	'PL3',0,1
	.word	467
	.byte	2,0,2,35,1,11
	.byte	'PD4',0,1
	.word	467
	.byte	2,6,2,35,2,11
	.byte	'PL4',0,1
	.word	467
	.byte	2,4,2,35,2,11
	.byte	'PD5',0,1
	.word	467
	.byte	2,2,2,35,2,11
	.byte	'PL5',0,1
	.word	467
	.byte	2,0,2,35,2,11
	.byte	'PD6',0,1
	.word	467
	.byte	2,6,2,35,3,11
	.byte	'PL6',0,1
	.word	467
	.byte	2,4,2,35,3,11
	.byte	'PD7',0,1
	.word	467
	.byte	2,2,2,35,3,11
	.byte	'PL7',0,1
	.word	467
	.byte	2,0,2,35,3,0,12,10,195,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4700
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDR1_Bits',0,10,233,3,16,4,11
	.byte	'PD8',0,1
	.word	467
	.byte	2,6,2,35,0,11
	.byte	'PL8',0,1
	.word	467
	.byte	2,4,2,35,0,11
	.byte	'PD9',0,1
	.word	467
	.byte	2,2,2,35,0,11
	.byte	'PL9',0,1
	.word	467
	.byte	2,0,2,35,0,11
	.byte	'PD10',0,1
	.word	467
	.byte	2,6,2,35,1,11
	.byte	'PL10',0,1
	.word	467
	.byte	2,4,2,35,1,11
	.byte	'PD11',0,1
	.word	467
	.byte	2,2,2,35,1,11
	.byte	'PL11',0,1
	.word	467
	.byte	2,0,2,35,1,11
	.byte	'PD12',0,1
	.word	467
	.byte	2,6,2,35,2,11
	.byte	'PL12',0,1
	.word	467
	.byte	2,4,2,35,2,11
	.byte	'PD13',0,1
	.word	467
	.byte	2,2,2,35,2,11
	.byte	'PL13',0,1
	.word	467
	.byte	2,0,2,35,2,11
	.byte	'PD14',0,1
	.word	467
	.byte	2,6,2,35,3,11
	.byte	'PL14',0,1
	.word	467
	.byte	2,4,2,35,3,11
	.byte	'PD15',0,1
	.word	467
	.byte	2,2,2,35,3,11
	.byte	'PL15',0,1
	.word	467
	.byte	2,0,2,35,3,0,12,10,203,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5004
	.byte	4,2,35,0,0,18,8
	.word	467
	.byte	19,7,0,10
	.byte	'_Ifx_P_ESR_Bits',0,10,111,16,4,11
	.byte	'EN0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	467
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	467
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	467
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	467
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1018
	.byte	16,0,2,35,2,0,12,10,147,4,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5329
	.byte	4,2,35,0,0,18,12
	.word	467
	.byte	19,11,0,10
	.byte	'_Ifx_P_PDISC_Bits',0,10,190,3,16,4,11
	.byte	'PDIS0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'PDIS2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'PDIS3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'PDIS4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'PDIS5',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'PDIS6',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'PDIS7',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'PDIS8',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'PDIS9',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'PDIS10',0,1
	.word	467
	.byte	1,5,2,35,1,11
	.byte	'PDIS11',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'PDIS12',0,1
	.word	467
	.byte	1,3,2,35,1,11
	.byte	'PDIS13',0,1
	.word	467
	.byte	1,2,2,35,1,11
	.byte	'PDIS14',0,1
	.word	467
	.byte	1,1,2,35,1,11
	.byte	'PDIS15',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1018
	.byte	16,0,2,35,2,0,12,10,187,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5669
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PCSR_Bits',0,10,167,3,16,4,11
	.byte	'SEL0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'SEL1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'SEL2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'SEL3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'SEL4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'SEL5',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'SEL6',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'SEL7',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'SEL8',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'SEL9',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'SEL10',0,1
	.word	467
	.byte	1,5,2,35,1,11
	.byte	'SEL11',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'SEL12',0,1
	.word	467
	.byte	1,3,2,35,1,11
	.byte	'SEL13',0,1
	.word	467
	.byte	1,2,2,35,1,11
	.byte	'SEL14',0,1
	.word	467
	.byte	1,1,2,35,1,11
	.byte	'SEL15',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1018
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	467
	.byte	1,0,2,35,3,0,12,10,179,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6035
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR0_Bits',0,10,230,2,16,4,11
	.byte	'PS0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	444
	.byte	28,0,2,35,0,0,12,10,139,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6399
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR4_Bits',0,10,251,2,16,4,11
	.byte	'reserved_0',0,1
	.word	467
	.byte	4,4,2,35,0,11
	.byte	'PS4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	444
	.byte	24,0,2,35,0,0,12,10,155,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6546
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR8_Bits',0,10,134,3,16,4,11
	.byte	'reserved_0',0,1
	.word	467
	.byte	8,0,2,35,0,11
	.byte	'PS8',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	467
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	444
	.byte	20,0,2,35,0,0,12,10,163,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6715
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR12_Bits',0,10,240,2,16,4,11
	.byte	'reserved_0',0,2
	.word	1018
	.byte	12,4,2,35,0,11
	.byte	'PS12',0,1
	.word	467
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	467
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	467
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1018
	.byte	16,0,2,35,2,0,12,10,147,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6887
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR0_Bits',0,10,128,2,16,4,11
	.byte	'reserved_0',0,2
	.word	1018
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	467
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	1018
	.byte	12,0,2,35,2,0,12,10,219,4,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7062
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR4_Bits',0,10,149,2,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	20,12,2,35,0,11
	.byte	'PCL4',0,1
	.word	467
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	467
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	467
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	467
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	467
	.byte	8,0,2,35,3,0,12,10,235,4,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7236
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR8_Bits',0,10,160,2,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	24,8,2,35,0,11
	.byte	'PCL8',0,1
	.word	467
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	467
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	467
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	467
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	467
	.byte	4,0,2,35,3,0,12,10,243,4,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7410
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR12_Bits',0,10,139,2,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	28,4,2,35,0,11
	.byte	'PCL12',0,1
	.word	467
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	467
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	467
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	467
	.byte	1,0,2,35,3,0,12,10,227,4,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7586
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR_Bits',0,10,208,2,16,4,11
	.byte	'PS0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	467
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	467
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	467
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	467
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1018
	.byte	16,0,2,35,2,0,12,10,131,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7742
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR_Bits',0,10,234,1,16,4,11
	.byte	'reserved_0',0,2
	.word	1018
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	467
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	467
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	467
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	467
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	467
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	467
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	467
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	467
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	467
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	467
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	467
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	467
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	467
	.byte	1,0,2,35,3,0,12,10,211,4,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8075
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR_Bits',0,10,215,1,16,4,11
	.byte	'REN_CTRL',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'RX_EN',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'TERM',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'LRXTERM',0,1
	.word	467
	.byte	3,2,2,35,0,11
	.byte	'LVDSM',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'PS',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'TEN_CTRL',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'TX_EN',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'VDIFFADJ',0,1
	.word	467
	.byte	2,4,2,35,1,11
	.byte	'VOSDYN',0,1
	.word	467
	.byte	1,3,2,35,1,11
	.byte	'VOSEXT',0,1
	.word	467
	.byte	1,2,2,35,1,11
	.byte	'TX_PD',0,1
	.word	467
	.byte	1,1,2,35,1,11
	.byte	'TX_PWDPD',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1018
	.byte	16,0,2,35,2,0,12,10,203,4,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8423
	.byte	4,2,35,0,0,18,32
	.word	8703
	.byte	19,7,0,18,56
	.word	467
	.byte	19,55,0,10
	.byte	'_Ifx_P_ACCEN1_Bits',0,10,105,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	32,0,2,35,0,0,12,10,139,4,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8761
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ACCEN0_Bits',0,10,68,16,4,11
	.byte	'EN0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	467
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	467
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	467
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	467
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	467
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	467
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	467
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	467
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	467
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	467
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	467
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	467
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	467
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	467
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	467
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	467
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	467
	.byte	1,0,2,35,3,0,12,10,131,4,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8848
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P',0,10,220,5,25,128,2,13
	.byte	'OUT',0
	.word	2769
	.byte	4,2,35,0,13
	.byte	'OMR',0
	.word	3340
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	3460
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3500
	.byte	4,2,35,12,13
	.byte	'IOCR0',0
	.word	3684
	.byte	4,2,35,16,13
	.byte	'IOCR4',0
	.word	3899
	.byte	4,2,35,20,13
	.byte	'IOCR8',0
	.word	4116
	.byte	4,2,35,24,13
	.byte	'IOCR12',0
	.word	4336
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	3500
	.byte	4,2,35,32,13
	.byte	'IN',0
	.word	4651
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	4691
	.byte	24,2,35,40,13
	.byte	'PDR0',0
	.word	4964
	.byte	4,2,35,64,13
	.byte	'PDR1',0
	.word	5280
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	5320
	.byte	8,2,35,72,13
	.byte	'ESR',0
	.word	5620
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	5660
	.byte	12,2,35,84,13
	.byte	'PDISC',0
	.word	5995
	.byte	4,2,35,96,13
	.byte	'PCSR',0
	.word	6359
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	5320
	.byte	8,2,35,104,13
	.byte	'OMSR0',0
	.word	6506
	.byte	4,2,35,112,13
	.byte	'OMSR4',0
	.word	6675
	.byte	4,2,35,116,13
	.byte	'OMSR8',0
	.word	6847
	.byte	4,2,35,120,13
	.byte	'OMSR12',0
	.word	7022
	.byte	4,2,35,124,13
	.byte	'OMCR0',0
	.word	7196
	.byte	4,3,35,128,1,13
	.byte	'OMCR4',0
	.word	7370
	.byte	4,3,35,132,1,13
	.byte	'OMCR8',0
	.word	7546
	.byte	4,3,35,136,1,13
	.byte	'OMCR12',0
	.word	7702
	.byte	4,3,35,140,1,13
	.byte	'OMSR',0
	.word	8035
	.byte	4,3,35,144,1,13
	.byte	'OMCR',0
	.word	8383
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	5320
	.byte	8,3,35,152,1,13
	.byte	'LPCR',0
	.word	8743
	.byte	32,3,35,160,1,13
	.byte	'reserved_C0',0
	.word	8752
	.byte	56,3,35,192,1,13
	.byte	'ACCEN1',0
	.word	8808
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	9375
	.byte	4,3,35,252,1,0,14
	.word	9415
	.byte	3
	.word	9985
	.byte	15,9,81,9,1,16
	.byte	'IfxPort_InputMode_undefined',0,127,16
	.byte	'IfxPort_InputMode_noPullDevice',0,0,16
	.byte	'IfxPort_InputMode_pullDown',0,8,16
	.byte	'IfxPort_InputMode_pullUp',0,16,0
.L319:
	.byte	4
	.byte	'IfxPort_setPinModeInput',0,3,9,157,5,17,1,1
.L322:
	.byte	5
	.byte	'port',0,9,157,5,48
	.word	9990
.L324:
	.byte	5
	.byte	'pinIndex',0,9,157,5,60
	.word	467
.L326:
	.byte	5
	.byte	'mode',0,9,157,5,88
	.word	9995
.L328:
	.byte	6,0,15,9,140,1,9,1,16
	.byte	'IfxPort_OutputMode_none',0,0,16
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,16
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,15,9,126,9,1,16
	.byte	'IfxPort_OutputIdx_general',0,128,1,16
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,16
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,16
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,16
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,16
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,16
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,16
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0
.L188:
	.byte	4
	.byte	'IfxPort_setPinModeOutput',0,3,9,163,5,17,1,1
.L191:
	.byte	5
	.byte	'port',0,9,163,5,49
	.word	9990
.L193:
	.byte	5
	.byte	'pinIndex',0,9,163,5,61
	.word	467
.L195:
	.byte	5
	.byte	'mode',0,9,163,5,90
	.word	10200
.L197:
	.byte	5
	.byte	'index',0,9,163,5,114
	.word	10296
.L199:
	.byte	6,0,15,9,187,1,9,4,16
	.byte	'IfxPort_State_notChanged',0,0,16
	.byte	'IfxPort_State_high',0,1,16
	.byte	'IfxPort_State_low',0,128,128,4,16
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,9,169,5,17,1,1,5
	.byte	'port',0,9,169,5,44
	.word	9990
	.byte	5
	.byte	'pinIndex',0,9,169,5,56
	.word	467
	.byte	5
	.byte	'action',0,9,169,5,80
	.word	10609
	.byte	6,0,4
	.byte	'IfxScuCcu_wait',0,3,11,157,14,17,1,1,5
	.byte	'timeSec',0,11,157,14,40
	.word	240
	.byte	17,6,0,0,8
	.byte	'IfxScuCcu_getStmFrequency',0,3,11,188,13,20
	.word	240
	.byte	1,1,6,0,10
	.byte	'_Ifx_EDSADC_CLC_Bits',0,13,160,3,16,4,11
	.byte	'DISR',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	444
	.byte	28,0,2,35,0,0,12,13,160,6,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10874
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_ID_Bits',0,13,163,4,16,4,11
	.byte	'MOD_REV',0,1
	.word	467
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	467
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,2
	.word	1018
	.byte	16,0,2,35,2,0,12,13,200,6,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11034
	.byte	4,2,35,0,0,18,28
	.word	467
	.byte	19,27,0,10
	.byte	'_Ifx_EDSADC_OCS_Bits',0,13,193,4,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	24,8,2,35,0,11
	.byte	'SUS',0,1
	.word	467
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	467
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	467
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	467
	.byte	2,0,2,35,3,0,12,13,232,6,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11171
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_KRSTCLR_Bits',0,13,186,4,16,4,11
	.byte	'CLR',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	444
	.byte	31,0,2,35,0,0,12,13,224,6,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11334
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_KRST1_Bits',0,13,179,4,16,4,11
	.byte	'RST',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	444
	.byte	31,0,2,35,0,0,12,13,216,6,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11443
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_KRST0_Bits',0,13,171,4,16,4,11
	.byte	'RST',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	444
	.byte	30,0,2,35,0,0,12,13,208,6,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11550
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_ACCEN0_Bits',0,13,68,16,4,11
	.byte	'EN0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	467
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	467
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	467
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	467
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	467
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	467
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	467
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	467
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	467
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	467
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	467
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	467
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	467
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	467
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	467
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	467
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	467
	.byte	1,0,2,35,3,0,12,13,208,4,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11676
	.byte	4,2,35,0,0,18,64
	.word	467
	.byte	19,63,0,10
	.byte	'_Ifx_EDSADC_GLOBCFG_Bits',0,13,240,3,16,4,11
	.byte	'reserved_0',0,1
	.word	467
	.byte	8,0,2,35,0,11
	.byte	'DITRIM',0,1
	.word	467
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'USC',0,1
	.word	467
	.byte	1,3,2,35,1,11
	.byte	'SUPLEV',0,1
	.word	467
	.byte	2,1,2,35,1,11
	.byte	'CPWC',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	467
	.byte	8,0,2,35,2,11
	.byte	'SVCH',0,1
	.word	467
	.byte	4,4,2,35,3,11
	.byte	'SVSIG',0,1
	.word	467
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	467
	.byte	1,1,2,35,3,11
	.byte	'SVWC',0,1
	.word	467
	.byte	1,0,2,35,3,0
.L256:
	.byte	12,13,184,6,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12257
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_GLOBRC_Bits',0,13,128,4,16,4,11
	.byte	'CH0RUN',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'CH1RUN',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'CH2RUN',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'CH3RUN',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'CH4RUN',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'CH5RUN',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'CH6RUN',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'CH7RUN',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'CH8RUN',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'CH9RUN',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'CH10RUN',0,1
	.word	467
	.byte	1,5,2,35,1,11
	.byte	'CH11RUN',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'CH12RUN',0,1
	.word	467
	.byte	1,3,2,35,1,11
	.byte	'CH13RUN',0,1
	.word	467
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	467
	.byte	2,0,2,35,1,11
	.byte	'M0RUN',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'M1RUN',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'M2RUN',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'M3RUN',0,1
	.word	467
	.byte	1,4,2,35,2,11
	.byte	'M4RUN',0,1
	.word	467
	.byte	1,3,2,35,2,11
	.byte	'M5RUN',0,1
	.word	467
	.byte	1,2,2,35,2,11
	.byte	'M6RUN',0,1
	.word	467
	.byte	1,1,2,35,2,11
	.byte	'M7RUN',0,1
	.word	467
	.byte	1,0,2,35,2,11
	.byte	'M8RUN',0,1
	.word	467
	.byte	1,7,2,35,3,11
	.byte	'M9RUN',0,1
	.word	467
	.byte	1,6,2,35,3,11
	.byte	'M10RUN',0,1
	.word	467
	.byte	1,5,2,35,3,11
	.byte	'M11RUN',0,1
	.word	467
	.byte	1,4,2,35,3,11
	.byte	'M12RUN',0,1
	.word	467
	.byte	1,3,2,35,3,11
	.byte	'M13RUN',0,1
	.word	467
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	467
	.byte	2,0,2,35,3,0,12,13,192,6,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12536
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_ACCPROT_Bits',0,13,105,16,4,11
	.byte	'RG00',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'RG01',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'RG02',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'RG03',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'RG04',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'RG05',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'RG06',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'RG07',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	467
	.byte	8,0,2,35,1,11
	.byte	'RG10',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	1018
	.byte	14,1,2,35,2,11
	.byte	'RGG',0,1
	.word	467
	.byte	1,0,2,35,3,0,12,13,216,4,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13151
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_CGCFG_Bits',0,13,122,16,4,11
	.byte	'CGMOD',0,1
	.word	467
	.byte	2,6,2,35,0,11
	.byte	'BREV',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'SIGPOL',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'DIVCG',0,1
	.word	467
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	467
	.byte	7,1,2,35,1,11
	.byte	'RUN',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'BITCOUNT',0,1
	.word	467
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	467
	.byte	3,0,2,35,2,11
	.byte	'STEPCOUNT',0,1
	.word	467
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	467
	.byte	1,4,2,35,3,11
	.byte	'STEPS',0,1
	.word	467
	.byte	1,3,2,35,3,11
	.byte	'STEPD',0,1
	.word	467
	.byte	1,2,2,35,3,11
	.byte	'SGNCG',0,1
	.word	467
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	467
	.byte	1,0,2,35,3,0
.L167:
	.byte	12,13,224,4,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13426
	.byte	4,2,35,0,0,18,60
	.word	467
	.byte	19,59,0,10
	.byte	'_Ifx_EDSADC_EVFLAG_Bits',0,13,170,3,16,4,11
	.byte	'RESEV0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'RESEV1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'RESEV2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'RESEV3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'RESEV4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'RESEV5',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'RESEV6',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'RESEV7',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'RESEV8',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'RESEV9',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'RESEV10',0,1
	.word	467
	.byte	1,5,2,35,1,11
	.byte	'RESEV11',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'RESEV12',0,1
	.word	467
	.byte	1,3,2,35,1,11
	.byte	'RESEV13',0,1
	.word	467
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	467
	.byte	2,0,2,35,1,11
	.byte	'ALEV0',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'ALEV1',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'ALEV2',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'ALEV3',0,1
	.word	467
	.byte	1,4,2,35,2,11
	.byte	'ALEV4',0,1
	.word	467
	.byte	1,3,2,35,2,11
	.byte	'ALEV5',0,1
	.word	467
	.byte	1,2,2,35,2,11
	.byte	'ALEV6',0,1
	.word	467
	.byte	1,1,2,35,2,11
	.byte	'ALEV7',0,1
	.word	467
	.byte	1,0,2,35,2,11
	.byte	'ALEV8',0,1
	.word	467
	.byte	1,7,2,35,3,11
	.byte	'ALEV9',0,1
	.word	467
	.byte	1,6,2,35,3,11
	.byte	'ALEV10',0,1
	.word	467
	.byte	1,5,2,35,3,11
	.byte	'ALEV11',0,1
	.word	467
	.byte	1,4,2,35,3,11
	.byte	'ALEV12',0,1
	.word	467
	.byte	1,3,2,35,3,11
	.byte	'ALEV13',0,1
	.word	467
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	467
	.byte	2,0,2,35,3,0,12,13,168,6,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13770
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_EVFLAGCLR_Bits',0,13,205,3,16,4,11
	.byte	'RESEC0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'RESEC1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'RESEC2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'RESEC3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'RESEC4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'RESEC5',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'RESEC6',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'RESEC7',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'RESEC8',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'RESEC9',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'RESEC10',0,1
	.word	467
	.byte	1,5,2,35,1,11
	.byte	'RESEC11',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'RESEC12',0,1
	.word	467
	.byte	1,3,2,35,1,11
	.byte	'RESEC13',0,1
	.word	467
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	467
	.byte	2,0,2,35,1,11
	.byte	'ALEC0',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'ALEC1',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'ALEC2',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'ALEC3',0,1
	.word	467
	.byte	1,4,2,35,2,11
	.byte	'ALEC4',0,1
	.word	467
	.byte	1,3,2,35,2,11
	.byte	'ALEC5',0,1
	.word	467
	.byte	1,2,2,35,2,11
	.byte	'ALEC6',0,1
	.word	467
	.byte	1,1,2,35,2,11
	.byte	'ALEC7',0,1
	.word	467
	.byte	1,0,2,35,2,11
	.byte	'ALEC8',0,1
	.word	467
	.byte	1,7,2,35,3,11
	.byte	'ALEC9',0,1
	.word	467
	.byte	1,6,2,35,3,11
	.byte	'ALEC10',0,1
	.word	467
	.byte	1,5,2,35,3,11
	.byte	'ALEC11',0,1
	.word	467
	.byte	1,4,2,35,3,11
	.byte	'ALEC12',0,1
	.word	467
	.byte	1,3,2,35,3,11
	.byte	'ALEC13',0,1
	.word	467
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	467
	.byte	2,0,2,35,3,0,12,13,176,6,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14385
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_CH_MODCFG_Bits',0,13,166,2,16,4,11
	.byte	'INCFGP',0,1
	.word	467
	.byte	2,6,2,35,0,11
	.byte	'INCFGN',0,1
	.word	467
	.byte	2,4,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	467
	.byte	4,0,2,35,0,11
	.byte	'INSEL',0,1
	.word	467
	.byte	2,6,2,35,1,11
	.byte	'INMUX',0,1
	.word	467
	.byte	2,4,2,35,1,11
	.byte	'INMODE',0,1
	.word	467
	.byte	2,2,2,35,1,11
	.byte	'INMAC',0,1
	.word	467
	.byte	1,1,2,35,1,11
	.byte	'INCWC',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'DIVM',0,1
	.word	467
	.byte	3,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	467
	.byte	1,4,2,35,2,11
	.byte	'ACSD',0,1
	.word	467
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	1018
	.byte	3,6,2,35,2,11
	.byte	'DITHEN',0,1
	.word	467
	.byte	1,5,2,35,3,11
	.byte	'IREN',0,1
	.word	467
	.byte	1,4,2,35,3,11
	.byte	'APC',0,1
	.word	467
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	467
	.byte	1,1,2,35,3,11
	.byte	'MMWC',0,1
	.word	467
	.byte	1,0,2,35,3,0
.L238:
	.byte	12,13,208,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15003
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_CH_DICFG_Bits',0,13,157,1,16,4,11
	.byte	'DSS',0,1
	.word	467
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'DSRCEX',0,1
	.word	467
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'CSRCEX',0,1
	.word	467
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	467
	.byte	4,1,2,35,1,11
	.byte	'DSWC',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'TRSEL',0,1
	.word	467
	.byte	4,4,2,35,2,11
	.byte	'ITRMODE',0,1
	.word	467
	.byte	2,2,2,35,2,11
	.byte	'TSTRMODE',0,1
	.word	467
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	467
	.byte	2,6,2,35,3,11
	.byte	'DRM',0,1
	.word	467
	.byte	2,4,2,35,3,11
	.byte	'TSM',0,1
	.word	467
	.byte	1,3,2,35,3,11
	.byte	'RDM',0,1
	.word	467
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	467
	.byte	1,1,2,35,3,11
	.byte	'MSWC',0,1
	.word	467
	.byte	1,0,2,35,3,0
.L218:
	.byte	12,13,248,4,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15384
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_CH_FCFGM_Bits',0,13,197,1,16,4,11
	.byte	'FIR0EN',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'FIR1EN',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'OVCEN',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'FIR1DEC',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'CICMOD',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'PFEN',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	467
	.byte	2,0,2,35,0,11
	.byte	'OCEN',0,1
	.word	467
	.byte	3,5,2,35,1,11
	.byte	'OFFPROT',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	467
	.byte	3,1,2,35,1,11
	.byte	'FMWC',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'SRGM',0,1
	.word	467
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	467
	.byte	2,4,2,35,2,11
	.byte	'SRGA',0,1
	.word	467
	.byte	2,2,2,35,2,11
	.byte	'ESEL',0,1
	.word	467
	.byte	2,0,2,35,2,11
	.byte	'EGT',0,1
	.word	467
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	467
	.byte	3,4,2,35,3,11
	.byte	'CALIB',0,1
	.word	467
	.byte	1,3,2,35,3,11
	.byte	'AUTOCAL',0,1
	.word	467
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	467
	.byte	1,1,2,35,3,11
	.byte	'CSRWC',0,1
	.word	467
	.byte	1,0,2,35,3,0
.L224:
	.byte	12,13,144,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15754
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_CH_FCFGC_Bits',0,13,188,1,16,4,11
	.byte	'CFMDF',0,2
	.word	1018
	.byte	9,7,2,35,0,11
	.byte	'reserved_9',0,1
	.word	467
	.byte	7,0,2,35,1,11
	.byte	'CFMSV',0,2
	.word	1018
	.byte	9,7,2,35,2,11
	.byte	'reserved_25',0,1
	.word	467
	.byte	7,0,2,35,3,0
.L212:
	.byte	12,13,136,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16214
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_CH_FCNTC_Bits',0,13,223,1,16,4,11
	.byte	'CFMDCNT',0,2
	.word	1018
	.byte	9,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	444
	.byte	21,2,2,35,0,11
	.byte	'CAL',0,1
	.word	467
	.byte	2,0,2,35,3,0,12,13,152,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16366
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_CH_OVSCFG_Bits',0,13,195,2,16,4,11
	.byte	'SRFS',0,1
	.word	467
	.byte	2,6,2,35,0,11
	.byte	'SRFRT',0,1
	.word	467
	.byte	2,4,2,35,0,11
	.byte	'SDM',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,2
	.word	1018
	.byte	11,0,2,35,0,11
	.byte	'SDTH',0,2
	.word	1018
	.byte	11,5,2,35,2,11
	.byte	'reserved_27',0,1
	.word	467
	.byte	5,0,2,35,3,0,12,13,224,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16495
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_CH_IWCTR_Bits',0,13,150,2,16,4,11
	.byte	'ISC',0,1
	.word	467
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'IWS',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'FRC',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	467
	.byte	2,0,2,35,0,11
	.byte	'REPVAL',0,1
	.word	467
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	467
	.byte	4,0,2,35,1,11
	.byte	'NVALDIS',0,1
	.word	467
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	467
	.byte	2,0,2,35,2,11
	.byte	'NVALINT',0,1
	.word	467
	.byte	6,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	467
	.byte	2,0,2,35,3,0
.L232:
	.byte	12,13,200,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16678
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_CH_IIVAL_Bits',0,13,132,2,16,4,11
	.byte	'IVAL',0,4
	.word	444
	.byte	26,6,2,35,0,11
	.byte	'reserved_26',0,1
	.word	467
	.byte	6,0,2,35,3,0,12,13,184,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16965
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_CH_ISTAT_Bits',0,13,139,2,16,4,11
	.byte	'NVALCNT',0,1
	.word	467
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	467
	.byte	2,0,2,35,0,11
	.byte	'REPCNT',0,1
	.word	467
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	467
	.byte	3,1,2,35,1,11
	.byte	'INTEN',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1018
	.byte	16,0,2,35,2,0,12,13,192,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17077
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_CH_RFC_Bits',0,13,235,2,16,4,11
	.byte	'SRLVL',0,1
	.word	467
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	467
	.byte	2,4,2,35,0,11
	.byte	'RDEC',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'WREC',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'FIFL',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	1018
	.byte	9,0,2,35,0,11
	.byte	'FILL',0,1
	.word	467
	.byte	3,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	467
	.byte	1,4,2,35,2,11
	.byte	'RDERR',0,1
	.word	467
	.byte	1,3,2,35,2,11
	.byte	'WRERR',0,1
	.word	467
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	1018
	.byte	10,0,2,35,2,0
.L226:
	.byte	12,13,128,6,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17272
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_CH_RESM_Bits',0,13,228,2,16,4,11
	.byte	'RESULTLO',0,2
	.word	1018
	.byte	16,0,2,35,0,11
	.byte	'RESULTHI',0,2
	.word	1018
	.byte	16,0,2,35,2,0,12,13,248,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17548
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_CH_OFFCOMP_Bits',0,13,188,2,16,4,11
	.byte	'OFFSET',0,2
	.word	1018
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1018
	.byte	16,0,2,35,2,0,12,13,216,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17660
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_CH_GAINCAL_Bits',0,13,231,1,16,4,11
	.byte	'CALFACTOR',0,2
	.word	1018
	.byte	13,3,2,35,0,11
	.byte	'reserved_13',0,1
	.word	467
	.byte	3,0,2,35,1,11
	.byte	'CALTARGET',0,2
	.word	1018
	.byte	15,1,2,35,2,11
	.byte	'reserved_31',0,1
	.word	467
	.byte	1,0,2,35,3,0,12,13,160,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17776
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_CH_GAINCTR_Bits',0,13,249,1,16,4,11
	.byte	'GAINFACTOR',0,2
	.word	1018
	.byte	13,3,2,35,0,11
	.byte	'reserved_13',0,1
	.word	467
	.byte	3,0,2,35,1,11
	.byte	'CICSHIFT',0,1
	.word	467
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	467
	.byte	3,0,2,35,2,11
	.byte	'CICDEC',0,1
	.word	467
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	467
	.byte	5,0,2,35,3,0,12,13,176,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17939
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_CH_GAINCORR_Bits',0,13,240,1,16,4,11
	.byte	'GAINFACTOR',0,2
	.word	1018
	.byte	13,3,2,35,0,11
	.byte	'reserved_13',0,1
	.word	467
	.byte	3,0,2,35,1,11
	.byte	'CICSHIFT',0,1
	.word	467
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,2
	.word	1018
	.byte	11,0,2,35,2,0,12,13,168,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18143
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_CH_TSTMP_Bits',0,13,134,3,16,4,11
	.byte	'TIMESTAMP',0,2
	.word	1018
	.byte	16,0,2,35,0,11
	.byte	'AMX',0,1
	.word	467
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	1018
	.byte	13,1,2,35,2,11
	.byte	'TSVAL',0,1
	.word	467
	.byte	1,0,2,35,3,0,12,13,144,6,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18307
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_CH_TSCNT_Bits',0,13,251,2,16,4,11
	.byte	'TSCOUNT',0,2
	.word	1018
	.byte	16,0,2,35,0,11
	.byte	'TSCLK',0,1
	.word	467
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'TSCRUN',0,1
	.word	467
	.byte	1,4,2,35,2,11
	.byte	'AMXCOPY',0,1
	.word	467
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,2
	.word	1018
	.byte	11,0,2,35,2,0,12,13,136,6,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18456
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_CH_FCFGA_Bits',0,13,178,1,16,4,11
	.byte	'CFAEN',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'CFADF',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	1018
	.byte	14,0,2,35,0,11
	.byte	'CFACNT',0,1
	.word	467
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,2
	.word	1018
	.byte	11,0,2,35,2,0,12,13,128,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18648
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_CH_BOUNDSEL_Bits',0,13,141,1,16,4,11
	.byte	'BOUNDARYL',0,2
	.word	1018
	.byte	16,0,2,35,0,11
	.byte	'BOUNDARYU',0,2
	.word	1018
	.byte	16,0,2,35,2,0,12,13,232,4,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18818
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_CH_RESA_Bits',0,13,221,2,16,4,11
	.byte	'RESULT',0,2
	.word	1018
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1018
	.byte	16,0,2,35,2,0,12,13,240,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18936
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_CH_CGSYNC_Bits',0,13,148,1,16,4,11
	.byte	'SDCOUNT',0,1
	.word	467
	.byte	8,0,2,35,0,11
	.byte	'SDCAP',0,1
	.word	467
	.byte	8,0,2,35,1,11
	.byte	'SDPOS',0,1
	.word	467
	.byte	8,0,2,35,2,11
	.byte	'SDNEG',0,1
	.word	467
	.byte	8,0,2,35,3,0,12,13,240,4,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19049
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_CH_RECTCFG_Bits',0,13,206,2,16,4,11
	.byte	'RFEN',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	467
	.byte	3,4,2,35,0,11
	.byte	'SSRC',0,1
	.word	467
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	467
	.byte	2,0,2,35,0,11
	.byte	'SSCH',0,1
	.word	467
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	467
	.byte	3,1,2,35,1,11
	.byte	'SDCVAL',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1018
	.byte	14,2,2,35,2,11
	.byte	'SGNCS',0,1
	.word	467
	.byte	1,1,2,35,3,11
	.byte	'SGND',0,1
	.word	467
	.byte	1,0,2,35,3,0
.L265:
	.byte	12,13,232,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19193
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_EDSADC_CH_VCM_Bits',0,13,143,3,16,4,11
	.byte	'VREFXSEL',0,1
	.word	467
	.byte	2,6,2,35,0,11
	.byte	'VXON',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	1018
	.byte	13,0,2,35,0,11
	.byte	'INPVC0',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'INPVC1',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'INPVC2',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'INPVC3',0,1
	.word	467
	.byte	1,4,2,35,2,11
	.byte	'INNVC0',0,1
	.word	467
	.byte	1,3,2,35,2,11
	.byte	'INNVC1',0,1
	.word	467
	.byte	1,2,2,35,2,11
	.byte	'INNVC2',0,1
	.word	467
	.byte	1,1,2,35,2,11
	.byte	'INNVC3',0,1
	.word	467
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	467
	.byte	8,0,2,35,3,0,12,13,152,6,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19457
	.byte	4,2,35,0,0,18,76
	.word	467
	.byte	19,75,0,10
	.byte	'_Ifx_EDSADC_CH',0,13,249,6,25,128,2,13
	.byte	'MODCFG',0
	.word	15344
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	3500
	.byte	4,2,35,4,13
	.byte	'DICFG',0
	.word	15714
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3500
	.byte	4,2,35,12,13
	.byte	'FCFGM',0
	.word	16174
	.byte	4,2,35,16,13
	.byte	'FCFGC',0
	.word	16326
	.byte	4,2,35,20,13
	.byte	'FCNTC',0
	.word	16455
	.byte	4,2,35,24,13
	.byte	'OVSCFG',0
	.word	16638
	.byte	4,2,35,28,13
	.byte	'IWCTR',0
	.word	16925
	.byte	4,2,35,32,13
	.byte	'IIVAL',0
	.word	17037
	.byte	4,2,35,36,13
	.byte	'ISTAT',0
	.word	17232
	.byte	4,2,35,40,13
	.byte	'RFC',0
	.word	17508
	.byte	4,2,35,44,13
	.byte	'RESM',0
	.word	17620
	.byte	4,2,35,48,13
	.byte	'reserved_34',0
	.word	3500
	.byte	4,2,35,52,13
	.byte	'OFFCOMP',0
	.word	17736
	.byte	4,2,35,56,13
	.byte	'GAINCAL',0
	.word	17899
	.byte	4,2,35,60,13
	.byte	'GAINCTR',0
	.word	18103
	.byte	4,2,35,64,13
	.byte	'GAINCORR',0
	.word	18267
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	5320
	.byte	8,2,35,72,13
	.byte	'TSTMP',0
	.word	18416
	.byte	4,2,35,80,13
	.byte	'TSCNT',0
	.word	18608
	.byte	4,2,35,84,13
	.byte	'reserved_58',0
	.word	4691
	.byte	24,2,35,88,13
	.byte	'FCFGA',0
	.word	18778
	.byte	4,2,35,112,13
	.byte	'reserved_74',0
	.word	3500
	.byte	4,2,35,116,13
	.byte	'BOUNDSEL',0
	.word	18896
	.byte	4,2,35,120,13
	.byte	'reserved_7C',0
	.word	3500
	.byte	4,2,35,124,13
	.byte	'RESA',0
	.word	19009
	.byte	4,3,35,128,1,13
	.byte	'reserved_84',0
	.word	11162
	.byte	28,3,35,132,1,13
	.byte	'CGSYNC',0
	.word	19153
	.byte	4,3,35,160,1,13
	.byte	'reserved_A4',0
	.word	3500
	.byte	4,3,35,164,1,13
	.byte	'RECTCFG',0
	.word	19417
	.byte	4,3,35,168,1,13
	.byte	'reserved_AC',0
	.word	3500
	.byte	4,3,35,172,1,13
	.byte	'VCM',0
	.word	19713
	.byte	4,3,35,176,1,13
	.byte	'reserved_B4',0
	.word	19753
	.byte	76,3,35,180,1,0,18,128,28
	.word	19762
	.byte	19,13,0,14
	.word	20378
	.byte	18,128,2
	.word	467
	.byte	19,255,1,0,10
	.byte	'_Ifx_EDSADC',0,13,172,7,25,128,32,13
	.byte	'CLC',0
	.word	10994
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	3500
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	11122
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	11162
	.byte	28,2,35,12,13
	.byte	'OCS',0
	.word	11294
	.byte	4,2,35,40,13
	.byte	'KRSTCLR',0
	.word	11403
	.byte	4,2,35,44,13
	.byte	'KRST1',0
	.word	11510
	.byte	4,2,35,48,13
	.byte	'KRST0',0
	.word	11636
	.byte	4,2,35,52,13
	.byte	'reserved_38',0
	.word	3500
	.byte	4,2,35,56,13
	.byte	'ACCEN0',0
	.word	12208
	.byte	4,2,35,60,13
	.byte	'reserved_40',0
	.word	12248
	.byte	64,2,35,64,13
	.byte	'GLOBCFG',0
	.word	12496
	.byte	4,3,35,128,1,13
	.byte	'reserved_84',0
	.word	3500
	.byte	4,3,35,132,1,13
	.byte	'GLOBRC',0
	.word	13111
	.byte	4,3,35,136,1,13
	.byte	'reserved_8C',0
	.word	3500
	.byte	4,3,35,140,1,13
	.byte	'ACCPROT',0
	.word	13386
	.byte	4,3,35,144,1,13
	.byte	'reserved_94',0
	.word	5660
	.byte	12,3,35,148,1,13
	.byte	'CGCFG',0
	.word	13721
	.byte	4,3,35,160,1,13
	.byte	'reserved_A4',0
	.word	13761
	.byte	60,3,35,164,1,13
	.byte	'EVFLAG',0
	.word	14345
	.byte	4,3,35,224,1,13
	.byte	'EVFLAGCLR',0
	.word	14963
	.byte	4,3,35,228,1,13
	.byte	'reserved_E8',0
	.word	4691
	.byte	24,3,35,232,1,13
	.byte	'CH',0
	.word	20388
	.byte	128,28,3,35,128,2,13
	.byte	'reserved_F00',0
	.word	20393
	.byte	128,2,3,35,128,30,0,14
	.word	20404
.L250:
	.byte	3
	.word	20861
	.byte	4
	.byte	'IfxEdsadc_startScan',0,3,12,145,8,17,1,1,5
	.byte	'edsadc',0,12,145,8,49
	.word	20866
	.byte	5
	.byte	'modulatorMask',0,12,145,8,64
	.word	2262
	.byte	5
	.byte	'channelMask',0,12,145,8,86
	.word	2262
	.byte	6,0,4
	.byte	'IfxEdsadc_stopScan',0,3,12,151,8,17,1,1,5
	.byte	'edsadc',0,12,151,8,48
	.word	20866
	.byte	5
	.byte	'modulatorMask',0,12,151,8,63
	.word	2262
	.byte	6,0,7
	.byte	'short int',0,2,5,15,14,70,9,1,16
	.byte	'IfxEdsadc_ChannelId_0',0,0,16
	.byte	'IfxEdsadc_ChannelId_1',0,1,16
	.byte	'IfxEdsadc_ChannelId_2',0,2,16
	.byte	'IfxEdsadc_ChannelId_3',0,3,16
	.byte	'IfxEdsadc_ChannelId_4',0,4,16
	.byte	'IfxEdsadc_ChannelId_5',0,5,16
	.byte	'IfxEdsadc_ChannelId_6',0,6,16
	.byte	'IfxEdsadc_ChannelId_7',0,7,16
	.byte	'IfxEdsadc_ChannelId_8',0,8,16
	.byte	'IfxEdsadc_ChannelId_9',0,9,16
	.byte	'IfxEdsadc_ChannelId_10',0,10,16
	.byte	'IfxEdsadc_ChannelId_11',0,11,16
	.byte	'IfxEdsadc_ChannelId_12',0,12,16
	.byte	'IfxEdsadc_ChannelId_13',0,13,0,8
	.byte	'IfxEdsadc_getMainResult',0,3,12,130,7,19
	.word	21029
	.byte	1,1,5
	.byte	'edsadc',0,12,130,7,55
	.word	20866
	.byte	5
	.byte	'channel',0,12,130,7,83
	.word	21042
	.byte	6,0
.L388:
	.byte	7
	.byte	'long int',0,4,5,8
	.byte	'IfxEdsadc_getSubsequentResult',0,3,12,136,7,19
	.word	21459
	.byte	1,1,5
	.byte	'edsadc',0,12,136,7,61
	.word	20866
	.byte	5
	.byte	'channel',0,12,136,7,89
	.word	21042
	.byte	6,0,20,9,246,1,9,8,13
	.byte	'port',0
	.word	9990
	.byte	4,2,35,0,13
	.byte	'pinIndex',0
	.word	467
	.byte	1,2,35,4,0,20,15,119,15,16,13
	.byte	'module',0
	.word	20866
	.byte	4,2,35,0,13
	.byte	'pin',0
	.word	21548
	.byte	8,2,35,4,13
	.byte	'select',0
	.word	10296
	.byte	1,2,35,12,0,21
	.word	21587
.L174:
	.byte	3
	.word	21638
	.byte	15,9,151,1,9,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,16
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,16
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,16
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,16
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed1',0,12,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed2',0,13,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed3',0,14,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed4',0,15,0
.L176:
	.byte	4
	.byte	'IfxEdsadc_initCgPwmPin',0,3,12,142,7,17,1,1
.L179:
	.byte	5
	.byte	'cgPwm',0,12,142,7,67
	.word	21643
.L181:
	.byte	5
	.byte	'pinMode',0,12,142,7,93
	.word	10200
.L183:
	.byte	5
	.byte	'padDriver',0,12,142,7,120
	.word	21648
.L185:
	.byte	17,6,0,0,15,16,127,9,1,16
	.byte	'Ifx_RxSel_a',0,0,16
	.byte	'Ifx_RxSel_b',0,1,16
	.byte	'Ifx_RxSel_c',0,2,16
	.byte	'Ifx_RxSel_d',0,3,16
	.byte	'Ifx_RxSel_e',0,4,16
	.byte	'Ifx_RxSel_f',0,5,16
	.byte	'Ifx_RxSel_g',0,6,16
	.byte	'Ifx_RxSel_h',0,7,0,20,15,74,15,20,13
	.byte	'module',0
	.word	20866
	.byte	4,2,35,0,13
	.byte	'channel',0
	.word	21042
	.byte	1,2,35,4,13
	.byte	'pin',0
	.word	21548
	.byte	8,2,35,8,13
	.byte	'select',0
	.word	22157
	.byte	1,2,35,16,0,21
	.word	22275
.L343:
	.byte	3
	.word	22343
.L345:
	.byte	4
	.byte	'IfxEdsadc_initCinPin',0,3,12,152,7,17,1,1
.L347:
	.byte	5
	.byte	'cIn',0,12,152,7,62
	.word	22348
.L349:
	.byte	5
	.byte	'cInMode',0,12,152,7,85
	.word	9995
.L351:
	.byte	5
	.byte	'padDriver',0,12,152,7,112
	.word	21648
.L353:
	.byte	17,6,0,0,20,15,83,15,20,13
	.byte	'module',0
	.word	20866
	.byte	4,2,35,0,13
	.byte	'channel',0
	.word	21042
	.byte	1,2,35,4,13
	.byte	'pin',0
	.word	21548
	.byte	8,2,35,8,13
	.byte	'select',0
	.word	22157
	.byte	1,2,35,16,0,21
	.word	22435
.L356:
	.byte	3
	.word	22503
.L358:
	.byte	4
	.byte	'IfxEdsadc_initDinPin',0,3,12,172,7,17,1,1
.L360:
	.byte	5
	.byte	'dIn',0,12,172,7,62
	.word	22508
.L362:
	.byte	5
	.byte	'dInMode',0,12,172,7,85
	.word	9995
.L364:
	.byte	5
	.byte	'padDriver',0,12,172,7,112
	.word	21648
.L366:
	.byte	17,6,0,0,20,15,56,15,20,13
	.byte	'module',0
	.word	20866
	.byte	4,2,35,0,13
	.byte	'channel',0
	.word	21042
	.byte	1,2,35,4,13
	.byte	'pin',0
	.word	21548
	.byte	8,2,35,8,13
	.byte	'select',0
	.word	22157
	.byte	1,2,35,16,0,21
	.word	22595
.L307:
	.byte	3
	.word	22663
.L309:
	.byte	4
	.byte	'IfxEdsadc_initDsnPin',0,3,12,182,7,17,1,1
.L311:
	.byte	5
	.byte	'dsn',0,12,182,7,62
	.word	22668
.L313:
	.byte	5
	.byte	'pinMode',0,12,182,7,85
	.word	9995
.L315:
	.byte	5
	.byte	'padDriver',0,12,182,7,112
	.word	21648
.L317:
	.byte	17,6,0,0,20,15,65,15,20,13
	.byte	'module',0
	.word	20866
	.byte	4,2,35,0,13
	.byte	'channel',0
	.word	21042
	.byte	1,2,35,4,13
	.byte	'pin',0
	.word	21548
	.byte	8,2,35,8,13
	.byte	'select',0
	.word	22157
	.byte	1,2,35,16,0,21
	.word	22755
.L330:
	.byte	3
	.word	22823
.L332:
	.byte	4
	.byte	'IfxEdsadc_initDspPin',0,3,12,192,7,17,1,1
.L334:
	.byte	5
	.byte	'dsp',0,12,192,7,62
	.word	22828
.L336:
	.byte	5
	.byte	'pinMode',0,12,192,7,85
	.word	9995
.L338:
	.byte	5
	.byte	'padDriver',0,12,192,7,112
	.word	21648
.L340:
	.byte	17,6,0,0,20,15,110,15,20,13
	.byte	'module',0
	.word	20866
	.byte	4,2,35,0,13
	.byte	'channel',0
	.word	21042
	.byte	1,2,35,4,13
	.byte	'pin',0
	.word	21548
	.byte	8,2,35,8,13
	.byte	'select',0
	.word	22157
	.byte	1,2,35,16,0,21
	.word	22915
.L369:
	.byte	3
	.word	22983
.L371:
	.byte	4
	.byte	'IfxEdsadc_initItrPin',0,3,12,202,7,17,1,1
.L373:
	.byte	5
	.byte	'itr',0,12,202,7,62
	.word	22988
.L375:
	.byte	5
	.byte	'itrMode',0,12,202,7,85
	.word	9995
.L377:
	.byte	5
	.byte	'padDriver',0,12,202,7,112
	.word	21648
.L379:
	.byte	17,6,0,0
.L272:
	.byte	4
	.byte	'IfxEdsadc_Edsadc_setGainCorrectionFactor',0,3,17,250,4,17,1,1
.L275:
	.byte	5
	.byte	'edsadc',0,17,250,4,70
	.word	20866
.L277:
	.byte	5
	.byte	'channel',0,17,250,4,98
	.word	21042
.L279:
	.byte	5
	.byte	'gainFactor',0,17,250,4,114
	.word	1018
.L281:
	.byte	5
	.byte	'cicShift',0,17,250,4,132,1
	.word	467
.L283:
	.byte	6,0,15,12,195,3,9,1,16
	.byte	'IfxEdsadc_TimeStampCounterClockSelection_div1',0,0,16
	.byte	'IfxEdsadc_TimeStampCounterClockSelection_div2',0,1,16
	.byte	'IfxEdsadc_TimeStampCounterClockSelection_div4',0,2,16
	.byte	'IfxEdsadc_TimeStampCounterClockSelection_div8',0,3,0,15,12,130,4,9,1,16
	.byte	'IfxEdsadc_TimeStampCounterControl_off',0,0,16
	.byte	'IfxEdsadc_TimeStampCounterControl_on',0,1,0,15,12,250,3,9,1,16
	.byte	'IfxEdsadc_AnalogMux_doNotCopyAmx',0,0,16
	.byte	'IfxEdsadc_AnalogMux_copyAmx',0,1,0,20,17,159,2,9,4,13
	.byte	'timeStampCounterClock',0
	.word	23198
	.byte	1,2,35,0,13
	.byte	'timeStampCounterRunControl',0
	.word	23397
	.byte	1,2,35,1,13
	.byte	'analogMuxCopy',0
	.word	23483
	.byte	1,2,35,2,0,21
	.word	23555
	.byte	3
	.word	23652
.L284:
	.byte	4
	.byte	'IfxEdsadc_Edsadc_initTimeStampCounter',0,3,17,128,5,17,1,1
.L286:
	.byte	5
	.byte	'edsadc',0,17,128,5,67
	.word	20866
.L288:
	.byte	5
	.byte	'channel',0,17,128,5,95
	.word	21042
.L290:
	.byte	5
	.byte	'timeStamp',0,17,128,5,145,1
	.word	23657
.L292:
	.byte	6,0,15,12,194,1,9,1,16
	.byte	'IfxEdsadc_FractionalRefVoltageSelection_div2',0,0,16
	.byte	'IfxEdsadc_FractionalRefVoltageSelection_div4',0,1,16
	.byte	'IfxEdsadc_FractionalRefVoltageSelection_div8',0,2,16
	.byte	'IfxEdsadc_FractionalRefVoltageSelection_div16',0,3,0,15,12,186,1,9,1,16
	.byte	'IfxEdsadc_FractionalRefVoltage_disable',0,0,16
	.byte	'IfxEdsadc_FractionalRefVoltage_enable',0,1,0,15,12,204,1,9,1,16
	.byte	'IfxEdsadc_HalfSupplyVoltage_disable',0,0,16
	.byte	'IfxEdsadc_HalfSupplyVoltage_enable',0,1,0,15,12,113,9,1,16
	.byte	'IfxEdsadc_CommonModeHoldVoltage_disable',0,0,16
	.byte	'IfxEdsadc_CommonModeHoldVoltage_enable',0,1,0,20,17,200,1,9,6,13
	.byte	'fractionalRefVoltage',0
	.word	23763
	.byte	1,2,35,0,13
	.byte	'refVoltageEnable',0
	.word	23959
	.byte	1,2,35,1,13
	.byte	'halfSupplyVoltge',0
	.word	24047
	.byte	1,2,35,2,13
	.byte	'commonModeHoldVoltage',0
	.word	24129
	.byte	1,2,35,3,13
	.byte	'positiveInput',0
	.word	467
	.byte	1,2,35,4,13
	.byte	'negativeInput',0
	.word	467
	.byte	1,2,35,5,0,21
	.word	24218
	.byte	3
	.word	24384
.L293:
	.byte	4
	.byte	'IfxEdsadc_Edsadc_initCommonModeVoltage',0,3,17,134,5,17,1,1
.L295:
	.byte	5
	.byte	'edsadc',0,17,134,5,68
	.word	20866
.L297:
	.byte	5
	.byte	'channel',0,17,134,5,96
	.word	21042
.L299:
	.byte	5
	.byte	'commonMode',0,17,134,5,153,1
	.word	24389
.L301:
	.byte	6,0,21
	.word	460
	.byte	22
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,23
	.word	24497
	.byte	0,14
	.word	444
	.byte	3
	.word	444
	.byte	24
	.byte	'__cmpswapw',0
	.word	24539
	.byte	1,1,1,1,25
	.byte	'p',0
	.word	24544
	.byte	25
	.byte	'value',0
	.word	444
	.byte	25
	.byte	'compare',0
	.word	444
	.byte	0,26
	.word	188
	.byte	27
	.word	214
	.byte	6,0,26
	.word	249
	.byte	27
	.word	281
	.byte	6,0,26
	.word	294
	.byte	6,0,26
	.word	363
	.byte	27
	.word	382
	.byte	6,0,26
	.word	398
	.byte	27
	.word	413
	.byte	27
	.word	427
	.byte	6,0,26
	.word	823
	.byte	27
	.word	851
	.byte	6,0,26
	.word	1610
	.byte	27
	.word	1650
	.byte	27
	.word	1668
	.byte	6,0,26
	.word	1688
	.byte	27
	.word	1731
	.byte	6,0,26
	.word	1751
	.byte	27
	.word	1789
	.byte	27
	.word	1807
	.byte	6,0,26
	.word	1827
	.byte	27
	.word	1868
	.byte	6,0,28
	.byte	'IfxScuWdt_clearCpuEndinit',0,5,237,1,17,1,1,1,1,5
	.byte	'password',0,5,237,1,50
	.word	1018
	.byte	0,28
	.byte	'IfxScuWdt_setCpuEndinit',0,5,157,2,17,1,1,1,1,5
	.byte	'password',0,5,157,2,48
	.word	1018
	.byte	0,26
	.word	1888
	.byte	27
	.word	1939
	.byte	6,0,26
	.word	1959
	.byte	6,0,29
	.byte	'IfxScuWdt_getCpuWatchdogPassword',0,5,215,3,19
	.word	1018
	.byte	1,1,1,1,26
	.word	2186
	.byte	6,0,26
	.word	2220
	.byte	6,0,26
	.word	2283
	.byte	27
	.word	2324
	.byte	6,0,26
	.word	2343
	.byte	27
	.word	2398
	.byte	6,0,26
	.word	2417
	.byte	27
	.word	2457
	.byte	27
	.word	2474
	.byte	17,6,0,0,26
	.word	10120
	.byte	27
	.word	10152
	.byte	27
	.word	10166
	.byte	27
	.word	10184
	.byte	6,0,26
	.word	10513
	.byte	27
	.word	10546
	.byte	27
	.word	10560
	.byte	27
	.word	10578
	.byte	27
	.word	10592
	.byte	6,0,26
	.word	10712
	.byte	27
	.word	10740
	.byte	27
	.word	10754
	.byte	27
	.word	10772
	.byte	6,0,15,9,101,9,1,16
	.byte	'IfxPort_Mode_inputNoPullDevice',0,0,16
	.byte	'IfxPort_Mode_inputPullDown',0,8,16
	.byte	'IfxPort_Mode_inputPullUp',0,16,16
	.byte	'IfxPort_Mode_outputPushPullGeneral',0,128,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt1',0,136,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt2',0,144,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt3',0,152,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt4',0,160,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt5',0,168,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt6',0,176,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt7',0,184,1,16
	.byte	'IfxPort_Mode_outputOpenDrainGeneral',0,192,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt1',0,200,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt2',0,208,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt3',0,216,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt4',0,224,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt5',0,232,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt6',0,240,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt7',0,248,1,0,28
	.byte	'IfxPort_setPinMode',0,9,183,3,17,1,1,1,1,5
	.byte	'port',0,9,183,3,43
	.word	9990
	.byte	5
	.byte	'pinIndex',0,9,183,3,55
	.word	467
	.byte	5
	.byte	'mode',0,9,183,3,78
	.word	25030
	.byte	0,28
	.byte	'IfxPort_setPinPadDriver',0,9,207,3,17,1,1,1,1,5
	.byte	'port',0,9,207,3,48
	.word	9990
	.byte	5
	.byte	'pinIndex',0,9,207,3,60
	.word	467
	.byte	5
	.byte	'padDriver',0,9,207,3,88
	.word	21648
	.byte	0,26
	.word	10790
	.byte	27
	.word	10813
	.byte	17,30
	.word	10834
	.byte	31
	.word	10872
	.byte	0,6,0,0,26
	.word	10834
	.byte	6,0,26
	.word	20871
	.byte	27
	.word	20899
	.byte	27
	.word	20915
	.byte	27
	.word	20938
	.byte	6,0,26
	.word	20961
	.byte	27
	.word	20988
	.byte	27
	.word	21004
	.byte	6,0,26
	.word	21388
	.byte	27
	.word	21424
	.byte	27
	.word	21440
	.byte	6,0,26
	.word	21471
	.byte	27
	.word	21513
	.byte	27
	.word	21529
	.byte	6,0,32
	.byte	'IfxEdsadc_getModulatorInputClockFreq',0,12,180,5,20
	.word	240
	.byte	1,1,1,1,5
	.byte	'edsadc',0,12,180,5,69
	.word	20866
	.byte	0,26
	.word	22071
	.byte	27
	.word	22102
	.byte	27
	.word	22117
	.byte	27
	.word	22134
	.byte	17,30
	.word	10513
	.byte	27
	.word	10546
	.byte	27
	.word	10560
	.byte	27
	.word	10578
	.byte	27
	.word	10592
	.byte	31
	.word	10607
	.byte	0,6,0,0,26
	.word	22353
	.byte	27
	.word	22382
	.byte	27
	.word	22395
	.byte	27
	.word	22412
	.byte	17,30
	.word	10120
	.byte	27
	.word	10152
	.byte	27
	.word	10166
	.byte	27
	.word	10184
	.byte	31
	.word	10198
	.byte	0,6,0,0,26
	.word	22513
	.byte	27
	.word	22542
	.byte	27
	.word	22555
	.byte	27
	.word	22572
	.byte	17,30
	.word	10120
	.byte	27
	.word	10152
	.byte	27
	.word	10166
	.byte	27
	.word	10184
	.byte	31
	.word	10198
	.byte	0,6,0,0,26
	.word	22673
	.byte	27
	.word	22702
	.byte	27
	.word	22715
	.byte	27
	.word	22732
	.byte	17,30
	.word	10120
	.byte	27
	.word	10152
	.byte	27
	.word	10166
	.byte	27
	.word	10184
	.byte	31
	.word	10198
	.byte	0,6,0,0,26
	.word	22833
	.byte	27
	.word	22862
	.byte	27
	.word	22875
	.byte	27
	.word	22892
	.byte	17,30
	.word	10120
	.byte	27
	.word	10152
	.byte	27
	.word	10166
	.byte	27
	.word	10184
	.byte	31
	.word	10198
	.byte	0,6,0,0,26
	.word	22993
	.byte	27
	.word	23022
	.byte	27
	.word	23035
	.byte	27
	.word	23052
	.byte	17,30
	.word	10120
	.byte	27
	.word	10152
	.byte	27
	.word	10166
	.byte	27
	.word	10184
	.byte	31
	.word	10198
	.byte	0,6,0,0,28
	.byte	'IfxEdsadc_setCommonModeVoltage',0,12,200,6,17,1,1,1,1,5
	.byte	'edsadc',0,12,200,6,60
	.word	20866
	.byte	5
	.byte	'channel',0,12,200,6,88
	.word	21042
	.byte	5
	.byte	'voltage',0,12,200,6,137,1
	.word	23763
	.byte	5
	.byte	'refMode',0,12,200,6,177,1
	.word	23959
	.byte	5
	.byte	'hsvMode',0,12,200,6,214,1
	.word	24047
	.byte	5
	.byte	'cmhvMode',0,12,200,6,255,1
	.word	24129
	.byte	5
	.byte	'positiveInput',0,12,200,6,143,2
	.word	467
	.byte	5
	.byte	'negativeInput',0,12,200,6,164,2
	.word	467
	.byte	0,28
	.byte	'IfxEdsadc_setGainCorrectionFactor',0,12,209,6,17,1,1,1,1,5
	.byte	'edsadc',0,12,209,6,63
	.word	20866
	.byte	5
	.byte	'channel',0,12,209,6,91
	.word	21042
	.byte	5
	.byte	'gainFactor',0,12,209,6,107
	.word	1018
	.byte	5
	.byte	'cicShift',0,12,209,6,125
	.word	467
	.byte	0,28
	.byte	'IfxEdsadc_setTimeStampCounter',0,12,219,6,17,1,1,1,1,5
	.byte	'edsadc',0,12,219,6,59
	.word	20866
	.byte	5
	.byte	'channel',0,12,219,6,87
	.word	21042
	.byte	5
	.byte	'timeStampCounterClock',0,12,219,6,137,1
	.word	23198
	.byte	5
	.byte	'runControl',0,12,219,6,194,1
	.word	23397
	.byte	5
	.byte	'analogMuxCopy',0,12,219,6,226,1
	.word	23483
	.byte	0,28
	.byte	'IfxEdsadc_setGainControl',0,12,229,6,17,1,1,1,1,5
	.byte	'edsadc',0,12,229,6,54
	.word	20866
	.byte	5
	.byte	'channel',0,12,229,6,82
	.word	21042
	.byte	5
	.byte	'gainFactor',0,12,229,6,98
	.word	1018
	.byte	5
	.byte	'cicShift',0,12,229,6,116
	.word	467
	.byte	5
	.byte	'cicDecimationRate',0,12,229,6,132,1
	.word	467
	.byte	0,28
	.byte	'IfxEdsadc_setGainCalibration',0,12,238,6,17,1,1,1,1,5
	.byte	'edsadc',0,12,238,6,58
	.word	20866
	.byte	5
	.byte	'channel',0,12,238,6,86
	.word	21042
	.byte	5
	.byte	'calFactor',0,12,238,6,102
	.word	1018
	.byte	5
	.byte	'calTarget',0,12,238,6,120
	.word	1018
	.byte	0,20,17,183,2,9,4,13
	.byte	'edsadc',0
	.word	20866
	.byte	4,2,35,0,0
.L163:
	.byte	3
	.word	27040
	.byte	15,12,103,9,1,16
	.byte	'IfxEdsadc_CarrierWaveformMode_stopped',0,0,16
	.byte	'IfxEdsadc_CarrierWaveformMode_square',0,1,16
	.byte	'IfxEdsadc_CarrierWaveformMode_triangle',0,2,16
	.byte	'IfxEdsadc_CarrierWaveformMode_sine',0,3,0,20,17,190,2,9,20,13
	.byte	'carrierWaveformMode',0
	.word	27068
	.byte	1,2,35,0,13
	.byte	'frequency',0
	.word	240
	.byte	4,2,35,2,13
	.byte	'pinPos',0
	.word	21643
	.byte	4,2,35,8,13
	.byte	'pinNeg',0
	.word	21643
	.byte	4,2,35,12,13
	.byte	'pinMode',0
	.word	10200
	.byte	1,2,35,16,13
	.byte	'pinDriver',0
	.word	21648
	.byte	1,2,35,17,13
	.byte	'inverted',0
	.word	467
	.byte	1,2,35,18,13
	.byte	'bitReversed',0
	.word	467
	.byte	1,2,35,19,0
.L165:
	.byte	3
	.word	27231
	.byte	14
	.word	19762
	.byte	3
	.word	27398
	.byte	20,17,204,2,9,12,13
	.byte	'module',0
	.word	20866
	.byte	4,2,35,0,13
	.byte	'channel',0
	.word	27403
	.byte	4,2,35,4,13
	.byte	'channelId',0
	.word	21042
	.byte	1,2,35,8,0
.L208:
	.byte	3
	.word	27408
	.byte	20,17,192,1,9,4,13
	.byte	'decimationFactor',0
	.word	1018
	.byte	2,2,35,0,13
	.byte	'startValue',0
	.word	1018
	.byte	2,2,35,2,0,21
	.word	27472
.L210:
	.byte	3
	.word	27525
	.byte	15,12,217,3,9,1,16
	.byte	'IfxEdsadc_TriggerInput_a',0,0,16
	.byte	'IfxEdsadc_TriggerInput_b',0,1,16
	.byte	'IfxEdsadc_TriggerInput_c',0,2,16
	.byte	'IfxEdsadc_TriggerInput_d',0,3,16
	.byte	'IfxEdsadc_TriggerInput_e',0,4,16
	.byte	'IfxEdsadc_TriggerInput_f',0,5,16
	.byte	'IfxEdsadc_TriggerInput_g',0,6,16
	.byte	'IfxEdsadc_TriggerInput_h',0,7,16
	.byte	'IfxEdsadc_TriggerInput_i',0,8,16
	.byte	'IfxEdsadc_TriggerInput_j',0,9,16
	.byte	'IfxEdsadc_TriggerInput_k',0,10,16
	.byte	'IfxEdsadc_TriggerInput_l',0,11,16
	.byte	'IfxEdsadc_TriggerInput_m',0,12,16
	.byte	'IfxEdsadc_TriggerInput_n',0,13,16
	.byte	'IfxEdsadc_TriggerInput_o',0,14,16
	.byte	'IfxEdsadc_TriggerInput_p',0,15,0,15,12,224,1,9,1,16
	.byte	'IfxEdsadc_InputDataSource_directInputA',0,0,16
	.byte	'IfxEdsadc_InputDataSource_invertedInputA',0,1,16
	.byte	'IfxEdsadc_InputDataSource_directInputB',0,2,16
	.byte	'IfxEdsadc_InputDataSource_invertedInputB',0,3,16
	.byte	'IfxEdsadc_InputDataSource_directInputC',0,4,16
	.byte	'IfxEdsadc_InputDataSource_invertedInputC',0,5,16
	.byte	'IfxEdsadc_InputDataSource_directInputD',0,6,16
	.byte	'IfxEdsadc_InputDataSource_invertedInputD',0,7,0,15,12,132,1,9,1,16
	.byte	'IfxEdsadc_DataStream_onChipModulator',0,0,16
	.byte	'IfxEdsadc_DataStream_doubleDataClockEdge',0,3,16
	.byte	'IfxEdsadc_DataStream_directFallingClockEdge',0,4,16
	.byte	'IfxEdsadc_DataStream_directRisingClockEdge',0,5,16
	.byte	'IfxEdsadc_DataStream_secondFallingClockEdge',0,6,16
	.byte	'IfxEdsadc_DataStream_secondRisingClockEdge',0,7,0,15,12,138,3,9,1,16
	.byte	'IfxEdsadc_SampleClockSource_internal',0,0,16
	.byte	'IfxEdsadc_SampleClockSource_inputA',0,3,16
	.byte	'IfxEdsadc_SampleClockSource_inputB',0,4,16
	.byte	'IfxEdsadc_SampleClockSource_inputC',0,5,0,15,12,167,2,9,1,16
	.byte	'IfxEdsadc_IntegratorTrigger_bypassed',0,0,16
	.byte	'IfxEdsadc_IntegratorTrigger_fallingEdge',0,1,16
	.byte	'IfxEdsadc_IntegratorTrigger_risingEdge',0,2,16
	.byte	'IfxEdsadc_IntegratorTrigger_alwaysActive',0,3,0,15,12,206,3,9,1,16
	.byte	'IfxEdsadc_TimestampTrigger_noTrigger',0,0,16
	.byte	'IfxEdsadc_TimestampTrigger_fallingEdge',0,1,16
	.byte	'IfxEdsadc_TimestampTrigger_risingEdge',0,2,16
	.byte	'IfxEdsadc_TimestampTrigger_eachEdge',0,3,0,15,12,122,9,1,16
	.byte	'IfxEdsadc_DataRead_signOnHighbit',0,0,16
	.byte	'IfxEdsadc_DataRead_timestampOnHighbit',0,1,16
	.byte	'IfxEdsadc_DataRead_double',0,2,0,15,12,129,3,9,1,16
	.byte	'IfxEdsadc_ResultDisplayMode_signed',0,0,16
	.byte	'IfxEdsadc_ResultDisplayMode_unsigned',0,1,0,20,17,213,1,9,12,13
	.byte	'triggerInput',0
	.word	27535
	.byte	1,2,35,0,13
	.byte	'inputDataSource',0
	.word	27974
	.byte	1,2,35,1,13
	.byte	'dataStream',0
	.word	28317
	.byte	1,2,35,2,13
	.byte	'sampleClockSource',0
	.word	28588
	.byte	1,2,35,3,13
	.byte	'integrationTrigger',0
	.word	28745
	.byte	1,2,35,4,13
	.byte	'timestampTrigger',0
	.word	28917
	.byte	1,2,35,5,13
	.byte	'dataReadMode',0
	.word	29082
	.byte	1,2,35,6,13
	.byte	'timeStampMode',0
	.word	467
	.byte	1,2,35,7,13
	.byte	'resultDisplay',0
	.word	29191
	.byte	1,2,35,8,0,21
	.word	29274
.L216:
	.byte	3
	.word	29497
	.byte	15,12,178,2,9,1,16
	.byte	'IfxEdsadc_MainServiceRequest_never',0,0,16
	.byte	'IfxEdsadc_MainServiceRequest_highGateSignal',0,1,16
	.byte	'IfxEdsadc_MainServiceRequest_lowGateSignal',0,2,16
	.byte	'IfxEdsadc_MainServiceRequest_everyNewResult',0,3,0,15,12,92,9,1,16
	.byte	'IfxEdsadc_AuxServiceRequest_never',0,0,16
	.byte	'IfxEdsadc_AuxServiceRequest_compEvent',0,1,16
	.byte	'IfxEdsadc_AuxServiceRequest_timestampEvent',0,2,16
	.byte	'IfxEdsadc_AuxServiceRequest_altSource',0,3,0,15,12,149,3,9,1,16
	.byte	'IfxEdsadc_ServiceRequestFifolevel_1',0,0,16
	.byte	'IfxEdsadc_ServiceRequestFifolevel_2',0,1,16
	.byte	'IfxEdsadc_ServiceRequestFifolevel_3',0,2,16
	.byte	'IfxEdsadc_ServiceRequestFifolevel_4',0,3,0,15,12,156,1,9,1,16
	.byte	'IfxEdsadc_EventSelect_everyNewResult',0,0,16
	.byte	'IfxEdsadc_EventSelect_insideBoundry',0,1,16
	.byte	'IfxEdsadc_EventSelect_outsideBoundry',0,2,0,15,12,213,2,9,1,16
	.byte	'IfxEdsadc_OffsetCompensationFilter_disabled',0,0,16
	.byte	'IfxEdsadc_OffsetCompensationFilter_enablewithRateA',0,1,16
	.byte	'IfxEdsadc_OffsetCompensationFilter_enablewithRateB',0,2,16
	.byte	'IfxEdsadc_OffsetCompensationFilter_enablewithRateC',0,3,16
	.byte	'IfxEdsadc_OffsetCompensationFilter_enablewithRateD',0,4,16
	.byte	'IfxEdsadc_OffsetCompensationFilter_enablewithRateE',0,5,16
	.byte	'IfxEdsadc_OffsetCompensationFilter_enablewithRateF',0,6,16
	.byte	'IfxEdsadc_OffsetCompensationFilter_enablewithRateG',0,7,0,15,12,228,2,9,1,16
	.byte	'IfxEdsadc_OvershootCompensation_disabled',0,0,16
	.byte	'IfxEdsadc_OvershootCompensation_enabled',0,1,0,20,17,229,1,9,16,13
	.byte	'serviceRequest',0
	.word	29507
	.byte	1,2,35,0,13
	.byte	'auxServiceRequest',0
	.word	29688
	.byte	1,2,35,1,13
	.byte	'serviceRequestLevel',0
	.word	29855
	.byte	1,2,35,2,13
	.byte	'eventSelect',0
	.word	30014
	.byte	1,2,35,3,13
	.byte	'offsetCompensation',0
	.word	30137
	.byte	1,2,35,4,13
	.byte	'fir0Enabled',0
	.word	467
	.byte	1,2,35,5,13
	.byte	'fir1Enabled',0
	.word	467
	.byte	1,2,35,6,13
	.byte	'rippleCompensationEnabled',0
	.word	467
	.byte	1,2,35,7,13
	.byte	'fir1DecimateRate',0
	.word	467
	.byte	1,2,35,8,13
	.byte	'cicMode',0
	.word	467
	.byte	1,2,35,9,13
	.byte	'prefilterEnabled',0
	.word	467
	.byte	1,2,35,10,13
	.byte	'calibrationTrigger',0
	.word	467
	.byte	1,2,35,11,13
	.byte	'calibrationControl',0
	.word	467
	.byte	1,2,35,12,13
	.byte	'overshootCompensation',0
	.word	30561
	.byte	1,2,35,13,0,21
	.word	30653
.L222:
	.byte	3
	.word	31022
	.byte	15,12,157,2,9,1,16
	.byte	'IfxEdsadc_IntegrationWindowSize_internalControl',0,0,16
	.byte	'IfxEdsadc_IntegrationWindowSize_externalControl',0,1,0,15,12,144,2,9,1,16
	.byte	'IfxEdsadc_IntegrationShiftControl_0',0,0,16
	.byte	'IfxEdsadc_IntegrationShiftControl_1',0,1,16
	.byte	'IfxEdsadc_IntegrationShiftControl_2',0,2,16
	.byte	'IfxEdsadc_IntegrationShiftControl_3',0,3,16
	.byte	'IfxEdsadc_IntegrationShiftControl_4',0,4,16
	.byte	'IfxEdsadc_IntegrationShiftControl_5',0,5,0,15,12,248,2,9,1,16
	.byte	'IfxEdsadc_RestartFilterChain_on',0,0,16
	.byte	'IfxEdsadc_RestartFilterChain_off',0,1,0,20,17,249,1,9,12,13
	.byte	'windowSize',0
	.word	31032
	.byte	1,2,35,0,13
	.byte	'discardCount',0
	.word	1018
	.byte	2,2,35,2,13
	.byte	'integrationCount',0
	.word	1018
	.byte	2,2,35,4,13
	.byte	'integrationCycles',0
	.word	1018
	.byte	2,2,35,6,13
	.byte	'shiftControl',0
	.word	31139
	.byte	1,2,35,8,13
	.byte	'fcRestartControl',0
	.word	31374
	.byte	1,2,35,9,0,21
	.word	31450
.L230:
	.byte	3
	.word	31600
	.byte	15,12,239,1,9,1,16
	.byte	'IfxEdsadc_InputGain_factor1',0,0,16
	.byte	'IfxEdsadc_InputGain_factor2',0,1,16
	.byte	'IfxEdsadc_InputGain_factor4',0,2,16
	.byte	'IfxEdsadc_InputGain_factor8',0,3,16
	.byte	'IfxEdsadc_InputGain_factor16',0,4,0,15,12,77,9,1,16
	.byte	'IfxEdsadc_AnalogClockSyncDelay_noDelay',0,0,16
	.byte	'IfxEdsadc_AnalogClockSyncDelay_cycleDelay1',0,1,16
	.byte	'IfxEdsadc_AnalogClockSyncDelay_cycleDelay2',0,2,16
	.byte	'IfxEdsadc_AnalogClockSyncDelay_cycleDelay3',0,3,16
	.byte	'IfxEdsadc_AnalogClockSyncDelay_cycleDelay4',0,4,16
	.byte	'IfxEdsadc_AnalogClockSyncDelay_cycleDelay5',0,5,16
	.byte	'IfxEdsadc_AnalogClockSyncDelay_cycleDelay6',0,6,16
	.byte	'IfxEdsadc_AnalogClockSyncDelay_cycleDelay7',0,7,0,15,12,213,1,9,1,16
	.byte	'IfxEdsadc_InputConfig_inputPin',0,0,16
	.byte	'IfxEdsadc_InputConfig_supplyVoltage',0,1,16
	.byte	'IfxEdsadc_InputConfig_commonModeVoltage',0,2,16
	.byte	'IfxEdsadc_InputConfig_referenceGround',0,3,0,15,12,133,2,9,1,16
	.byte	'IfxEdsadc_InputPin_a',0,0,16
	.byte	'IfxEdsadc_InputPin_b',0,1,16
	.byte	'IfxEdsadc_InputPin_c',0,2,16
	.byte	'IfxEdsadc_InputPin_d',0,3,0,15,12,240,3,9,1,16
	.byte	'IfxEdsadc_dithering_disabled',0,0,16
	.byte	'IfxEdsadc_dithering_enabled',0,1,0,15,12,250,1,9,1,16
	.byte	'IfxEdsadc_InputMuxControlMode_softwareControl',0,0,16
	.byte	'IfxEdsadc_InputMuxControlMode_fallingEdge',0,1,16
	.byte	'IfxEdsadc_InputMuxControlMode_risingEdge',0,2,16
	.byte	'IfxEdsadc_InputMuxControlMode_always',0,3,0,20,17,133,2,9,16,13
	.byte	'modulatorClockFreq',0
	.word	240
	.byte	4,2,35,0,13
	.byte	'inputGain',0
	.word	31610
	.byte	1,2,35,4,13
	.byte	'analogClockSyncDelay',0
	.word	31768
	.byte	1,2,35,5,13
	.byte	'positiveInput',0
	.word	32130
	.byte	1,2,35,6,13
	.byte	'negativeInput',0
	.word	32130
	.byte	1,2,35,7,13
	.byte	'inputPin',0
	.word	32290
	.byte	1,2,35,8,13
	.byte	'ditheringEnabled',0
	.word	32389
	.byte	1,2,35,9,13
	.byte	'integratorResetEnabled',0
	.word	467
	.byte	1,2,35,10,13
	.byte	'inputMuxActionControl',0
	.word	467
	.byte	1,2,35,11,13
	.byte	'triggerEvent',0
	.word	32457
	.byte	1,2,35,12,0,21
	.word	32638
.L236:
	.byte	3
	.word	32897
	.byte	15,12,145,1,9,1,16
	.byte	'IfxEdsadc_DitheringIntensity_minimum',0,0,16
	.byte	'IfxEdsadc_DitheringIntensity_low',0,1,16
	.byte	'IfxEdsadc_DitheringIntensity_medium',0,2,16
	.byte	'IfxEdsadc_DitheringIntensity_high',0,3,0,15,12,204,2,9,1,16
	.byte	'IfxEdsadc_ModulatorClockGeneration_syncMode',0,0,16
	.byte	'IfxEdsadc_ModulatorClockGeneration_unsyncMode',0,1,0,15,12,177,3,9,1,16
	.byte	'IfxEdsadc_SupplyVoltageLevel_automaticControl',0,0,16
	.byte	'IfxEdsadc_SupplyVoltageLevel_upperVoltage',0,1,16
	.byte	'IfxEdsadc_SupplyVoltageLevel_lowerVoltage',0,2,0,20,17,233,2,9,8,13
	.byte	'edsadc',0
	.word	20866
	.byte	4,2,35,0,13
	.byte	'ditheringIntensity',0
	.word	32907
	.byte	1,2,35,4,13
	.byte	'modulatorClockMode',0
	.word	33062
	.byte	1,2,35,5,13
	.byte	'supplyVoltageLevel',0
	.word	33163
	.byte	1,2,35,6,0
.L248:
	.byte	3
	.word	33306
	.byte	15,12,238,2,9,1,16
	.byte	'IfxEdsadc_RectifierSignSource_onChipGenerator',0,0,16
	.byte	'IfxEdsadc_RectifierSignSource_nextChannel',0,1,16
	.byte	'IfxEdsadc_RectifierSignSource_externalA',0,2,16
	.byte	'IfxEdsadc_RectifierSignSource_externalB',0,3,0,20,17,149,2,9,4,13
	.byte	'signDelay',0
	.word	467
	.byte	1,2,35,0,13
	.byte	'signPeriod',0
	.word	467
	.byte	1,2,35,1,13
	.byte	'signSource',0
	.word	33418
	.byte	1,2,35,2,13
	.byte	'enabled',0
	.word	467
	.byte	1,2,35,3,0,21
	.word	33601
.L263:
	.byte	3
	.word	33684
	.byte	20,17,175,1,9,40,13
	.byte	'cin',0
	.word	22348
	.byte	4,2,35,0,13
	.byte	'cinMode',0
	.word	9995
	.byte	1,2,35,4,13
	.byte	'din',0
	.word	22508
	.byte	4,2,35,8,13
	.byte	'dinMode',0
	.word	9995
	.byte	1,2,35,12,13
	.byte	'itr',0
	.word	22988
	.byte	4,2,35,16,13
	.byte	'itrMode',0
	.word	9995
	.byte	1,2,35,20,13
	.byte	'dsn',0
	.word	22668
	.byte	4,2,35,24,13
	.byte	'dsnMode',0
	.word	9995
	.byte	1,2,35,28,13
	.byte	'dsp',0
	.word	22828
	.byte	4,2,35,32,13
	.byte	'dspMode',0
	.word	9995
	.byte	1,2,35,36,13
	.byte	'pinDriver',0
	.word	21648
	.byte	1,2,35,37,0,21
	.word	33694
.L303:
	.byte	3
	.word	33870
	.byte	20,17,170,2,9,8,13
	.byte	'gainFactor',0
	.word	1018
	.byte	2,2,35,0,13
	.byte	'cicShift',0
	.word	467
	.byte	1,2,35,2,13
	.byte	'cicDecimationRate',0
	.word	467
	.byte	1,2,35,3,13
	.byte	'calFactor',0
	.word	1018
	.byte	2,2,35,4,13
	.byte	'calTarget',0
	.word	1018
	.byte	2,2,35,6,0,20,17,213,2,9,100,13
	.byte	'module',0
	.word	20866
	.byte	4,2,35,0,13
	.byte	'channelId',0
	.word	21042
	.byte	1,2,35,4,13
	.byte	'firFilter',0
	.word	30653
	.byte	16,2,35,8,13
	.byte	'modulator',0
	.word	32638
	.byte	16,2,35,24,13
	.byte	'demodulator',0
	.word	29274
	.byte	12,2,35,40,13
	.byte	'integrator',0
	.word	31450
	.byte	12,2,35,52,13
	.byte	'rectifier',0
	.word	33601
	.byte	4,2,35,64,13
	.byte	'combFilter',0
	.word	27472
	.byte	4,2,35,68,13
	.byte	'timeStamp',0
	.word	23555
	.byte	4,2,35,72,13
	.byte	'commonMode',0
	.word	24218
	.byte	6,2,35,76,13
	.byte	'gainFactor',0
	.word	1018
	.byte	2,2,35,82,13
	.byte	'cicShift',0
	.word	467
	.byte	1,2,35,84,13
	.byte	'channelPins',0
	.word	33875
	.byte	4,2,35,88,13
	.byte	'gainCalibrationConfig',0
	.word	33880
	.byte	8,2,35,92,0,21
	.word	33990
.L269:
	.byte	3
	.word	34279
.L383:
	.byte	3
	.word	33990
	.byte	26
	.word	23075
	.byte	27
	.word	23124
	.byte	27
	.word	23140
	.byte	27
	.word	23157
	.byte	27
	.word	23177
	.byte	6,0,26
	.word	23662
	.byte	27
	.word	23708
	.byte	27
	.word	23724
	.byte	27
	.word	23741
	.byte	6,0,26
	.word	24394
	.byte	27
	.word	24441
	.byte	27
	.word	24457
	.byte	27
	.word	24474
	.byte	6,0
.L391:
	.byte	3
	.word	240
	.byte	33
	.byte	'__wchar_t',0,18,1,1
	.word	21029
	.byte	33
	.byte	'__size_t',0,18,1,1
	.word	444
	.byte	33
	.byte	'__ptrdiff_t',0,18,1,1
	.word	460
	.byte	34,1,3
	.word	34425
	.byte	33
	.byte	'__codeptr',0,18,1,1
	.word	34427
	.byte	33
	.byte	'IfxEdsadc_ChannelId',0,14,86,3
	.word	21042
	.byte	15,19,66,9,1,16
	.byte	'IfxSrc_Tos_cpu0',0,0,16
	.byte	'IfxSrc_Tos_dma',0,1,16
	.byte	'IfxSrc_Tos_cpu1',0,2,16
	.byte	'IfxSrc_Tos_cpu2',0,3,16
	.byte	'IfxSrc_Tos_cpu3',0,4,16
	.byte	'IfxSrc_Tos_cpu4',0,5,16
	.byte	'IfxSrc_Tos_cpu5',0,6,0,33
	.byte	'IfxSrc_Tos',0,19,75,3
	.word	34478
	.byte	33
	.byte	'boolean',0,20,104,29
	.word	467
	.byte	33
	.byte	'uint8',0,20,108,29
	.word	467
	.byte	33
	.byte	'uint16',0,20,112,29
	.word	1018
	.byte	33
	.byte	'uint32',0,20,116,29
	.word	2262
	.byte	33
	.byte	'uint64',0,20,121,29
	.word	326
	.byte	33
	.byte	'sint16',0,20,129,1,29
	.word	21029
	.byte	33
	.byte	'sint32',0,20,134,1,29
	.word	21459
	.byte	7
	.byte	'long long int',0,8,5,33
	.byte	'sint64',0,20,141,1,29
	.word	34735
	.byte	33
	.byte	'float32',0,20,170,1,29
	.word	240
	.byte	33
	.byte	'pvoid',0,16,54,28
	.word	358
	.byte	33
	.byte	'Ifx_TickTime',0,16,76,28
	.word	34735
	.byte	33
	.byte	'Ifx_Priority',0,16,100,16
	.word	1018
	.byte	33
	.byte	'Ifx_RxSel',0,16,137,1,3
	.word	22157
	.byte	33
	.byte	'Ifx_UReg_8Bit',0,21,96,24
	.word	467
	.byte	33
	.byte	'Ifx_UReg_32Bit',0,21,98,24
	.word	444
	.byte	33
	.byte	'Ifx_SReg_32Bit',0,21,101,24
	.word	460
	.byte	33
	.byte	'Ifx_SRC_SRCR_Bits',0,4,85,3
	.word	484
	.byte	33
	.byte	'Ifx_SRC_SRCR',0,4,98,3
	.word	774
	.byte	10
	.byte	'_Ifx_SRC_CPU_CPU',0,4,110,25,4,13
	.byte	'SB',0
	.word	774
	.byte	4,2,35,0,0,14
	.word	34975
	.byte	33
	.byte	'Ifx_SRC_CPU_CPU',0,4,113,3
	.word	35010
	.byte	18,24
	.word	34975
	.byte	19,5,0,14
	.word	35039
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,4,128,1,25,24,13
	.byte	'CPU',0
	.word	35048
	.byte	24,2,35,0,0,14
	.word	35053
	.byte	33
	.byte	'Ifx_SRC_CPU',0,4,131,1,3
	.word	35086
	.byte	10
	.byte	'_Ifx_SRC_AGBT_AGBT',0,4,146,1,25,4,13
	.byte	'SR',0
	.word	774
	.byte	4,2,35,0,0,14
	.word	35112
	.byte	33
	.byte	'Ifx_SRC_AGBT_AGBT',0,4,149,1,3
	.word	35150
	.byte	18,4
	.word	35112
	.byte	19,0,0,14
	.word	35182
	.byte	10
	.byte	'_Ifx_SRC_AGBT',0,4,164,1,25,4,13
	.byte	'AGBT',0
	.word	35191
	.byte	4,2,35,0,0,14
	.word	35196
	.byte	33
	.byte	'Ifx_SRC_AGBT',0,4,167,1,3
	.word	35231
	.byte	10
	.byte	'_Ifx_SRC_XBAR_XBAR',0,4,182,1,25,4,13
	.byte	'SR',0
	.word	774
	.byte	4,2,35,0,0,14
	.word	35258
	.byte	33
	.byte	'Ifx_SRC_XBAR_XBAR',0,4,185,1,3
	.word	35296
	.byte	18,12
	.word	35258
	.byte	19,2,0,14
	.word	35328
	.byte	10
	.byte	'_Ifx_SRC_XBAR',0,4,200,1,25,12,13
	.byte	'XBAR',0
	.word	35337
	.byte	12,2,35,0,0,14
	.word	35342
	.byte	33
	.byte	'Ifx_SRC_XBAR',0,4,203,1,3
	.word	35377
	.byte	18,8
	.word	774
	.byte	19,1,0,10
	.byte	'_Ifx_SRC_CERBERUS_CERBERUS',0,4,218,1,25,8,13
	.byte	'SR',0
	.word	35404
	.byte	8,2,35,0,0,14
	.word	35413
	.byte	33
	.byte	'Ifx_SRC_CERBERUS_CERBERUS',0,4,221,1,3
	.word	35459
	.byte	14
	.word	35413
	.byte	10
	.byte	'_Ifx_SRC_CERBERUS',0,4,236,1,25,8,13
	.byte	'CERBERUS',0
	.word	35499
	.byte	8,2,35,0,0,14
	.word	35504
	.byte	33
	.byte	'Ifx_SRC_CERBERUS',0,4,239,1,3
	.word	35547
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN_ASCLIN',0,4,254,1,25,12,13
	.byte	'TX',0
	.word	774
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	774
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	774
	.byte	4,2,35,8,0,14
	.word	35578
	.byte	33
	.byte	'Ifx_SRC_ASCLIN_ASCLIN',0,4,131,2,3
	.word	35645
	.byte	18,144,1
	.word	35578
	.byte	19,11,0,14
	.word	35681
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,4,146,2,25,144,1,13
	.byte	'ASCLIN',0
	.word	35691
	.byte	144,1,2,35,0,0,14
	.word	35696
	.byte	33
	.byte	'Ifx_SRC_ASCLIN',0,4,149,2,3
	.word	35737
	.byte	10
	.byte	'_Ifx_SRC_QSPI_QSPI',0,4,164,2,25,20,13
	.byte	'TX',0
	.word	774
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	774
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	774
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	774
	.byte	4,2,35,12,13
	.byte	'U',0
	.word	774
	.byte	4,2,35,16,0,14
	.word	35766
	.byte	33
	.byte	'Ifx_SRC_QSPI_QSPI',0,4,171,2,3
	.word	35852
	.byte	18,120
	.word	35766
	.byte	19,5,0,14
	.word	35884
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,4,186,2,25,120,13
	.byte	'QSPI',0
	.word	35893
	.byte	120,2,35,0,0,14
	.word	35898
	.byte	33
	.byte	'Ifx_SRC_QSPI',0,4,189,2,3
	.word	35933
	.byte	10
	.byte	'_Ifx_SRC_HSCT_HSCT',0,4,204,2,25,4,13
	.byte	'SR',0
	.word	774
	.byte	4,2,35,0,0,14
	.word	35960
	.byte	33
	.byte	'Ifx_SRC_HSCT_HSCT',0,4,207,2,3
	.word	35998
	.byte	18,8
	.word	35960
	.byte	19,1,0,14
	.word	36030
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,4,222,2,25,8,13
	.byte	'HSCT',0
	.word	36039
	.byte	8,2,35,0,0,14
	.word	36044
	.byte	33
	.byte	'Ifx_SRC_HSCT',0,4,225,2,3
	.word	36079
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL_CH',0,4,240,2,25,16,13
	.byte	'COK',0
	.word	774
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	774
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	774
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	774
	.byte	4,2,35,12,0,14
	.word	36106
	.byte	33
	.byte	'Ifx_SRC_HSSL_HSSL_CH',0,4,246,2,3
	.word	36187
	.byte	18,64
	.word	36106
	.byte	19,3,0,14
	.word	36222
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL',0,4,133,3,25,68,13
	.byte	'CH',0
	.word	36231
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	774
	.byte	4,2,35,64,0,14
	.word	36236
	.byte	33
	.byte	'Ifx_SRC_HSSL_HSSL',0,4,137,3,3
	.word	36287
	.byte	18,136,1
	.word	36236
	.byte	19,1,0,14
	.word	36319
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,4,152,3,25,136,1,13
	.byte	'HSSL',0
	.word	36329
	.byte	136,1,2,35,0,0,14
	.word	36334
	.byte	33
	.byte	'Ifx_SRC_HSSL',0,4,155,3,3
	.word	36371
	.byte	10
	.byte	'_Ifx_SRC_I2C_I2C',0,4,170,3,25,16,13
	.byte	'DTR',0
	.word	774
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	774
	.byte	4,2,35,4,13
	.byte	'P',0
	.word	774
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3500
	.byte	4,2,35,12,0,14
	.word	36398
	.byte	33
	.byte	'Ifx_SRC_I2C_I2C',0,4,176,3,3
	.word	36479
	.byte	18,32
	.word	36398
	.byte	19,1,0,14
	.word	36509
	.byte	10
	.byte	'_Ifx_SRC_I2C',0,4,191,3,25,32,13
	.byte	'I2C',0
	.word	36518
	.byte	32,2,35,0,0,14
	.word	36523
	.byte	33
	.byte	'Ifx_SRC_I2C',0,4,194,3,3
	.word	36556
	.byte	10
	.byte	'_Ifx_SRC_SENT_SENT',0,4,209,3,25,4,13
	.byte	'SR',0
	.word	774
	.byte	4,2,35,0,0,14
	.word	36582
	.byte	33
	.byte	'Ifx_SRC_SENT_SENT',0,4,212,3,3
	.word	36620
	.byte	18,40
	.word	36582
	.byte	19,9,0,14
	.word	36652
	.byte	10
	.byte	'_Ifx_SRC_SENT',0,4,227,3,25,40,13
	.byte	'SENT',0
	.word	36661
	.byte	40,2,35,0,0,14
	.word	36666
	.byte	33
	.byte	'Ifx_SRC_SENT',0,4,230,3,3
	.word	36701
	.byte	18,20
	.word	774
	.byte	19,4,0,10
	.byte	'_Ifx_SRC_MSC_MSC',0,4,245,3,25,20,13
	.byte	'SR',0
	.word	36728
	.byte	20,2,35,0,0,14
	.word	36737
	.byte	33
	.byte	'Ifx_SRC_MSC_MSC',0,4,248,3,3
	.word	36773
	.byte	18,80
	.word	36737
	.byte	19,3,0,14
	.word	36803
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,4,135,4,25,80,13
	.byte	'MSC',0
	.word	36812
	.byte	80,2,35,0,0,14
	.word	36817
	.byte	33
	.byte	'Ifx_SRC_MSC',0,4,138,4,3
	.word	36850
	.byte	18,16
	.word	774
	.byte	19,3,0,10
	.byte	'_Ifx_SRC_CCU6_CCU',0,4,153,4,25,16,13
	.byte	'SR',0
	.word	36876
	.byte	16,2,35,0,0,14
	.word	36885
	.byte	33
	.byte	'Ifx_SRC_CCU6_CCU',0,4,156,4,3
	.word	36922
	.byte	18,32
	.word	36885
	.byte	19,1,0,14
	.word	36953
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,4,171,4,25,32,13
	.byte	'CCU',0
	.word	36962
	.byte	32,2,35,0,0,14
	.word	36967
	.byte	33
	.byte	'Ifx_SRC_CCU6',0,4,174,4,3
	.word	37001
	.byte	10
	.byte	'_Ifx_SRC_GPT12_GPT12',0,4,189,4,25,24,13
	.byte	'CIRQ',0
	.word	774
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	774
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	774
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	774
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	774
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	774
	.byte	4,2,35,20,0,14
	.word	37028
	.byte	33
	.byte	'Ifx_SRC_GPT12_GPT12',0,4,197,4,3
	.word	37130
	.byte	18,24
	.word	37028
	.byte	19,0,0,14
	.word	37164
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,4,212,4,25,24,13
	.byte	'GPT12',0
	.word	37173
	.byte	24,2,35,0,0,14
	.word	37178
	.byte	33
	.byte	'Ifx_SRC_GPT12',0,4,215,4,3
	.word	37215
	.byte	10
	.byte	'_Ifx_SRC_STM_STM',0,4,230,4,25,8,13
	.byte	'SR',0
	.word	35404
	.byte	8,2,35,0,0,14
	.word	37243
	.byte	33
	.byte	'Ifx_SRC_STM_STM',0,4,233,4,3
	.word	37279
	.byte	18,48
	.word	37243
	.byte	19,5,0,14
	.word	37309
	.byte	10
	.byte	'_Ifx_SRC_STM',0,4,248,4,25,48,13
	.byte	'STM',0
	.word	37318
	.byte	48,2,35,0,0,14
	.word	37323
	.byte	33
	.byte	'Ifx_SRC_STM',0,4,251,4,3
	.word	37356
	.byte	10
	.byte	'_Ifx_SRC_FCE_FCE0',0,4,138,5,25,4,13
	.byte	'SR',0
	.word	774
	.byte	4,2,35,0,0,14
	.word	37382
	.byte	33
	.byte	'Ifx_SRC_FCE_FCE0',0,4,141,5,3
	.word	37419
	.byte	14
	.word	37382
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,4,156,5,25,4,13
	.byte	'FCE0',0
	.word	37450
	.byte	4,2,35,0,0,14
	.word	37455
	.byte	33
	.byte	'Ifx_SRC_FCE',0,4,159,5,3
	.word	37489
	.byte	18,32
	.word	467
	.byte	19,31,0,18,128,4
	.word	774
	.byte	19,127,0,10
	.byte	'_Ifx_SRC_DMA_DMA',0,4,174,5,25,176,4,13
	.byte	'ERR',0
	.word	36876
	.byte	16,2,35,0,13
	.byte	'reserved_10',0
	.word	37515
	.byte	32,2,35,16,13
	.byte	'CH',0
	.word	37524
	.byte	128,4,2,35,48,0,14
	.word	37534
	.byte	33
	.byte	'Ifx_SRC_DMA_DMA',0,4,179,5,3
	.word	37606
	.byte	18,176,4
	.word	37534
	.byte	19,0,0,14
	.word	37636
	.byte	10
	.byte	'_Ifx_SRC_DMA',0,4,194,5,25,176,4,13
	.byte	'DMA',0
	.word	37646
	.byte	176,4,2,35,0,0,14
	.word	37651
	.byte	33
	.byte	'Ifx_SRC_DMA',0,4,197,5,3
	.word	37686
	.byte	10
	.byte	'_Ifx_SRC_SDMMC_SDMMC',0,4,212,5,25,8,13
	.byte	'ERR',0
	.word	774
	.byte	4,2,35,0,13
	.byte	'DMA',0
	.word	774
	.byte	4,2,35,4,0,14
	.word	37712
	.byte	33
	.byte	'Ifx_SRC_SDMMC_SDMMC',0,4,216,5,3
	.word	37766
	.byte	18,8
	.word	37712
	.byte	19,0,0,14
	.word	37800
	.byte	10
	.byte	'_Ifx_SRC_SDMMC',0,4,231,5,25,8,13
	.byte	'SDMMC',0
	.word	37809
	.byte	8,2,35,0,0,14
	.word	37814
	.byte	33
	.byte	'Ifx_SRC_SDMMC',0,4,234,5,3
	.word	37851
	.byte	18,40
	.word	774
	.byte	19,9,0,10
	.byte	'_Ifx_SRC_GETH_GETH',0,4,249,5,25,40,13
	.byte	'SR',0
	.word	37879
	.byte	40,2,35,0,0,14
	.word	37888
	.byte	33
	.byte	'Ifx_SRC_GETH_GETH',0,4,252,5,3
	.word	37926
	.byte	18,40
	.word	37888
	.byte	19,0,0,14
	.word	37958
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,4,139,6,25,40,13
	.byte	'GETH',0
	.word	37967
	.byte	40,2,35,0,0,14
	.word	37972
	.byte	33
	.byte	'Ifx_SRC_GETH',0,4,142,6,3
	.word	38007
	.byte	18,64
	.word	774
	.byte	19,15,0,10
	.byte	'_Ifx_SRC_CAN_CAN',0,4,157,6,25,64,13
	.byte	'INT',0
	.word	38034
	.byte	64,2,35,0,0,14
	.word	38043
	.byte	33
	.byte	'Ifx_SRC_CAN_CAN',0,4,160,6,3
	.word	38080
	.byte	18,192,1
	.word	38043
	.byte	19,2,0,14
	.word	38110
	.byte	10
	.byte	'_Ifx_SRC_CAN',0,4,175,6,25,192,1,13
	.byte	'CAN',0
	.word	38120
	.byte	192,1,2,35,0,0,14
	.word	38125
	.byte	33
	.byte	'Ifx_SRC_CAN',0,4,178,6,3
	.word	38160
	.byte	10
	.byte	'_Ifx_SRC_VADC_G',0,4,193,6,25,16,13
	.byte	'SR0',0
	.word	774
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	774
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	774
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	774
	.byte	4,2,35,12,0,14
	.word	38186
	.byte	33
	.byte	'Ifx_SRC_VADC_G',0,4,199,6,3
	.word	38261
	.byte	10
	.byte	'_Ifx_SRC_VADC_FC',0,4,214,6,25,4,13
	.byte	'SR0',0
	.word	774
	.byte	4,2,35,0,0,14
	.word	38290
	.byte	33
	.byte	'Ifx_SRC_VADC_FC',0,4,217,6,3
	.word	38327
	.byte	18,192,1
	.word	38186
	.byte	19,11,0,14
	.word	38357
	.byte	18,32
	.word	38290
	.byte	19,7,0,14
	.word	38372
	.byte	18,32
	.word	38186
	.byte	19,1,0,14
	.word	38386
	.byte	10
	.byte	'_Ifx_SRC_VADC',0,4,233,6,25,128,2,13
	.byte	'G',0
	.word	38367
	.byte	192,1,2,35,0,13
	.byte	'FC',0
	.word	38381
	.byte	32,3,35,192,1,13
	.byte	'CG',0
	.word	38395
	.byte	32,3,35,224,1,0,14
	.word	38400
	.byte	33
	.byte	'Ifx_SRC_VADC',0,4,238,6,3
	.word	38460
	.byte	10
	.byte	'_Ifx_SRC_DSADC_DSADC',0,4,253,6,25,8,13
	.byte	'SRM',0
	.word	774
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	774
	.byte	4,2,35,4,0,14
	.word	38487
	.byte	33
	.byte	'Ifx_SRC_DSADC_DSADC',0,4,129,7,3
	.word	38541
	.byte	18,112
	.word	38487
	.byte	19,13,0,14
	.word	38575
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,4,144,7,25,112,13
	.byte	'DSADC',0
	.word	38584
	.byte	112,2,35,0,0,14
	.word	38589
	.byte	33
	.byte	'Ifx_SRC_DSADC',0,4,147,7,3
	.word	38626
	.byte	10
	.byte	'_Ifx_SRC_ERAY_ERAY',0,4,162,7,25,48,13
	.byte	'INT0',0
	.word	774
	.byte	4,2,35,0,13
	.byte	'INT1',0
	.word	774
	.byte	4,2,35,4,13
	.byte	'TINT0',0
	.word	774
	.byte	4,2,35,8,13
	.byte	'TINT1',0
	.word	774
	.byte	4,2,35,12,13
	.byte	'NDAT0',0
	.word	774
	.byte	4,2,35,16,13
	.byte	'NDAT1',0
	.word	774
	.byte	4,2,35,20,13
	.byte	'MBSC0',0
	.word	774
	.byte	4,2,35,24,13
	.byte	'MBSC1',0
	.word	774
	.byte	4,2,35,28,13
	.byte	'OBUSY',0
	.word	774
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	774
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	5320
	.byte	8,2,35,40,0,14
	.word	38654
	.byte	33
	.byte	'Ifx_SRC_ERAY_ERAY',0,4,175,7,3
	.word	38849
	.byte	18,96
	.word	38654
	.byte	19,1,0,14
	.word	38881
	.byte	10
	.byte	'_Ifx_SRC_ERAY',0,4,190,7,25,96,13
	.byte	'ERAY',0
	.word	38890
	.byte	96,2,35,0,0,14
	.word	38895
	.byte	33
	.byte	'Ifx_SRC_ERAY',0,4,193,7,3
	.word	38930
	.byte	10
	.byte	'_Ifx_SRC_HSM_HSM',0,4,208,7,25,8,13
	.byte	'HSM',0
	.word	35404
	.byte	8,2,35,0,0,14
	.word	38957
	.byte	33
	.byte	'Ifx_SRC_HSM_HSM',0,4,211,7,3
	.word	38994
	.byte	18,8
	.word	38957
	.byte	19,0,0,14
	.word	39024
	.byte	10
	.byte	'_Ifx_SRC_HSM',0,4,226,7,25,8,13
	.byte	'HSM',0
	.word	39033
	.byte	8,2,35,0,0,14
	.word	39038
	.byte	33
	.byte	'Ifx_SRC_HSM',0,4,229,7,3
	.word	39071
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,4,244,7,25,16,13
	.byte	'SCUERU',0
	.word	36876
	.byte	16,2,35,0,0,14
	.word	39097
	.byte	33
	.byte	'Ifx_SRC_SCU',0,4,247,7,3
	.word	39133
	.byte	10
	.byte	'_Ifx_SRC_PMS_PMS',0,4,134,8,25,4,13
	.byte	'SR',0
	.word	774
	.byte	4,2,35,0,0,14
	.word	39159
	.byte	33
	.byte	'Ifx_SRC_PMS_PMS',0,4,137,8,3
	.word	39195
	.byte	18,16
	.word	39159
	.byte	19,3,0,14
	.word	39225
	.byte	10
	.byte	'_Ifx_SRC_PMS',0,4,152,8,25,16,13
	.byte	'PMS',0
	.word	39234
	.byte	16,2,35,0,0,14
	.word	39239
	.byte	33
	.byte	'Ifx_SRC_PMS',0,4,155,8,3
	.word	39272
	.byte	18,12
	.word	774
	.byte	19,2,0,10
	.byte	'_Ifx_SRC_SMU_SMU',0,4,170,8,25,12,13
	.byte	'SR',0
	.word	39298
	.byte	12,2,35,0,0,14
	.word	39307
	.byte	33
	.byte	'Ifx_SRC_SMU_SMU',0,4,173,8,3
	.word	39343
	.byte	18,12
	.word	39307
	.byte	19,0,0,14
	.word	39373
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,4,188,8,25,12,13
	.byte	'SMU',0
	.word	39382
	.byte	12,2,35,0,0,14
	.word	39387
	.byte	33
	.byte	'Ifx_SRC_SMU',0,4,191,8,3
	.word	39420
	.byte	18,32
	.word	774
	.byte	19,7,0,10
	.byte	'_Ifx_SRC_PSI5_PSI5',0,4,206,8,25,32,13
	.byte	'SR',0
	.word	39446
	.byte	32,2,35,0,0,14
	.word	39455
	.byte	33
	.byte	'Ifx_SRC_PSI5_PSI5',0,4,209,8,3
	.word	39493
	.byte	18,32
	.word	39455
	.byte	19,0,0,14
	.word	39525
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,4,224,8,25,32,13
	.byte	'PSI5',0
	.word	39534
	.byte	32,2,35,0,0,14
	.word	39539
	.byte	33
	.byte	'Ifx_SRC_PSI5',0,4,227,8,3
	.word	39574
	.byte	10
	.byte	'_Ifx_SRC_HSPDM_HSPDM0',0,4,242,8,25,12,13
	.byte	'BFR',0
	.word	774
	.byte	4,2,35,0,13
	.byte	'RAMP',0
	.word	774
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	774
	.byte	4,2,35,8,0,14
	.word	39601
	.byte	33
	.byte	'Ifx_SRC_HSPDM_HSPDM0',0,4,247,8,3
	.word	39670
	.byte	14
	.word	39601
	.byte	10
	.byte	'_Ifx_SRC_HSPDM',0,4,134,9,25,12,13
	.byte	'HSPDM0',0
	.word	39705
	.byte	12,2,35,0,0,14
	.word	39710
	.byte	33
	.byte	'Ifx_SRC_HSPDM',0,4,137,9,3
	.word	39748
	.byte	10
	.byte	'_Ifx_SRC_DAM_DAM',0,4,152,9,25,24,13
	.byte	'LI0',0
	.word	774
	.byte	4,2,35,0,13
	.byte	'RI0',0
	.word	774
	.byte	4,2,35,4,13
	.byte	'LI1',0
	.word	774
	.byte	4,2,35,8,13
	.byte	'RI1',0
	.word	774
	.byte	4,2,35,12,13
	.byte	'DR',0
	.word	774
	.byte	4,2,35,16,13
	.byte	'ERR',0
	.word	774
	.byte	4,2,35,20,0,14
	.word	39776
	.byte	33
	.byte	'Ifx_SRC_DAM_DAM',0,4,160,9,3
	.word	39877
	.byte	18,48
	.word	39776
	.byte	19,1,0,14
	.word	39907
	.byte	10
	.byte	'_Ifx_SRC_DAM',0,4,175,9,25,48,13
	.byte	'DAM',0
	.word	39916
	.byte	48,2,35,0,0,14
	.word	39921
	.byte	33
	.byte	'Ifx_SRC_DAM',0,4,178,9,3
	.word	39954
	.byte	10
	.byte	'_Ifx_SRC_PSI5S_PSI5S',0,4,193,9,25,32,13
	.byte	'SR',0
	.word	39446
	.byte	32,2,35,0,0,14
	.word	39980
	.byte	33
	.byte	'Ifx_SRC_PSI5S_PSI5S',0,4,196,9,3
	.word	40020
	.byte	18,32
	.word	39980
	.byte	19,0,0,14
	.word	40054
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,4,211,9,25,32,13
	.byte	'PSI5S',0
	.word	40063
	.byte	32,2,35,0,0,14
	.word	40068
	.byte	33
	.byte	'Ifx_SRC_PSI5S',0,4,214,9,3
	.word	40105
	.byte	10
	.byte	'_Ifx_SRC_RIF_RIF',0,4,229,9,25,8,13
	.byte	'ERR',0
	.word	774
	.byte	4,2,35,0,13
	.byte	'INT',0
	.word	774
	.byte	4,2,35,4,0,14
	.word	40133
	.byte	33
	.byte	'Ifx_SRC_RIF_RIF',0,4,233,9,3
	.word	40183
	.byte	18,16
	.word	40133
	.byte	19,1,0,14
	.word	40213
	.byte	10
	.byte	'_Ifx_SRC_RIF',0,4,248,9,25,16,13
	.byte	'RIF',0
	.word	40222
	.byte	16,2,35,0,0,14
	.word	40227
	.byte	33
	.byte	'Ifx_SRC_RIF',0,4,251,9,3
	.word	40260
	.byte	10
	.byte	'_Ifx_SRC_SPU_SPU',0,4,138,10,25,8,13
	.byte	'INT',0
	.word	774
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	774
	.byte	4,2,35,4,0,14
	.word	40286
	.byte	33
	.byte	'Ifx_SRC_SPU_SPU',0,4,142,10,3
	.word	40336
	.byte	18,16
	.word	40286
	.byte	19,1,0,14
	.word	40366
	.byte	10
	.byte	'_Ifx_SRC_SPU',0,4,157,10,25,16,13
	.byte	'SPU',0
	.word	40375
	.byte	16,2,35,0,0,14
	.word	40380
	.byte	33
	.byte	'Ifx_SRC_SPU',0,4,160,10,3
	.word	40413
	.byte	10
	.byte	'_Ifx_SRC_GPSR_GPSR',0,4,175,10,25,32,13
	.byte	'SR',0
	.word	39446
	.byte	32,2,35,0,0,14
	.word	40439
	.byte	33
	.byte	'Ifx_SRC_GPSR_GPSR',0,4,178,10,3
	.word	40477
	.byte	18,192,1
	.word	40439
	.byte	19,5,0,14
	.word	40509
	.byte	10
	.byte	'_Ifx_SRC_GPSR',0,4,193,10,25,192,1,13
	.byte	'GPSR',0
	.word	40519
	.byte	192,1,2,35,0,0,14
	.word	40524
	.byte	33
	.byte	'Ifx_SRC_GPSR',0,4,196,10,3
	.word	40561
	.byte	15,22,162,11,9,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,16
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,33
	.byte	'IfxScu_WDTCON1_IR',0,22,167,11,3
	.word	40588
	.byte	10
	.byte	'_Ifx_SCU_ACCEN00_Bits',0,6,68,16,4,11
	.byte	'EN0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	467
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	467
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	467
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	467
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	467
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	467
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	467
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	467
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	467
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	467
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	467
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	467
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	467
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	467
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	467
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	467
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	467
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_ACCEN00_Bits',0,6,102,3
	.word	40710
	.byte	10
	.byte	'_Ifx_SCU_ACCEN01_Bits',0,6,105,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN01_Bits',0,6,108,3
	.word	41269
	.byte	10
	.byte	'_Ifx_SCU_ACCEN10_Bits',0,6,111,16,4,11
	.byte	'EN0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	467
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	467
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	467
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	467
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	467
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	467
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	467
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	467
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	467
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	467
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	467
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	467
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	467
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	467
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	467
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	467
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	467
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_ACCEN10_Bits',0,6,145,1,3
	.word	41348
	.byte	10
	.byte	'_Ifx_SCU_ACCEN11_Bits',0,6,148,1,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN11_Bits',0,6,151,1,3
	.word	41908
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,6,154,1,16,4,11
	.byte	'STM0DIS',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'STM3DIS',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'STM4DIS',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'STM5DIS',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	467
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	444
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,6,164,1,3
	.word	41989
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,6,167,1,16,4,11
	.byte	'STMDIV',0,1
	.word	467
	.byte	4,4,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	467
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	467
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	467
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	467
	.byte	4,4,2,35,2,11
	.byte	'BBBDIV',0,1
	.word	467
	.byte	4,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	467
	.byte	2,6,2,35,3,11
	.byte	'FSI2DIV',0,1
	.word	467
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	467
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	467
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	467
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON0_Bits',0,6,181,1,3
	.word	42206
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,6,184,1,16,4,11
	.byte	'MCANDIV',0,1
	.word	467
	.byte	4,4,2,35,0,11
	.byte	'CLKSELMCAN',0,1
	.word	467
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'PLL1DIVDIS',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'I2CDIV',0,1
	.word	467
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	467
	.byte	4,0,2,35,1,11
	.byte	'MSCDIV',0,1
	.word	467
	.byte	4,4,2,35,2,11
	.byte	'CLKSELMSC',0,1
	.word	467
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	467
	.byte	2,0,2,35,2,11
	.byte	'QSPIDIV',0,1
	.word	467
	.byte	4,4,2,35,3,11
	.byte	'CLKSELQSPI',0,1
	.word	467
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	467
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	467
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON1_Bits',0,6,199,1,3
	.word	42479
	.byte	10
	.byte	'_Ifx_SCU_CCUCON10_Bits',0,6,202,1,16,4,11
	.byte	'CPU4DIV',0,1
	.word	467
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	444
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON10_Bits',0,6,206,1,3
	.word	42805
	.byte	10
	.byte	'_Ifx_SCU_CCUCON11_Bits',0,6,209,1,16,4,11
	.byte	'CPU5DIV',0,1
	.word	467
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	444
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON11_Bits',0,6,213,1,3
	.word	42907
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,6,216,1,16,4,11
	.byte	'ASCLINFDIV',0,1
	.word	467
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	467
	.byte	4,0,2,35,0,11
	.byte	'ASCLINSDIV',0,1
	.word	467
	.byte	4,4,2,35,1,11
	.byte	'CLKSELASCLINS',0,1
	.word	467
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	444
	.byte	10,8,2,35,0,11
	.byte	'EBUPERON',0,1
	.word	467
	.byte	1,7,2,35,3,11
	.byte	'ERAYPERON',0,1
	.word	467
	.byte	1,6,2,35,3,11
	.byte	'HSPDMPERON',0,1
	.word	467
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	467
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	467
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON2_Bits',0,6,228,1,3
	.word	43009
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,6,231,1,16,4,11
	.byte	'PLL0MONEN',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'PLL1MONEN',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'PLL2MONEN',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'SPBMONEN',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'BACKMONEN',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	467
	.byte	3,0,2,35,0,11
	.byte	'PLL0MONTST',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'PLL1MONTST',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'PLL2MONTST',0,1
	.word	467
	.byte	1,5,2,35,1,11
	.byte	'SPBMONTST',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'BACKMONTST',0,1
	.word	467
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	444
	.byte	11,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	467
	.byte	6,2,2,35,3,11
	.byte	'UP',0,1
	.word	467
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	467
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON3_Bits',0,6,248,1,3
	.word	43283
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,6,251,1,16,4,11
	.byte	'LOTHR',0,2
	.word	1018
	.byte	12,4,2,35,0,11
	.byte	'UPTHR',0,4
	.word	444
	.byte	12,8,2,35,0,11
	.byte	'MONEN',0,1
	.word	467
	.byte	1,7,2,35,3,11
	.byte	'MONTST',0,1
	.word	467
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	467
	.byte	4,2,2,35,3,11
	.byte	'UP',0,1
	.word	467
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	467
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON4_Bits',0,6,132,2,3
	.word	43652
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,6,135,2,16,4,11
	.byte	'GETHDIV',0,1
	.word	467
	.byte	4,4,2,35,0,11
	.byte	'MCANHDIV',0,1
	.word	467
	.byte	4,0,2,35,0,11
	.byte	'ADASDIV',0,1
	.word	467
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	444
	.byte	18,2,2,35,0,11
	.byte	'UP',0,1
	.word	467
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	467
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON5_Bits',0,6,143,2,3
	.word	43832
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,6,146,2,16,4,11
	.byte	'CPU0DIV',0,1
	.word	467
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	444
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON6_Bits',0,6,150,2,3
	.word	44001
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,6,153,2,16,4,11
	.byte	'CPU1DIV',0,1
	.word	467
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	444
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON7_Bits',0,6,157,2,3
	.word	44101
	.byte	10
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,6,160,2,16,4,11
	.byte	'CPU2DIV',0,1
	.word	467
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	444
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON8_Bits',0,6,164,2,3
	.word	44201
	.byte	10
	.byte	'_Ifx_SCU_CCUCON9_Bits',0,6,167,2,16,4,11
	.byte	'CPU3DIV',0,1
	.word	467
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	444
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON9_Bits',0,6,171,2,3
	.word	44301
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,6,174,2,16,4,11
	.byte	'CHREV',0,1
	.word	467
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	467
	.byte	2,0,2,35,0,11
	.byte	'CHPK',0,1
	.word	467
	.byte	4,4,2,35,1,11
	.byte	'CHID',0,1
	.word	467
	.byte	4,0,2,35,1,11
	.byte	'EEA',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	467
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	467
	.byte	4,4,2,35,3,11
	.byte	'VART',0,1
	.word	467
	.byte	3,1,2,35,3,11
	.byte	'SEC',0,1
	.word	467
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CHIPID_Bits',0,6,185,2,3
	.word	44401
	.byte	10
	.byte	'_Ifx_SCU_DTSCLIM_Bits',0,6,188,2,16,4,11
	.byte	'LOWER',0,2
	.word	1018
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	467
	.byte	1,3,2,35,1,11
	.byte	'BGPOK',0,1
	.word	467
	.byte	1,2,2,35,1,11
	.byte	'EN',0,1
	.word	467
	.byte	1,1,2,35,1,11
	.byte	'LLU',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	1018
	.byte	12,4,2,35,2,11
	.byte	'INTEN',0,1
	.word	467
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	467
	.byte	1,2,2,35,3,11
	.byte	'INT',0,1
	.word	467
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	467
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_DTSCLIM_Bits',0,6,200,2,3
	.word	44604
	.byte	10
	.byte	'_Ifx_SCU_DTSCSTAT_Bits',0,6,203,2,16,4,11
	.byte	'RESULT',0,2
	.word	1018
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	444
	.byte	20,0,2,35,0,0,33
	.byte	'Ifx_SCU_DTSCSTAT_Bits',0,6,207,2,3
	.word	44836
	.byte	10
	.byte	'_Ifx_SCU_EICON0_Bits',0,6,210,2,16,4,11
	.byte	'reserved_0',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	866
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	866
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_SCU_EICON0_Bits',0,6,216,2,3
	.word	44938
	.byte	10
	.byte	'_Ifx_SCU_EICON1_Bits',0,6,219,2,16,4,11
	.byte	'reserved_0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	444
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_EICON1_Bits',0,6,228,2,3
	.word	45066
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,6,231,2,16,4,11
	.byte	'reserved_0',0,1
	.word	467
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	467
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	467
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	467
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	444
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	467
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	467
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	467
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	467
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	467
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	467
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	467
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	467
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_EICR_Bits',0,6,250,2,3
	.word	45255
	.byte	10
	.byte	'_Ifx_SCU_EIFILT_Bits',0,6,253,2,16,4,11
	.byte	'FILRQ0A',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'FILRQ5A',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'FILRQ2A',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'FILRQ3A',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'FILRQ0C',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'FILRQ1C',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'FILRQ3C',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'FILRQ2C',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'FILRQ4A',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'FILRQ6A',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'FILRQ1A',0,1
	.word	467
	.byte	1,5,2,35,1,11
	.byte	'FILRQ7A',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'FILRQ6D',0,1
	.word	467
	.byte	1,3,2,35,1,11
	.byte	'FILRQ4D',0,1
	.word	467
	.byte	1,2,2,35,1,11
	.byte	'FILRQ2B',0,1
	.word	467
	.byte	1,1,2,35,1,11
	.byte	'FILRQ3B',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'FILRQ7C',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	467
	.byte	7,0,2,35,2,11
	.byte	'FILTDIV',0,1
	.word	467
	.byte	4,4,2,35,3,11
	.byte	'DEPTH',0,1
	.word	467
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_EIFILT_Bits',0,6,147,3,3
	.word	45619
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,6,150,3,16,4,11
	.byte	'INTF0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	444
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_EIFR_Bits',0,6,161,3,3
	.word	46058
	.byte	10
	.byte	'_Ifx_SCU_EISR_Bits',0,6,164,3,16,4,11
	.byte	'AE',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	1018
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	1018
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_EISR_Bits',0,6,174,3,3
	.word	46269
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,6,177,3,16,4,11
	.byte	'POL',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	1018
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	1018
	.byte	14,0,2,35,2,0,33
	.byte	'Ifx_SCU_EMSR_Bits',0,6,187,3,3
	.word	46445
	.byte	10
	.byte	'_Ifx_SCU_EMSSW_Bits',0,6,190,3,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	24,8,2,35,0,11
	.byte	'EMSFM',0,1
	.word	467
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	467
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	467
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_EMSSW_Bits',0,6,196,3,3
	.word	46639
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,6,199,3,16,4,11
	.byte	'reserved_0',0,1
	.word	467
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	1018
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	444
	.byte	23,0,2,35,0,0,33
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,6,204,3,3
	.word	46774
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,6,207,3,16,4,11
	.byte	'ARI',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	444
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_ESROCFG_Bits',0,6,212,3,3
	.word	46910
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,6,215,3,16,4,11
	.byte	'EN0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	467
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	1018
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	467
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	467
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	467
	.byte	8,0,2,35,3,0,33
	.byte	'Ifx_SCU_EXTCON_Bits',0,6,226,3,3
	.word	47021
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,6,229,3,16,4,11
	.byte	'STEP',0,2
	.word	1018
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	467
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	467
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	1018
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	467
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	467
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_FDR_Bits',0,6,237,3,3
	.word	47239
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,6,240,3,16,4,11
	.byte	'FS0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	467
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	467
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	467
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	467
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	467
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	467
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	467
	.byte	8,0,2,35,3,0,33
	.byte	'Ifx_SCU_FMR_Bits',0,6,132,4,3
	.word	47402
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,6,135,4,16,4,11
	.byte	'MODREV',0,1
	.word	467
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	467
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	1018
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_ID_Bits',0,6,140,4,3
	.word	47738
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,6,143,4,16,4,11
	.byte	'IPEN00',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	467
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	467
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	467
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	467
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	467
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	467
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	467
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	467
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	467
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	467
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	467
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_SCU_IGCR_Bits',0,6,167,4,3
	.word	47845
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,6,170,4,16,4,11
	.byte	'P0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	444
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_IN_Bits',0,6,175,4,3
	.word	48297
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,6,178,4,16,4,11
	.byte	'reserved_0',0,1
	.word	467
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	467
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	467
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	467
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1018
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_IOCR_Bits',0,6,185,4,3
	.word	48396
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,6,188,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'LBISTRES',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,4
	.word	444
	.byte	18,12,2,35,0,11
	.byte	'reserved_20',0,2
	.word	1018
	.byte	8,4,2,35,2,11
	.byte	'LBISTDONE',0,1
	.word	467
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	467
	.byte	1,2,2,35,3,11
	.byte	'LBISTERRINJ',0,1
	.word	467
	.byte	1,1,2,35,3,11
	.byte	'LBISTREQRED',0,1
	.word	467
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,6,198,4,3
	.word	48546
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,6,201,4,16,4,11
	.byte	'SEED',0,4
	.word	444
	.byte	19,13,2,35,0,11
	.byte	'reserved_19',0,1
	.word	467
	.byte	5,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	467
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	467
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	467
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,6,208,4,3
	.word	48784
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,6,211,4,16,4,11
	.byte	'LENGTH',0,2
	.word	1018
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	444
	.byte	20,0,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,6,215,4,3
	.word	48945
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL3_Bits',0,6,218,4,16,4,11
	.byte	'SIGNATURE',0,4
	.word	444
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL3_Bits',0,6,221,4,3
	.word	49051
	.byte	10
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,6,224,4,16,4,11
	.byte	'LS2',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	1018
	.byte	14,1,2,35,0,11
	.byte	'LSEN2',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'LS0',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	1018
	.byte	14,1,2,35,2,11
	.byte	'LSEN0',0,1
	.word	467
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_LCLCON0_Bits',0,6,232,4,3
	.word	49137
	.byte	10
	.byte	'_Ifx_SCU_LCLCON1_Bits',0,6,235,4,16,4,11
	.byte	'LS3',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	1018
	.byte	14,1,2,35,0,11
	.byte	'LSEN3',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'LS1',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	1018
	.byte	14,1,2,35,2,11
	.byte	'LSEN1',0,1
	.word	467
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_LCLCON1_Bits',0,6,243,4,3
	.word	49305
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,6,246,4,16,4,11
	.byte	'LCLT0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'LCLT2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'LCLT3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'LCLT4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'LCLT5',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	1018
	.byte	10,0,2,35,0,11
	.byte	'PLCLT0',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'PLCLT1',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'PLCLT2',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'PLCLT3',0,1
	.word	467
	.byte	1,4,2,35,2,11
	.byte	'PLCLT4',0,1
	.word	467
	.byte	1,3,2,35,2,11
	.byte	'PLCLT5',0,1
	.word	467
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	1018
	.byte	10,0,2,35,2,0,33
	.byte	'Ifx_SCU_LCLTEST_Bits',0,6,134,5,3
	.word	49473
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,6,137,5,16,4,11
	.byte	'DEPT',0,1
	.word	467
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	1018
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1018
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_MANID_Bits',0,6,142,5,3
	.word	49787
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,6,145,5,16,4,11
	.byte	'PS0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	1018
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	1018
	.byte	14,0,2,35,2,0,33
	.byte	'Ifx_SCU_OMR_Bits',0,6,153,5,3
	.word	49898
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,6,156,5,16,4,11
	.byte	'reserved_0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	467
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	467
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'HYSEN',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'HYSCTL',0,1
	.word	467
	.byte	2,4,2,35,1,11
	.byte	'AMPCTL',0,1
	.word	467
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	467
	.byte	2,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	467
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	467
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	467
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	467
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	467
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	467
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	467
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	467
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_OSCCON_Bits',0,6,177,5,3
	.word	50056
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,6,180,5,16,4,11
	.byte	'P0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	444
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_OUT_Bits',0,6,185,5,3
	.word	50467
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,6,188,5,16,4,11
	.byte	'CSEL0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'CSEL3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'CSEL4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'CSEL5',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	1018
	.byte	10,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	467
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	467
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	467
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	467
	.byte	6,0,2,35,3,0,33
	.byte	'Ifx_SCU_OVCCON_Bits',0,6,204,5,3
	.word	50568
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,6,207,5,16,4,11
	.byte	'OVEN0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'OVEN3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'OVEN4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'OVEN5',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	444
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,6,216,5,3
	.word	50886
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,6,219,5,16,4,11
	.byte	'PDIS0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	444
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_PDISC_Bits',0,6,224,5,3
	.word	51073
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,6,227,5,16,4,11
	.byte	'PD0',0,1
	.word	467
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	467
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	467
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	467
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	444
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_PDR_Bits',0,6,234,5,3
	.word	51184
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,6,237,5,16,4,11
	.byte	'PDR0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	444
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_PDRR_Bits',0,6,248,5,3
	.word	51317
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON0_Bits',0,6,251,5,16,4,11
	.byte	'DIVBY',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	1018
	.byte	8,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	467
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	467
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	467
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	467
	.byte	5,0,2,35,3,0,33
	.byte	'Ifx_SCU_PERPLLCON0_Bits',0,6,134,6,3
	.word	51520
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON1_Bits',0,6,137,6,16,4,11
	.byte	'K2DIV',0,1
	.word	467
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	467
	.byte	5,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	467
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	444
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLCON1_Bits',0,6,143,6,3
	.word	51760
	.byte	10
	.byte	'_Ifx_SCU_PERPLLSTAT_Bits',0,6,146,6,16,4,11
	.byte	'reserved_0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'K3RDY',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	444
	.byte	25,0,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLSTAT_Bits',0,6,156,6,3
	.word	51904
	.byte	10
	.byte	'_Ifx_SCU_PMCSR0_Bits',0,6,159,6,16,4,11
	.byte	'REQSLP',0,1
	.word	467
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	467
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	467
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	444
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR0_Bits',0,6,165,6,3
	.word	52126
	.byte	10
	.byte	'_Ifx_SCU_PMCSR1_Bits',0,6,168,6,16,4,11
	.byte	'REQSLP',0,1
	.word	467
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	467
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	467
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	444
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR1_Bits',0,6,174,6,3
	.word	52262
	.byte	10
	.byte	'_Ifx_SCU_PMCSR2_Bits',0,6,177,6,16,4,11
	.byte	'REQSLP',0,1
	.word	467
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	467
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	467
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	444
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR2_Bits',0,6,183,6,3
	.word	52398
	.byte	10
	.byte	'_Ifx_SCU_PMCSR3_Bits',0,6,186,6,16,4,11
	.byte	'REQSLP',0,1
	.word	467
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	467
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	467
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	444
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR3_Bits',0,6,192,6,3
	.word	52534
	.byte	10
	.byte	'_Ifx_SCU_PMCSR4_Bits',0,6,195,6,16,4,11
	.byte	'REQSLP',0,1
	.word	467
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	467
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	467
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	444
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR4_Bits',0,6,201,6,3
	.word	52670
	.byte	10
	.byte	'_Ifx_SCU_PMCSR5_Bits',0,6,204,6,16,4,11
	.byte	'REQSLP',0,1
	.word	467
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	467
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	467
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	444
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR5_Bits',0,6,210,6,3
	.word	52806
	.byte	10
	.byte	'_Ifx_SCU_PMSTAT0_Bits',0,6,213,6,16,4,11
	.byte	'CPU0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'CPU1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'CPU2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'CPU3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'CPU4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'CPU5',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	1018
	.byte	10,0,2,35,0,11
	.byte	'CPU0LS',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'CPU1LS',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'CPU2LS',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'CPU3LS',0,1
	.word	467
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	1018
	.byte	12,0,2,35,2,0,33
	.byte	'Ifx_SCU_PMSTAT0_Bits',0,6,227,6,3
	.word	52942
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,6,230,6,16,4,11
	.byte	'reserved_0',0,1
	.word	467
	.byte	8,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	467
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	467
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	444
	.byte	11,8,2,35,0,11
	.byte	'CPUSEL',0,1
	.word	467
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	467
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	467
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	467
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,6,241,6,3
	.word	53214
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR0_Bits',0,6,244,6,16,4,11
	.byte	'LJTEN',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'LJTOVEN',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'LJTOVIEN',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'LJTSTRT',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'LJTSTP',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'LJTCLR',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	1018
	.byte	6,4,2,35,0,11
	.byte	'SDSTEP',0,1
	.word	467
	.byte	4,0,2,35,1,11
	.byte	'VDTEN',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'VDTOVEN',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'VDTOVIEN',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'VDTSTRT',0,1
	.word	467
	.byte	1,4,2,35,2,11
	.byte	'VDTSTP',0,1
	.word	467
	.byte	1,3,2,35,2,11
	.byte	'VDTCLR',0,1
	.word	467
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	1018
	.byte	7,3,2,35,2,11
	.byte	'LPSLPEN',0,1
	.word	467
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	467
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMTRCSR0_Bits',0,6,135,7,3
	.word	53459
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR1_Bits',0,6,138,7,16,4,11
	.byte	'LJTCV',0,2
	.word	1018
	.byte	16,0,2,35,0,11
	.byte	'VDTCV',0,2
	.word	1018
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	467
	.byte	6,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMTRCSR1_Bits',0,6,143,7,3
	.word	53847
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR2_Bits',0,6,146,7,16,4,11
	.byte	'LDJMPREQ',0,1
	.word	467
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	467
	.byte	2,4,2,35,0,11
	.byte	'LJTRUN',0,1
	.word	467
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	467
	.byte	2,0,2,35,0,11
	.byte	'LJTOV',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	467
	.byte	3,4,2,35,1,11
	.byte	'LJTOVCLR',0,1
	.word	467
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	467
	.byte	3,0,2,35,1,11
	.byte	'LJTCNT',0,2
	.word	1018
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_PMTRCSR2_Bits',0,6,157,7,3
	.word	53965
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR3_Bits',0,6,160,7,16,4,11
	.byte	'VDROOPREQ',0,1
	.word	467
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	467
	.byte	2,4,2,35,0,11
	.byte	'VDTRUN',0,1
	.word	467
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	467
	.byte	2,0,2,35,0,11
	.byte	'VDTOV',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	467
	.byte	3,4,2,35,1,11
	.byte	'VDTOVCLR',0,1
	.word	467
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	467
	.byte	3,0,2,35,1,11
	.byte	'VDTCNT',0,2
	.word	1018
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	467
	.byte	6,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMTRCSR3_Bits',0,6,172,7,3
	.word	54208
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,6,175,7,16,4,11
	.byte	'ESR0',0,1
	.word	467
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	467
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	467
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	467
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	467
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	467
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	467
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	467
	.byte	2,0,2,35,1,11
	.byte	'STM3',0,1
	.word	467
	.byte	2,6,2,35,2,11
	.byte	'STM4',0,1
	.word	467
	.byte	2,4,2,35,2,11
	.byte	'STM5',0,1
	.word	467
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	1018
	.byte	10,0,2,35,2,0,33
	.byte	'Ifx_SCU_RSTCON_Bits',0,6,189,7,3
	.word	54475
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,6,192,7,16,4,11
	.byte	'FRTO',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'CSSX',0,2
	.word	1018
	.byte	6,3,2,35,0,11
	.byte	'reserved_13',0,1
	.word	467
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	467
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	1018
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_RSTCON2_Bits',0,6,206,7,3
	.word	54734
	.byte	10
	.byte	'_Ifx_SCU_RSTCON3_Bits',0,6,209,7,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_RSTCON3_Bits',0,6,212,7,3
	.word	55039
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,6,215,7,16,4,11
	.byte	'ESR0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'STM3',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'STM4',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'STM5',0,1
	.word	467
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	467
	.byte	5,0,2,35,1,11
	.byte	'PORST',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	467
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	467
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	467
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	467
	.byte	1,1,2,35,2,11
	.byte	'EVRC',0,1
	.word	467
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	467
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	467
	.byte	1,6,2,35,3,11
	.byte	'HSMS',0,1
	.word	467
	.byte	1,5,2,35,3,11
	.byte	'HSMA',0,1
	.word	467
	.byte	1,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	467
	.byte	1,3,2,35,3,11
	.byte	'LBPORST',0,1
	.word	467
	.byte	1,2,2,35,3,11
	.byte	'LBTERM',0,1
	.word	467
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	467
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,6,245,7,3
	.word	55120
	.byte	10
	.byte	'_Ifx_SCU_SEICON0_Bits',0,6,248,7,16,4,11
	.byte	'reserved_0',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	866
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	866
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_SCU_SEICON0_Bits',0,6,254,7,3
	.word	55669
	.byte	10
	.byte	'_Ifx_SCU_SEICON1_Bits',0,6,129,8,16,4,11
	.byte	'reserved_0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	444
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_SEICON1_Bits',0,6,138,8,3
	.word	55799
	.byte	10
	.byte	'_Ifx_SCU_SEISR_Bits',0,6,141,8,16,4,11
	.byte	'AE',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	1018
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	1018
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SEISR_Bits',0,6,151,8,3
	.word	55990
	.byte	10
	.byte	'_Ifx_SCU_STCON_Bits',0,6,154,8,16,4,11
	.byte	'reserved_0',0,2
	.word	1018
	.byte	13,3,2,35,0,11
	.byte	'SFCBAE',0,1
	.word	467
	.byte	1,2,2,35,1,11
	.byte	'CFCBAE',0,1
	.word	467
	.byte	1,1,2,35,1,11
	.byte	'STP',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1018
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_STCON_Bits',0,6,161,8,3
	.word	56168
	.byte	10
	.byte	'_Ifx_SCU_STMEM1_Bits',0,6,164,8,16,4,11
	.byte	'MEM',0,4
	.word	444
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM1_Bits',0,6,167,8,3
	.word	56319
	.byte	10
	.byte	'_Ifx_SCU_STMEM2_Bits',0,6,170,8,16,4,11
	.byte	'MEM',0,4
	.word	444
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM2_Bits',0,6,173,8,3
	.word	56391
	.byte	10
	.byte	'_Ifx_SCU_STMEM3_Bits',0,6,176,8,16,4,11
	.byte	'MEM',0,4
	.word	444
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM3_Bits',0,6,179,8,3
	.word	56463
	.byte	10
	.byte	'_Ifx_SCU_STMEM4_Bits',0,6,182,8,16,4,11
	.byte	'MEM',0,4
	.word	444
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM4_Bits',0,6,185,8,3
	.word	56535
	.byte	10
	.byte	'_Ifx_SCU_STMEM5_Bits',0,6,188,8,16,4,11
	.byte	'MEM',0,4
	.word	444
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM5_Bits',0,6,191,8,3
	.word	56607
	.byte	10
	.byte	'_Ifx_SCU_STMEM6_Bits',0,6,194,8,16,4,11
	.byte	'MEM',0,4
	.word	444
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM6_Bits',0,6,197,8,3
	.word	56679
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,6,200,8,16,4,11
	.byte	'HWCFG',0,1
	.word	467
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	467
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	467
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	467
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	467
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	467
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	467
	.byte	1,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	467
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	467
	.byte	3,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	467
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_STSTAT_Bits',0,6,216,8,3
	.word	56751
	.byte	10
	.byte	'_Ifx_SCU_SWAPCTRL_Bits',0,6,219,8,16,4,11
	.byte	'ADDRCFG',0,1
	.word	467
	.byte	2,6,2,35,0,11
	.byte	'SPARE',0,2
	.word	1018
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1018
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SWAPCTRL_Bits',0,6,224,8,3
	.word	57080
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,6,227,8,16,4,11
	.byte	'reserved_0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	467
	.byte	6,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	467
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1018
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,6,234,8,3
	.word	57200
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,6,237,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	467
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'DDC',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	467
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1018
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SYSCON_Bits',0,6,249,8,3
	.word	57370
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON0_Bits',0,6,252,8,16,4,11
	.byte	'reserved_0',0,1
	.word	467
	.byte	2,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	1018
	.byte	6,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	467
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	467
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	467
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	467
	.byte	3,2,2,35,3,11
	.byte	'INSEL',0,1
	.word	467
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_SCU_SYSPLLCON0_Bits',0,6,137,9,3
	.word	57633
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON1_Bits',0,6,140,9,16,4,11
	.byte	'K2DIV',0,1
	.word	467
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	444
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLCON1_Bits',0,6,144,9,3
	.word	57912
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON2_Bits',0,6,147,9,16,4,11
	.byte	'MODCFG',0,2
	.word	1018
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1018
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_SYSPLLCON2_Bits',0,6,151,9,3
	.word	58016
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLSTAT_Bits',0,6,154,9,16,4,11
	.byte	'reserved_0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	467
	.byte	2,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	444
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLSTAT_Bits',0,6,164,9,3
	.word	58122
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,6,167,9,16,4,11
	.byte	'ESR0T',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	444
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,6,174,9,3
	.word	58345
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS0_Bits',0,6,177,9,16,4,11
	.byte	'CPU0ESR0T',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'CPU0ESR1T',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'CPU0TRAP2T',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'CPU0SMUT',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	467
	.byte	4,0,2,35,0,11
	.byte	'CPU1ESR0T',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'CPU1ESR1T',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'CPU1TRAP2T',0,1
	.word	467
	.byte	1,5,2,35,1,11
	.byte	'CPU1SMUT',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	467
	.byte	4,0,2,35,1,11
	.byte	'CPU2ESR0T',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'CPU2ESR1T',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'CPU2TRAP2T',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'CPU2SMUT',0,1
	.word	467
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	467
	.byte	4,0,2,35,2,11
	.byte	'CPU3ESR0T',0,1
	.word	467
	.byte	1,7,2,35,3,11
	.byte	'CPU3ESR1T',0,1
	.word	467
	.byte	1,6,2,35,3,11
	.byte	'CPU3TRAP2T',0,1
	.word	467
	.byte	1,5,2,35,3,11
	.byte	'CPU3SMUT',0,1
	.word	467
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	467
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_TRAPDIS0_Bits',0,6,199,9,3
	.word	58493
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS1_Bits',0,6,202,9,16,4,11
	.byte	'CPU4ESR0T',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'CPU4ESR1T',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'CPU4TRAP2T',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'CPU4SMUT',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	467
	.byte	4,0,2,35,0,11
	.byte	'CPU5ESR0T',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'CPU5ESR1T',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'CPU5TRAP2T',0,1
	.word	467
	.byte	1,5,2,35,1,11
	.byte	'CPU5SMUT',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	467
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1018
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_TRAPDIS1_Bits',0,6,215,9,3
	.word	58981
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,6,218,9,16,4,11
	.byte	'ESR0T',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	444
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSET_Bits',0,6,225,9,3
	.word	59278
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,6,228,9,16,4,11
	.byte	'ESR0T',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	444
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,6,235,9,3
	.word	59426
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,6,244,9,3
	.word	882
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,6,132,10,3
	.word	1040
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,6,148,10,3
	.word	1306
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,6,151,10,16,4,11
	.byte	'ENDINIT',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	866
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	866
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,6,157,10,3
	.word	59676
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,6,160,10,16,4,11
	.byte	'CLRIRF',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	467
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1018
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,6,173,10,3
	.word	59802
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,6,176,10,16,4,11
	.byte	'AE',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	467
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	1018
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,6,189,10,3
	.word	60054
	.byte	12,6,197,10,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40710
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN00',0,6,202,10,3
	.word	60273
	.byte	12,6,205,10,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41269
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN01',0,6,210,10,3
	.word	60338
	.byte	12,6,213,10,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41348
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN10',0,6,218,10,3
	.word	60403
	.byte	12,6,221,10,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41908
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN11',0,6,226,10,3
	.word	60468
	.byte	12,6,229,10,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41989
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ARSTDIS',0,6,234,10,3
	.word	60533
	.byte	12,6,237,10,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42206
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON0',0,6,242,10,3
	.word	60598
	.byte	12,6,245,10,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42479
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON1',0,6,250,10,3
	.word	60663
	.byte	12,6,253,10,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42805
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON10',0,6,130,11,3
	.word	60728
	.byte	12,6,133,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42907
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON11',0,6,138,11,3
	.word	60794
	.byte	12,6,141,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43009
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON2',0,6,146,11,3
	.word	60860
	.byte	12,6,149,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43283
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON3',0,6,154,11,3
	.word	60925
	.byte	12,6,157,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43652
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON4',0,6,162,11,3
	.word	60990
	.byte	12,6,165,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43832
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON5',0,6,170,11,3
	.word	61055
	.byte	12,6,173,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44001
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON6',0,6,178,11,3
	.word	61120
	.byte	12,6,181,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44101
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON7',0,6,186,11,3
	.word	61185
	.byte	12,6,189,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44201
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON8',0,6,194,11,3
	.word	61250
	.byte	12,6,197,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44301
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON9',0,6,202,11,3
	.word	61315
	.byte	12,6,205,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44401
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CHIPID',0,6,210,11,3
	.word	61380
	.byte	12,6,213,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44604
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_DTSCLIM',0,6,218,11,3
	.word	61444
	.byte	12,6,221,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44836
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_DTSCSTAT',0,6,226,11,3
	.word	61509
	.byte	12,6,229,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44938
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EICON0',0,6,234,11,3
	.word	61575
	.byte	12,6,237,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45066
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EICON1',0,6,242,11,3
	.word	61639
	.byte	12,6,245,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45255
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EICR',0,6,250,11,3
	.word	61703
	.byte	12,6,253,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45619
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EIFILT',0,6,130,12,3
	.word	61765
	.byte	12,6,133,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46058
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EIFR',0,6,138,12,3
	.word	61829
	.byte	12,6,141,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46269
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EISR',0,6,146,12,3
	.word	61891
	.byte	12,6,149,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46445
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EMSR',0,6,154,12,3
	.word	61953
	.byte	12,6,157,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46639
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EMSSW',0,6,162,12,3
	.word	62015
	.byte	12,6,165,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46774
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX',0,6,170,12,3
	.word	62078
	.byte	12,6,173,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46910
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ESROCFG',0,6,178,12,3
	.word	62151
	.byte	12,6,181,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47021
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EXTCON',0,6,186,12,3
	.word	62216
	.byte	12,6,189,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47239
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_FDR',0,6,194,12,3
	.word	62280
	.byte	12,6,197,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47402
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_FMR',0,6,202,12,3
	.word	62341
	.byte	12,6,205,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47738
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ID',0,6,210,12,3
	.word	62402
	.byte	12,6,213,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47845
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_IGCR',0,6,218,12,3
	.word	62462
	.byte	12,6,221,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48297
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_IN',0,6,226,12,3
	.word	62524
	.byte	12,6,229,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48396
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_IOCR',0,6,234,12,3
	.word	62584
	.byte	12,6,237,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48546
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL0',0,6,242,12,3
	.word	62646
	.byte	12,6,245,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48784
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL1',0,6,250,12,3
	.word	62714
	.byte	12,6,253,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48945
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL2',0,6,130,13,3
	.word	62782
	.byte	12,6,133,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49051
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL3',0,6,138,13,3
	.word	62850
	.byte	12,6,141,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49137
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LCLCON0',0,6,146,13,3
	.word	62918
	.byte	12,6,149,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49305
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LCLCON1',0,6,154,13,3
	.word	62983
	.byte	12,6,157,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49473
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LCLTEST',0,6,162,13,3
	.word	63048
	.byte	12,6,165,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49787
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_MANID',0,6,170,13,3
	.word	63113
	.byte	12,6,173,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49898
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OMR',0,6,178,13,3
	.word	63176
	.byte	12,6,181,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50056
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OSCCON',0,6,186,13,3
	.word	63237
	.byte	12,6,189,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50467
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OUT',0,6,194,13,3
	.word	63301
	.byte	12,6,197,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50568
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OVCCON',0,6,202,13,3
	.word	63362
	.byte	12,6,205,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50886
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OVCENABLE',0,6,210,13,3
	.word	63426
	.byte	12,6,213,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51073
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PDISC',0,6,218,13,3
	.word	63493
	.byte	12,6,221,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51184
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PDR',0,6,226,13,3
	.word	63556
	.byte	12,6,229,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51317
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PDRR',0,6,234,13,3
	.word	63617
	.byte	12,6,237,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51520
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLCON0',0,6,242,13,3
	.word	63679
	.byte	12,6,245,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51760
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLCON1',0,6,250,13,3
	.word	63747
	.byte	12,6,253,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51904
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PERPLLSTAT',0,6,130,14,3
	.word	63815
	.byte	12,6,133,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52126
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR0',0,6,138,14,3
	.word	63883
	.byte	12,6,141,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52262
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR1',0,6,146,14,3
	.word	63947
	.byte	12,6,149,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52398
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR2',0,6,154,14,3
	.word	64011
	.byte	12,6,157,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52534
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR3',0,6,162,14,3
	.word	64075
	.byte	12,6,165,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52670
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR4',0,6,170,14,3
	.word	64139
	.byte	12,6,173,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52806
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR5',0,6,178,14,3
	.word	64203
	.byte	12,6,181,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52942
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMSTAT0',0,6,186,14,3
	.word	64267
	.byte	12,6,189,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53214
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMSWCR1',0,6,194,14,3
	.word	64332
	.byte	12,6,197,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53459
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMTRCSR0',0,6,202,14,3
	.word	64397
	.byte	12,6,205,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53847
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMTRCSR1',0,6,210,14,3
	.word	64463
	.byte	12,6,213,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53965
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMTRCSR2',0,6,218,14,3
	.word	64529
	.byte	12,6,221,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54208
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMTRCSR3',0,6,226,14,3
	.word	64595
	.byte	12,6,229,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54475
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTCON',0,6,234,14,3
	.word	64661
	.byte	12,6,237,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54734
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTCON2',0,6,242,14,3
	.word	64725
	.byte	12,6,245,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55039
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTCON3',0,6,250,14,3
	.word	64790
	.byte	12,6,253,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55120
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTSTAT',0,6,130,15,3
	.word	64855
	.byte	12,6,133,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55669
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SEICON0',0,6,138,15,3
	.word	64920
	.byte	12,6,141,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55799
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SEICON1',0,6,146,15,3
	.word	64985
	.byte	12,6,149,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55990
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SEISR',0,6,154,15,3
	.word	65050
	.byte	12,6,157,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56168
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STCON',0,6,162,15,3
	.word	65113
	.byte	12,6,165,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56319
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM1',0,6,170,15,3
	.word	65176
	.byte	12,6,173,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56391
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM2',0,6,178,15,3
	.word	65240
	.byte	12,6,181,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56463
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM3',0,6,186,15,3
	.word	65304
	.byte	12,6,189,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56535
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM4',0,6,194,15,3
	.word	65368
	.byte	12,6,197,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56607
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM5',0,6,202,15,3
	.word	65432
	.byte	12,6,205,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56679
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STMEM6',0,6,210,15,3
	.word	65496
	.byte	12,6,213,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56751
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STSTAT',0,6,218,15,3
	.word	65560
	.byte	12,6,221,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57080
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SWAPCTRL',0,6,226,15,3
	.word	65624
	.byte	12,6,229,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57200
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SWRSTCON',0,6,234,15,3
	.word	65690
	.byte	12,6,237,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57370
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSCON',0,6,242,15,3
	.word	65756
	.byte	12,6,245,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57633
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLCON0',0,6,250,15,3
	.word	65820
	.byte	12,6,253,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57912
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLCON1',0,6,130,16,3
	.word	65888
	.byte	12,6,133,16,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58016
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLCON2',0,6,138,16,3
	.word	65956
	.byte	12,6,141,16,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58122
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSPLLSTAT',0,6,146,16,3
	.word	66024
	.byte	12,6,149,16,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58345
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPCLR',0,6,154,16,3
	.word	66092
	.byte	12,6,157,16,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58493
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPDIS0',0,6,162,16,3
	.word	66157
	.byte	12,6,165,16,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58981
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPDIS1',0,6,170,16,3
	.word	66223
	.byte	12,6,173,16,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59278
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSET',0,6,178,16,3
	.word	66289
	.byte	12,6,181,16,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59426
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSTAT',0,6,186,16,3
	.word	66354
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_CON0',0,6,194,16,3
	.word	978
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_CON1',0,6,202,16,3
	.word	1266
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_SR',0,6,210,16,3
	.word	1497
	.byte	12,6,213,16,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59676
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_CON0',0,6,218,16,3
	.word	66505
	.byte	12,6,221,16,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59802
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_CON1',0,6,226,16,3
	.word	66572
	.byte	12,6,229,16,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60054
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_SR',0,6,234,16,3
	.word	66639
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX',0,6,246,16,25,4,13
	.byte	'ESRCFGX',0
	.word	62078
	.byte	4,2,35,0,0,14
	.word	66704
	.byte	33
	.byte	'Ifx_SCU_ESRCFGX',0,6,249,16,3
	.word	66745
	.byte	14
	.word	1537
	.byte	33
	.byte	'Ifx_SCU_WDTCPU',0,6,141,17,3
	.word	66775
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,6,156,17,25,12,13
	.byte	'CON0',0
	.word	66505
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	66572
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	66639
	.byte	4,2,35,8,0,14
	.word	66804
	.byte	33
	.byte	'Ifx_SCU_WDTS',0,6,161,17,3
	.word	66865
	.byte	18,8
	.word	66704
	.byte	19,1,0,14
	.word	66892
	.byte	18,16
	.word	467
	.byte	19,15,0,18,20
	.word	467
	.byte	19,19,0,18,36
	.word	467
	.byte	19,35,0,18,16
	.word	61703
	.byte	19,3,0,18,16
	.word	62462
	.byte	19,3,0,18,72
	.word	1537
	.byte	19,5,0,14
	.word	66951
	.byte	14
	.word	66804
	.byte	18,176,2
	.word	467
	.byte	19,175,2,0,10
	.byte	'_Ifx_SCU',0,6,176,17,25,128,8,13
	.byte	'reserved_0',0
	.word	5320
	.byte	8,2,35,0,13
	.byte	'ID',0
	.word	62402
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3500
	.byte	4,2,35,12,13
	.byte	'OSCCON',0
	.word	63237
	.byte	4,2,35,16,13
	.byte	'SYSPLLSTAT',0
	.word	66024
	.byte	4,2,35,20,13
	.byte	'SYSPLLCON0',0
	.word	65820
	.byte	4,2,35,24,13
	.byte	'SYSPLLCON1',0
	.word	65888
	.byte	4,2,35,28,13
	.byte	'SYSPLLCON2',0
	.word	65956
	.byte	4,2,35,32,13
	.byte	'PERPLLSTAT',0
	.word	63815
	.byte	4,2,35,36,13
	.byte	'PERPLLCON0',0
	.word	63679
	.byte	4,2,35,40,13
	.byte	'PERPLLCON1',0
	.word	63747
	.byte	4,2,35,44,13
	.byte	'CCUCON0',0
	.word	60598
	.byte	4,2,35,48,13
	.byte	'CCUCON1',0
	.word	60663
	.byte	4,2,35,52,13
	.byte	'FDR',0
	.word	62280
	.byte	4,2,35,56,13
	.byte	'EXTCON',0
	.word	62216
	.byte	4,2,35,60,13
	.byte	'CCUCON2',0
	.word	60860
	.byte	4,2,35,64,13
	.byte	'CCUCON3',0
	.word	60925
	.byte	4,2,35,68,13
	.byte	'CCUCON4',0
	.word	60990
	.byte	4,2,35,72,13
	.byte	'CCUCON5',0
	.word	61055
	.byte	4,2,35,76,13
	.byte	'RSTSTAT',0
	.word	64855
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	3500
	.byte	4,2,35,84,13
	.byte	'RSTCON',0
	.word	64661
	.byte	4,2,35,88,13
	.byte	'ARSTDIS',0
	.word	60533
	.byte	4,2,35,92,13
	.byte	'SWRSTCON',0
	.word	65690
	.byte	4,2,35,96,13
	.byte	'RSTCON2',0
	.word	64725
	.byte	4,2,35,100,13
	.byte	'RSTCON3',0
	.word	64790
	.byte	4,2,35,104,13
	.byte	'reserved_6C',0
	.word	3500
	.byte	4,2,35,108,13
	.byte	'ESRCFGX',0
	.word	66901
	.byte	8,2,35,112,13
	.byte	'ESROCFG',0
	.word	62151
	.byte	4,2,35,120,13
	.byte	'SYSCON',0
	.word	65756
	.byte	4,2,35,124,13
	.byte	'CCUCON6',0
	.word	61120
	.byte	4,3,35,128,1,13
	.byte	'CCUCON7',0
	.word	61185
	.byte	4,3,35,132,1,13
	.byte	'CCUCON8',0
	.word	61250
	.byte	4,3,35,136,1,13
	.byte	'CCUCON9',0
	.word	61315
	.byte	4,3,35,140,1,13
	.byte	'CCUCON10',0
	.word	60728
	.byte	4,3,35,144,1,13
	.byte	'CCUCON11',0
	.word	60794
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	3500
	.byte	4,3,35,152,1,13
	.byte	'PDR',0
	.word	63556
	.byte	4,3,35,156,1,13
	.byte	'IOCR',0
	.word	62584
	.byte	4,3,35,160,1,13
	.byte	'OUT',0
	.word	63301
	.byte	4,3,35,164,1,13
	.byte	'OMR',0
	.word	63176
	.byte	4,3,35,168,1,13
	.byte	'IN',0
	.word	62524
	.byte	4,3,35,172,1,13
	.byte	'reserved_B0',0
	.word	66906
	.byte	16,3,35,176,1,13
	.byte	'STSTAT',0
	.word	65560
	.byte	4,3,35,192,1,13
	.byte	'STCON',0
	.word	65113
	.byte	4,3,35,196,1,13
	.byte	'PMCSR0',0
	.word	63883
	.byte	4,3,35,200,1,13
	.byte	'PMCSR1',0
	.word	63947
	.byte	4,3,35,204,1,13
	.byte	'PMCSR2',0
	.word	64011
	.byte	4,3,35,208,1,13
	.byte	'PMCSR3',0
	.word	64075
	.byte	4,3,35,212,1,13
	.byte	'PMCSR4',0
	.word	64139
	.byte	4,3,35,216,1,13
	.byte	'PMCSR5',0
	.word	64203
	.byte	4,3,35,220,1,13
	.byte	'reserved_E0',0
	.word	3500
	.byte	4,3,35,224,1,13
	.byte	'PMSTAT0',0
	.word	64267
	.byte	4,3,35,228,1,13
	.byte	'PMSWCR1',0
	.word	64332
	.byte	4,3,35,232,1,13
	.byte	'reserved_EC',0
	.word	66906
	.byte	16,3,35,236,1,13
	.byte	'EMSR',0
	.word	61953
	.byte	4,3,35,252,1,13
	.byte	'EMSSW',0
	.word	62015
	.byte	4,3,35,128,2,13
	.byte	'DTSCSTAT',0
	.word	61509
	.byte	4,3,35,132,2,13
	.byte	'DTSCLIM',0
	.word	61444
	.byte	4,3,35,136,2,13
	.byte	'reserved_10C',0
	.word	66915
	.byte	20,3,35,140,2,13
	.byte	'TRAPDIS1',0
	.word	66223
	.byte	4,3,35,160,2,13
	.byte	'TRAPSTAT',0
	.word	66354
	.byte	4,3,35,164,2,13
	.byte	'TRAPSET',0
	.word	66289
	.byte	4,3,35,168,2,13
	.byte	'TRAPCLR',0
	.word	66092
	.byte	4,3,35,172,2,13
	.byte	'TRAPDIS0',0
	.word	66157
	.byte	4,3,35,176,2,13
	.byte	'LCLCON0',0
	.word	62918
	.byte	4,3,35,180,2,13
	.byte	'LCLCON1',0
	.word	62983
	.byte	4,3,35,184,2,13
	.byte	'LCLTEST',0
	.word	63048
	.byte	4,3,35,188,2,13
	.byte	'CHIPID',0
	.word	61380
	.byte	4,3,35,192,2,13
	.byte	'MANID',0
	.word	63113
	.byte	4,3,35,196,2,13
	.byte	'reserved_148',0
	.word	3500
	.byte	4,3,35,200,2,13
	.byte	'SWAPCTRL',0
	.word	65624
	.byte	4,3,35,204,2,13
	.byte	'reserved_150',0
	.word	66915
	.byte	20,3,35,208,2,13
	.byte	'LBISTCTRL0',0
	.word	62646
	.byte	4,3,35,228,2,13
	.byte	'LBISTCTRL1',0
	.word	62714
	.byte	4,3,35,232,2,13
	.byte	'LBISTCTRL2',0
	.word	62782
	.byte	4,3,35,236,2,13
	.byte	'LBISTCTRL3',0
	.word	62850
	.byte	4,3,35,240,2,13
	.byte	'reserved_174',0
	.word	66906
	.byte	16,3,35,244,2,13
	.byte	'STMEM1',0
	.word	65176
	.byte	4,3,35,132,3,13
	.byte	'STMEM2',0
	.word	65240
	.byte	4,3,35,136,3,13
	.byte	'PDISC',0
	.word	63493
	.byte	4,3,35,140,3,13
	.byte	'reserved_190',0
	.word	5320
	.byte	8,3,35,144,3,13
	.byte	'PMTRCSR0',0
	.word	64397
	.byte	4,3,35,152,3,13
	.byte	'PMTRCSR1',0
	.word	64463
	.byte	4,3,35,156,3,13
	.byte	'PMTRCSR2',0
	.word	64529
	.byte	4,3,35,160,3,13
	.byte	'PMTRCSR3',0
	.word	64595
	.byte	4,3,35,164,3,13
	.byte	'reserved_1A8',0
	.word	4691
	.byte	24,3,35,168,3,13
	.byte	'STMEM3',0
	.word	65304
	.byte	4,3,35,192,3,13
	.byte	'STMEM4',0
	.word	65368
	.byte	4,3,35,196,3,13
	.byte	'STMEM5',0
	.word	65432
	.byte	4,3,35,200,3,13
	.byte	'STMEM6',0
	.word	65496
	.byte	4,3,35,204,3,13
	.byte	'reserved_1D0',0
	.word	66906
	.byte	16,3,35,208,3,13
	.byte	'OVCENABLE',0
	.word	63426
	.byte	4,3,35,224,3,13
	.byte	'OVCCON',0
	.word	63362
	.byte	4,3,35,228,3,13
	.byte	'reserved_1E8',0
	.word	66924
	.byte	36,3,35,232,3,13
	.byte	'EIFILT',0
	.word	61765
	.byte	4,3,35,140,4,13
	.byte	'EICR',0
	.word	66933
	.byte	16,3,35,144,4,13
	.byte	'EIFR',0
	.word	61829
	.byte	4,3,35,160,4,13
	.byte	'FMR',0
	.word	62341
	.byte	4,3,35,164,4,13
	.byte	'PDRR',0
	.word	63617
	.byte	4,3,35,168,4,13
	.byte	'IGCR',0
	.word	66942
	.byte	16,3,35,172,4,13
	.byte	'reserved_23C',0
	.word	66906
	.byte	16,3,35,188,4,13
	.byte	'WDTCPU',0
	.word	66960
	.byte	72,3,35,204,4,13
	.byte	'reserved_294',0
	.word	5320
	.byte	8,3,35,148,5,13
	.byte	'EICON0',0
	.word	61575
	.byte	4,3,35,156,5,13
	.byte	'EICON1',0
	.word	61639
	.byte	4,3,35,160,5,13
	.byte	'EISR',0
	.word	61891
	.byte	4,3,35,164,5,13
	.byte	'WDTS',0
	.word	66965
	.byte	12,3,35,168,5,13
	.byte	'SEICON0',0
	.word	64920
	.byte	4,3,35,180,5,13
	.byte	'SEICON1',0
	.word	64985
	.byte	4,3,35,184,5,13
	.byte	'SEISR',0
	.word	65050
	.byte	4,3,35,188,5,13
	.byte	'reserved_2C0',0
	.word	66970
	.byte	176,2,3,35,192,5,13
	.byte	'ACCEN11',0
	.word	60468
	.byte	4,3,35,240,7,13
	.byte	'ACCEN10',0
	.word	60403
	.byte	4,3,35,244,7,13
	.byte	'ACCEN01',0
	.word	60338
	.byte	4,3,35,248,7,13
	.byte	'ACCEN00',0
	.word	60273
	.byte	4,3,35,252,7,0,14
	.word	66981
	.byte	33
	.byte	'Ifx_SCU',0,6,166,18,3
	.word	69102
	.byte	10
	.byte	'_Ifx_CPU_A_Bits',0,23,68,16,4,11
	.byte	'ADDR',0,4
	.word	866
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_A_Bits',0,23,71,3
	.word	69124
	.byte	10
	.byte	'_Ifx_CPU_BIV_Bits',0,23,74,16,4,11
	.byte	'VSS',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'BIV',0,4
	.word	866
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_BIV_Bits',0,23,78,3
	.word	69185
	.byte	10
	.byte	'_Ifx_CPU_BLK_OMASK_Bits',0,23,81,16,4,11
	.byte	'reserved_0',0,4
	.word	866
	.byte	5,27,2,35,0,11
	.byte	'OMASK',0,4
	.word	866
	.byte	12,15,2,35,0,11
	.byte	'ONE',0,4
	.word	866
	.byte	11,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	866
	.byte	4,0,2,35,0,0,33
	.byte	'Ifx_CPU_BLK_OMASK_Bits',0,23,87,3
	.word	69264
	.byte	10
	.byte	'_Ifx_CPU_BLK_OTAR_Bits',0,23,90,16,4,11
	.byte	'reserved_0',0,4
	.word	866
	.byte	5,27,2,35,0,11
	.byte	'TBASE',0,4
	.word	866
	.byte	23,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	866
	.byte	4,0,2,35,0,0,33
	.byte	'Ifx_CPU_BLK_OTAR_Bits',0,23,95,3
	.word	69402
	.byte	10
	.byte	'_Ifx_CPU_BLK_RABR_Bits',0,23,98,16,4,11
	.byte	'reserved_0',0,4
	.word	866
	.byte	5,27,2,35,0,11
	.byte	'OBASE',0,4
	.word	866
	.byte	17,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	866
	.byte	2,8,2,35,0,11
	.byte	'OMEM',0,4
	.word	866
	.byte	4,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	866
	.byte	3,1,2,35,0,11
	.byte	'OVEN',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_BLK_RABR_Bits',0,23,106,3
	.word	69523
	.byte	10
	.byte	'_Ifx_CPU_BTV_Bits',0,23,109,16,4,11
	.byte	'reserved_0',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'BTV',0,4
	.word	866
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_BTV_Bits',0,23,113,3
	.word	69699
	.byte	10
	.byte	'_Ifx_CPU_CCNT_Bits',0,23,116,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	866
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_CCNT_Bits',0,23,120,3
	.word	69785
	.byte	10
	.byte	'_Ifx_CPU_CCTRL_Bits',0,23,123,16,4,11
	.byte	'CM',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'CE',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'M1',0,4
	.word	866
	.byte	3,27,2,35,0,11
	.byte	'M2',0,4
	.word	866
	.byte	3,24,2,35,0,11
	.byte	'M3',0,4
	.word	866
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	866
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_CPU_CCTRL_Bits',0,23,131,1,3
	.word	69874
	.byte	10
	.byte	'_Ifx_CPU_COMPAT_Bits',0,23,134,1,16,4,11
	.byte	'reserved_0',0,4
	.word	866
	.byte	3,29,2,35,0,11
	.byte	'RM',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'SP',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	866
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_COMPAT_Bits',0,23,140,1,3
	.word	70021
	.byte	10
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,23,143,1,16,4,11
	.byte	'CORE_ID',0,4
	.word	866
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	866
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_CPU_CORE_ID_Bits',0,23,147,1,3
	.word	70150
	.byte	10
	.byte	'_Ifx_CPU_CPR_L_Bits',0,23,150,1,16,4,11
	.byte	'reserved_0',0,4
	.word	866
	.byte	5,27,2,35,0,11
	.byte	'LOWBND',0,4
	.word	866
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_CPR_L_Bits',0,23,154,1,3
	.word	70250
	.byte	10
	.byte	'_Ifx_CPU_CPR_U_Bits',0,23,157,1,16,4,11
	.byte	'reserved_0',0,4
	.word	866
	.byte	5,27,2,35,0,11
	.byte	'UPPBND',0,4
	.word	866
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_CPR_U_Bits',0,23,161,1,3
	.word	70345
	.byte	10
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,23,164,1,16,4,11
	.byte	'MOD_REV',0,4
	.word	866
	.byte	8,24,2,35,0,11
	.byte	'MOD_32B',0,4
	.word	866
	.byte	8,16,2,35,0,11
	.byte	'MOD',0,4
	.word	866
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_CPU_ID_Bits',0,23,169,1,3
	.word	70440
	.byte	10
	.byte	'_Ifx_CPU_CPXE_Bits',0,23,172,1,16,4,11
	.byte	'XE_N',0,4
	.word	866
	.byte	10,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	866
	.byte	22,0,2,35,0,0,33
	.byte	'Ifx_CPU_CPXE_Bits',0,23,176,1,3
	.word	70550
	.byte	10
	.byte	'_Ifx_CPU_CREVT_Bits',0,23,179,1,16,4,11
	.byte	'EVTA',0,4
	.word	866
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	866
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	866
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_CPU_CREVT_Bits',0,23,187,1,3
	.word	70642
	.byte	10
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,23,190,1,16,4,11
	.byte	'CID',0,4
	.word	866
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	866
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_CPU_CUS_ID_Bits',0,23,194,1,3
	.word	70796
	.byte	10
	.byte	'_Ifx_CPU_D_Bits',0,23,197,1,16,4,11
	.byte	'DATA',0,4
	.word	866
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_D_Bits',0,23,200,1,3
	.word	70890
	.byte	10
	.byte	'_Ifx_CPU_DATR_Bits',0,23,203,1,16,4,11
	.byte	'reserved_0',0,4
	.word	866
	.byte	3,29,2,35,0,11
	.byte	'SBE',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	866
	.byte	5,23,2,35,0,11
	.byte	'CWE',0,4
	.word	866
	.byte	1,22,2,35,0,11
	.byte	'CFE',0,4
	.word	866
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	866
	.byte	3,18,2,35,0,11
	.byte	'SOE',0,4
	.word	866
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	866
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	866
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_DATR_Bits',0,23,214,1,3
	.word	70953
	.byte	10
	.byte	'_Ifx_CPU_DBGSR_Bits',0,23,217,1,16,4,11
	.byte	'DE',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'HALT',0,4
	.word	866
	.byte	2,29,2,35,0,11
	.byte	'SIH',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'SUSP',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'PREVSUSP',0,4
	.word	866
	.byte	1,25,2,35,0,11
	.byte	'PEVT',0,4
	.word	866
	.byte	1,24,2,35,0,11
	.byte	'EVTSRC',0,4
	.word	866
	.byte	5,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	866
	.byte	19,0,2,35,0,0,33
	.byte	'Ifx_CPU_DBGSR_Bits',0,23,228,1,3
	.word	71179
	.byte	10
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,23,231,1,16,4,11
	.byte	'DTA',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	866
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_DBGTCR_Bits',0,23,235,1,3
	.word	71394
	.byte	10
	.byte	'_Ifx_CPU_DCON0_Bits',0,23,238,1,16,4,11
	.byte	'reserved_0',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'DCBYP',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	866
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_CPU_DCON0_Bits',0,23,243,1,3
	.word	71488
	.byte	10
	.byte	'_Ifx_CPU_DCON2_Bits',0,23,246,1,16,4,11
	.byte	'DCACHE_SZE',0,4
	.word	866
	.byte	16,16,2,35,0,11
	.byte	'DSCRATCH_SZE',0,4
	.word	866
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_DCON2_Bits',0,23,250,1,3
	.word	71604
	.byte	10
	.byte	'_Ifx_CPU_DCX_Bits',0,23,253,1,16,4,11
	.byte	'reserved_0',0,4
	.word	866
	.byte	6,26,2,35,0,11
	.byte	'DCXVALUE',0,4
	.word	866
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_CPU_DCX_Bits',0,23,129,2,3
	.word	71705
	.byte	10
	.byte	'_Ifx_CPU_DEADD_Bits',0,23,132,2,16,4,11
	.byte	'ERROR_ADDRESS',0,4
	.word	866
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_DEADD_Bits',0,23,135,2,3
	.word	71798
	.byte	10
	.byte	'_Ifx_CPU_DIEAR_Bits',0,23,138,2,16,4,11
	.byte	'TA',0,4
	.word	866
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_DIEAR_Bits',0,23,141,2,3
	.word	71878
	.byte	10
	.byte	'_Ifx_CPU_DIETR_Bits',0,23,144,2,16,4,11
	.byte	'IED',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	866
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	866
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	866
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	866
	.byte	1,18,2,35,0,11
	.byte	'IE_DLMU',0,4
	.word	866
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	866
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	866
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	866
	.byte	15,0,2,35,0,0,33
	.byte	'Ifx_CPU_DIETR_Bits',0,23,159,2,3
	.word	71947
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,23,162,2,16,4,11
	.byte	'EN0',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	866
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	866
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	866
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	866
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	866
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	866
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	866
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	866
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	866
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	866
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	866
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	866
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	866
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	866
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	866
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	866
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	866
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	866
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	866
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	866
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	866
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	866
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	866
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	866
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	866
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,23,196,2,3
	.word	72231
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,23,199,2,16,4,11
	.byte	'EN0',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	866
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	866
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	866
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	866
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	866
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	866
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	866
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	866
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	866
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	866
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	866
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	866
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	866
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	866
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	866
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	866
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	866
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	866
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	866
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	866
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	866
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	866
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	866
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	866
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	866
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,23,233,2,3
	.word	72822
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,23,236,2,16,4,11
	.byte	'EN32',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	866
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	866
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	866
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	866
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	866
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	866
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	866
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	866
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	866
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	866
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	866
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	866
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	866
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	866
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	866
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	866
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	866
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	866
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	866
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	866
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	866
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	866
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	866
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	866
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	866
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,23,142,3,3
	.word	73413
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,23,145,3,16,4,11
	.byte	'EN32',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	866
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	866
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	866
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	866
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	866
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	866
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	866
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	866
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	866
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	866
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	866
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	866
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	866
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	866
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	866
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	866
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	866
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	866
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	866
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	866
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	866
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	866
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	866
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	866
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	866
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,23,179,3,3
	.word	74014
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,23,182,3,16,4,11
	.byte	'reserved_0',0,4
	.word	866
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	866
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,23,186,3,3
	.word	74615
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,23,189,3,16,4,11
	.byte	'reserved_0',0,4
	.word	866
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	866
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,23,193,3,3
	.word	74730
	.byte	10
	.byte	'_Ifx_CPU_DMS_Bits',0,23,196,3,16,4,11
	.byte	'reserved_0',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'DMSVALUE',0,4
	.word	866
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_DMS_Bits',0,23,200,3,3
	.word	74845
	.byte	10
	.byte	'_Ifx_CPU_DPRE_Bits',0,23,203,3,16,4,11
	.byte	'RE_N',0,4
	.word	866
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	866
	.byte	14,0,2,35,0,0,33
	.byte	'Ifx_CPU_DPRE_Bits',0,23,207,3,3
	.word	74938
	.byte	10
	.byte	'_Ifx_CPU_DPR_L_Bits',0,23,210,3,16,4,11
	.byte	'reserved_0',0,4
	.word	866
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	866
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_CPU_DPR_L_Bits',0,23,214,3,3
	.word	75030
	.byte	10
	.byte	'_Ifx_CPU_DPR_U_Bits',0,23,217,3,16,4,11
	.byte	'reserved_0',0,4
	.word	866
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	866
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_CPU_DPR_U_Bits',0,23,221,3,3
	.word	75125
	.byte	10
	.byte	'_Ifx_CPU_DPWE_Bits',0,23,224,3,16,4,11
	.byte	'WE_N',0,4
	.word	866
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	866
	.byte	14,0,2,35,0,0,33
	.byte	'Ifx_CPU_DPWE_Bits',0,23,228,3,3
	.word	75220
	.byte	10
	.byte	'_Ifx_CPU_DSTR_Bits',0,23,231,3,16,4,11
	.byte	'SRE',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'GAE',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'LBE',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'DRE',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	866
	.byte	2,26,2,35,0,11
	.byte	'CRE',0,4
	.word	866
	.byte	1,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	866
	.byte	7,18,2,35,0,11
	.byte	'DTME',0,4
	.word	866
	.byte	1,17,2,35,0,11
	.byte	'LOE',0,4
	.word	866
	.byte	1,16,2,35,0,11
	.byte	'SDE',0,4
	.word	866
	.byte	1,15,2,35,0,11
	.byte	'SCE',0,4
	.word	866
	.byte	1,14,2,35,0,11
	.byte	'CAC',0,4
	.word	866
	.byte	1,13,2,35,0,11
	.byte	'MPE',0,4
	.word	866
	.byte	1,12,2,35,0,11
	.byte	'CLE',0,4
	.word	866
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	866
	.byte	3,8,2,35,0,11
	.byte	'ALN',0,4
	.word	866
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	866
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_CPU_DSTR_Bits',0,23,250,3,3
	.word	75312
	.byte	10
	.byte	'_Ifx_CPU_EXEVT_Bits',0,23,253,3,16,4,11
	.byte	'EVTA',0,4
	.word	866
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	866
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	866
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_CPU_EXEVT_Bits',0,23,133,4,3
	.word	75651
	.byte	10
	.byte	'_Ifx_CPU_FCX_Bits',0,23,136,4,16,4,11
	.byte	'FCXO',0,4
	.word	866
	.byte	16,16,2,35,0,11
	.byte	'FCXS',0,4
	.word	866
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	866
	.byte	12,0,2,35,0,0,33
	.byte	'Ifx_CPU_FCX_Bits',0,23,141,4,3
	.word	75805
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON0_Bits',0,23,144,4,16,4,11
	.byte	'TAG1',0,4
	.word	866
	.byte	6,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	866
	.byte	2,24,2,35,0,11
	.byte	'TAG2',0,4
	.word	866
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	866
	.byte	2,16,2,35,0,11
	.byte	'TAG3',0,4
	.word	866
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	866
	.byte	2,8,2,35,0,11
	.byte	'TAG4',0,4
	.word	866
	.byte	6,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	866
	.byte	2,0,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON0_Bits',0,23,154,4,3
	.word	75911
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON1_Bits',0,23,157,4,16,4,11
	.byte	'STALL',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	866
	.byte	15,16,2,35,0,11
	.byte	'MASKUECC',0,4
	.word	866
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	866
	.byte	6,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	866
	.byte	2,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	866
	.byte	6,0,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON1_Bits',0,23,165,4,3
	.word	76129
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON2_Bits',0,23,168,4,16,4,11
	.byte	'RECDIS',0,4
	.word	866
	.byte	2,30,2,35,0,11
	.byte	'ECCCORDIS',0,4
	.word	866
	.byte	2,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	866
	.byte	4,24,2,35,0,11
	.byte	'HMARGIN',0,4
	.word	866
	.byte	2,22,2,35,0,11
	.byte	'MSEL',0,4
	.word	866
	.byte	2,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	866
	.byte	4,16,2,35,0,11
	.byte	'ECCSCLR',0,4
	.word	866
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	866
	.byte	6,8,2,35,0,11
	.byte	'SBABCLR',0,4
	.word	866
	.byte	2,6,2,35,0,11
	.byte	'DBABCLR',0,4
	.word	866
	.byte	2,4,2,35,0,11
	.byte	'MBABCLR',0,4
	.word	866
	.byte	2,2,2,35,0,11
	.byte	'ZBABCLR',0,4
	.word	866
	.byte	2,0,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON2_Bits',0,23,182,4,3
	.word	76320
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON3_Bits',0,23,185,4,16,4,11
	.byte	'ECCERRINJ',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'EDCERRINJ',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'SBABERRINJ',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'DBABERRINJ',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'MBABERRINJ',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'ZBABERRINJ',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'SBERERRINJ',0,4
	.word	866
	.byte	1,25,2,35,0,11
	.byte	'DBERERRINJ',0,4
	.word	866
	.byte	1,24,2,35,0,11
	.byte	'NVMCERRINJ',0,4
	.word	866
	.byte	1,23,2,35,0,11
	.byte	'FLCONERRINJ',0,4
	.word	866
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	866
	.byte	22,0,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON3_Bits',0,23,198,4,3
	.word	76620
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON4_Bits',0,23,201,4,16,4,11
	.byte	'DDIS',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	866
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON4_Bits',0,23,205,4,3
	.word	76925
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,23,208,4,16,4,11
	.byte	'TST',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'TCL',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	866
	.byte	6,24,2,35,0,11
	.byte	'RM',0,4
	.word	866
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	866
	.byte	8,14,2,35,0,11
	.byte	'FXE',0,4
	.word	866
	.byte	1,13,2,35,0,11
	.byte	'FUE',0,4
	.word	866
	.byte	1,12,2,35,0,11
	.byte	'FZE',0,4
	.word	866
	.byte	1,11,2,35,0,11
	.byte	'FVE',0,4
	.word	866
	.byte	1,10,2,35,0,11
	.byte	'FIE',0,4
	.word	866
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	866
	.byte	3,6,2,35,0,11
	.byte	'FX',0,4
	.word	866
	.byte	1,5,2,35,0,11
	.byte	'FU',0,4
	.word	866
	.byte	1,4,2,35,0,11
	.byte	'FZ',0,4
	.word	866
	.byte	1,3,2,35,0,11
	.byte	'FV',0,4
	.word	866
	.byte	1,2,2,35,0,11
	.byte	'FI',0,4
	.word	866
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,23,227,4,3
	.word	77026
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,23,230,4,16,4,11
	.byte	'OPC',0,4
	.word	866
	.byte	8,24,2,35,0,11
	.byte	'FMT',0,4
	.word	866
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	866
	.byte	7,16,2,35,0,11
	.byte	'DREG',0,4
	.word	866
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	866
	.byte	12,0,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,23,237,4,3
	.word	77375
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,23,240,4,16,4,11
	.byte	'PC',0,4
	.word	866
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,23,243,4,3
	.word	77535
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,23,246,4,16,4,11
	.byte	'SRC1',0,4
	.word	866
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,23,249,4,3
	.word	77616
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,23,252,4,16,4,11
	.byte	'SRC2',0,4
	.word	866
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,23,255,4,3
	.word	77703
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,23,130,5,16,4,11
	.byte	'SRC3',0,4
	.word	866
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,23,133,5,3
	.word	77790
	.byte	10
	.byte	'_Ifx_CPU_ICNT_Bits',0,23,136,5,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	866
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_ICNT_Bits',0,23,140,5,3
	.word	77877
	.byte	10
	.byte	'_Ifx_CPU_ICR_Bits',0,23,143,5,16,4,11
	.byte	'CCPN',0,4
	.word	866
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	866
	.byte	7,17,2,35,0,11
	.byte	'IE',0,4
	.word	866
	.byte	1,16,2,35,0,11
	.byte	'PIPN',0,4
	.word	866
	.byte	8,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	866
	.byte	8,0,2,35,0,0,33
	.byte	'Ifx_CPU_ICR_Bits',0,23,150,5,3
	.word	77968
	.byte	10
	.byte	'_Ifx_CPU_ISP_Bits',0,23,153,5,16,4,11
	.byte	'ISP',0,4
	.word	866
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_ISP_Bits',0,23,156,5,3
	.word	78110
	.byte	10
	.byte	'_Ifx_CPU_KRST0_Bits',0,23,159,5,16,4,11
	.byte	'RST',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'RSTSTAT',0,4
	.word	866
	.byte	2,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	866
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_CPU_KRST0_Bits',0,23,164,5,3
	.word	78176
	.byte	10
	.byte	'_Ifx_CPU_KRST1_Bits',0,23,167,5,16,4,11
	.byte	'RST',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	866
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_KRST1_Bits',0,23,171,5,3
	.word	78287
	.byte	10
	.byte	'_Ifx_CPU_KRSTCLR_Bits',0,23,174,5,16,4,11
	.byte	'CLR',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	866
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_KRSTCLR_Bits',0,23,178,5,3
	.word	78379
	.byte	10
	.byte	'_Ifx_CPU_LCX_Bits',0,23,181,5,16,4,11
	.byte	'LCXO',0,4
	.word	866
	.byte	16,16,2,35,0,11
	.byte	'LCXS',0,4
	.word	866
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	866
	.byte	12,0,2,35,0,0,33
	.byte	'Ifx_CPU_LCX_Bits',0,23,186,5,3
	.word	78475
	.byte	10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,23,189,5,16,4,11
	.byte	'EN0',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	866
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	866
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	866
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	866
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	866
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	866
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	866
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	866
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	866
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	866
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	866
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	866
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	866
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	866
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	866
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	866
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	866
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	866
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	866
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	866
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	866
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	866
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	866
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	866
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	866
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,23,223,5,3
	.word	78581
	.byte	10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,23,226,5,16,4,11
	.byte	'EN32',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	866
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	866
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	866
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	866
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	866
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	866
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	866
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	866
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	866
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	866
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	866
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	866
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	866
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	866
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	866
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	866
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	866
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	866
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	866
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	866
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	866
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	866
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	866
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	866
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	866
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,23,132,6,3
	.word	79164
	.byte	10
	.byte	'_Ifx_CPU_M1CNT_Bits',0,23,135,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	866
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_M1CNT_Bits',0,23,139,6,3
	.word	79757
	.byte	10
	.byte	'_Ifx_CPU_M2CNT_Bits',0,23,142,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	866
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_M2CNT_Bits',0,23,146,6,3
	.word	79850
	.byte	10
	.byte	'_Ifx_CPU_M3CNT_Bits',0,23,149,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	866
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_M3CNT_Bits',0,23,153,6,3
	.word	79943
	.byte	10
	.byte	'_Ifx_CPU_OSEL_Bits',0,23,156,6,16,4,11
	.byte	'SHOVEN_X',0,4
	.word	866
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_OSEL_Bits',0,23,159,6,3
	.word	80036
	.byte	10
	.byte	'_Ifx_CPU_PC_Bits',0,23,162,6,16,4,11
	.byte	'reserved_0',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'PC',0,4
	.word	866
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_PC_Bits',0,23,166,6,3
	.word	80109
	.byte	10
	.byte	'_Ifx_CPU_PCON0_Bits',0,23,169,6,16,4,11
	.byte	'reserved_0',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'PCBYP',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	866
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_CPU_PCON0_Bits',0,23,174,6,3
	.word	80194
	.byte	10
	.byte	'_Ifx_CPU_PCON1_Bits',0,23,177,6,16,4,11
	.byte	'PCINV',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'PBINV',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	866
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_CPU_PCON1_Bits',0,23,182,6,3
	.word	80310
	.byte	10
	.byte	'_Ifx_CPU_PCON2_Bits',0,23,185,6,16,4,11
	.byte	'PCACHE_SZE',0,4
	.word	866
	.byte	16,16,2,35,0,11
	.byte	'PSCRATCH_SZE',0,4
	.word	866
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_PCON2_Bits',0,23,189,6,3
	.word	80421
	.byte	10
	.byte	'_Ifx_CPU_PCXI_Bits',0,23,192,6,16,4,11
	.byte	'PCXO',0,4
	.word	866
	.byte	16,16,2,35,0,11
	.byte	'PCXS',0,4
	.word	866
	.byte	4,12,2,35,0,11
	.byte	'UL',0,4
	.word	866
	.byte	1,11,2,35,0,11
	.byte	'PIE',0,4
	.word	866
	.byte	1,10,2,35,0,11
	.byte	'PCPN',0,4
	.word	866
	.byte	8,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	866
	.byte	2,0,2,35,0,0,33
	.byte	'Ifx_CPU_PCXI_Bits',0,23,200,6,3
	.word	80522
	.byte	10
	.byte	'_Ifx_CPU_PIEAR_Bits',0,23,203,6,16,4,11
	.byte	'TA',0,4
	.word	866
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_PIEAR_Bits',0,23,206,6,3
	.word	80675
	.byte	10
	.byte	'_Ifx_CPU_PIETR_Bits',0,23,209,6,16,4,11
	.byte	'IED',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	866
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	866
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	866
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	866
	.byte	1,18,2,35,0,11
	.byte	'IE_ADDR',0,4
	.word	866
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	866
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	866
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	866
	.byte	15,0,2,35,0,0,33
	.byte	'Ifx_CPU_PIETR_Bits',0,23,224,6,3
	.word	80744
	.byte	10
	.byte	'_Ifx_CPU_PMA0_Bits',0,23,227,6,16,4,11
	.byte	'DAC',0,4
	.word	866
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	866
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_PMA0_Bits',0,23,231,6,3
	.word	81028
	.byte	10
	.byte	'_Ifx_CPU_PMA1_Bits',0,23,234,6,16,4,11
	.byte	'CAC',0,4
	.word	866
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	866
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_PMA1_Bits',0,23,238,6,3
	.word	81119
	.byte	10
	.byte	'_Ifx_CPU_PMA2_Bits',0,23,241,6,16,4,11
	.byte	'PSI',0,4
	.word	866
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	866
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_PMA2_Bits',0,23,245,6,3
	.word	81210
	.byte	10
	.byte	'_Ifx_CPU_PSTR_Bits',0,23,248,6,16,4,11
	.byte	'FRE',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'FBE',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	866
	.byte	9,20,2,35,0,11
	.byte	'FPE',0,4
	.word	866
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	866
	.byte	1,18,2,35,0,11
	.byte	'FME',0,4
	.word	866
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	866
	.byte	17,0,2,35,0,0,33
	.byte	'Ifx_CPU_PSTR_Bits',0,23,130,7,3
	.word	81301
	.byte	10
	.byte	'_Ifx_CPU_PSW_Bits',0,23,133,7,16,4,11
	.byte	'CDC',0,4
	.word	866
	.byte	7,25,2,35,0,11
	.byte	'CDE',0,4
	.word	866
	.byte	1,24,2,35,0,11
	.byte	'GW',0,4
	.word	866
	.byte	1,23,2,35,0,11
	.byte	'IS',0,4
	.word	866
	.byte	1,22,2,35,0,11
	.byte	'IO',0,4
	.word	866
	.byte	2,20,2,35,0,11
	.byte	'PRS',0,4
	.word	866
	.byte	2,18,2,35,0,11
	.byte	'S',0,4
	.word	866
	.byte	1,17,2,35,0,11
	.byte	'PRS2',0,4
	.word	866
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	866
	.byte	8,8,2,35,0,11
	.byte	'USB',0,4
	.word	866
	.byte	8,0,2,35,0,0,33
	.byte	'Ifx_CPU_PSW_Bits',0,23,145,7,3
	.word	81504
	.byte	10
	.byte	'_Ifx_CPU_RGN_ACCENA_Bits',0,23,148,7,16,4,11
	.byte	'EN0',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	866
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	866
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	866
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	866
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	866
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	866
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	866
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	866
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	866
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	866
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	866
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	866
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	866
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	866
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	866
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	866
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	866
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	866
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	866
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	866
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	866
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	866
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	866
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	866
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	866
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_RGN_ACCENA_Bits',0,23,182,7,3
	.word	81709
	.byte	10
	.byte	'_Ifx_CPU_RGN_ACCENB_Bits',0,23,185,7,16,4,11
	.byte	'EN32',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	866
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	866
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	866
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	866
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	866
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	866
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	866
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	866
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	866
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	866
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	866
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	866
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	866
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	866
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	866
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	866
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	866
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	866
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	866
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	866
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	866
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	866
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	866
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	866
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	866
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_RGN_ACCENB_Bits',0,23,219,7,3
	.word	82276
	.byte	10
	.byte	'_Ifx_CPU_RGN_LA_Bits',0,23,222,7,16,4,11
	.byte	'reserved_0',0,4
	.word	866
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	866
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_RGN_LA_Bits',0,23,226,7,3
	.word	82853
	.byte	10
	.byte	'_Ifx_CPU_RGN_UA_Bits',0,23,229,7,16,4,11
	.byte	'reserved_0',0,4
	.word	866
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	866
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_RGN_UA_Bits',0,23,233,7,3
	.word	82948
	.byte	10
	.byte	'_Ifx_CPU_SEGEN_Bits',0,23,236,7,16,4,11
	.byte	'ADFLIP',0,4
	.word	866
	.byte	8,24,2,35,0,11
	.byte	'ADTYPE',0,4
	.word	866
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	866
	.byte	21,1,2,35,0,11
	.byte	'AE',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_SEGEN_Bits',0,23,242,7,3
	.word	83043
	.byte	10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,23,245,7,16,4,11
	.byte	'EN0',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	866
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	866
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	866
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	866
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	866
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	866
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	866
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	866
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	866
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	866
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	866
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	866
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	866
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	866
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	866
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	866
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	866
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	866
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	866
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	866
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	866
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	866
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	866
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	866
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	866
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,23,151,8,3
	.word	83171
	.byte	10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,23,154,8,16,4,11
	.byte	'EN32',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	866
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	866
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	866
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	866
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	866
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	866
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	866
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	866
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	866
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	866
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	866
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	866
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	866
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	866
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	866
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	866
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	866
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	866
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	866
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	866
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	866
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	866
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	866
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	866
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	866
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,23,188,8,3
	.word	83754
	.byte	10
	.byte	'_Ifx_CPU_SMACON_Bits',0,23,191,8,16,4,11
	.byte	'reserved_0',0,4
	.word	866
	.byte	24,8,2,35,0,11
	.byte	'IODT',0,4
	.word	866
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	866
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_CPU_SMACON_Bits',0,23,196,8,3
	.word	84347
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,23,199,8,16,4,11
	.byte	'EN0',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	866
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	866
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	866
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	866
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	866
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	866
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	866
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	866
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	866
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	866
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	866
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	866
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	866
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	866
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	866
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	866
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	866
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	866
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	866
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	866
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	866
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	866
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	866
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	866
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	866
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,23,233,8,3
	.word	84465
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,23,236,8,16,4,11
	.byte	'EN32',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	866
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	866
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	866
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	866
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	866
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	866
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	866
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	866
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	866
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	866
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	866
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	866
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	866
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	866
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	866
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	866
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	866
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	866
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	866
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	866
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	866
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	866
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	866
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	866
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	866
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,23,142,9,3
	.word	85054
	.byte	10
	.byte	'_Ifx_CPU_SWEVT_Bits',0,23,145,9,16,4,11
	.byte	'EVTA',0,4
	.word	866
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	866
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	866
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_CPU_SWEVT_Bits',0,23,153,9,3
	.word	85653
	.byte	10
	.byte	'_Ifx_CPU_SYSCON_Bits',0,23,156,9,16,4,11
	.byte	'FCDSF',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'PROTEN',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'TPROTEN',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'IS',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'TS',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	866
	.byte	3,24,2,35,0,11
	.byte	'ESDIS',0,4
	.word	866
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	866
	.byte	7,16,2,35,0,11
	.byte	'U1_IED',0,4
	.word	866
	.byte	1,15,2,35,0,11
	.byte	'U1_IOS',0,4
	.word	866
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	866
	.byte	6,8,2,35,0,11
	.byte	'BHALT',0,4
	.word	866
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	866
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_CPU_SYSCON_Bits',0,23,171,9,3
	.word	85807
	.byte	10
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,23,174,9,16,4,11
	.byte	'ASI',0,4
	.word	866
	.byte	5,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	866
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,23,178,9,3
	.word	86106
	.byte	10
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,23,181,9,16,4,11
	.byte	'TEXP0',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'TEXP1',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'TEXP2',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	866
	.byte	13,16,2,35,0,11
	.byte	'TTRAP',0,4
	.word	866
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	866
	.byte	15,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_CON_Bits',0,23,189,9,3
	.word	86204
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,23,192,9,16,4,11
	.byte	'EXTIM_CLASS_EN',0,4
	.word	866
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	866
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,23,196,9,3
	.word	86376
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,23,199,9,16,4,11
	.byte	'ENTRY_CVAL',0,4
	.word	866
	.byte	12,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	866
	.byte	20,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,23,203,9,3
	.word	86505
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,23,206,9,16,4,11
	.byte	'reserved_0',0,4
	.word	866
	.byte	4,28,2,35,0,11
	.byte	'ENTRY_LVAL',0,4
	.word	866
	.byte	8,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	866
	.byte	20,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,23,211,9,3
	.word	86635
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,23,214,9,16,4,11
	.byte	'EXIT_CVAL',0,4
	.word	866
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	866
	.byte	8,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,23,218,9,3
	.word	86787
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,23,221,9,16,4,11
	.byte	'reserved_0',0,4
	.word	866
	.byte	4,28,2,35,0,11
	.byte	'EXIT_LVAL',0,4
	.word	866
	.byte	20,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	866
	.byte	8,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,23,226,9,3
	.word	86914
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_FCX_Bits',0,23,229,9,16,4,11
	.byte	'EXIT_FCX',0,4
	.word	866
	.byte	20,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	866
	.byte	12,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_FCX_Bits',0,23,233,9,3
	.word	87063
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_STAT_Bits',0,23,236,9,16,4,11
	.byte	'EXIT_TIN',0,4
	.word	866
	.byte	8,24,2,35,0,11
	.byte	'EXIT_CLASS',0,4
	.word	866
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	866
	.byte	4,17,2,35,0,11
	.byte	'EXIT_AT',0,4
	.word	866
	.byte	1,16,2,35,0,11
	.byte	'ENTRY_TIN',0,4
	.word	866
	.byte	8,8,2,35,0,11
	.byte	'ENTRY_CLASS',0,4
	.word	866
	.byte	3,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	866
	.byte	4,1,2,35,0,11
	.byte	'ENTRY_AT',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_STAT_Bits',0,23,246,9,3
	.word	87177
	.byte	10
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,23,249,9,16,4,11
	.byte	'TIMER',0,4
	.word	866
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,23,252,9,3
	.word	87421
	.byte	10
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,23,255,9,16,4,11
	.byte	'T0',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'T1',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'T2',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'T3',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'T4',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'T5',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'T6',0,4
	.word	866
	.byte	1,25,2,35,0,11
	.byte	'T7',0,4
	.word	866
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	866
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,23,138,10,3
	.word	87501
	.byte	10
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,23,141,10,16,4,11
	.byte	'ADDR',0,4
	.word	866
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_TR_ADR_Bits',0,23,144,10,3
	.word	87696
	.byte	10
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,23,147,10,16,4,11
	.byte	'EVTA',0,4
	.word	866
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	866
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	866
	.byte	4,20,2,35,0,11
	.byte	'TYP',0,4
	.word	866
	.byte	1,19,2,35,0,11
	.byte	'RNG',0,4
	.word	866
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	866
	.byte	1,17,2,35,0,11
	.byte	'ASI_EN',0,4
	.word	866
	.byte	1,16,2,35,0,11
	.byte	'ASI',0,4
	.word	866
	.byte	5,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	866
	.byte	6,5,2,35,0,11
	.byte	'AST',0,4
	.word	866
	.byte	1,4,2,35,0,11
	.byte	'ALD',0,4
	.word	866
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	866
	.byte	3,0,2,35,0,0,33
	.byte	'Ifx_CPU_TR_EVT_Bits',0,23,164,10,3
	.word	87769
	.byte	12,23,172,10,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69124
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_A',0,23,177,10,3
	.word	88087
	.byte	12,23,180,10,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69185
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_BIV',0,23,185,10,3
	.word	88146
	.byte	12,23,188,10,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69264
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_BLK_OMASK',0,23,193,10,3
	.word	88207
	.byte	12,23,196,10,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69402
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_BLK_OTAR',0,23,201,10,3
	.word	88274
	.byte	12,23,204,10,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69523
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_BLK_RABR',0,23,209,10,3
	.word	88340
	.byte	12,23,212,10,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69699
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_BTV',0,23,217,10,3
	.word	88406
	.byte	12,23,220,10,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69785
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CCNT',0,23,225,10,3
	.word	88467
	.byte	12,23,228,10,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69874
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CCTRL',0,23,233,10,3
	.word	88529
	.byte	12,23,236,10,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70021
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_COMPAT',0,23,241,10,3
	.word	88592
	.byte	12,23,244,10,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70150
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CORE_ID',0,23,249,10,3
	.word	88656
	.byte	12,23,252,10,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70250
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CPR_L',0,23,129,11,3
	.word	88721
	.byte	12,23,132,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70345
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CPR_U',0,23,137,11,3
	.word	88784
	.byte	12,23,140,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70440
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CPU_ID',0,23,145,11,3
	.word	88847
	.byte	12,23,148,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70550
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CPXE',0,23,153,11,3
	.word	88911
	.byte	12,23,156,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70642
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CREVT',0,23,161,11,3
	.word	88973
	.byte	12,23,164,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70796
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CUS_ID',0,23,169,11,3
	.word	89036
	.byte	12,23,172,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70890
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_D',0,23,177,11,3
	.word	89100
	.byte	12,23,180,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70953
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DATR',0,23,185,11,3
	.word	89159
	.byte	12,23,188,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71179
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DBGSR',0,23,193,11,3
	.word	89221
	.byte	12,23,196,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71394
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DBGTCR',0,23,201,11,3
	.word	89284
	.byte	12,23,204,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71488
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DCON0',0,23,209,11,3
	.word	89348
	.byte	12,23,212,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71604
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DCON2',0,23,217,11,3
	.word	89411
	.byte	12,23,220,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71705
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DCX',0,23,225,11,3
	.word	89474
	.byte	12,23,228,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71798
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DEADD',0,23,233,11,3
	.word	89535
	.byte	12,23,236,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71878
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DIEAR',0,23,241,11,3
	.word	89598
	.byte	12,23,244,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71947
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DIETR',0,23,249,11,3
	.word	89661
	.byte	12,23,252,11,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72231
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R',0,23,129,12,3
	.word	89724
	.byte	12,23,132,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72822
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W',0,23,137,12,3
	.word	89804
	.byte	12,23,140,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73413
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R',0,23,145,12,3
	.word	89884
	.byte	12,23,148,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74014
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W',0,23,153,12,3
	.word	89964
	.byte	12,23,156,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74615
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA',0,23,161,12,3
	.word	90044
	.byte	12,23,164,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74730
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA',0,23,169,12,3
	.word	90118
	.byte	12,23,172,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74845
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DMS',0,23,177,12,3
	.word	90192
	.byte	12,23,180,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74938
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DPRE',0,23,185,12,3
	.word	90253
	.byte	12,23,188,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75030
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DPR_L',0,23,193,12,3
	.word	90315
	.byte	12,23,196,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75125
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DPR_U',0,23,201,12,3
	.word	90378
	.byte	12,23,204,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75220
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DPWE',0,23,209,12,3
	.word	90441
	.byte	12,23,212,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75312
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DSTR',0,23,217,12,3
	.word	90503
	.byte	12,23,220,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75651
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_EXEVT',0,23,225,12,3
	.word	90565
	.byte	12,23,228,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75805
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FCX',0,23,233,12,3
	.word	90628
	.byte	12,23,236,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75911
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON0',0,23,241,12,3
	.word	90689
	.byte	12,23,244,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76129
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON1',0,23,249,12,3
	.word	90756
	.byte	12,23,252,12,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76320
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON2',0,23,129,13,3
	.word	90823
	.byte	12,23,132,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76620
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON3',0,23,137,13,3
	.word	90890
	.byte	12,23,140,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76925
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FLASHCON4',0,23,145,13,3
	.word	90957
	.byte	12,23,148,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77026
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,23,153,13,3
	.word	91024
	.byte	12,23,156,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77375
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,23,161,13,3
	.word	91094
	.byte	12,23,164,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77535
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,23,169,13,3
	.word	91164
	.byte	12,23,172,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77616
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,23,177,13,3
	.word	91233
	.byte	12,23,180,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77703
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,23,185,13,3
	.word	91304
	.byte	12,23,188,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77790
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,23,193,13,3
	.word	91375
	.byte	12,23,196,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77877
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_ICNT',0,23,201,13,3
	.word	91446
	.byte	12,23,204,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77968
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_ICR',0,23,209,13,3
	.word	91508
	.byte	12,23,212,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78110
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_ISP',0,23,217,13,3
	.word	91569
	.byte	12,23,220,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78176
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_KRST0',0,23,225,13,3
	.word	91630
	.byte	12,23,228,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78287
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_KRST1',0,23,233,13,3
	.word	91693
	.byte	12,23,236,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78379
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_KRSTCLR',0,23,241,13,3
	.word	91756
	.byte	12,23,244,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78475
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_LCX',0,23,249,13,3
	.word	91821
	.byte	12,23,252,13,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78581
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R',0,23,129,14,3
	.word	91882
	.byte	12,23,132,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79164
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R',0,23,137,14,3
	.word	91958
	.byte	12,23,140,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79757
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_M1CNT',0,23,145,14,3
	.word	92034
	.byte	12,23,148,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79850
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_M2CNT',0,23,153,14,3
	.word	92097
	.byte	12,23,156,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79943
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_M3CNT',0,23,161,14,3
	.word	92160
	.byte	12,23,164,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80036
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_OSEL',0,23,169,14,3
	.word	92223
	.byte	12,23,172,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80109
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PC',0,23,177,14,3
	.word	92285
	.byte	12,23,180,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80194
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PCON0',0,23,185,14,3
	.word	92345
	.byte	12,23,188,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80310
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PCON1',0,23,193,14,3
	.word	92408
	.byte	12,23,196,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80421
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PCON2',0,23,201,14,3
	.word	92471
	.byte	12,23,204,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80522
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PCXI',0,23,209,14,3
	.word	92534
	.byte	12,23,212,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80675
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PIEAR',0,23,217,14,3
	.word	92596
	.byte	12,23,220,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80744
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PIETR',0,23,225,14,3
	.word	92659
	.byte	12,23,228,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81028
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PMA0',0,23,233,14,3
	.word	92722
	.byte	12,23,236,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81119
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PMA1',0,23,241,14,3
	.word	92784
	.byte	12,23,244,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81210
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PMA2',0,23,249,14,3
	.word	92846
	.byte	12,23,252,14,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81301
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PSTR',0,23,129,15,3
	.word	92908
	.byte	12,23,132,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81504
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PSW',0,23,137,15,3
	.word	92970
	.byte	12,23,140,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81709
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_RGN_ACCENA',0,23,145,15,3
	.word	93031
	.byte	12,23,148,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82276
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_RGN_ACCENB',0,23,153,15,3
	.word	93099
	.byte	12,23,156,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82853
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_RGN_LA',0,23,161,15,3
	.word	93167
	.byte	12,23,164,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82948
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_RGN_UA',0,23,169,15,3
	.word	93231
	.byte	12,23,172,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83043
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SEGEN',0,23,177,15,3
	.word	93295
	.byte	12,23,180,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83171
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W',0,23,185,15,3
	.word	93358
	.byte	12,23,188,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83754
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W',0,23,193,15,3
	.word	93434
	.byte	12,23,196,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	84347
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SMACON',0,23,201,15,3
	.word	93510
	.byte	12,23,204,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	84465
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R',0,23,209,15,3
	.word	93574
	.byte	12,23,212,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85054
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R',0,23,217,15,3
	.word	93653
	.byte	12,23,220,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85653
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SWEVT',0,23,225,15,3
	.word	93732
	.byte	12,23,228,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85807
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SYSCON',0,23,233,15,3
	.word	93795
	.byte	12,23,236,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86106
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TASK_ASI',0,23,241,15,3
	.word	93859
	.byte	12,23,244,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86204
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_CON',0,23,249,15,3
	.word	93925
	.byte	12,23,252,15,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86376
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN',0,23,129,16,3
	.word	93990
	.byte	12,23,132,16,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86505
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL',0,23,137,16,3
	.word	94066
	.byte	12,23,140,16,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86635
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL',0,23,145,16,3
	.word	94144
	.byte	12,23,148,16,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86787
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL',0,23,153,16,3
	.word	94222
	.byte	12,23,156,16,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86914
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL',0,23,161,16,3
	.word	94299
	.byte	12,23,164,16,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87063
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_FCX',0,23,169,16,3
	.word	94376
	.byte	12,23,172,16,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87177
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_EXTIM_STAT',0,23,177,16,3
	.word	94447
	.byte	12,23,180,16,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87421
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_TIMER',0,23,185,16,3
	.word	94519
	.byte	12,23,188,16,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87501
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TRIG_ACC',0,23,193,16,3
	.word	94586
	.byte	12,23,196,16,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87696
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TR_ADR',0,23,201,16,3
	.word	94652
	.byte	12,23,204,16,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87769
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TR_EVT',0,23,209,16,3
	.word	94716
	.byte	10
	.byte	'_Ifx_CPU_RGN',0,23,221,16,25,16,13
	.byte	'LA',0
	.word	93167
	.byte	4,2,35,0,13
	.byte	'UA',0
	.word	93231
	.byte	4,2,35,4,13
	.byte	'ACCENA',0
	.word	93031
	.byte	4,2,35,8,13
	.byte	'ACCENB',0
	.word	93099
	.byte	4,2,35,12,0,14
	.word	94780
	.byte	33
	.byte	'Ifx_CPU_RGN',0,23,227,16,3
	.word	94856
	.byte	10
	.byte	'_Ifx_CPU_BLK',0,23,242,16,25,12,13
	.byte	'RABR',0
	.word	88340
	.byte	4,2,35,0,13
	.byte	'OTAR',0
	.word	88274
	.byte	4,2,35,4,13
	.byte	'OMASK',0
	.word	88207
	.byte	4,2,35,8,0,14
	.word	94882
	.byte	33
	.byte	'Ifx_CPU_BLK',0,23,247,16,3
	.word	94945
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP',0,23,134,17,25,28,13
	.byte	'CON',0
	.word	91024
	.byte	4,2,35,0,13
	.byte	'PC',0
	.word	91164
	.byte	4,2,35,4,13
	.byte	'OPC',0
	.word	91094
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	3500
	.byte	4,2,35,12,13
	.byte	'SRC1',0
	.word	91233
	.byte	4,2,35,16,13
	.byte	'SRC2',0
	.word	91304
	.byte	4,2,35,20,13
	.byte	'SRC3',0
	.word	91375
	.byte	4,2,35,24,0,14
	.word	94971
	.byte	33
	.byte	'Ifx_CPU_FPU_TRAP',0,23,143,17,3
	.word	95096
	.byte	10
	.byte	'_Ifx_CPU_DPR',0,23,158,17,25,8,13
	.byte	'L',0
	.word	90315
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	90378
	.byte	4,2,35,4,0,14
	.word	95127
	.byte	33
	.byte	'Ifx_CPU_DPR',0,23,162,17,3
	.word	95169
	.byte	10
	.byte	'_Ifx_CPU_CPR',0,23,177,17,25,8,13
	.byte	'L',0
	.word	88721
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	88784
	.byte	4,2,35,4,0,14
	.word	95195
	.byte	33
	.byte	'Ifx_CPU_CPR',0,23,181,17,3
	.word	95237
	.byte	18,12
	.word	94519
	.byte	19,2,0,10
	.byte	'_Ifx_CPU_TPS',0,23,196,17,25,16,13
	.byte	'CON',0
	.word	93925
	.byte	4,2,35,0,13
	.byte	'TIMER',0
	.word	95263
	.byte	12,2,35,4,0,14
	.word	95272
	.byte	33
	.byte	'Ifx_CPU_TPS',0,23,200,17,3
	.word	95320
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM',0,23,215,17,25,28,13
	.byte	'ENTRY_LVAL',0
	.word	94144
	.byte	4,2,35,0,13
	.byte	'ENTRY_CVAL',0
	.word	94066
	.byte	4,2,35,4,13
	.byte	'EXIT_LVAL',0
	.word	94299
	.byte	4,2,35,8,13
	.byte	'EXIT_CVAL',0
	.word	94222
	.byte	4,2,35,12,13
	.byte	'CLASS_EN',0
	.word	93990
	.byte	4,2,35,16,13
	.byte	'STAT',0
	.word	94447
	.byte	4,2,35,20,13
	.byte	'FCX',0
	.word	94376
	.byte	4,2,35,24,0,14
	.word	95346
	.byte	33
	.byte	'Ifx_CPU_TPS_EXTIM',0,23,224,17,3
	.word	95495
	.byte	10
	.byte	'_Ifx_CPU_TR',0,23,239,17,25,8,13
	.byte	'EVT',0
	.word	94716
	.byte	4,2,35,0,13
	.byte	'ADR',0
	.word	94652
	.byte	4,2,35,4,0,14
	.word	95527
	.byte	33
	.byte	'Ifx_CPU_TR',0,23,243,17,3
	.word	95572
	.byte	18,128,34
	.word	467
	.byte	19,255,33,0,18,236,253,2
	.word	467
	.byte	19,235,253,2,0,18,244,31
	.word	467
	.byte	19,243,31,0,18,128,1
	.word	94780
	.byte	19,7,0,14
	.word	95632
	.byte	18,232,1
	.word	467
	.byte	19,231,1,0,18,128,48
	.word	467
	.byte	19,255,47,0,18,128,3
	.word	94882
	.byte	19,31,0,14
	.word	95669
	.byte	18,160,39
	.word	467
	.byte	19,159,39,0,18,208,223,1
	.word	467
	.byte	19,207,223,1,0,18,248,1
	.word	467
	.byte	19,247,1,0,18,244,29
	.word	467
	.byte	19,243,29,0,18,188,3
	.word	467
	.byte	19,187,3,0,18,232,3
	.word	467
	.byte	19,231,3,0,18,252,23
	.word	467
	.byte	19,251,23,0,14
	.word	94971
	.byte	18,228,63
	.word	467
	.byte	19,227,63,0,18,144,1
	.word	95127
	.byte	19,17,0,14
	.word	95779
	.byte	18,240,30
	.word	467
	.byte	19,239,30,0,18,80
	.word	95195
	.byte	19,9,0,14
	.word	95805
	.byte	18,176,31
	.word	467
	.byte	19,175,31,0,18,152,7
	.word	467
	.byte	19,151,7,0,14
	.word	95272
	.byte	18,48
	.word	467
	.byte	19,47,0,14
	.word	95346
	.byte	18,164,23
	.word	467
	.byte	19,163,23,0,18,64
	.word	95527
	.byte	19,7,0,14
	.word	95871
	.byte	18,192,23
	.word	467
	.byte	19,191,23,0,18,180,1
	.word	467
	.byte	19,179,1,0,18,172,1
	.word	467
	.byte	19,171,1,0,18,64
	.word	89100
	.byte	19,15,0,18,64
	.word	88087
	.byte	19,15,0,10
	.byte	'_Ifx_CPU',0,23,130,18,25,128,128,8,13
	.byte	'reserved_0',0
	.word	95597
	.byte	128,34,2,35,0,13
	.byte	'FLASHCON0',0
	.word	90689
	.byte	4,3,35,128,34,13
	.byte	'FLASHCON1',0
	.word	90756
	.byte	4,3,35,132,34,13
	.byte	'FLASHCON2',0
	.word	90823
	.byte	4,3,35,136,34,13
	.byte	'FLASHCON3',0
	.word	90890
	.byte	4,3,35,140,34,13
	.byte	'FLASHCON4',0
	.word	90957
	.byte	4,3,35,144,34,13
	.byte	'reserved_1114',0
	.word	95608
	.byte	236,253,2,3,35,148,34,13
	.byte	'KRST0',0
	.word	91630
	.byte	4,4,35,128,160,3,13
	.byte	'KRST1',0
	.word	91693
	.byte	4,4,35,132,160,3,13
	.byte	'KRSTCLR',0
	.word	91756
	.byte	4,4,35,136,160,3,13
	.byte	'reserved_D00C',0
	.word	95621
	.byte	244,31,4,35,140,160,3,13
	.byte	'RGN',0
	.word	95642
	.byte	128,1,4,35,128,192,3,13
	.byte	'reserved_E080',0
	.word	5320
	.byte	8,4,35,128,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R0',0
	.word	93574
	.byte	4,4,35,136,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R0',0
	.word	93653
	.byte	4,4,35,140,193,3,13
	.byte	'reserved_E090',0
	.word	5320
	.byte	8,4,35,144,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R1',0
	.word	93574
	.byte	4,4,35,152,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R1',0
	.word	93653
	.byte	4,4,35,156,193,3,13
	.byte	'reserved_E0A0',0
	.word	5320
	.byte	8,4,35,160,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R2',0
	.word	93574
	.byte	4,4,35,168,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R2',0
	.word	93653
	.byte	4,4,35,172,193,3,13
	.byte	'reserved_E0B0',0
	.word	5320
	.byte	8,4,35,176,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R3',0
	.word	93574
	.byte	4,4,35,184,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R3',0
	.word	93653
	.byte	4,4,35,188,193,3,13
	.byte	'reserved_E0C0',0
	.word	5320
	.byte	8,4,35,192,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R4',0
	.word	93574
	.byte	4,4,35,200,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R4',0
	.word	93653
	.byte	4,4,35,204,193,3,13
	.byte	'reserved_E0D0',0
	.word	5320
	.byte	8,4,35,208,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R5',0
	.word	93574
	.byte	4,4,35,216,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R5',0
	.word	93653
	.byte	4,4,35,220,193,3,13
	.byte	'reserved_E0E0',0
	.word	5320
	.byte	8,4,35,224,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R6',0
	.word	93574
	.byte	4,4,35,232,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R6',0
	.word	93653
	.byte	4,4,35,236,193,3,13
	.byte	'reserved_E0F0',0
	.word	5320
	.byte	8,4,35,240,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R7',0
	.word	93574
	.byte	4,4,35,248,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R7',0
	.word	93653
	.byte	4,4,35,252,193,3,13
	.byte	'SFR_SPROT_ACCENA_W',0
	.word	93358
	.byte	4,4,35,128,194,3,13
	.byte	'SFR_SPROT_ACCENB_W',0
	.word	93434
	.byte	4,4,35,132,194,3,13
	.byte	'reserved_E108',0
	.word	5320
	.byte	8,4,35,136,194,3,13
	.byte	'LPB_SPROT_ACCENA_R',0
	.word	91882
	.byte	4,4,35,144,194,3,13
	.byte	'LPB_SPROT_ACCENB_R',0
	.word	91958
	.byte	4,4,35,148,194,3,13
	.byte	'reserved_E118',0
	.word	95647
	.byte	232,1,4,35,152,194,3,13
	.byte	'DLMU_SPROT_RGNLA0',0
	.word	90044
	.byte	4,4,35,128,196,3,13
	.byte	'DLMU_SPROT_RGNUA0',0
	.word	90118
	.byte	4,4,35,132,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W0',0
	.word	89804
	.byte	4,4,35,136,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W0',0
	.word	89964
	.byte	4,4,35,140,196,3,13
	.byte	'DLMU_SPROT_RGNLA1',0
	.word	90044
	.byte	4,4,35,144,196,3,13
	.byte	'DLMU_SPROT_RGNUA1',0
	.word	90118
	.byte	4,4,35,148,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W1',0
	.word	89804
	.byte	4,4,35,152,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W1',0
	.word	89964
	.byte	4,4,35,156,196,3,13
	.byte	'DLMU_SPROT_RGNLA2',0
	.word	90044
	.byte	4,4,35,160,196,3,13
	.byte	'DLMU_SPROT_RGNUA2',0
	.word	90118
	.byte	4,4,35,164,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W2',0
	.word	89804
	.byte	4,4,35,168,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W2',0
	.word	89964
	.byte	4,4,35,172,196,3,13
	.byte	'DLMU_SPROT_RGNLA3',0
	.word	90044
	.byte	4,4,35,176,196,3,13
	.byte	'DLMU_SPROT_RGNUA3',0
	.word	90118
	.byte	4,4,35,180,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W3',0
	.word	89804
	.byte	4,4,35,184,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W3',0
	.word	89964
	.byte	4,4,35,188,196,3,13
	.byte	'DLMU_SPROT_RGNLA4',0
	.word	90044
	.byte	4,4,35,192,196,3,13
	.byte	'DLMU_SPROT_RGNUA4',0
	.word	90118
	.byte	4,4,35,196,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W4',0
	.word	89804
	.byte	4,4,35,200,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W4',0
	.word	89964
	.byte	4,4,35,204,196,3,13
	.byte	'DLMU_SPROT_RGNLA5',0
	.word	90044
	.byte	4,4,35,208,196,3,13
	.byte	'DLMU_SPROT_RGNUA5',0
	.word	90118
	.byte	4,4,35,212,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W5',0
	.word	89804
	.byte	4,4,35,216,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W5',0
	.word	89964
	.byte	4,4,35,220,196,3,13
	.byte	'DLMU_SPROT_RGNLA6',0
	.word	90044
	.byte	4,4,35,224,196,3,13
	.byte	'DLMU_SPROT_RGNUA6',0
	.word	90118
	.byte	4,4,35,228,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W6',0
	.word	89804
	.byte	4,4,35,232,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W6',0
	.word	89964
	.byte	4,4,35,236,196,3,13
	.byte	'DLMU_SPROT_RGNLA7',0
	.word	90044
	.byte	4,4,35,240,196,3,13
	.byte	'DLMU_SPROT_RGNUA7',0
	.word	90118
	.byte	4,4,35,244,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W7',0
	.word	89804
	.byte	4,4,35,248,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W7',0
	.word	89964
	.byte	4,4,35,252,196,3,13
	.byte	'reserved_E280',0
	.word	5320
	.byte	8,4,35,128,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R0',0
	.word	89724
	.byte	4,4,35,136,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R0',0
	.word	89884
	.byte	4,4,35,140,197,3,13
	.byte	'reserved_E290',0
	.word	5320
	.byte	8,4,35,144,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R1',0
	.word	89724
	.byte	4,4,35,152,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R1',0
	.word	89884
	.byte	4,4,35,156,197,3,13
	.byte	'reserved_E2A0',0
	.word	5320
	.byte	8,4,35,160,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R2',0
	.word	89724
	.byte	4,4,35,168,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R2',0
	.word	89884
	.byte	4,4,35,172,197,3,13
	.byte	'reserved_E2B0',0
	.word	5320
	.byte	8,4,35,176,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R3',0
	.word	89724
	.byte	4,4,35,184,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R3',0
	.word	89884
	.byte	4,4,35,188,197,3,13
	.byte	'reserved_E2C0',0
	.word	5320
	.byte	8,4,35,192,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R4',0
	.word	89724
	.byte	4,4,35,200,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R4',0
	.word	89884
	.byte	4,4,35,204,197,3,13
	.byte	'reserved_E2D0',0
	.word	5320
	.byte	8,4,35,208,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R5',0
	.word	89724
	.byte	4,4,35,216,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R5',0
	.word	89884
	.byte	4,4,35,220,197,3,13
	.byte	'reserved_E2E0',0
	.word	5320
	.byte	8,4,35,224,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R6',0
	.word	89724
	.byte	4,4,35,232,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R6',0
	.word	89884
	.byte	4,4,35,236,197,3,13
	.byte	'reserved_E2F0',0
	.word	5320
	.byte	8,4,35,240,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R7',0
	.word	89724
	.byte	4,4,35,248,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R7',0
	.word	89884
	.byte	4,4,35,252,197,3,13
	.byte	'reserved_E300',0
	.word	95658
	.byte	128,48,4,35,128,198,3,13
	.byte	'OSEL',0
	.word	92223
	.byte	4,4,35,128,246,3,13
	.byte	'reserved_FB04',0
	.word	5660
	.byte	12,4,35,132,246,3,13
	.byte	'BLK',0
	.word	95679
	.byte	128,3,4,35,144,246,3,13
	.byte	'reserved_FC90',0
	.word	95684
	.byte	160,39,4,35,144,249,3,13
	.byte	'SEGEN',0
	.word	93295
	.byte	4,4,35,176,160,4,13
	.byte	'reserved_11034',0
	.word	95695
	.byte	208,223,1,4,35,180,160,4,13
	.byte	'TASK_ASI',0
	.word	93859
	.byte	4,4,35,132,128,6,13
	.byte	'reserved_18008',0
	.word	95708
	.byte	248,1,4,35,136,128,6,13
	.byte	'PMA0',0
	.word	92722
	.byte	4,4,35,128,130,6,13
	.byte	'PMA1',0
	.word	92784
	.byte	4,4,35,132,130,6,13
	.byte	'PMA2',0
	.word	92846
	.byte	4,4,35,136,130,6,13
	.byte	'reserved_1810C',0
	.word	95719
	.byte	244,29,4,35,140,130,6,13
	.byte	'DCON2',0
	.word	89411
	.byte	4,4,35,128,160,6,13
	.byte	'reserved_19004',0
	.word	5320
	.byte	8,4,35,132,160,6,13
	.byte	'SMACON',0
	.word	93510
	.byte	4,4,35,140,160,6,13
	.byte	'DSTR',0
	.word	90503
	.byte	4,4,35,144,160,6,13
	.byte	'reserved_19014',0
	.word	3500
	.byte	4,4,35,148,160,6,13
	.byte	'DATR',0
	.word	89159
	.byte	4,4,35,152,160,6,13
	.byte	'DEADD',0
	.word	89535
	.byte	4,4,35,156,160,6,13
	.byte	'DIEAR',0
	.word	89598
	.byte	4,4,35,160,160,6,13
	.byte	'DIETR',0
	.word	89661
	.byte	4,4,35,164,160,6,13
	.byte	'reserved_19028',0
	.word	4691
	.byte	24,4,35,168,160,6,13
	.byte	'DCON0',0
	.word	89348
	.byte	4,4,35,192,160,6,13
	.byte	'reserved_19044',0
	.word	95730
	.byte	188,3,4,35,196,160,6,13
	.byte	'PSTR',0
	.word	92908
	.byte	4,4,35,128,164,6,13
	.byte	'PCON1',0
	.word	92408
	.byte	4,4,35,132,164,6,13
	.byte	'PCON2',0
	.word	92471
	.byte	4,4,35,136,164,6,13
	.byte	'PCON0',0
	.word	92345
	.byte	4,4,35,140,164,6,13
	.byte	'PIEAR',0
	.word	92596
	.byte	4,4,35,144,164,6,13
	.byte	'PIETR',0
	.word	92659
	.byte	4,4,35,148,164,6,13
	.byte	'reserved_19218',0
	.word	95741
	.byte	232,3,4,35,152,164,6,13
	.byte	'COMPAT',0
	.word	88592
	.byte	4,4,35,128,168,6,13
	.byte	'reserved_19404',0
	.word	95752
	.byte	252,23,4,35,132,168,6,13
	.byte	'FPU_TRAP',0
	.word	95763
	.byte	28,4,35,128,192,6,13
	.byte	'reserved_1A01C',0
	.word	95768
	.byte	228,63,4,35,156,192,6,13
	.byte	'DPR',0
	.word	95789
	.byte	144,1,4,35,128,128,7,13
	.byte	'reserved_1C090',0
	.word	95794
	.byte	240,30,4,35,144,129,7,13
	.byte	'CPR',0
	.word	95814
	.byte	80,4,35,128,160,7,13
	.byte	'reserved_1D050',0
	.word	95819
	.byte	176,31,4,35,208,160,7,13
	.byte	'CPXE_0',0
	.word	88911
	.byte	4,4,35,128,192,7,13
	.byte	'CPXE_1',0
	.word	88911
	.byte	4,4,35,132,192,7,13
	.byte	'CPXE_2',0
	.word	88911
	.byte	4,4,35,136,192,7,13
	.byte	'CPXE_3',0
	.word	88911
	.byte	4,4,35,140,192,7,13
	.byte	'DPRE_0',0
	.word	90253
	.byte	4,4,35,144,192,7,13
	.byte	'DPRE_1',0
	.word	90253
	.byte	4,4,35,148,192,7,13
	.byte	'DPRE_2',0
	.word	90253
	.byte	4,4,35,152,192,7,13
	.byte	'DPRE_3',0
	.word	90253
	.byte	4,4,35,156,192,7,13
	.byte	'DPWE_0',0
	.word	90441
	.byte	4,4,35,160,192,7,13
	.byte	'DPWE_1',0
	.word	90441
	.byte	4,4,35,164,192,7,13
	.byte	'DPWE_2',0
	.word	90441
	.byte	4,4,35,168,192,7,13
	.byte	'DPWE_3',0
	.word	90441
	.byte	4,4,35,172,192,7,13
	.byte	'reserved_1E030',0
	.word	66906
	.byte	16,4,35,176,192,7,13
	.byte	'CPXE_4',0
	.word	88911
	.byte	4,4,35,192,192,7,13
	.byte	'CPXE_5',0
	.word	88911
	.byte	4,4,35,196,192,7,13
	.byte	'reserved_1E048',0
	.word	5320
	.byte	8,4,35,200,192,7,13
	.byte	'DPRE_4',0
	.word	90253
	.byte	4,4,35,208,192,7,13
	.byte	'DPRE_5',0
	.word	90253
	.byte	4,4,35,212,192,7,13
	.byte	'reserved_1E058',0
	.word	5320
	.byte	8,4,35,216,192,7,13
	.byte	'DPWE_4',0
	.word	90441
	.byte	4,4,35,224,192,7,13
	.byte	'DPWE_5',0
	.word	90441
	.byte	4,4,35,228,192,7,13
	.byte	'reserved_1E068',0
	.word	95830
	.byte	152,7,4,35,232,192,7,13
	.byte	'TPS',0
	.word	95841
	.byte	16,4,35,128,200,7,13
	.byte	'reserved_1E410',0
	.word	95846
	.byte	48,4,35,144,200,7,13
	.byte	'TPS_EXTIM',0
	.word	95855
	.byte	28,4,35,192,200,7,13
	.byte	'reserved_1E45C',0
	.word	95860
	.byte	164,23,4,35,220,200,7,13
	.byte	'TR',0
	.word	95880
	.byte	64,4,35,128,224,7,13
	.byte	'reserved_1F040',0
	.word	95885
	.byte	192,23,4,35,192,224,7,13
	.byte	'CCTRL',0
	.word	88529
	.byte	4,4,35,128,248,7,13
	.byte	'CCNT',0
	.word	88467
	.byte	4,4,35,132,248,7,13
	.byte	'ICNT',0
	.word	91446
	.byte	4,4,35,136,248,7,13
	.byte	'M1CNT',0
	.word	92034
	.byte	4,4,35,140,248,7,13
	.byte	'M2CNT',0
	.word	92097
	.byte	4,4,35,144,248,7,13
	.byte	'M3CNT',0
	.word	92160
	.byte	4,4,35,148,248,7,13
	.byte	'reserved_1FC18',0
	.word	95647
	.byte	232,1,4,35,152,248,7,13
	.byte	'DBGSR',0
	.word	89221
	.byte	4,4,35,128,250,7,13
	.byte	'reserved_1FD04',0
	.word	3500
	.byte	4,4,35,132,250,7,13
	.byte	'EXEVT',0
	.word	90565
	.byte	4,4,35,136,250,7,13
	.byte	'CREVT',0
	.word	88973
	.byte	4,4,35,140,250,7,13
	.byte	'SWEVT',0
	.word	93732
	.byte	4,4,35,144,250,7,13
	.byte	'reserved_1FD14',0
	.word	11162
	.byte	28,4,35,148,250,7,13
	.byte	'TRIG_ACC',0
	.word	94586
	.byte	4,4,35,176,250,7,13
	.byte	'reserved_1FD34',0
	.word	5660
	.byte	12,4,35,180,250,7,13
	.byte	'DMS',0
	.word	90192
	.byte	4,4,35,192,250,7,13
	.byte	'DCX',0
	.word	89474
	.byte	4,4,35,196,250,7,13
	.byte	'DBGTCR',0
	.word	89284
	.byte	4,4,35,200,250,7,13
	.byte	'reserved_1FD4C',0
	.word	95896
	.byte	180,1,4,35,204,250,7,13
	.byte	'PCXI',0
	.word	92534
	.byte	4,4,35,128,252,7,13
	.byte	'PSW',0
	.word	92970
	.byte	4,4,35,132,252,7,13
	.byte	'PC',0
	.word	92285
	.byte	4,4,35,136,252,7,13
	.byte	'reserved_1FE0C',0
	.word	5320
	.byte	8,4,35,140,252,7,13
	.byte	'SYSCON',0
	.word	93795
	.byte	4,4,35,148,252,7,13
	.byte	'CPU_ID',0
	.word	88847
	.byte	4,4,35,152,252,7,13
	.byte	'CORE_ID',0
	.word	88656
	.byte	4,4,35,156,252,7,13
	.byte	'BIV',0
	.word	88146
	.byte	4,4,35,160,252,7,13
	.byte	'BTV',0
	.word	88406
	.byte	4,4,35,164,252,7,13
	.byte	'ISP',0
	.word	91569
	.byte	4,4,35,168,252,7,13
	.byte	'ICR',0
	.word	91508
	.byte	4,4,35,172,252,7,13
	.byte	'reserved_1FE30',0
	.word	5320
	.byte	8,4,35,176,252,7,13
	.byte	'FCX',0
	.word	90628
	.byte	4,4,35,184,252,7,13
	.byte	'LCX',0
	.word	91821
	.byte	4,4,35,188,252,7,13
	.byte	'reserved_1FE40',0
	.word	66906
	.byte	16,4,35,192,252,7,13
	.byte	'CUS_ID',0
	.word	89036
	.byte	4,4,35,208,252,7,13
	.byte	'reserved_1FE54',0
	.word	95907
	.byte	172,1,4,35,212,252,7,13
	.byte	'D',0
	.word	95918
	.byte	64,4,35,128,254,7,13
	.byte	'reserved_1FF40',0
	.word	12248
	.byte	64,4,35,192,254,7,13
	.byte	'A',0
	.word	95927
	.byte	64,4,35,128,255,7,13
	.byte	'reserved_1FFC0',0
	.word	12248
	.byte	64,4,35,192,255,7,0,14
	.word	95936
	.byte	33
	.byte	'Ifx_CPU',0,23,210,19,3
	.word	101034
	.byte	15,8,124,9,1,16
	.byte	'IfxCpu_Id_0',0,0,16
	.byte	'IfxCpu_Id_1',0,1,16
	.byte	'IfxCpu_Id_2',0,2,16
	.byte	'IfxCpu_Id_3',0,3,16
	.byte	'IfxCpu_Id_4',0,4,16
	.byte	'IfxCpu_Id_6',0,6,16
	.byte	'IfxCpu_Id_none',0,7,0,33
	.byte	'IfxCpu_Id',0,8,133,1,3
	.word	101056
	.byte	33
	.byte	'IfxCpu_ResourceCpu',0,8,170,1,3
	.word	2015
	.byte	10
	.byte	'_Ifx_STM_ACCEN0_Bits',0,24,68,16,4,11
	.byte	'EN0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	467
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	467
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	467
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	467
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	467
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	467
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	467
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	467
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	467
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	467
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	467
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	467
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	467
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	467
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	467
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	467
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	467
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_STM_ACCEN0_Bits',0,24,102,3
	.word	101210
	.byte	10
	.byte	'_Ifx_STM_ACCEN1_Bits',0,24,105,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_ACCEN1_Bits',0,24,108,3
	.word	101767
	.byte	10
	.byte	'_Ifx_STM_CAP_Bits',0,24,111,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	444
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_CAP_Bits',0,24,114,3
	.word	101844
	.byte	10
	.byte	'_Ifx_STM_CAPSV_Bits',0,24,117,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	444
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_CAPSV_Bits',0,24,120,3
	.word	101917
	.byte	10
	.byte	'_Ifx_STM_CLC_Bits',0,24,123,16,4,11
	.byte	'DISR',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	444
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_STM_CLC_Bits',0,24,130,1,3
	.word	101994
	.byte	10
	.byte	'_Ifx_STM_CMCON_Bits',0,24,133,1,16,4,11
	.byte	'MSIZE0',0,1
	.word	467
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	467
	.byte	3,0,2,35,0,11
	.byte	'MSTART0',0,1
	.word	467
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	467
	.byte	3,0,2,35,1,11
	.byte	'MSIZE1',0,1
	.word	467
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	467
	.byte	3,0,2,35,2,11
	.byte	'MSTART1',0,1
	.word	467
	.byte	5,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	467
	.byte	3,0,2,35,3,0,33
	.byte	'Ifx_STM_CMCON_Bits',0,24,143,1,3
	.word	102136
	.byte	10
	.byte	'_Ifx_STM_CMP_Bits',0,24,146,1,16,4,11
	.byte	'CMPVAL',0,4
	.word	444
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_CMP_Bits',0,24,149,1,3
	.word	102356
	.byte	10
	.byte	'_Ifx_STM_ICR_Bits',0,24,152,1,16,4,11
	.byte	'CMP0EN',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'CMP0IR',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'CMP0OS',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'CMP1EN',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'CMP1IR',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'CMP1OS',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	444
	.byte	25,0,2,35,0,0,33
	.byte	'Ifx_STM_ICR_Bits',0,24,162,1,3
	.word	102425
	.byte	10
	.byte	'_Ifx_STM_ID_Bits',0,24,165,1,16,4,11
	.byte	'MODREV',0,1
	.word	467
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	467
	.byte	8,0,2,35,1,11
	.byte	'MODNUM',0,2
	.word	1018
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_STM_ID_Bits',0,24,170,1,3
	.word	102628
	.byte	10
	.byte	'_Ifx_STM_ISCR_Bits',0,24,173,1,16,4,11
	.byte	'CMP0IRR',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'CMP0IRS',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'CMP1IRR',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'CMP1IRS',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	444
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_STM_ISCR_Bits',0,24,180,1,3
	.word	102732
	.byte	10
	.byte	'_Ifx_STM_KRST0_Bits',0,24,183,1,16,4,11
	.byte	'RST',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	444
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_STM_KRST0_Bits',0,24,188,1,3
	.word	102883
	.byte	10
	.byte	'_Ifx_STM_KRST1_Bits',0,24,191,1,16,4,11
	.byte	'RST',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	444
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_STM_KRST1_Bits',0,24,195,1,3
	.word	102994
	.byte	10
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,24,198,1,16,4,11
	.byte	'CLR',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	444
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_STM_KRSTCLR_Bits',0,24,202,1,3
	.word	103086
	.byte	10
	.byte	'_Ifx_STM_OCS_Bits',0,24,205,1,16,4,11
	.byte	'reserved_0',0,1
	.word	467
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	444
	.byte	21,8,2,35,0,11
	.byte	'SUS',0,1
	.word	467
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	467
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	467
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	467
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_STM_OCS_Bits',0,24,213,1,3
	.word	103182
	.byte	10
	.byte	'_Ifx_STM_TIM0_Bits',0,24,216,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	444
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM0_Bits',0,24,219,1,3
	.word	103350
	.byte	10
	.byte	'_Ifx_STM_TIM0SV_Bits',0,24,222,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	444
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM0SV_Bits',0,24,225,1,3
	.word	103423
	.byte	10
	.byte	'_Ifx_STM_TIM1_Bits',0,24,228,1,16,4,11
	.byte	'STM_35_4',0,4
	.word	444
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM1_Bits',0,24,231,1,3
	.word	103500
	.byte	10
	.byte	'_Ifx_STM_TIM2_Bits',0,24,234,1,16,4,11
	.byte	'STM_39_8',0,4
	.word	444
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM2_Bits',0,24,237,1,3
	.word	103573
	.byte	10
	.byte	'_Ifx_STM_TIM3_Bits',0,24,240,1,16,4,11
	.byte	'STM_43_12',0,4
	.word	444
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM3_Bits',0,24,243,1,3
	.word	103646
	.byte	10
	.byte	'_Ifx_STM_TIM4_Bits',0,24,246,1,16,4,11
	.byte	'STM_47_16',0,4
	.word	444
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM4_Bits',0,24,249,1,3
	.word	103720
	.byte	10
	.byte	'_Ifx_STM_TIM5_Bits',0,24,252,1,16,4,11
	.byte	'STM_51_20',0,4
	.word	444
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM5_Bits',0,24,255,1,3
	.word	103794
	.byte	10
	.byte	'_Ifx_STM_TIM6_Bits',0,24,130,2,16,4,11
	.byte	'STM_63_32',0,4
	.word	444
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM6_Bits',0,24,133,2,3
	.word	103868
	.byte	12,24,141,2,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101210
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_ACCEN0',0,24,146,2,3
	.word	103942
	.byte	12,24,149,2,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101767
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_ACCEN1',0,24,154,2,3
	.word	104006
	.byte	12,24,157,2,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101844
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_CAP',0,24,162,2,3
	.word	104070
	.byte	12,24,165,2,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101917
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_CAPSV',0,24,170,2,3
	.word	104131
	.byte	12,24,173,2,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101994
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_CLC',0,24,178,2,3
	.word	104194
	.byte	12,24,181,2,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	102136
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_CMCON',0,24,186,2,3
	.word	104255
	.byte	12,24,189,2,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	102356
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_CMP',0,24,194,2,3
	.word	104318
	.byte	12,24,197,2,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	102425
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_ICR',0,24,202,2,3
	.word	104379
	.byte	12,24,205,2,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	102628
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_ID',0,24,210,2,3
	.word	104440
	.byte	12,24,213,2,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	102732
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_ISCR',0,24,218,2,3
	.word	104500
	.byte	12,24,221,2,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	102883
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_KRST0',0,24,226,2,3
	.word	104562
	.byte	12,24,229,2,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	102994
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_KRST1',0,24,234,2,3
	.word	104625
	.byte	12,24,237,2,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	103086
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_KRSTCLR',0,24,242,2,3
	.word	104688
	.byte	12,24,245,2,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	103182
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_OCS',0,24,250,2,3
	.word	104753
	.byte	12,24,253,2,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	103350
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM0',0,24,130,3,3
	.word	104814
	.byte	12,24,133,3,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	103423
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM0SV',0,24,138,3,3
	.word	104876
	.byte	12,24,141,3,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	103500
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM1',0,24,146,3,3
	.word	104940
	.byte	12,24,149,3,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	103573
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM2',0,24,154,3,3
	.word	105002
	.byte	12,24,157,3,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	103646
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM3',0,24,162,3,3
	.word	105064
	.byte	12,24,165,3,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	103720
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM4',0,24,170,3,3
	.word	105126
	.byte	12,24,173,3,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	103794
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM5',0,24,178,3,3
	.word	105188
	.byte	12,24,181,3,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	103868
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM6',0,24,186,3,3
	.word	105250
	.byte	15,7,141,1,9,1,16
	.byte	'IfxCpu_CounterMode_normal',0,0,16
	.byte	'IfxCpu_CounterMode_task',0,1,0,33
	.byte	'IfxCpu_CounterMode',0,7,145,1,3
	.word	105312
	.byte	20,7,198,1,9,6,13
	.byte	'counter',0
	.word	2262
	.byte	4,2,35,0,13
	.byte	'overlfow',0
	.word	467
	.byte	1,2,35,4,0,33
	.byte	'IfxCpu_Counter',0,7,202,1,3
	.word	105401
	.byte	20,7,210,1,9,32,13
	.byte	'instruction',0
	.word	105401
	.byte	6,2,35,0,13
	.byte	'clock',0
	.word	105401
	.byte	6,2,35,6,13
	.byte	'counter1',0
	.word	105401
	.byte	6,2,35,12,13
	.byte	'counter2',0
	.word	105401
	.byte	6,2,35,18,13
	.byte	'counter3',0
	.word	105401
	.byte	6,2,35,24,0,33
	.byte	'IfxCpu_Perf',0,7,217,1,3
	.word	105467
	.byte	33
	.byte	'Ifx_P_ACCEN0_Bits',0,10,102,3
	.word	8848
	.byte	33
	.byte	'Ifx_P_ACCEN1_Bits',0,10,108,3
	.word	8761
	.byte	33
	.byte	'Ifx_P_ESR_Bits',0,10,130,1,3
	.word	5329
	.byte	33
	.byte	'Ifx_P_ID_Bits',0,10,138,1,3
	.word	3380
	.byte	33
	.byte	'Ifx_P_IN_Bits',0,10,160,1,3
	.word	4376
	.byte	33
	.byte	'Ifx_P_IOCR0_Bits',0,10,173,1,3
	.word	3509
	.byte	33
	.byte	'Ifx_P_IOCR12_Bits',0,10,186,1,3
	.word	4156
	.byte	33
	.byte	'Ifx_P_IOCR4_Bits',0,10,199,1,3
	.word	3724
	.byte	33
	.byte	'Ifx_P_IOCR8_Bits',0,10,212,1,3
	.word	3939
	.byte	33
	.byte	'Ifx_P_LPCR_Bits',0,10,231,1,3
	.word	8423
	.byte	33
	.byte	'Ifx_P_OMCR_Bits',0,10,253,1,3
	.word	8075
	.byte	33
	.byte	'Ifx_P_OMCR0_Bits',0,10,136,2,3
	.word	7062
	.byte	33
	.byte	'Ifx_P_OMCR12_Bits',0,10,146,2,3
	.word	7586
	.byte	33
	.byte	'Ifx_P_OMCR4_Bits',0,10,157,2,3
	.word	7236
	.byte	33
	.byte	'Ifx_P_OMCR8_Bits',0,10,168,2,3
	.word	7410
	.byte	33
	.byte	'Ifx_P_OMR_Bits',0,10,205,2,3
	.word	2809
	.byte	33
	.byte	'Ifx_P_OMSR_Bits',0,10,227,2,3
	.word	7742
	.byte	33
	.byte	'Ifx_P_OMSR0_Bits',0,10,237,2,3
	.word	6399
	.byte	33
	.byte	'Ifx_P_OMSR12_Bits',0,10,248,2,3
	.word	6887
	.byte	33
	.byte	'Ifx_P_OMSR4_Bits',0,10,131,3,3
	.word	6546
	.byte	33
	.byte	'Ifx_P_OMSR8_Bits',0,10,142,3,3
	.word	6715
	.byte	33
	.byte	'Ifx_P_OUT_Bits',0,10,164,3,3
	.word	2493
	.byte	33
	.byte	'Ifx_P_PCSR_Bits',0,10,187,3,3
	.word	6035
	.byte	33
	.byte	'Ifx_P_PDISC_Bits',0,10,209,3,3
	.word	5669
	.byte	33
	.byte	'Ifx_P_PDR0_Bits',0,10,230,3,3
	.word	4700
	.byte	33
	.byte	'Ifx_P_PDR1_Bits',0,10,251,3,3
	.word	5004
	.byte	33
	.byte	'Ifx_P_ACCEN0',0,10,136,4,3
	.word	9375
	.byte	33
	.byte	'Ifx_P_ACCEN1',0,10,144,4,3
	.word	8808
	.byte	33
	.byte	'Ifx_P_ESR',0,10,152,4,3
	.word	5620
	.byte	33
	.byte	'Ifx_P_ID',0,10,160,4,3
	.word	3460
	.byte	33
	.byte	'Ifx_P_IN',0,10,168,4,3
	.word	4651
	.byte	33
	.byte	'Ifx_P_IOCR0',0,10,176,4,3
	.word	3684
	.byte	33
	.byte	'Ifx_P_IOCR12',0,10,184,4,3
	.word	4336
	.byte	33
	.byte	'Ifx_P_IOCR4',0,10,192,4,3
	.word	3899
	.byte	33
	.byte	'Ifx_P_IOCR8',0,10,200,4,3
	.word	4116
	.byte	33
	.byte	'Ifx_P_LPCR',0,10,208,4,3
	.word	8703
	.byte	33
	.byte	'Ifx_P_OMCR',0,10,216,4,3
	.word	8383
	.byte	33
	.byte	'Ifx_P_OMCR0',0,10,224,4,3
	.word	7196
	.byte	33
	.byte	'Ifx_P_OMCR12',0,10,232,4,3
	.word	7702
	.byte	33
	.byte	'Ifx_P_OMCR4',0,10,240,4,3
	.word	7370
	.byte	33
	.byte	'Ifx_P_OMCR8',0,10,248,4,3
	.word	7546
	.byte	33
	.byte	'Ifx_P_OMR',0,10,128,5,3
	.word	3340
	.byte	33
	.byte	'Ifx_P_OMSR',0,10,136,5,3
	.word	8035
	.byte	33
	.byte	'Ifx_P_OMSR0',0,10,144,5,3
	.word	6506
	.byte	33
	.byte	'Ifx_P_OMSR12',0,10,152,5,3
	.word	7022
	.byte	33
	.byte	'Ifx_P_OMSR4',0,10,160,5,3
	.word	6675
	.byte	33
	.byte	'Ifx_P_OMSR8',0,10,168,5,3
	.word	6847
	.byte	33
	.byte	'Ifx_P_OUT',0,10,176,5,3
	.word	2769
	.byte	33
	.byte	'Ifx_P_PCSR',0,10,184,5,3
	.word	6359
	.byte	33
	.byte	'Ifx_P_PDISC',0,10,192,5,3
	.word	5995
	.byte	33
	.byte	'Ifx_P_PDR0',0,10,200,5,3
	.word	4964
	.byte	33
	.byte	'Ifx_P_PDR1',0,10,208,5,3
	.word	5280
	.byte	14
	.word	9415
	.byte	33
	.byte	'Ifx_P',0,10,128,6,3
	.word	106779
	.byte	15,9,73,9,1,16
	.byte	'IfxPort_ControlledBy_port',0,0,16
	.byte	'IfxPort_ControlledBy_hsct',0,1,0,33
	.byte	'IfxPort_ControlledBy',0,9,77,3
	.word	106799
	.byte	33
	.byte	'IfxPort_InputMode',0,9,87,3
	.word	9995
	.byte	15,9,91,9,1,16
	.byte	'IfxPort_LvdsMode_high',0,0,16
	.byte	'IfxPort_LvdsMode_medium',0,1,0,33
	.byte	'IfxPort_LvdsMode',0,9,95,3
	.word	106916
	.byte	33
	.byte	'IfxPort_Mode',0,9,122,3
	.word	25030
	.byte	33
	.byte	'IfxPort_OutputIdx',0,9,136,1,3
	.word	10296
	.byte	33
	.byte	'IfxPort_OutputMode',0,9,145,1,3
	.word	10200
	.byte	33
	.byte	'IfxPort_PadDriver',0,9,165,1,3
	.word	21648
	.byte	15,9,169,1,9,1,16
	.byte	'IfxPort_PadSupply_3v',0,0,16
	.byte	'IfxPort_PadSupply_5v',0,1,0,33
	.byte	'IfxPort_PadSupply',0,9,173,1,3
	.word	107100
	.byte	15,9,177,1,9,1,16
	.byte	'IfxPort_PinFunctionMode_digital',0,0,16
	.byte	'IfxPort_PinFunctionMode_analog',0,1,0,33
	.byte	'IfxPort_PinFunctionMode',0,9,181,1,3
	.word	107180
	.byte	33
	.byte	'IfxPort_State',0,9,193,1,3
	.word	10609
	.byte	33
	.byte	'IfxPort_Pin',0,9,250,1,3
	.word	21548
	.byte	10
	.byte	'_Ifx_SMU_ACCEN0_Bits',0,25,68,16,4,11
	.byte	'EN0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	467
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	467
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	467
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	467
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	467
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	467
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	467
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	467
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	467
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	467
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	467
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	467
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	467
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	467
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	467
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	467
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	467
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SMU_ACCEN0_Bits',0,25,102,3
	.word	107331
	.byte	10
	.byte	'_Ifx_SMU_ACCEN1_Bits',0,25,105,16,4,11
	.byte	'reserved_0',0,4
	.word	444
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SMU_ACCEN1_Bits',0,25,108,3
	.word	107888
	.byte	10
	.byte	'_Ifx_SMU_AD_Bits',0,25,111,16,4,11
	.byte	'DF0',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'DF1',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'DF2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'DF3',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'DF4',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'DF5',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'DF6',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'DF7',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'DF8',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'DF9',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'DF10',0,1
	.word	467
	.byte	1,5,2,35,1,11
	.byte	'DF11',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'DF12',0,1
	.word	467
	.byte	1,3,2,35,1,11
	.byte	'DF13',0,1
	.word	467
	.byte	1,2,2,35,1,11
	.byte	'DF14',0,1
	.word	467
	.byte	1,1,2,35,1,11
	.byte	'DF15',0,1
	.word	467
	.byte	1,0,2,35,1,11
	.byte	'DF16',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'DF17',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'DF18',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'DF19',0,1
	.word	467
	.byte	1,4,2,35,2,11
	.byte	'DF20',0,1
	.word	467
	.byte	1,3,2,35,2,11
	.byte	'DF21',0,1
	.word	467
	.byte	1,2,2,35,2,11
	.byte	'DF22',0,1
	.word	467
	.byte	1,1,2,35,2,11
	.byte	'DF23',0,1
	.word	467
	.byte	1,0,2,35,2,11
	.byte	'DF24',0,1
	.word	467
	.byte	1,7,2,35,3,11
	.byte	'DF25',0,1
	.word	467
	.byte	1,6,2,35,3,11
	.byte	'DF26',0,1
	.word	467
	.byte	1,5,2,35,3,11
	.byte	'DF27',0,1
	.word	467
	.byte	1,4,2,35,3,11
	.byte	'DF28',0,1
	.word	467
	.byte	1,3,2,35,3,11
	.byte	'DF29',0,1
	.word	467
	.byte	1,2,2,35,3,11
	.byte	'DF30',0,1
	.word	467
	.byte	1,1,2,35,3,11
	.byte	'DF31',0,1
	.word	467
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SMU_AD_Bits',0,25,145,1,3
	.word	107965
	.byte	10
	.byte	'_Ifx_SMU_AEX_Bits',0,25,148,1,16,4,11
	.byte	'IRQ0STS',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'IRQ1STS',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'IRQ2STS',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'RST0STS',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'RST1STS',0,1
	.word	467
	.byte	1,3,2,35,0,11
	.byte	'RST2STS',0,1
	.word	467
	.byte	1,2,2,35,0,11
	.byte	'RST3STS',0,1
	.word	467
	.byte	1,1,2,35,0,11
	.byte	'RST4STS',0,1
	.word	467
	.byte	1,0,2,35,0,11
	.byte	'RST5STS',0,1
	.word	467
	.byte	1,7,2,35,1,11
	.byte	'NMISTS',0,1
	.word	467
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	467
	.byte	1,5,2,35,1,11
	.byte	'EMSSTS',0,1
	.word	467
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	467
	.byte	4,0,2,35,1,11
	.byte	'IRQ0AEM',0,1
	.word	467
	.byte	1,7,2,35,2,11
	.byte	'IRQ1AEM',0,1
	.word	467
	.byte	1,6,2,35,2,11
	.byte	'IRQ2AEM',0,1
	.word	467
	.byte	1,5,2,35,2,11
	.byte	'RST0AEM',0,1
	.word	467
	.byte	1,4,2,35,2,11
	.byte	'RST1AEM',0,1
	.word	467
	.byte	1,3,2,35,2,11
	.byte	'RST2AEM',0,1
	.word	467
	.byte	1,2,2,35,2,11
	.byte	'RST3AEM',0,1
	.word	467
	.byte	1,1,2,35,2,11
	.byte	'RST4AEM',0,1
	.word	467
	.byte	1,0,2,35,2,11
	.byte	'RST5AEM',0,1
	.word	467
	.byte	1,7,2,35,3,11
	.byte	'NMIAEM',0,1
	.word	467
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	467
	.byte	1,5,2,35,3,11
	.byte	'EMSAEM',0,1
	.word	467
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	467
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SMU_AEX_Bits',0,25,176,1,3
	.word	108515
	.byte	10
	.byte	'_Ifx_SMU_AEXCLR_Bits',0,25,179,1,16,4,11
	.byte	'IRQ0CLR',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'IRQ1CLR',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'IRQ2CLR',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'RST0CLR',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'RST1CLR',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'RST2CLR',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'RST3CLR',0,4
	.word	866
	.byte	1,25,2,35,0,11
	.byte	'RST4CLR',0,4
	.word	866
	.byte	1,24,2,35,0,11
	.byte	'RST5CLR',0,4
	.word	866
	.byte	1,23,2,35,0,11
	.byte	'NMICLR',0,4
	.word	866
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	866
	.byte	1,21,2,35,0,11
	.byte	'EMSCLR',0,4
	.word	866
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	866
	.byte	4,16,2,35,0,11
	.byte	'IRQ0AEMCLR',0,4
	.word	866
	.byte	1,15,2,35,0,11
	.byte	'IRQ1AEMCLR',0,4
	.word	866
	.byte	1,14,2,35,0,11
	.byte	'IRQ2AEMCLR',0,4
	.word	866
	.byte	1,13,2,35,0,11
	.byte	'RST0AEMCLR',0,4
	.word	866
	.byte	1,12,2,35,0,11
	.byte	'RST1AEMCLR',0,4
	.word	866
	.byte	1,11,2,35,0,11
	.byte	'RST2AEMCLR',0,4
	.word	866
	.byte	1,10,2,35,0,11
	.byte	'RST3AEMCLR',0,4
	.word	866
	.byte	1,9,2,35,0,11
	.byte	'RST4AEMCLR',0,4
	.word	866
	.byte	1,8,2,35,0,11
	.byte	'RST5AEMCLR',0,4
	.word	866
	.byte	1,7,2,35,0,11
	.byte	'NMIAEMCLR',0,4
	.word	866
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	866
	.byte	1,5,2,35,0,11
	.byte	'EMSAEMCLR',0,4
	.word	866
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	866
	.byte	4,0,2,35,0,0,33
	.byte	'Ifx_SMU_AEXCLR_Bits',0,25,207,1,3
	.word	109072
	.byte	10
	.byte	'_Ifx_SMU_AFCNT_Bits',0,25,210,1,16,4,11
	.byte	'FCNT',0,1
	.word	467
	.byte	4,4,2,35,0,11
	.byte	'ACNT',0,2
	.word	1018
	.byte	12,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1018
	.byte	14,2,2,35,2,11
	.byte	'FCO',0,1
	.word	467
	.byte	1,1,2,35,3,11
	.byte	'ACO',0,1
	.word	467
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SMU_AFCNT_Bits',0,25,217,1,3
	.word	109668
	.byte	10
	.byte	'_Ifx_SMU_AG_Bits',0,25,220,1,16,4,11
	.byte	'SF0',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'SF1',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'SF2',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'SF3',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'SF4',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'SF5',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'SF6',0,4
	.word	866
	.byte	1,25,2,35,0,11
	.byte	'SF7',0,4
	.word	866
	.byte	1,24,2,35,0,11
	.byte	'SF8',0,4
	.word	866
	.byte	1,23,2,35,0,11
	.byte	'SF9',0,4
	.word	866
	.byte	1,22,2,35,0,11
	.byte	'SF10',0,4
	.word	866
	.byte	1,21,2,35,0,11
	.byte	'SF11',0,4
	.word	866
	.byte	1,20,2,35,0,11
	.byte	'SF12',0,4
	.word	866
	.byte	1,19,2,35,0,11
	.byte	'SF13',0,4
	.word	866
	.byte	1,18,2,35,0,11
	.byte	'SF14',0,4
	.word	866
	.byte	1,17,2,35,0,11
	.byte	'SF15',0,4
	.word	866
	.byte	1,16,2,35,0,11
	.byte	'SF16',0,4
	.word	866
	.byte	1,15,2,35,0,11
	.byte	'SF17',0,4
	.word	866
	.byte	1,14,2,35,0,11
	.byte	'SF18',0,4
	.word	866
	.byte	1,13,2,35,0,11
	.byte	'SF19',0,4
	.word	866
	.byte	1,12,2,35,0,11
	.byte	'SF20',0,4
	.word	866
	.byte	1,11,2,35,0,11
	.byte	'SF21',0,4
	.word	866
	.byte	1,10,2,35,0,11
	.byte	'SF22',0,4
	.word	866
	.byte	1,9,2,35,0,11
	.byte	'SF23',0,4
	.word	866
	.byte	1,8,2,35,0,11
	.byte	'SF24',0,4
	.word	866
	.byte	1,7,2,35,0,11
	.byte	'SF25',0,4
	.word	866
	.byte	1,6,2,35,0,11
	.byte	'SF26',0,4
	.word	866
	.byte	1,5,2,35,0,11
	.byte	'SF27',0,4
	.word	866
	.byte	1,4,2,35,0,11
	.byte	'SF28',0,4
	.word	866
	.byte	1,3,2,35,0,11
	.byte	'SF29',0,4
	.word	866
	.byte	1,2,2,35,0,11
	.byte	'SF30',0,4
	.word	866
	.byte	1,1,2,35,0,11
	.byte	'SF31',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_SMU_AG_Bits',0,25,254,1,3
	.word	109808
	.byte	10
	.byte	'_Ifx_SMU_AGC_Bits',0,25,129,2,16,4,11
	.byte	'IGCS0',0,4
	.word	866
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'IGCS1',0,4
	.word	866
	.byte	3,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	866
	.byte	1,24,2,35,0,11
	.byte	'IGCS2',0,4
	.word	866
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	866
	.byte	5,16,2,35,0,11
	.byte	'RCS',0,4
	.word	866
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	866
	.byte	2,8,2,35,0,11
	.byte	'PES',0,4
	.word	866
	.byte	5,3,2,35,0,11
	.byte	'EFRST',0,4
	.word	866
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	866
	.byte	2,0,2,35,0,0,33
	.byte	'Ifx_SMU_AGC_Bits',0,25,142,2,3
	.word	110359
	.byte	10
	.byte	'_Ifx_SMU_AGCF_Bits',0,25,145,2,16,4,11
	.byte	'CF0',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'CF1',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'CF2',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'CF3',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'CF4',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'CF5',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'CF6',0,4
	.word	866
	.byte	1,25,2,35,0,11
	.byte	'CF7',0,4
	.word	866
	.byte	1,24,2,35,0,11
	.byte	'CF8',0,4
	.word	866
	.byte	1,23,2,35,0,11
	.byte	'CF9',0,4
	.word	866
	.byte	1,22,2,35,0,11
	.byte	'CF10',0,4
	.word	866
	.byte	1,21,2,35,0,11
	.byte	'CF11',0,4
	.word	866
	.byte	1,20,2,35,0,11
	.byte	'CF12',0,4
	.word	866
	.byte	1,19,2,35,0,11
	.byte	'CF13',0,4
	.word	866
	.byte	1,18,2,35,0,11
	.byte	'CF14',0,4
	.word	866
	.byte	1,17,2,35,0,11
	.byte	'CF15',0,4
	.word	866
	.byte	1,16,2,35,0,11
	.byte	'CF16',0,4
	.word	866
	.byte	1,15,2,35,0,11
	.byte	'CF17',0,4
	.word	866
	.byte	1,14,2,35,0,11
	.byte	'CF18',0,4
	.word	866
	.byte	1,13,2,35,0,11
	.byte	'CF19',0,4
	.word	866
	.byte	1,12,2,35,0,11
	.byte	'CF20',0,4
	.word	866
	.byte	1,11,2,35,0,11
	.byte	'CF21',0,4
	.word	866
	.byte	1,10,2,35,0,11
	.byte	'CF22',0,4
	.word	866
	.byte	1,9,2,35,0,11
	.byte	'CF23',0,4
	.word	866
	.byte	1,8,2,35,0,11
	.byte	'CF24',0,4
	.word	866
	.byte	1,7,2,35,0,11
	.byte	'CF25',0,4
	.word	866
	.byte	1,6,2,35,0,11
	.byte	'CF26',0,4
	.word	866
	.byte	1,5,2,35,0,11
	.byte	'CF27',0,4
	.word	866
	.byte	1,4,2,35,0,11
	.byte	'CF28',0,4
	.word	866
	.byte	1,3,2,35,0,11
	.byte	'CF29',0,4
	.word	866
	.byte	1,2,2,35,0,11
	.byte	'CF30',0,4
	.word	866
	.byte	1,1,2,35,0,11
	.byte	'CF31',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_SMU_AGCF_Bits',0,25,179,2,3
	.word	110621
	.byte	10
	.byte	'_Ifx_SMU_AGFSP_Bits',0,25,182,2,16,4,11
	.byte	'FE0',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'FE1',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'FE2',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'FE3',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'FE4',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'FE5',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'FE6',0,4
	.word	866
	.byte	1,25,2,35,0,11
	.byte	'FE7',0,4
	.word	866
	.byte	1,24,2,35,0,11
	.byte	'FE8',0,4
	.word	866
	.byte	1,23,2,35,0,11
	.byte	'FE9',0,4
	.word	866
	.byte	1,22,2,35,0,11
	.byte	'FE10',0,4
	.word	866
	.byte	1,21,2,35,0,11
	.byte	'FE11',0,4
	.word	866
	.byte	1,20,2,35,0,11
	.byte	'FE12',0,4
	.word	866
	.byte	1,19,2,35,0,11
	.byte	'FE13',0,4
	.word	866
	.byte	1,18,2,35,0,11
	.byte	'FE14',0,4
	.word	866
	.byte	1,17,2,35,0,11
	.byte	'FE15',0,4
	.word	866
	.byte	1,16,2,35,0,11
	.byte	'FE16',0,4
	.word	866
	.byte	1,15,2,35,0,11
	.byte	'FE17',0,4
	.word	866
	.byte	1,14,2,35,0,11
	.byte	'FE18',0,4
	.word	866
	.byte	1,13,2,35,0,11
	.byte	'FE19',0,4
	.word	866
	.byte	1,12,2,35,0,11
	.byte	'FE20',0,4
	.word	866
	.byte	1,11,2,35,0,11
	.byte	'FE21',0,4
	.word	866
	.byte	1,10,2,35,0,11
	.byte	'FE22',0,4
	.word	866
	.byte	1,9,2,35,0,11
	.byte	'FE23',0,4
	.word	866
	.byte	1,8,2,35,0,11
	.byte	'FE24',0,4
	.word	866
	.byte	1,7,2,35,0,11
	.byte	'FE25',0,4
	.word	866
	.byte	1,6,2,35,0,11
	.byte	'FE26',0,4
	.word	866
	.byte	1,5,2,35,0,11
	.byte	'FE27',0,4
	.word	866
	.byte	1,4,2,35,0,11
	.byte	'FE28',0,4
	.word	866
	.byte	1,3,2,35,0,11
	.byte	'FE29',0,4
	.word	866
	.byte	1,2,2,35,0,11
	.byte	'FE30',0,4
	.word	866
	.byte	1,1,2,35,0,11
	.byte	'FE31',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_SMU_AGFSP_Bits',0,25,216,2,3
	.word	111176
	.byte	10
	.byte	'_Ifx_SMU_CLC_Bits',0,25,219,2,16,4,11
	.byte	'DISR',0,1
	.word	467
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	467
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	444
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_SMU_CLC_Bits',0,25,226,2,3
	.word	111733
	.byte	10
	.byte	'_Ifx_SMU_CMD_Bits',0,25,229,2,16,4,11
	.byte	'CMD',0,4
	.word	866
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	866
	.byte	4,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	866
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SMU_CMD_Bits',0,25,234,2,3
	.word	111876
	.byte	10
	.byte	'_Ifx_SMU_DBG_Bits',0,25,237,2,16,4,11
	.byte	'SSM',0,1
	.word	467
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	444
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SMU_DBG_Bits',0,25,241,2,3
	.word	111979
	.byte	10
	.byte	'_Ifx_SMU_FSP_Bits',0,25,244,2,16,4,11
	.byte	'PRE1',0,4
	.word	866
	.byte	3,29,2,35,0,11
	.byte	'PRE2',0,4
	.word	866
	.byte	2,27,2,35,0,11
	.byte	'MODE',0,4
	.word	866
	.byte	2,25,2,35,0,11
	.byte	'PES',0,4
	.word	866
	.byte	1,24,2,35,0,11
	.byte	'TFSP_LOW',0,4
	.word	866
	.byte	14,10,2,35,0,11
	.byte	'TFSP_HIGH',0,4
	.word	866
	.byte	10,0,2,35,0,0,33
	.byte	'Ifx_SMU_FSP_Bits',0,25,252,2,3
	.word	112067
	.byte	10
	.byte	'_Ifx_SMU_ID_Bits',0,25,255,2,16,4,11
	.byte	'MOD_REV',0,1
	.word	467
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	467
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,2
	.word	1018
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SMU_ID_Bits',0,25,132,3,3
	.word	112222
	.byte	10
	.byte	'_Ifx_SMU_KEYS_Bits',0,25,135,3,16,4,11
	.byte	'CFGLCK',0,4
	.word	866
	.byte	8,24,2,35,0,11
	.byte	'PERLCK',0,4
	.word	866
	.byte	8,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	866
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_SMU_KEYS_Bits',0,25,140,3,3
	.word	112332
	.byte	10
	.byte	'_Ifx_SMU_OCS_Bits',0,25,143,3,16,4,11
	.byte	'TGS',0,1
	.word	467
	.byte	2,6,2,35,0,11
	.byte	'TGB',0,1
	.word	467
	.byte	1,5,2,35,0,11
	.byte	'TG_P',0,1
	.word	467
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	444
	.byte	20,8,2,35,0,11
	.byte	'SUS',0,1
	.word	467
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	467
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	467
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	467
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_SMU_OCS_Bits',0,25,153,3,3
	.word	112444
	.byte	10
	.byte	'_Ifx_SMU_PCTL_Bits',0,25,156,3,16,4,11
	.byte	'HWDIR',0,4
	.word	866
	.byte	2,30,2,35,0,11
	.byte	'HWEN',0,4
	.word	866
	.byte	2,28,2,35,0,11
	.byte	'GFSCU_EN',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'GFSTS_EN',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	866
	.byte	1,25,2,35,0,11
	.byte	'PCS',0,4
	.word	866
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	866
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	866
	.byte	9,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	866
	.byte	9,0,2,35,0,0,33
	.byte	'Ifx_SMU_PCTL_Bits',0,25,167,3,3
	.word	112636
	.byte	10
	.byte	'_Ifx_SMU_RMCTL_Bits',0,25,170,3,16,4,11
	.byte	'TE0',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'TE1',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'TE2',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'TE3',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'TE4',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'TE5',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'TE6',0,4
	.word	866
	.byte	1,25,2,35,0,11
	.byte	'TE7',0,4
	.word	866
	.byte	1,24,2,35,0,11
	.byte	'TE8',0,4
	.word	866
	.byte	1,23,2,35,0,11
	.byte	'TE9',0,4
	.word	866
	.byte	1,22,2,35,0,11
	.byte	'TE10',0,4
	.word	866
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	866
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	866
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	866
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	866
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	866
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	866
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	866
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	866
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	866
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	866
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	866
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	866
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	866
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	866
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	866
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	866
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	866
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	866
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	866
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	866
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_SMU_RMCTL_Bits',0,25,204,3,3
	.word	112867
	.byte	10
	.byte	'_Ifx_SMU_RMEF_Bits',0,25,207,3,16,4,11
	.byte	'EF0',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'EF1',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'EF2',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'EF3',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'EF4',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'EF5',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'EF6',0,4
	.word	866
	.byte	1,25,2,35,0,11
	.byte	'EF7',0,4
	.word	866
	.byte	1,24,2,35,0,11
	.byte	'EF8',0,4
	.word	866
	.byte	1,23,2,35,0,11
	.byte	'EF9',0,4
	.word	866
	.byte	1,22,2,35,0,11
	.byte	'EF10',0,4
	.word	866
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	866
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	866
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	866
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	866
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	866
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	866
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	866
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	866
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	866
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	866
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	866
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	866
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	866
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	866
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	866
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	866
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	866
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	866
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	866
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	866
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_SMU_RMEF_Bits',0,25,241,3,3
	.word	113571
	.byte	10
	.byte	'_Ifx_SMU_RMSTS_Bits',0,25,244,3,16,4,11
	.byte	'STS0',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'STS1',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'STS2',0,4
	.word	866
	.byte	1,29,2,35,0,11
	.byte	'STS3',0,4
	.word	866
	.byte	1,28,2,35,0,11
	.byte	'STS4',0,4
	.word	866
	.byte	1,27,2,35,0,11
	.byte	'STS5',0,4
	.word	866
	.byte	1,26,2,35,0,11
	.byte	'STS6',0,4
	.word	866
	.byte	1,25,2,35,0,11
	.byte	'STS7',0,4
	.word	866
	.byte	1,24,2,35,0,11
	.byte	'STS8',0,4
	.word	866
	.byte	1,23,2,35,0,11
	.byte	'STS9',0,4
	.word	866
	.byte	1,22,2,35,0,11
	.byte	'STS10',0,4
	.word	866
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	866
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	866
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	866
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	866
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	866
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	866
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	866
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	866
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	866
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	866
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	866
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	866
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	866
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	866
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	866
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	866
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	866
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	866
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	866
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	866
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	866
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_SMU_RMSTS_Bits',0,25,150,4,3
	.word	114273
	.byte	10
	.byte	'_Ifx_SMU_RTAC00_Bits',0,25,153,4,16,4,11
	.byte	'GID0',0,4
	.word	866
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	866
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	866
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	866
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	866
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	866
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC00_Bits',0,25,161,4,3
	.word	114988
	.byte	10
	.byte	'_Ifx_SMU_RTAC01_Bits',0,25,164,4,16,4,11
	.byte	'GID2',0,4
	.word	866
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	866
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	866
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	866
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	866
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	866
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC01_Bits',0,25,172,4,3
	.word	115156
	.byte	10
	.byte	'_Ifx_SMU_RTAC10_Bits',0,25,175,4,16,4,11
	.byte	'GID0',0,4
	.word	866
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	866
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	866
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	866
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	866
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	866
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC10_Bits',0,25,183,4,3
	.word	115324
	.byte	10
	.byte	'_Ifx_SMU_RTAC11_Bits',0,25,186,4,16,4,11
	.byte	'GID2',0,4
	.word	866
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	866
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	866
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	866
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	866
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	866
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC11_Bits',0,25,194,4,3
	.word	115492
	.byte	10
	.byte	'_Ifx_SMU_RTC_Bits',0,25,197,4,16,4,11
	.byte	'RT0E',0,4
	.word	866
	.byte	1,31,2,35,0,11
	.byte	'RT1E',0,4
	.word	866
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	866
	.byte	6,24,2,35,0,11
	.byte	'RTD',0,4
	.word	866
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SMU_RTC_Bits',0,25,203,4,3
	.word	115660
	.byte	10
	.byte	'_Ifx_SMU_STS_Bits',0,25,206,4,16,4,11
	.byte	'CMD',0,4
	.word	866
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	866
	.byte	4,24,2,35,0,11
	.byte	'RES',0,4
	.word	866
	.byte	1,23,2,35,0,11
	.byte	'ASCE',0,4
	.word	866
	.byte	1,22,2,35,0,11
	.byte	'FSP',0,4
	.word	866
	.byte	2,20,2,35,0,11
	.byte	'FSTS',0,4
	.word	866
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	866
	.byte	3,16,2,35,0,11
	.byte	'RTS0',0,4
	.word	866
	.byte	1,15,2,35,0,11
	.byte	'RTME0',0,4
	.word	866
	.byte	1,14,2,35,0,11
	.byte	'RTS1',0,4
	.word	866
	.byte	1,13,2,35,0,11
	.byte	'RTME1',0,4
	.word	866
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	866
	.byte	12,0,2,35,0,0,33
	.byte	'Ifx_SMU_STS_Bits',0,25,220,4,3
	.word	115780
	.byte	12,25,228,4,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107331
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_ACCEN0',0,25,233,4,3
	.word	116035
	.byte	12,25,236,4,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107888
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_ACCEN1',0,25,241,4,3
	.word	116099
	.byte	12,25,244,4,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107965
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AD',0,25,249,4,3
	.word	116163
	.byte	12,25,252,4,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108515
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AEX',0,25,129,5,3
	.word	116223
	.byte	12,25,132,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109072
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AEXCLR',0,25,137,5,3
	.word	116284
	.byte	12,25,140,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109668
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AFCNT',0,25,145,5,3
	.word	116348
	.byte	12,25,148,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109808
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AG',0,25,153,5,3
	.word	116411
	.byte	12,25,156,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110359
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AGC',0,25,161,5,3
	.word	116471
	.byte	12,25,164,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110621
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AGCF',0,25,169,5,3
	.word	116532
	.byte	12,25,172,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111176
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_AGFSP',0,25,177,5,3
	.word	116594
	.byte	12,25,180,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111733
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_CLC',0,25,185,5,3
	.word	116657
	.byte	12,25,188,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111876
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_CMD',0,25,193,5,3
	.word	116718
	.byte	12,25,196,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111979
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_DBG',0,25,201,5,3
	.word	116779
	.byte	12,25,204,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	112067
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_FSP',0,25,209,5,3
	.word	116840
	.byte	12,25,212,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	112222
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_ID',0,25,217,5,3
	.word	116901
	.byte	12,25,220,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	112332
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_KEYS',0,25,225,5,3
	.word	116961
	.byte	12,25,228,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	112444
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_OCS',0,25,233,5,3
	.word	117023
	.byte	12,25,236,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	112636
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_PCTL',0,25,241,5,3
	.word	117084
	.byte	12,25,244,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	112867
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RMCTL',0,25,249,5,3
	.word	117146
	.byte	12,25,252,5,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	113571
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RMEF',0,25,129,6,3
	.word	117209
	.byte	12,25,132,6,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	114273
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RMSTS',0,25,137,6,3
	.word	117271
	.byte	12,25,140,6,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	114988
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC00',0,25,145,6,3
	.word	117334
	.byte	12,25,148,6,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	115156
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC01',0,25,153,6,3
	.word	117398
	.byte	12,25,156,6,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	115324
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC10',0,25,161,6,3
	.word	117462
	.byte	12,25,164,6,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	115492
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RTAC11',0,25,169,6,3
	.word	117526
	.byte	12,25,172,6,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	115660
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_RTC',0,25,177,6,3
	.word	117590
	.byte	12,25,180,6,9,4,13
	.byte	'U',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	460
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	115780
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SMU_STS',0,25,185,6,3
	.word	117651
	.byte	15,11,210,2,9,1,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy30',0,1,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy60',0,2,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy120',0,3,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy240',0,4,0,33
	.byte	'IfxScuCcu_LowPowerDivRatio',0,11,216,2,3
	.word	117712
	.byte	15,11,220,2,9,1,16
	.byte	'IfxScuCcu_ModulationAmplitude_0p5',0,0,16
	.byte	'IfxScuCcu_ModulationAmplitude_1p0',0,1,16
	.byte	'IfxScuCcu_ModulationAmplitude_1p25',0,2,16
	.byte	'IfxScuCcu_ModulationAmplitude_1p5',0,3,16
	.byte	'IfxScuCcu_ModulationAmplitude_2p0',0,4,16
	.byte	'IfxScuCcu_ModulationAmplitude_2p5',0,5,16
	.byte	'IfxScuCcu_ModulationAmplitude_count',0,6,0,33
	.byte	'IfxScuCcu_ModulationAmplitude',0,11,229,2,3
	.word	117905
	.byte	15,11,254,3,9,1,16
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc1',0,0,16
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc0',0,1,16
	.byte	'IfxScuCcu_PllInputClockSelection_fSysclk',0,2,0,33
	.byte	'IfxScuCcu_PllInputClockSelection',0,11,131,4,3
	.word	118206
	.byte	15,11,135,4,9,1,16
	.byte	'IfxScuCcu_Traprequest_esr0',0,0,16
	.byte	'IfxScuCcu_Traprequest_esr1',0,1,16
	.byte	'IfxScuCcu_Traprequest_trap2',0,2,16
	.byte	'IfxScuCcu_Traprequest_smu',0,3,0,33
	.byte	'IfxScuCcu_Traprequest',0,11,141,4,3
	.word	118380
	.byte	15,11,147,4,9,1,16
	.byte	'IfxScuCcu_ModEn_disabled',0,0,16
	.byte	'IfxScuCcu_ModEn_enabled',0,1,0,33
	.byte	'IfxScuCcu_ModEn',0,11,151,4,3
	.word	118534
	.byte	20,11,162,4,9,6,13
	.byte	'pDivider',0
	.word	467
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	467
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	467
	.byte	1,2,35,2,13
	.byte	'k3Divider',0
	.word	467
	.byte	1,2,35,3,13
	.byte	'k3DividerBypass',0
	.word	467
	.byte	1,2,35,4,0,33
	.byte	'IfxScuCcu_PerPllConfig',0,11,171,4,3
	.word	118619
	.byte	20,11,176,4,9,4,13
	.byte	'pDivider',0
	.word	467
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	467
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	467
	.byte	1,2,35,2,0,33
	.byte	'IfxScuCcu_SysPllConfig',0,11,181,4,3
	.word	118757
	.byte	20,11,189,4,9,8,13
	.byte	'value',0
	.word	2262
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	2262
	.byte	4,2,35,4,0,33
	.byte	'IfxScuCcu_CcuconRegConfig',0,11,193,4,3
	.word	118851
	.byte	20,11,197,4,9,6,13
	.byte	'k2Step',0
	.word	467
	.byte	1,2,35,0,13
	.byte	'waitTime',0
	.word	240
	.byte	4,2,35,2,0,33
	.byte	'IfxScuCcu_PllStepConfig',0,11,201,4,3
	.word	118922
	.byte	20,11,205,4,9,16,13
	.byte	'xtalFrequency',0
	.word	2262
	.byte	4,2,35,0,13
	.byte	'pllInputClockSelection',0
	.word	118206
	.byte	1,2,35,4,13
	.byte	'sysPllConfig',0
	.word	118757
	.byte	4,2,35,6,13
	.byte	'perPllConfig',0
	.word	118619
	.byte	6,2,35,10,0,33
	.byte	'IfxScuCcu_pllsParameterConfig',0,11,211,4,3
	.word	118996
	.byte	20,11,219,4,9,8,13
	.byte	'value',0
	.word	2262
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	2262
	.byte	4,2,35,4,0,33
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,11,223,4,3
	.word	119141
	.byte	20,11,231,4,9,80,13
	.byte	'ccucon0',0
	.word	118851
	.byte	8,2,35,0,13
	.byte	'ccucon1',0
	.word	118851
	.byte	8,2,35,8,13
	.byte	'ccucon2',0
	.word	118851
	.byte	8,2,35,16,13
	.byte	'ccucon5',0
	.word	118851
	.byte	8,2,35,24,13
	.byte	'ccucon6',0
	.word	118851
	.byte	8,2,35,32,13
	.byte	'ccucon7',0
	.word	118851
	.byte	8,2,35,40,13
	.byte	'ccucon8',0
	.word	118851
	.byte	8,2,35,48,13
	.byte	'ccucon9',0
	.word	118851
	.byte	8,2,35,56,13
	.byte	'ccucon10',0
	.word	118851
	.byte	8,2,35,64,13
	.byte	'ccucon11',0
	.word	118851
	.byte	8,2,35,72,0,33
	.byte	'IfxScuCcu_ClockDistributionConfig',0,11,243,4,3
	.word	119217
	.byte	20,11,247,4,9,20,13
	.byte	'pllsParameters',0
	.word	118996
	.byte	16,2,35,0,13
	.byte	'waitTime',0
	.word	240
	.byte	4,2,35,16,0,33
	.byte	'IfxScuCcu_InitialStepConfig',0,11,251,4,3
	.word	119439
	.byte	21
	.word	118922
	.byte	3
	.word	119525
	.byte	20,11,255,4,9,8,13
	.byte	'numOfSteps',0
	.word	467
	.byte	1,2,35,0,13
	.byte	'pllSteps',0
	.word	119530
	.byte	4,2,35,4,0,33
	.byte	'IfxScuCcu_PllThrottleConfig',0,11,131,5,3
	.word	119535
	.byte	20,11,137,5,9,2,13
	.byte	'Mod_Enable',0
	.word	118534
	.byte	1,2,35,0,13
	.byte	'Mod_Amp',0
	.word	117905
	.byte	1,2,35,1,0,33
	.byte	'IfxScuCcu_Mod_Config',0,11,141,5,3
	.word	119617
	.byte	33
	.byte	'Ifx_EDSADC_ACCEN0_Bits',0,13,102,3
	.word	11676
	.byte	33
	.byte	'Ifx_EDSADC_ACCPROT_Bits',0,13,119,3
	.word	13151
	.byte	33
	.byte	'Ifx_EDSADC_CGCFG_Bits',0,13,138,1,3
	.word	13426
	.byte	33
	.byte	'Ifx_EDSADC_CH_BOUNDSEL_Bits',0,13,145,1,3
	.word	18818
	.byte	33
	.byte	'Ifx_EDSADC_CH_CGSYNC_Bits',0,13,154,1,3
	.word	19049
	.byte	33
	.byte	'Ifx_EDSADC_CH_DICFG_Bits',0,13,175,1,3
	.word	15384
	.byte	33
	.byte	'Ifx_EDSADC_CH_FCFGA_Bits',0,13,185,1,3
	.word	18648
	.byte	33
	.byte	'Ifx_EDSADC_CH_FCFGC_Bits',0,13,194,1,3
	.word	16214
	.byte	33
	.byte	'Ifx_EDSADC_CH_FCFGM_Bits',0,13,220,1,3
	.word	15754
	.byte	33
	.byte	'Ifx_EDSADC_CH_FCNTC_Bits',0,13,228,1,3
	.word	16366
	.byte	33
	.byte	'Ifx_EDSADC_CH_GAINCAL_Bits',0,13,237,1,3
	.word	17776
	.byte	33
	.byte	'Ifx_EDSADC_CH_GAINCORR_Bits',0,13,246,1,3
	.word	18143
	.byte	33
	.byte	'Ifx_EDSADC_CH_GAINCTR_Bits',0,13,129,2,3
	.word	17939
	.byte	33
	.byte	'Ifx_EDSADC_CH_IIVAL_Bits',0,13,136,2,3
	.word	16965
	.byte	33
	.byte	'Ifx_EDSADC_CH_ISTAT_Bits',0,13,147,2,3
	.word	17077
	.byte	33
	.byte	'Ifx_EDSADC_CH_IWCTR_Bits',0,13,163,2,3
	.word	16678
	.byte	33
	.byte	'Ifx_EDSADC_CH_MODCFG_Bits',0,13,185,2,3
	.word	15003
	.byte	33
	.byte	'Ifx_EDSADC_CH_OFFCOMP_Bits',0,13,192,2,3
	.word	17660
	.byte	33
	.byte	'Ifx_EDSADC_CH_OVSCFG_Bits',0,13,203,2,3
	.word	16495
	.byte	33
	.byte	'Ifx_EDSADC_CH_RECTCFG_Bits',0,13,218,2,3
	.word	19193
	.byte	33
	.byte	'Ifx_EDSADC_CH_RESA_Bits',0,13,225,2,3
	.word	18936
	.byte	33
	.byte	'Ifx_EDSADC_CH_RESM_Bits',0,13,232,2,3
	.word	17548
	.byte	33
	.byte	'Ifx_EDSADC_CH_RFC_Bits',0,13,248,2,3
	.word	17272
	.byte	33
	.byte	'Ifx_EDSADC_CH_TSCNT_Bits',0,13,131,3,3
	.word	18456
	.byte	33
	.byte	'Ifx_EDSADC_CH_TSTMP_Bits',0,13,140,3,3
	.word	18307
	.byte	33
	.byte	'Ifx_EDSADC_CH_VCM_Bits',0,13,157,3,3
	.word	19457
	.byte	33
	.byte	'Ifx_EDSADC_CLC_Bits',0,13,167,3,3
	.word	10874
	.byte	33
	.byte	'Ifx_EDSADC_EVFLAG_Bits',0,13,202,3,3
	.word	13770
	.byte	33
	.byte	'Ifx_EDSADC_EVFLAGCLR_Bits',0,13,237,3,3
	.word	14385
	.byte	33
	.byte	'Ifx_EDSADC_GLOBCFG_Bits',0,13,253,3,3
	.word	12257
	.byte	33
	.byte	'Ifx_EDSADC_GLOBRC_Bits',0,13,160,4,3
	.word	12536
	.byte	33
	.byte	'Ifx_EDSADC_ID_Bits',0,13,168,4,3
	.word	11034
	.byte	33
	.byte	'Ifx_EDSADC_KRST0_Bits',0,13,176,4,3
	.word	11550
	.byte	33
	.byte	'Ifx_EDSADC_KRST1_Bits',0,13,183,4,3
	.word	11443
	.byte	33
	.byte	'Ifx_EDSADC_KRSTCLR_Bits',0,13,190,4,3
	.word	11334
	.byte	33
	.byte	'Ifx_EDSADC_OCS_Bits',0,13,200,4,3
	.word	11171
	.byte	33
	.byte	'Ifx_EDSADC_ACCEN0',0,13,213,4,3
	.word	12208
	.byte	33
	.byte	'Ifx_EDSADC_ACCPROT',0,13,221,4,3
	.word	13386
	.byte	33
	.byte	'Ifx_EDSADC_CGCFG',0,13,229,4,3
	.word	13721
	.byte	33
	.byte	'Ifx_EDSADC_CH_BOUNDSEL',0,13,237,4,3
	.word	18896
	.byte	33
	.byte	'Ifx_EDSADC_CH_CGSYNC',0,13,245,4,3
	.word	19153
	.byte	33
	.byte	'Ifx_EDSADC_CH_DICFG',0,13,253,4,3
	.word	15714
	.byte	33
	.byte	'Ifx_EDSADC_CH_FCFGA',0,13,133,5,3
	.word	18778
	.byte	33
	.byte	'Ifx_EDSADC_CH_FCFGC',0,13,141,5,3
	.word	16326
	.byte	33
	.byte	'Ifx_EDSADC_CH_FCFGM',0,13,149,5,3
	.word	16174
	.byte	33
	.byte	'Ifx_EDSADC_CH_FCNTC',0,13,157,5,3
	.word	16455
	.byte	33
	.byte	'Ifx_EDSADC_CH_GAINCAL',0,13,165,5,3
	.word	17899
	.byte	33
	.byte	'Ifx_EDSADC_CH_GAINCORR',0,13,173,5,3
	.word	18267
	.byte	33
	.byte	'Ifx_EDSADC_CH_GAINCTR',0,13,181,5,3
	.word	18103
	.byte	33
	.byte	'Ifx_EDSADC_CH_IIVAL',0,13,189,5,3
	.word	17037
	.byte	33
	.byte	'Ifx_EDSADC_CH_ISTAT',0,13,197,5,3
	.word	17232
	.byte	33
	.byte	'Ifx_EDSADC_CH_IWCTR',0,13,205,5,3
	.word	16925
	.byte	33
	.byte	'Ifx_EDSADC_CH_MODCFG',0,13,213,5,3
	.word	15344
	.byte	33
	.byte	'Ifx_EDSADC_CH_OFFCOMP',0,13,221,5,3
	.word	17736
	.byte	33
	.byte	'Ifx_EDSADC_CH_OVSCFG',0,13,229,5,3
	.word	16638
	.byte	33
	.byte	'Ifx_EDSADC_CH_RECTCFG',0,13,237,5,3
	.word	19417
	.byte	33
	.byte	'Ifx_EDSADC_CH_RESA',0,13,245,5,3
	.word	19009
	.byte	33
	.byte	'Ifx_EDSADC_CH_RESM',0,13,253,5,3
	.word	17620
	.byte	33
	.byte	'Ifx_EDSADC_CH_RFC',0,13,133,6,3
	.word	17508
	.byte	33
	.byte	'Ifx_EDSADC_CH_TSCNT',0,13,141,6,3
	.word	18608
	.byte	33
	.byte	'Ifx_EDSADC_CH_TSTMP',0,13,149,6,3
	.word	18416
	.byte	33
	.byte	'Ifx_EDSADC_CH_VCM',0,13,157,6,3
	.word	19713
	.byte	33
	.byte	'Ifx_EDSADC_CLC',0,13,165,6,3
	.word	10994
	.byte	33
	.byte	'Ifx_EDSADC_EVFLAG',0,13,173,6,3
	.word	14345
	.byte	33
	.byte	'Ifx_EDSADC_EVFLAGCLR',0,13,181,6,3
	.word	14963
	.byte	33
	.byte	'Ifx_EDSADC_GLOBCFG',0,13,189,6,3
	.word	12496
	.byte	33
	.byte	'Ifx_EDSADC_GLOBRC',0,13,197,6,3
	.word	13111
	.byte	33
	.byte	'Ifx_EDSADC_ID',0,13,205,6,3
	.word	11122
	.byte	33
	.byte	'Ifx_EDSADC_KRST0',0,13,213,6,3
	.word	11636
	.byte	33
	.byte	'Ifx_EDSADC_KRST1',0,13,221,6,3
	.word	11510
	.byte	33
	.byte	'Ifx_EDSADC_KRSTCLR',0,13,229,6,3
	.word	11403
	.byte	33
	.byte	'Ifx_EDSADC_OCS',0,13,237,6,3
	.word	11294
	.byte	14
	.word	19762
	.byte	33
	.byte	'Ifx_EDSADC_CH',0,13,157,7,3
	.word	121913
	.byte	14
	.word	20404
	.byte	33
	.byte	'Ifx_EDSADC',0,13,198,7,3
	.word	121941
	.byte	21
	.word	22595
	.byte	33
	.byte	'IfxEdsadc_Dsn_In',0,15,62,3
	.word	121966
	.byte	21
	.word	22755
	.byte	33
	.byte	'IfxEdsadc_Dsp_In',0,15,71,3
	.word	121996
	.byte	21
	.word	22275
	.byte	33
	.byte	'IfxEdsadc_Cin_In',0,15,80,3
	.word	122026
	.byte	21
	.word	22435
	.byte	33
	.byte	'IfxEdsadc_Din_In',0,15,89,3
	.word	122056
	.byte	21
	.word	22915
	.byte	33
	.byte	'IfxEdsadc_Itr_In',0,15,116,3
	.word	122086
	.byte	21
	.word	21587
	.byte	33
	.byte	'IfxEdsadc_Cgpwm_Out',0,15,124,3
	.word	122116
	.byte	20,15,127,15,16,13
	.byte	'module',0
	.word	20866
	.byte	4,2,35,0,13
	.byte	'pin',0
	.word	21548
	.byte	8,2,35,4,13
	.byte	'select',0
	.word	22157
	.byte	1,2,35,12,0,21
	.word	122149
	.byte	33
	.byte	'IfxEdsadc_Sg_In',0,15,132,1,3
	.word	122200
	.byte	20,15,144,1,15,20,13
	.byte	'module',0
	.word	20866
	.byte	4,2,35,0,13
	.byte	'channel',0
	.word	21042
	.byte	1,2,35,4,13
	.byte	'pin',0
	.word	21548
	.byte	8,2,35,8,13
	.byte	'select',0
	.word	10296
	.byte	1,2,35,16,0,21
	.word	122230
	.byte	33
	.byte	'IfxEdsadc_Cout_Out',0,15,150,1,3
	.word	122299
	.byte	33
	.byte	'IfxEdsadc_AnalogClockSyncDelay',0,12,87,3
	.word	31768
	.byte	33
	.byte	'IfxEdsadc_AuxServiceRequest',0,12,98,3
	.word	29688
	.byte	33
	.byte	'IfxEdsadc_CarrierWaveformMode',0,12,109,3
	.word	27068
	.byte	33
	.byte	'IfxEdsadc_CommonModeHoldVoltage',0,12,117,3
	.word	24129
	.byte	33
	.byte	'IfxEdsadc_DataRead',0,12,127,3
	.word	29082
	.byte	33
	.byte	'IfxEdsadc_DataStream',0,12,140,1,3
	.word	28317
	.byte	33
	.byte	'IfxEdsadc_DitheringIntensity',0,12,151,1,3
	.word	32907
	.byte	33
	.byte	'IfxEdsadc_EventSelect',0,12,161,1,3
	.word	30014
	.byte	33
	.byte	'IfxEdsadc_FractionalRefVoltage',0,12,190,1,3
	.word	23959
	.byte	33
	.byte	'IfxEdsadc_FractionalRefVoltageSelection',0,12,200,1,3
	.word	23763
	.byte	33
	.byte	'IfxEdsadc_HalfSupplyVoltage',0,12,208,1,3
	.word	24047
	.byte	33
	.byte	'IfxEdsadc_InputConfig',0,12,219,1,3
	.word	32130
	.byte	33
	.byte	'IfxEdsadc_InputDataSource',0,12,234,1,3
	.word	27974
	.byte	33
	.byte	'IfxEdsadc_InputGain',0,12,246,1,3
	.word	31610
	.byte	33
	.byte	'IfxEdsadc_InputMuxControlMode',0,12,128,2,3
	.word	32457
	.byte	33
	.byte	'IfxEdsadc_InputPin',0,12,139,2,3
	.word	32290
	.byte	33
	.byte	'IfxEdsadc_IntegrationShiftControl',0,12,152,2,3
	.word	31139
	.byte	33
	.byte	'IfxEdsadc_IntegrationWindowSize',0,12,161,2,3
	.word	31032
	.byte	33
	.byte	'IfxEdsadc_IntegratorTrigger',0,12,173,2,3
	.word	28745
	.byte	33
	.byte	'IfxEdsadc_MainServiceRequest',0,12,184,2,3
	.word	29507
	.byte	33
	.byte	'IfxEdsadc_ModulatorClockGeneration',0,12,208,2,3
	.word	33062
	.byte	33
	.byte	'IfxEdsadc_OffsetCompensationFilter',0,12,223,2,3
	.word	30137
	.byte	33
	.byte	'IfxEdsadc_OvershootCompensation',0,12,232,2,3
	.word	30561
	.byte	33
	.byte	'IfxEdsadc_RectifierSignSource',0,12,244,2,3
	.word	33418
	.byte	33
	.byte	'IfxEdsadc_RestartFilterChain',0,12,252,2,3
	.word	31374
	.byte	33
	.byte	'IfxEdsadc_ResultDisplayMode',0,12,133,3,3
	.word	29191
	.byte	33
	.byte	'IfxEdsadc_SampleClockSource',0,12,144,3,3
	.word	28588
	.byte	33
	.byte	'IfxEdsadc_ServiceRequestFifolevel',0,12,155,3,3
	.word	29855
	.byte	15,12,160,3,9,1,16
	.byte	'IfxEdsadc_SleepMode_enable',0,0,16
	.byte	'IfxEdsadc_SleepMode_disable',0,1,0,33
	.byte	'IfxEdsadc_SleepMode',0,12,164,3,3
	.word	123381
	.byte	33
	.byte	'IfxEdsadc_SupplyVoltageLevel',0,12,182,3,3
	.word	33163
	.byte	15,12,186,3,9,1,16
	.byte	'IfxEdsadc_SuspendMode_none',0,0,16
	.byte	'IfxEdsadc_SuspendMode_hard',0,1,16
	.byte	'IfxEdsadc_SuspendMode_soft',0,2,0,33
	.byte	'IfxEdsadc_SuspendMode',0,12,191,3,3
	.word	123514
	.byte	33
	.byte	'IfxEdsadc_TimeStampCounterClockSelection',0,12,201,3,3
	.word	23198
	.byte	33
	.byte	'IfxEdsadc_TimestampTrigger',0,12,212,3,3
	.word	28917
	.byte	33
	.byte	'IfxEdsadc_TriggerInput',0,12,235,3,3
	.word	27535
	.byte	33
	.byte	'IfxEdsadc_dithering',0,12,244,3,3
	.word	32389
	.byte	33
	.byte	'IfxEdsadc_AnalogMux',0,12,254,3,3
	.word	23483
	.byte	33
	.byte	'IfxEdsadc_TimeStampCounterControl',0,12,134,4,3
	.word	23397
	.byte	33
	.byte	'IfxEdsadc_Edsadc_ChannelPins',0,17,188,1,3
	.word	33694
	.byte	33
	.byte	'IfxEdsadc_Edsadc_CombFilterConfig',0,17,196,1,3
	.word	27472
	.byte	33
	.byte	'IfxEdsadc_Edsadc_CommonModeVoltageConfig',0,17,209,1,3
	.word	24218
	.byte	33
	.byte	'IfxEdsadc_Edsadc_DemodulatorConfig',0,17,225,1,3
	.word	29274
	.byte	33
	.byte	'IfxEdsadc_Edsadc_FirFilterConfig',0,17,245,1,3
	.word	30653
	.byte	33
	.byte	'IfxEdsadc_Edsadc_IntegratorConfig',0,17,129,2,3
	.word	31450
	.byte	33
	.byte	'IfxEdsadc_Edsadc_ModulatorConfig',0,17,145,2,3
	.word	32638
	.byte	33
	.byte	'IfxEdsadc_Edsadc_RectifierConfig',0,17,155,2,3
	.word	33601
	.byte	33
	.byte	'IfxEdsadc_Edsadc_TimeStampCounter',0,17,164,2,3
	.word	23555
	.byte	33
	.byte	'IfxEdsadc_Edsadc_GainCalibrationConfig',0,17,177,2,3
	.word	33880
	.byte	33
	.byte	'IfxEdsadc_Edsadc',0,17,186,2,3
	.word	27040
	.byte	33
	.byte	'IfxEdsadc_Edsadc_CarrierGenConfig',0,17,200,2,3
	.word	27231
	.byte	33
	.byte	'IfxEdsadc_Edsadc_Channel',0,17,209,2,3
	.word	27408
	.byte	33
	.byte	'IfxEdsadc_Edsadc_ChannelConfig',0,17,229,2,3
	.word	33990
	.byte	33
	.byte	'IfxEdsadc_Edsadc_Config',0,17,240,2,3
	.word	33306
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L70:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,4,1,58,15,59,15,57,15,11,15,0,0,16,40,0,3,8,28,13,0,0
	.byte	17,11,1,0,0,18,1,1,11,15,73,19,0,0,19,33,0,47,15,0,0,20,19,1,58,15,59,15,57,15,11,15,0,0,21,38,0,73,19
	.byte	0,0,22,46,1,3,8,54,15,39,12,63,12,60,12,0,0,23,5,0,73,19,0,0,24,46,1,3,8,73,19,54,15,39,12,63,12,60,12
	.byte	0,0,25,5,0,3,8,73,19,0,0,26,46,1,49,19,0,0,27,5,0,49,19,0,0,28,46,1,3,8,58,15,59,15,57,15,54,15,39,12
	.byte	63,12,60,12,0,0,29,46,0,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,30,29,1,49,19,0,0,31,11
	.byte	0,49,19,0,0,32,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,33,22,0,3,8,58,15,59,15,57
	.byte	15,73,19,0,0,34,21,0,54,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L71:
	.word	.L475-.L474
.L474:
	.half	3
	.word	.L477-.L476
.L476:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxSrc.h',0,2,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'IfxScuWdt.h',0,4,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxCpu_cfg.h',0,5,0,0
	.byte	'IfxPort.h',0,6,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'IfxScuCcu.h',0,4,0,0
	.byte	'IfxEdsadc.h',0,7,0,0
	.byte	'IfxEdsadc_regdef.h',0,3,0,0
	.byte	'IfxEdsadc_cfg.h',0,5,0,0
	.byte	'IfxEdsadc_PinMap.h',0,8,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.h',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0,0,0,0
	.byte	'IfxSrc_cfg.h',0,5,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_TypesReg.h',0,3,0,0
	.byte	'IfxScu_cfg.h',0,5,0,0
	.byte	'IfxCpu_regdef.h',0,3,0,0
	.byte	'IfxStm_regdef.h',0,3,0,0
	.byte	'IfxSmu_regdef.h',0,3,0,0,0
.L477:
.L475:
	.sdecl	'.debug_info',debug,cluster('IfxEdsadc_Edsadc_initCarrierGen')
	.sect	'.debug_info'
.L72:
	.word	729
	.half	3
	.word	.L73
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L75,.L74
	.byte	2
	.word	.L68
	.byte	3
	.byte	'IfxEdsadc_Edsadc_initCarrierGen',0,1,107,6,1,1,1
	.word	.L37,.L162,.L36
	.byte	4
	.byte	'edsadc',0,1,107,56
	.word	.L163,.L164
	.byte	4
	.byte	'config',0,1,107,99
	.word	.L165,.L166
	.byte	5
	.word	.L37,.L162
	.byte	6
	.byte	'cgcfg',0,1,109,22
	.word	.L167,.L168
	.byte	5
	.word	.L169,.L162
	.byte	6
	.byte	'sourceFreq',0,1,113,22
	.word	.L170,.L171
	.byte	6
	.byte	'targetFreq',0,1,114,22
	.word	.L170,.L172
	.byte	5
	.word	.L173,.L162
	.byte	6
	.byte	'pinPos',0,1,122,32
	.word	.L174,.L175
	.byte	7
	.word	.L176,.L177,.L178
	.byte	8
	.word	.L179,.L180
	.byte	8
	.word	.L181,.L182
	.byte	8
	.word	.L183,.L184
	.byte	9
	.word	.L185,.L186
	.byte	7
	.word	.L188,.L189,.L190
	.byte	8
	.word	.L191,.L192
	.byte	8
	.word	.L193,.L194
	.byte	8
	.word	.L195,.L196
	.byte	8
	.word	.L197,.L198
	.byte	10
	.word	.L199,.L189,.L190
	.byte	0,0,0,7
	.word	.L176,.L187,.L8
	.byte	8
	.word	.L179,.L180
	.byte	8
	.word	.L181,.L182
	.byte	8
	.word	.L183,.L184
	.byte	0,5
	.word	.L8,.L162
	.byte	6
	.byte	'pinNeg',0,1,129,1,32
	.word	.L174,.L200
	.byte	7
	.word	.L176,.L201,.L202
	.byte	8
	.word	.L179,.L180
	.byte	8
	.word	.L181,.L182
	.byte	8
	.word	.L183,.L184
	.byte	9
	.word	.L185,.L203
	.byte	7
	.word	.L188,.L205,.L206
	.byte	8
	.word	.L191,.L192
	.byte	8
	.word	.L193,.L194
	.byte	8
	.word	.L195,.L196
	.byte	8
	.word	.L197,.L198
	.byte	10
	.word	.L199,.L205,.L206
	.byte	0,0,0,7
	.word	.L176,.L204,.L10
	.byte	8
	.word	.L179,.L180
	.byte	8
	.word	.L181,.L182
	.byte	8
	.word	.L183,.L184
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEdsadc_Edsadc_initCarrierGen')
	.sect	'.debug_abbrev'
.L73:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,85,6,0,0
	.byte	10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEdsadc_Edsadc_initCarrierGen')
	.sect	'.debug_line'
.L74:
	.word	.L479-.L478
.L478:
	.half	3
	.word	.L481-.L480
.L480:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0,0,0,0
	.byte	'IfxEdsadc.h',0,1,0,0
	.byte	'IfxPort.h',0,2,0,0,0
.L481:
	.byte	5,6,7,0,5,2
	.word	.L37
	.byte	3,234,0,1,5,13,9
	.half	.L418-.L37
	.byte	3,4,1,5,78,3,2,1,5,41,9
	.half	.L416-.L418
	.byte	3,1,1,5,33,9
	.half	.L482-.L416
	.byte	1,5,73,9
	.half	.L483-.L482
	.byte	3,1,1,5,81,1,5,56,9
	.half	.L484-.L483
	.byte	1,5,81,1,5,27,9
	.half	.L419-.L484
	.byte	1,5,36,3,1,1,5,35,9
	.half	.L485-.L419
	.byte	3,2,1,5,36,9
	.half	.L486-.L485
	.byte	3,126,1,5,11,3,4,1,5,27,9
	.half	.L487-.L486
	.byte	3,124,1,5,36,3,1,1,5,27,9
	.half	.L488-.L487
	.byte	1,9
	.half	.L489-.L488
	.byte	3,1,1,9
	.half	.L490-.L489
	.byte	3,2,1,5,47,9
	.half	.L173-.L490
	.byte	3,2,1,5,5,9
	.half	.L420-.L173
	.byte	3,2,1,4,2,5,19,7,9
	.half	.L177-.L420
	.byte	3,148,6,1,4,1,5,46,9
	.half	.L178-.L177
	.byte	3,238,121,1,5,63,9
	.half	.L491-.L178
	.byte	1,4,2,5,5,9
	.half	.L187-.L491
	.byte	3,146,6,1,5,86,7,9
	.half	.L189-.L187
	.byte	3,2,1,5,61,9
	.half	.L492-.L189
	.byte	1,4,3,9
	.half	.L493-.L492
	.byte	3,147,126,1,5,40,1,4,2,5,43,9
	.half	.L190-.L493
	.byte	3,238,1,1,5,60,9
	.half	.L494-.L190
	.byte	1,5,71,9
	.half	.L495-.L494
	.byte	1,4,1,5,47,9
	.half	.L8-.L495
	.byte	3,238,121,1,5,5,9
	.half	.L421-.L8
	.byte	3,2,1,4,2,5,19,7,9
	.half	.L201-.L421
	.byte	3,141,6,1,4,1,5,46,9
	.half	.L202-.L201
	.byte	3,245,121,1,5,63,9
	.half	.L496-.L202
	.byte	1,4,2,5,5,9
	.half	.L204-.L496
	.byte	3,139,6,1,5,86,7,9
	.half	.L205-.L204
	.byte	3,2,1,5,61,9
	.half	.L497-.L205
	.byte	1,4,3,9
	.half	.L498-.L497
	.byte	3,147,126,1,5,40,1,4,2,5,43,9
	.half	.L206-.L498
	.byte	3,238,1,1,5,60,9
	.half	.L499-.L206
	.byte	1,5,71,9
	.half	.L500-.L499
	.byte	1,4,1,5,1,9
	.half	.L10-.L500
	.byte	3,244,121,1,7,9
	.half	.L76-.L10
	.byte	0,1,1
.L479:
	.sdecl	'.debug_ranges',debug,cluster('IfxEdsadc_Edsadc_initCarrierGen')
	.sect	'.debug_ranges'
.L75:
	.word	-1,.L37,0,.L76-.L37,0,0
.L186:
	.word	-1,.L37,.L177-.L37,.L178-.L37,.L187-.L37,.L8-.L37,0,0
.L203:
	.word	-1,.L37,.L201-.L37,.L202-.L37,.L204-.L37,.L10-.L37,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEdsadc_Edsadc_initCombFilter')
	.sect	'.debug_info'
.L77:
	.word	309
	.half	3
	.word	.L78
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L80,.L79
	.byte	2
	.word	.L68
	.byte	3
	.byte	'IfxEdsadc_Edsadc_initCombFilter',0,1,171,2,6,1,1,1
	.word	.L49,.L207,.L48
	.byte	4
	.byte	'channel',0,1,171,2,64
	.word	.L208,.L209
	.byte	4
	.byte	'config',0,1,171,2,114
	.word	.L210,.L211
	.byte	5
	.word	.L49,.L207
	.byte	6
	.byte	'fcfgc',0,1,173,2,25
	.word	.L212,.L213
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEdsadc_Edsadc_initCombFilter')
	.sect	'.debug_abbrev'
.L78:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEdsadc_Edsadc_initCombFilter')
	.sect	'.debug_line'
.L79:
	.word	.L502-.L501
.L501:
	.half	3
	.word	.L504-.L503
.L503:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0,0,0,0,0
.L504:
	.byte	5,39,7,0,5,2
	.word	.L49
	.byte	3,176,2,1,5,31,9
	.half	.L505-.L49
	.byte	3,126,1,5,13,3,5,1,5,58,9
	.half	.L452-.L505
	.byte	3,125,1,5,31,9
	.half	.L506-.L452
	.byte	1,5,39,3,1,1,5,52,9
	.half	.L507-.L506
	.byte	1,5,31,9
	.half	.L508-.L507
	.byte	1,3,2,1,5,1,9
	.half	.L509-.L508
	.byte	3,1,1,7,9
	.half	.L81-.L509
	.byte	0,1,1
.L502:
	.sdecl	'.debug_ranges',debug,cluster('IfxEdsadc_Edsadc_initCombFilter')
	.sect	'.debug_ranges'
.L80:
	.word	-1,.L49,0,.L81-.L49,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEdsadc_Edsadc_initDemodulator')
	.sect	'.debug_info'
.L82:
	.word	310
	.half	3
	.word	.L83
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L85,.L84
	.byte	2
	.word	.L68
	.byte	3
	.byte	'IfxEdsadc_Edsadc_initDemodulator',0,1,184,2,6,1,1,1
	.word	.L51,.L214,.L50
	.byte	4
	.byte	'channel',0,1,184,2,65
	.word	.L208,.L215
	.byte	4
	.byte	'config',0,1,184,2,116
	.word	.L216,.L217
	.byte	5
	.word	.L51,.L214
	.byte	6
	.byte	'dicfg',0,1,186,2,25
	.word	.L218,.L219
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEdsadc_Edsadc_initDemodulator')
	.sect	'.debug_abbrev'
.L83:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEdsadc_Edsadc_initDemodulator')
	.sect	'.debug_line'
.L84:
	.word	.L511-.L510
.L510:
	.half	3
	.word	.L513-.L512
.L512:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0,0,0,0,0
.L513:
	.byte	5,31,7,0,5,2
	.word	.L51
	.byte	3,187,2,1,5,39,3,2,1,5,13,9
	.half	.L453-.L51
	.byte	3,14,1,5,31,9
	.half	.L514-.L453
	.byte	3,114,1,5,39,3,1,1,5,31,9
	.half	.L515-.L514
	.byte	1,5,39,3,3,1,5,31,9
	.half	.L516-.L515
	.byte	3,126,1,9
	.half	.L517-.L516
	.byte	3,2,1,5,39,3,1,1,5,12,9
	.half	.L518-.L517
	.byte	1,5,31,9
	.half	.L519-.L518
	.byte	1,5,39,3,1,1,5,31,9
	.half	.L520-.L519
	.byte	1,5,39,9
	.half	.L521-.L520
	.byte	3,1,1,5,31,9
	.half	.L522-.L521
	.byte	1,5,39,3,1,1,5,31,9
	.half	.L523-.L522
	.byte	1,5,39,3,2,1,5,31,9
	.half	.L524-.L523
	.byte	1,5,39,3,1,1,5,12,9
	.half	.L525-.L524
	.byte	1,5,31,9
	.half	.L526-.L525
	.byte	1,9
	.half	.L527-.L526
	.byte	3,1,1,9
	.half	.L528-.L527
	.byte	3,2,1,5,1,9
	.half	.L529-.L528
	.byte	3,1,1,7,9
	.half	.L86-.L529
	.byte	0,1,1
.L511:
	.sdecl	'.debug_ranges',debug,cluster('IfxEdsadc_Edsadc_initDemodulator')
	.sect	'.debug_ranges'
.L85:
	.word	-1,.L51,0,.L86-.L51,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEdsadc_Edsadc_initFirFilter')
	.sect	'.debug_info'
.L87:
	.word	325
	.half	3
	.word	.L88
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L90,.L89
	.byte	2
	.word	.L68
	.byte	3
	.byte	'IfxEdsadc_Edsadc_initFirFilter',0,1,208,2,6,1,1,1
	.word	.L53,.L220,.L52
	.byte	4
	.byte	'channel',0,1,208,2,63
	.word	.L208,.L221
	.byte	4
	.byte	'config',0,1,208,2,112
	.word	.L222,.L223
	.byte	5
	.word	.L53,.L220
	.byte	6
	.byte	'fcfgm',0,1,210,2,25
	.word	.L224,.L225
	.byte	6
	.byte	'rfc',0,1,211,2,25
	.word	.L226,.L227
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEdsadc_Edsadc_initFirFilter')
	.sect	'.debug_abbrev'
.L88:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEdsadc_Edsadc_initFirFilter')
	.sect	'.debug_line'
.L89:
	.word	.L531-.L530
.L530:
	.half	3
	.word	.L533-.L532
.L532:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0,0,0,0,0
.L533:
	.byte	5,31,7,0,5,2
	.word	.L53
	.byte	3,211,2,1,5,40,3,3,1,5,31,9
	.half	.L454-.L53
	.byte	3,126,1,5,13,3,17,1,5,54,9
	.half	.L455-.L454
	.byte	3,113,1,5,40,3,1,1,5,31,9
	.half	.L534-.L455
	.byte	3,127,1,5,54,9
	.half	.L535-.L534
	.byte	3,1,1,5,40,3,1,1,5,31,9
	.half	.L536-.L535
	.byte	3,127,1,5,61,9
	.half	.L537-.L536
	.byte	3,1,1,5,39,3,1,1,5,31,9
	.half	.L538-.L537
	.byte	3,127,1,5,39,3,6,1,5,31,9
	.half	.L539-.L538
	.byte	3,123,1,5,39,3,1,1,5,31,9
	.half	.L540-.L539
	.byte	1,5,39,3,1,1,5,31,9
	.half	.L541-.L540
	.byte	1,5,39,3,1,1,5,31,9
	.half	.L542-.L541
	.byte	1,5,39,3,3,1,5,31,9
	.half	.L543-.L542
	.byte	3,126,1,9
	.half	.L544-.L543
	.byte	3,1,1,9
	.half	.L545-.L544
	.byte	3,1,1,5,39,3,1,1,5,31,9
	.half	.L546-.L545
	.byte	1,5,39,3,1,1,5,31,9
	.half	.L547-.L546
	.byte	1,5,39,3,1,1,5,12,9
	.half	.L548-.L547
	.byte	1,5,31,9
	.half	.L549-.L548
	.byte	1,9
	.half	.L550-.L549
	.byte	3,1,1,9
	.half	.L551-.L550
	.byte	3,2,1,5,12,9
	.half	.L552-.L551
	.byte	3,2,1,5,39,9
	.half	.L553-.L552
	.byte	3,127,1,5,31,9
	.half	.L554-.L553
	.byte	1,3,1,1,5,1,9
	.half	.L555-.L554
	.byte	3,1,1,7,9
	.half	.L91-.L555
	.byte	0,1,1
.L531:
	.sdecl	'.debug_ranges',debug,cluster('IfxEdsadc_Edsadc_initFirFilter')
	.sect	'.debug_ranges'
.L90:
	.word	-1,.L53,0,.L91-.L53,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEdsadc_Edsadc_initIntegrator')
	.sect	'.debug_info'
.L92:
	.word	309
	.half	3
	.word	.L93
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L95,.L94
	.byte	2
	.word	.L68
	.byte	3
	.byte	'IfxEdsadc_Edsadc_initIntegrator',0,1,236,2,6,1,1,1
	.word	.L55,.L228,.L54
	.byte	4
	.byte	'channel',0,1,236,2,64
	.word	.L208,.L229
	.byte	4
	.byte	'config',0,1,236,2,114
	.word	.L230,.L231
	.byte	5
	.word	.L55,.L228
	.byte	6
	.byte	'iwctr',0,1,238,2,25
	.word	.L232,.L233
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEdsadc_Edsadc_initIntegrator')
	.sect	'.debug_abbrev'
.L93:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEdsadc_Edsadc_initIntegrator')
	.sect	'.debug_line'
.L94:
	.word	.L557-.L556
.L556:
	.half	3
	.word	.L559-.L558
.L558:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0,0,0,0,0
.L559:
	.byte	5,39,7,0,5,2
	.word	.L55
	.byte	3,241,2,1,5,31,9
	.half	.L560-.L55
	.byte	3,126,1,5,13,3,9,1,5,59,9
	.half	.L456-.L560
	.byte	3,121,1,5,31,9
	.half	.L561-.L456
	.byte	1,5,39,3,1,1,5,31,9
	.half	.L562-.L561
	.byte	1,5,39,3,1,1,5,31,9
	.half	.L563-.L562
	.byte	1,5,39,3,1,1,5,58,9
	.half	.L564-.L563
	.byte	1,5,31,9
	.half	.L565-.L564
	.byte	1,5,39,3,1,1,5,31,9
	.half	.L566-.L565
	.byte	1,5,39,3,1,1,5,31,9
	.half	.L567-.L566
	.byte	1,3,2,1,5,1,9
	.half	.L568-.L567
	.byte	3,1,1,7,9
	.half	.L96-.L568
	.byte	0,1,1
.L557:
	.sdecl	'.debug_ranges',debug,cluster('IfxEdsadc_Edsadc_initIntegrator')
	.sect	'.debug_ranges'
.L95:
	.word	-1,.L55,0,.L96-.L55,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEdsadc_Edsadc_initModulator')
	.sect	'.debug_info'
.L97:
	.word	363
	.half	3
	.word	.L98
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L100,.L99
	.byte	2
	.word	.L68
	.byte	3
	.byte	'IfxEdsadc_Edsadc_initModulator',0,1,253,2,6,1,1,1
	.word	.L57,.L234,.L56
	.byte	4
	.byte	'channel',0,1,253,2,63
	.word	.L208,.L235
	.byte	4
	.byte	'config',0,1,253,2,112
	.word	.L236,.L237
	.byte	5
	.word	.L57,.L234
	.byte	6
	.byte	'modcfg',0,1,255,2,26
	.word	.L238,.L239
	.byte	7
	.word	.L240
	.byte	6
	.byte	'targetFreq',0,1,139,3,13
	.word	.L170,.L244
	.byte	6
	.byte	'sourceFreq',0,1,140,3,13
	.word	.L170,.L245
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEdsadc_Edsadc_initModulator')
	.sect	'.debug_abbrev'
.L98:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,1,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEdsadc_Edsadc_initModulator')
	.sect	'.debug_line'
.L99:
	.word	.L570-.L569
.L569:
	.half	3
	.word	.L572-.L571
.L571:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0,0,0,0,0
.L572:
	.byte	5,6,7,0,5,2
	.word	.L57
	.byte	3,252,2,1,5,22,9
	.half	.L459-.L57
	.byte	3,4,1,5,30,3,2,1,5,6,9
	.half	.L461-.L459
	.byte	3,122,1,5,22,9
	.half	.L457-.L461
	.byte	3,6,1,5,30,3,1,1,5,6,9
	.half	.L573-.L457
	.byte	3,121,1,5,70,9
	.half	.L241-.L573
	.byte	3,15,1,5,22,9
	.half	.L242-.L241
	.byte	3,120,1,5,30,3,1,1,5,22,9
	.half	.L574-.L242
	.byte	1,5,30,3,1,1,5,22,9
	.half	.L575-.L574
	.byte	1,5,30,3,1,1,5,22,9
	.half	.L576-.L575
	.byte	1,5,30,3,1,1,5,13,9
	.half	.L577-.L576
	.byte	1,5,22,9
	.half	.L578-.L577
	.byte	1,9
	.half	.L579-.L578
	.byte	3,1,1,5,32,9
	.half	.L580-.L579
	.byte	3,2,1,5,24,9
	.half	.L243-.L580
	.byte	1,5,70,9
	.half	.L581-.L243
	.byte	3,1,1,5,73,9
	.half	.L458-.L581
	.byte	3,1,1,5,32,9
	.half	.L462-.L458
	.byte	1,5,40,3,1,1,5,32,9
	.half	.L582-.L462
	.byte	1,5,40,3,1,1,5,32,9
	.half	.L583-.L582
	.byte	1,5,40,3,2,1,5,13,9
	.half	.L584-.L583
	.byte	3,3,1,9
	.half	.L460-.L584
	.byte	3,125,1,5,32,9
	.half	.L585-.L460
	.byte	1,9
	.half	.L586-.L585
	.byte	3,1,1,9
	.half	.L587-.L586
	.byte	3,2,1,5,1,9
	.half	.L588-.L587
	.byte	3,1,1,7,9
	.half	.L101-.L588
	.byte	0,1,1
.L570:
	.sdecl	'.debug_ranges',debug,cluster('IfxEdsadc_Edsadc_initModulator')
	.sect	'.debug_ranges'
.L100:
	.word	-1,.L57,0,.L101-.L57,0,0
.L240:
	.word	-1,.L57,.L241-.L57,.L242-.L57,.L243-.L57,.L234-.L57,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEdsadc_Edsadc_initModule')
	.sect	'.debug_info'
.L102:
	.word	369
	.half	3
	.word	.L103
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L105,.L104
	.byte	2
	.word	.L68
	.byte	3
	.byte	'IfxEdsadc_Edsadc_initModule',0,1,152,3,6,1,1,1
	.word	.L59,.L246,.L58
	.byte	4
	.byte	'edsadc',0,1,152,3,52
	.word	.L163,.L247
	.byte	4
	.byte	'config',0,1,152,3,85
	.word	.L248,.L249
	.byte	5
	.word	.L59,.L246
	.byte	6
	.byte	'edsadcSFR',0,1,154,3,17
	.word	.L250,.L251
	.byte	5
	.word	.L252,.L26
	.byte	6
	.byte	'passwd',0,1,161,3,20
	.word	.L253,.L254
	.byte	0,5
	.word	.L26,.L255
	.byte	6
	.byte	'globcfg',0,1,172,3,32
	.word	.L256,.L257
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEdsadc_Edsadc_initModule')
	.sect	'.debug_abbrev'
.L103:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEdsadc_Edsadc_initModule')
	.sect	'.debug_line'
.L104:
	.word	.L590-.L589
.L589:
	.half	3
	.word	.L592-.L591
.L591:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0,0,0,0,0
.L592:
	.byte	5,6,7,0,5,2
	.word	.L59
	.byte	3,151,3,1,5,35,9
	.half	.L464-.L59
	.byte	3,2,1,5,20,9
	.half	.L465-.L464
	.byte	3,2,1,5,27,9
	.half	.L593-.L465
	.byte	3,3,1,5,9,9
	.half	.L594-.L593
	.byte	1,5,61,7,9
	.half	.L252-.L594
	.byte	3,2,1,5,27,9
	.half	.L463-.L252
	.byte	1,5,39,9
	.half	.L467-.L463
	.byte	3,1,1,5,32,9
	.half	.L466-.L467
	.byte	3,1,1,5,30,1,5,37,9
	.half	.L595-.L466
	.byte	3,5,1,5,31,9
	.half	.L468-.L595
	.byte	3,125,1,5,37,9
	.half	.L596-.L468
	.byte	3,3,1,5,54,9
	.half	.L26-.L596
	.byte	3,5,1,5,42,9
	.half	.L469-.L26
	.byte	3,3,1,5,34,9
	.half	.L597-.L469
	.byte	3,127,1,9
	.half	.L598-.L597
	.byte	3,1,1,5,42,3,1,1,5,34,9
	.half	.L599-.L598
	.byte	1,5,42,3,1,1,5,34,9
	.half	.L600-.L599
	.byte	1,3,2,1,5,1,9
	.half	.L255-.L600
	.byte	3,3,1,7,9
	.half	.L106-.L255
	.byte	0,1,1
.L590:
	.sdecl	'.debug_ranges',debug,cluster('IfxEdsadc_Edsadc_initModule')
	.sect	'.debug_ranges'
.L105:
	.word	-1,.L59,0,.L106-.L59,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEdsadc_Edsadc_initModuleConfig')
	.sect	'.debug_info'
.L107:
	.word	290
	.half	3
	.word	.L108
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L110,.L109
	.byte	2
	.word	.L68
	.byte	3
	.byte	'IfxEdsadc_Edsadc_initModuleConfig',0,1,186,3,6,1,1,1
	.word	.L61,.L258,.L60
	.byte	4
	.byte	'config',0,1,186,3,65
	.word	.L248,.L259
	.byte	4
	.byte	'edsadc',0,1,186,3,85
	.word	.L250,.L260
	.byte	5
	.word	.L61,.L258
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEdsadc_Edsadc_initModuleConfig')
	.sect	'.debug_abbrev'
.L108:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEdsadc_Edsadc_initModuleConfig')
	.sect	'.debug_line'
.L109:
	.word	.L602-.L601
.L601:
	.half	3
	.word	.L604-.L603
.L603:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0,0,0,0,0
.L604:
	.byte	5,5,7,0,5,2
	.word	.L61
	.byte	3,191,3,1,5,6,3,2,1,5,1,9
	.half	.L605-.L61
	.byte	3,2,1,9
	.half	.L111-.L605
	.byte	0,1,1
.L602:
	.sdecl	'.debug_ranges',debug,cluster('IfxEdsadc_Edsadc_initModuleConfig')
	.sect	'.debug_ranges'
.L110:
	.word	-1,.L61,0,.L111-.L61,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEdsadc_Edsadc_initRectifier')
	.sect	'.debug_info'
.L112:
	.word	307
	.half	3
	.word	.L113
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L115,.L114
	.byte	2
	.word	.L68
	.byte	3
	.byte	'IfxEdsadc_Edsadc_initRectifier',0,1,199,3,6,1,1,1
	.word	.L63,.L261,.L62
	.byte	4
	.byte	'channel',0,1,199,3,63
	.word	.L208,.L262
	.byte	4
	.byte	'config',0,1,199,3,112
	.word	.L263,.L264
	.byte	5
	.word	.L63,.L261
	.byte	6
	.byte	'rect',0,1,201,3,27
	.word	.L265,.L266
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEdsadc_Edsadc_initRectifier')
	.sect	'.debug_abbrev'
.L113:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEdsadc_Edsadc_initRectifier')
	.sect	'.debug_line'
.L114:
	.word	.L607-.L606
.L606:
	.half	3
	.word	.L609-.L608
.L608:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0,0,0,0,0
.L609:
	.byte	5,49,7,0,5,2
	.word	.L63
	.byte	3,202,3,1,5,69,9
	.half	.L610-.L63
	.byte	1,5,61,9
	.half	.L611-.L610
	.byte	1,5,48,9
	.half	.L612-.L611
	.byte	3,1,1,5,89,9
	.half	.L613-.L612
	.byte	3,127,1,5,13,9
	.half	.L470-.L613
	.byte	3,3,1,5,40,9
	.half	.L614-.L470
	.byte	3,126,1,5,48,3,1,1,5,40,9
	.half	.L615-.L614
	.byte	1,3,1,1,5,13,9
	.half	.L616-.L615
	.byte	3,1,1,5,48,9
	.half	.L617-.L616
	.byte	1,5,40,9
	.half	.L618-.L617
	.byte	1,5,13,9
	.half	.L619-.L618
	.byte	3,1,1,5,69,9
	.half	.L620-.L619
	.byte	1,5,48,9
	.half	.L621-.L620
	.byte	1,5,69,9
	.half	.L471-.L621
	.byte	1,5,60,9
	.half	.L622-.L471
	.byte	1,5,40,1,5,1,9
	.half	.L623-.L622
	.byte	3,1,1,7,9
	.half	.L116-.L623
	.byte	0,1,1
.L607:
	.sdecl	'.debug_ranges',debug,cluster('IfxEdsadc_Edsadc_initRectifier')
	.sect	'.debug_ranges'
.L115:
	.word	-1,.L63,0,.L116-.L63,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEdsadc_Edsadc_initChannel')
	.sect	'.debug_info'
.L117:
	.word	1174
	.half	3
	.word	.L118
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L120,.L119
	.byte	2
	.word	.L68
	.byte	3
	.byte	'IfxEdsadc_Edsadc_initChannel',0,1,138,1,6,1,1,1
	.word	.L39,.L267,.L38
	.byte	4
	.byte	'channel',0,1,138,1,61
	.word	.L208,.L268
	.byte	4
	.byte	'config',0,1,138,1,108
	.word	.L269,.L270
	.byte	5
	.word	.L39,.L267
	.byte	6
	.byte	'edsadc',0,1,140,1,17
	.word	.L250,.L271
	.byte	7
	.word	.L272,.L273,.L274
	.byte	8
	.word	.L275,.L276
	.byte	8
	.word	.L277,.L278
	.byte	8
	.word	.L279,.L280
	.byte	8
	.word	.L281,.L282
	.byte	9
	.word	.L283,.L273,.L274
	.byte	0,7
	.word	.L284,.L274,.L285
	.byte	8
	.word	.L286,.L287
	.byte	8
	.word	.L288,.L289
	.byte	8
	.word	.L290,.L291
	.byte	9
	.word	.L292,.L274,.L285
	.byte	0,7
	.word	.L293,.L285,.L294
	.byte	8
	.word	.L295,.L296
	.byte	8
	.word	.L297,.L298
	.byte	8
	.word	.L299,.L300
	.byte	9
	.word	.L301,.L285,.L294
	.byte	0,5
	.word	.L302,.L267
	.byte	6
	.byte	'pins',0,1,159,1,41
	.word	.L303,.L304
	.byte	10
	.word	.L305
	.byte	6
	.byte	'dsn',0,1,163,1,33
	.word	.L307,.L308
	.byte	7
	.word	.L309,.L310,.L13
	.byte	8
	.word	.L311,.L312
	.byte	8
	.word	.L313,.L314
	.byte	8
	.word	.L315,.L316
	.byte	11
	.word	.L317,.L318
	.byte	7
	.word	.L319,.L320,.L321
	.byte	8
	.word	.L322,.L323
	.byte	8
	.word	.L324,.L325
	.byte	8
	.word	.L326,.L327
	.byte	12
	.word	.L328,.L329
	.byte	0,0,0,5
	.word	.L13,.L12
	.byte	6
	.byte	'dsp',0,1,170,1,33
	.word	.L330,.L331
	.byte	7
	.word	.L332,.L333,.L15
	.byte	8
	.word	.L334,.L335
	.byte	8
	.word	.L336,.L337
	.byte	8
	.word	.L338,.L339
	.byte	13
	.word	.L340,.L333,.L15
	.byte	7
	.word	.L319,.L341,.L342
	.byte	8
	.word	.L322,.L323
	.byte	8
	.word	.L324,.L325
	.byte	8
	.word	.L326,.L327
	.byte	9
	.word	.L328,.L341,.L342
	.byte	0,0,0,5
	.word	.L15,.L12
	.byte	6
	.byte	'cin',0,1,177,1,33
	.word	.L343,.L344
	.byte	7
	.word	.L345,.L346,.L17
	.byte	8
	.word	.L347,.L348
	.byte	8
	.word	.L349,.L350
	.byte	8
	.word	.L351,.L352
	.byte	13
	.word	.L353,.L346,.L17
	.byte	7
	.word	.L319,.L354,.L355
	.byte	8
	.word	.L322,.L323
	.byte	8
	.word	.L324,.L325
	.byte	8
	.word	.L326,.L327
	.byte	9
	.word	.L328,.L354,.L355
	.byte	0,0,0,5
	.word	.L17,.L12
	.byte	6
	.byte	'din',0,1,184,1,33
	.word	.L356,.L357
	.byte	7
	.word	.L358,.L359,.L19
	.byte	8
	.word	.L360,.L361
	.byte	8
	.word	.L362,.L363
	.byte	8
	.word	.L364,.L365
	.byte	13
	.word	.L366,.L359,.L19
	.byte	7
	.word	.L319,.L367,.L368
	.byte	8
	.word	.L322,.L323
	.byte	8
	.word	.L324,.L325
	.byte	8
	.word	.L326,.L327
	.byte	9
	.word	.L328,.L367,.L368
	.byte	0,0,0,5
	.word	.L19,.L12
	.byte	6
	.byte	'itr',0,1,191,1,33
	.word	.L369,.L370
	.byte	7
	.word	.L371,.L372,.L12
	.byte	8
	.word	.L373,.L374
	.byte	8
	.word	.L375,.L376
	.byte	8
	.word	.L377,.L378
	.byte	13
	.word	.L379,.L372,.L12
	.byte	7
	.word	.L319,.L380,.L381
	.byte	8
	.word	.L322,.L323
	.byte	8
	.word	.L324,.L325
	.byte	8
	.word	.L326,.L327
	.byte	9
	.word	.L328,.L380,.L381
	.byte	0,0,0,0,0,0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEdsadc_Edsadc_initChannel')
	.sect	'.debug_abbrev'
.L118:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,10,11,1,85,6,0,0,11,11,1,49,16,85,6,0,0,12,11,0,49,16,85,6,0,0,13,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEdsadc_Edsadc_initChannel')
	.sect	'.debug_line'
.L119:
	.word	.L625-.L624
.L624:
	.half	3
	.word	.L627-.L626
.L626:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.h',0,0,0,0
	.byte	'IfxEdsadc.h',0,1,0,0
	.byte	'IfxPort.h',0,2,0,0,0
.L627:
	.byte	5,6,7,0,5,2
	.word	.L39
	.byte	3,137,1,1,5,32,9
	.half	.L427-.L39
	.byte	3,4,1,9
	.half	.L628-.L427
	.byte	3,126,1,5,24,9
	.half	.L445-.L628
	.byte	3,2,1,9
	.half	.L629-.L445
	.byte	3,1,1,5,6,9
	.half	.L630-.L629
	.byte	3,123,1,5,61,9
	.half	.L422-.L630
	.byte	3,6,1,5,52,9
	.half	.L631-.L422
	.byte	3,2,1,5,61,9
	.half	.L424-.L631
	.byte	3,126,1,5,54,9
	.half	.L632-.L424
	.byte	1,5,24,9
	.half	.L633-.L632
	.byte	1,5,52,9
	.half	.L634-.L633
	.byte	3,2,1,5,54,9
	.half	.L423-.L634
	.byte	3,1,1,5,53,9
	.half	.L430-.L423
	.byte	3,1,1,5,52,9
	.half	.L432-.L430
	.byte	3,1,1,5,53,9
	.half	.L434-.L432
	.byte	3,1,1,5,52,9
	.half	.L436-.L434
	.byte	3,1,1,5,61,9
	.half	.L273-.L436
	.byte	3,1,1,5,80,9
	.half	.L635-.L273
	.byte	1,5,100,9
	.half	.L636-.L635
	.byte	1,5,58,9
	.half	.L274-.L636
	.byte	3,2,1,4,2,5,61,9
	.half	.L637-.L274
	.byte	3,232,3,1,5,95,9
	.half	.L638-.L637
	.byte	1,5,134,1,9
	.half	.L639-.L638
	.byte	1,5,157,1,9
	.half	.L285-.L639
	.byte	3,6,1,5,192,1,9
	.half	.L640-.L285
	.byte	1,5,219,1,9
	.half	.L641-.L640
	.byte	1,4,1,5,59,9
	.half	.L642-.L641
	.byte	3,147,124,1,4,2,5,63,9
	.half	.L643-.L642
	.byte	3,237,3,1,5,97,9
	.half	.L644-.L643
	.byte	1,5,127,9
	.half	.L645-.L644
	.byte	1,4,1,5,45,9
	.half	.L294-.L645
	.byte	3,148,124,1,5,87,9
	.half	.L646-.L294
	.byte	1,5,129,1,9
	.half	.L647-.L646
	.byte	1,5,169,1,9
	.half	.L648-.L647
	.byte	1,5,49,9
	.half	.L442-.L648
	.byte	3,1,1,5,91,9
	.half	.L649-.L442
	.byte	1,5,132,1,9
	.half	.L650-.L649
	.byte	1,5,54,9
	.half	.L302-.L650
	.byte	3,2,1,5,5,9
	.half	.L426-.L302
	.byte	3,2,1,5,43,7,9
	.half	.L306-.L426
	.byte	3,2,1,5,9,9
	.half	.L428-.L306
	.byte	3,2,1,5,43,7,9
	.half	.L651-.L428
	.byte	3,2,1,5,58,9
	.half	.L652-.L651
	.byte	1,4,3,5,5,9
	.half	.L310-.L652
	.byte	3,145,6,1,5,56,7,9
	.half	.L320-.L310
	.byte	3,2,1,4,4,5,40,9
	.half	.L444-.L320
	.byte	3,229,125,1,4,3,5,41,9
	.half	.L321-.L444
	.byte	3,156,2,1,5,67,9
	.half	.L653-.L321
	.byte	1,4,1,5,43,9
	.half	.L13-.L653
	.byte	3,239,121,1,5,9,9
	.half	.L446-.L13
	.byte	3,2,1,5,43,7,9
	.half	.L654-.L446
	.byte	3,2,1,5,58,9
	.half	.L655-.L654
	.byte	1,4,3,5,5,9
	.half	.L333-.L655
	.byte	3,148,6,1,5,56,7,9
	.half	.L341-.L333
	.byte	3,2,1,4,4,5,40,9
	.half	.L656-.L341
	.byte	3,219,125,1,4,3,5,41,9
	.half	.L342-.L656
	.byte	3,166,2,1,5,67,9
	.half	.L657-.L342
	.byte	1,4,1,5,43,9
	.half	.L15-.L657
	.byte	3,236,121,1,5,9,9
	.half	.L447-.L15
	.byte	3,2,1,5,43,7,9
	.half	.L658-.L447
	.byte	3,2,1,5,58,9
	.half	.L659-.L658
	.byte	1,4,3,5,5,9
	.half	.L346-.L659
	.byte	3,229,5,1,5,56,7,9
	.half	.L354-.L346
	.byte	3,2,1,4,4,5,40,9
	.half	.L660-.L354
	.byte	3,131,126,1,4,3,5,41,9
	.half	.L355-.L660
	.byte	3,254,1,1,5,67,9
	.half	.L661-.L355
	.byte	1,4,1,5,43,9
	.half	.L17-.L661
	.byte	3,155,122,1,5,9,9
	.half	.L448-.L17
	.byte	3,2,1,5,43,7,9
	.half	.L662-.L448
	.byte	3,2,1,5,58,9
	.half	.L663-.L662
	.byte	1,4,3,5,5,9
	.half	.L359-.L663
	.byte	3,242,5,1,5,56,7,9
	.half	.L367-.L359
	.byte	3,2,1,4,4,5,40,9
	.half	.L664-.L367
	.byte	3,239,125,1,4,3,5,41,9
	.half	.L368-.L664
	.byte	3,146,2,1,5,67,9
	.half	.L665-.L368
	.byte	1,4,1,5,43,9
	.half	.L19-.L665
	.byte	3,142,122,1,5,9,9
	.half	.L449-.L19
	.byte	3,2,1,5,43,7,9
	.half	.L666-.L449
	.byte	3,2,1,5,58,9
	.half	.L667-.L666
	.byte	1,4,3,5,5,9
	.half	.L372-.L667
	.byte	3,137,6,1,5,56,7,9
	.half	.L380-.L372
	.byte	3,2,1,4,4,5,40,9
	.half	.L668-.L380
	.byte	3,209,125,1,4,3,5,41,9
	.half	.L381-.L668
	.byte	3,176,2,1,5,67,9
	.half	.L669-.L381
	.byte	1,4,1,5,1,7,9
	.half	.L12-.L669
	.byte	3,247,121,1,7,9
	.half	.L121-.L12
	.byte	0,1,1
.L625:
	.sdecl	'.debug_ranges',debug,cluster('IfxEdsadc_Edsadc_initChannel')
	.sect	'.debug_ranges'
.L120:
	.word	-1,.L39,0,.L121-.L39,0,0
.L305:
	.word	-1,.L39,.L306-.L39,.L12-.L39,-1,.L45,0,.L151-.L45,0,0
.L318:
	.word	-1,.L39,.L310-.L39,.L13-.L39,-1,.L41,0,.L161-.L41,0,0
.L329:
	.word	-1,.L39,.L320-.L39,.L321-.L39,-1,.L43,0,.L156-.L43,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEdsadc_Edsadc_initChannelConfig')
	.sect	'.debug_info'
.L122:
	.word	291
	.half	3
	.word	.L123
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L125,.L124
	.byte	2
	.word	.L68
	.byte	3
	.byte	'IfxEdsadc_Edsadc_initChannelConfig',0,1,201,1,6,1,1,1
	.word	.L47,.L382,.L46
	.byte	4
	.byte	'config',0,1,201,1,73
	.word	.L383,.L384
	.byte	4
	.byte	'edsadc',0,1,201,1,99
	.word	.L163,.L385
	.byte	5
	.word	.L47,.L382
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEdsadc_Edsadc_initChannelConfig')
	.sect	'.debug_abbrev'
.L123:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEdsadc_Edsadc_initChannelConfig')
	.sect	'.debug_line'
.L124:
	.word	.L671-.L670
.L670:
	.half	3
	.word	.L673-.L672
.L672:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0,0,0,0,0
.L673:
	.byte	5,82,7,0,5,2
	.word	.L47
	.byte	3,202,1,1,5,13,9
	.half	.L674-.L47
	.byte	3,211,0,1,5,5,9
	.half	.L675-.L674
	.byte	3,2,1,5,32,7,9
	.half	.L676-.L675
	.byte	3,2,1,5,40,9
	.half	.L677-.L676
	.byte	1,5,26,9
	.half	.L24-.L677
	.byte	3,4,1,5,24,9
	.half	.L25-.L24
	.byte	1,5,1,9
	.half	.L451-.L25
	.byte	3,2,1,7,9
	.half	.L126-.L451
	.byte	0,1,1
.L671:
	.sdecl	'.debug_ranges',debug,cluster('IfxEdsadc_Edsadc_initChannelConfig')
	.sect	'.debug_ranges'
.L125:
	.word	-1,.L47,0,.L126-.L47,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEdsadc_Edsadc_initCarrierGenConfig')
	.sect	'.debug_info'
.L127:
	.word	274
	.half	3
	.word	.L128
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L130,.L129
	.byte	2
	.word	.L68
	.byte	3
	.byte	'IfxEdsadc_Edsadc_initCarrierGenConfig',0,1,240,3,6,1,1,1
	.word	.L67,.L386,.L66
	.byte	4
	.byte	'config',0,1,240,3,79
	.word	.L165,.L387
	.byte	5
	.word	.L67,.L386
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEdsadc_Edsadc_initCarrierGenConfig')
	.sect	'.debug_abbrev'
.L128:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEdsadc_Edsadc_initCarrierGenConfig')
	.sect	'.debug_line'
.L129:
	.word	.L679-.L678
.L678:
	.half	3
	.word	.L681-.L680
.L680:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0,0,0,0,0
.L681:
	.byte	5,35,7,0,5,2
	.word	.L67
	.byte	3,241,3,1,5,33,1,5,35,9
	.half	.L682-.L67
	.byte	3,1,1,5,33,1,5,35,9
	.half	.L683-.L682
	.byte	3,5,1,9
	.half	.L684-.L683
	.byte	3,124,1,5,33,9
	.half	.L685-.L684
	.byte	1,9
	.half	.L686-.L685
	.byte	3,1,1,9
	.half	.L687-.L686
	.byte	3,1,1,5,35,9
	.half	.L688-.L687
	.byte	3,1,1,5,33,1,9
	.half	.L689-.L688
	.byte	3,1,1,9
	.half	.L690-.L689
	.byte	3,1,1,5,1,9
	.half	.L691-.L690
	.byte	3,1,1,7,9
	.half	.L131-.L691
	.byte	0,1,1
.L679:
	.sdecl	'.debug_ranges',debug,cluster('IfxEdsadc_Edsadc_initCarrierGenConfig')
	.sect	'.debug_ranges'
.L130:
	.word	-1,.L67,0,.L131-.L67,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEdsadc_Edsadc_calcDIVM')
	.sect	'.debug_info'
.L132:
	.word	370
	.half	3
	.word	.L133
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L135,.L134
	.byte	2
	.word	.L68
	.byte	3
	.byte	'IfxEdsadc_Edsadc_calcDIVM',0,1,79,19
	.word	.L388
	.byte	1,1
	.word	.L34,.L389,.L33
	.byte	4
	.byte	'sourceFreq',0,1,79,53
	.word	.L170,.L390
	.byte	4
	.byte	'targetFreq',0,1,79,74
	.word	.L391,.L392
	.byte	5
	.word	.L393
	.byte	6
	.byte	'bestError',0,1,81,13
	.word	.L170,.L394
	.byte	6
	.byte	'bestDiv',0,1,82,13
	.word	.L388,.L395
	.byte	6
	.byte	'i',0,1,82,28
	.word	.L388,.L396
	.byte	7
	.word	.L397,.L398
	.byte	6
	.byte	'freq',0,1,86,17
	.word	.L170,.L399
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEdsadc_Edsadc_calcDIVM')
	.sect	'.debug_abbrev'
.L133:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,11,1,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEdsadc_Edsadc_calcDIVM')
	.sect	'.debug_line'
.L134:
	.word	.L693-.L692
.L692:
	.half	3
	.word	.L695-.L694
.L694:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0,0,0,0,0
.L695:
	.byte	5,23,7,0,5,2
	.word	.L34
	.byte	3,209,0,1,5,24,3,2,1,5,12,9
	.half	.L409-.L34
	.byte	1,5,25,3,125,1,5,23,9
	.half	.L397-.L409
	.byte	1,5,32,3,3,1,5,26,9
	.half	.L398-.L397
	.byte	3,19,1,5,1,3,1,1,7,9
	.half	.L136-.L398
	.byte	0,1,1
.L693:
	.sdecl	'.debug_ranges',debug,cluster('IfxEdsadc_Edsadc_calcDIVM')
	.sect	'.debug_ranges'
.L135:
	.word	-1,.L34,0,.L136-.L34,0,0
.L393:
	.word	-1,.L34,0,.L389-.L34,-1,.L2,0,.L146-.L2,0,0
	.sdecl	'.debug_info',debug,cluster('IfxEdsadc_Edsadc_calcDIVCG')
	.sect	'.debug_info'
.L137:
	.word	382
	.half	3
	.word	.L138
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L140,.L139
	.byte	2
	.word	.L68
	.byte	3
	.byte	'IfxEdsadc_Edsadc_calcDIVCG',0,1,212,3,19
	.word	.L388
	.byte	1,1
	.word	.L65,.L400,.L64
	.byte	4
	.byte	'sourceFreq',0,1,212,3,54
	.word	.L170,.L401
	.byte	4
	.byte	'targetFreq',0,1,212,3,75
	.word	.L391,.L402
	.byte	5
	.word	.L65,.L400
	.byte	6
	.byte	'bestError',0,1,214,3,13
	.word	.L170,.L403
	.byte	6
	.byte	'bestDiv',0,1,215,3,13
	.word	.L388,.L404
	.byte	6
	.byte	'i',0,1,215,3,28
	.word	.L388,.L405
	.byte	5
	.word	.L406,.L407
	.byte	6
	.byte	'freq',0,1,219,3,17
	.word	.L170,.L408
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxEdsadc_Edsadc_calcDIVCG')
	.sect	'.debug_abbrev'
.L138:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxEdsadc_Edsadc_calcDIVCG')
	.sect	'.debug_line'
.L139:
	.word	.L697-.L696
.L696:
	.half	3
	.word	.L699-.L698
.L698:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0,0,0,0,0
.L699:
	.byte	5,23,7,0,5,2
	.word	.L65
	.byte	3,214,3,1,5,24,3,2,1,5,12,9
	.half	.L472-.L65
	.byte	1,5,25,3,125,1,5,23,9
	.half	.L406-.L472
	.byte	1,5,32,3,3,1,5,26,9
	.half	.L407-.L406
	.byte	3,19,1,5,1,3,1,1,7,9
	.half	.L141-.L407
	.byte	0,1,1
.L697:
	.sdecl	'.debug_ranges',debug,cluster('IfxEdsadc_Edsadc_calcDIVCG')
	.sect	'.debug_ranges'
.L140:
	.word	-1,.L65,0,.L141-.L65,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_6')
	.sect	'.debug_info'
.L142:
	.word	214
	.half	3
	.word	.L143
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L145,.L144
	.byte	2
	.word	.L68
	.byte	3
	.byte	'.cocofun_6',0,1,79,19,1
	.word	.L2,.L146,.L35
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_6')
	.sect	'.debug_abbrev'
.L143:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_6')
	.sect	'.debug_line'
.L144:
	.word	.L701-.L700
.L700:
	.half	3
	.word	.L703-.L702
.L702:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0,0,0,0,0
.L703:
	.byte	5,38,7,0,5,2
	.word	.L2
	.byte	3,213,0,1,5,36,9
	.half	.L473-.L2
	.byte	1,5,25,3,1,1,5,13,9
	.half	.L4-.L473
	.byte	3,2,1,5,23,9
	.half	.L704-.L4
	.byte	3,2,1,5,18,9
	.half	.L705-.L704
	.byte	3,3,1,5,28,9
	.half	.L5-.L705
	.byte	3,118,1,5,24,1,5,32,7,9
	.half	.L6-.L5
	.byte	3,17,1,5,13,9
	.half	.L414-.L6
	.byte	3,2,1,5,30,9
	.half	.L706-.L414
	.byte	3,126,1,5,17,1,5,13,9
	.half	.L410-.L706
	.byte	3,2,1,7,9
	.half	.L146-.L410
	.byte	0,1,1,5,38,0,5,2
	.word	.L2
	.byte	3,218,3,1,5,36,9
	.half	.L473-.L2
	.byte	1,5,25,3,1,1,5,13,9
	.half	.L4-.L473
	.byte	3,2,1,5,23,9
	.half	.L704-.L4
	.byte	3,2,1,5,18,9
	.half	.L705-.L704
	.byte	3,3,1,5,28,9
	.half	.L5-.L705
	.byte	3,118,1,5,24,1,5,32,7,9
	.half	.L6-.L5
	.byte	3,17,1,5,13,9
	.half	.L414-.L6
	.byte	3,2,1,5,30,9
	.half	.L706-.L414
	.byte	3,126,1,5,17,1,5,13,9
	.half	.L410-.L706
	.byte	3,253,124,1,7,9
	.half	.L146-.L410
	.byte	0,1,1
.L701:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_6')
	.sect	'.debug_ranges'
.L145:
	.word	-1,.L2,0,.L146-.L2,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_7')
	.sect	'.debug_info'
.L147:
	.word	215
	.half	3
	.word	.L148
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L150,.L149
	.byte	2
	.word	.L68
	.byte	3
	.byte	'.cocofun_7',0,1,138,1,6,1
	.word	.L45,.L151,.L44
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_7')
	.sect	'.debug_abbrev'
.L148:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_7')
	.sect	'.debug_line'
.L149:
	.word	.L708-.L707
.L707:
	.half	3
	.word	.L710-.L709
.L709:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0,0,0,0
	.byte	'IfxEdsadc.h',0,1,0,0,0
.L710:
	.byte	5,58,7,0,5,2
	.word	.L45
	.byte	3,166,1,1,4,2,5,17,9
	.half	.L711-.L45
	.byte	3,145,6,1,9
	.half	.L151-.L711
	.byte	0,1,1,5,58,0,5,2
	.word	.L45
	.byte	3,173,1,1,4,2,5,17,9
	.half	.L711-.L45
	.byte	3,148,6,1,9
	.half	.L712-.L711
	.byte	3,118,1,7,9
	.half	.L151-.L712
	.byte	0,1,1,5,58,0,5,2
	.word	.L45
	.byte	3,180,1,1,4,2,5,17,9
	.half	.L711-.L45
	.byte	3,229,5,1,9
	.half	.L712-.L711
	.byte	3,30,1,7,9
	.half	.L151-.L712
	.byte	0,1,1,5,58,0,5,2
	.word	.L45
	.byte	3,187,1,1,4,2,5,17,9
	.half	.L711-.L45
	.byte	3,242,5,1,9
	.half	.L712-.L711
	.byte	3,10,1,7,9
	.half	.L151-.L712
	.byte	0,1,1,5,58,0,5,2
	.word	.L45
	.byte	3,194,1,1,4,2,5,17,9
	.half	.L711-.L45
	.byte	3,137,6,1,9
	.half	.L712-.L711
	.byte	3,108,1,7,9
	.half	.L151-.L712
	.byte	0,1,1
.L708:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_7')
	.sect	'.debug_ranges'
.L150:
	.word	-1,.L45,0,.L151-.L45,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_8')
	.sect	'.debug_info'
.L152:
	.word	215
	.half	3
	.word	.L153
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L155,.L154
	.byte	2
	.word	.L68
	.byte	3
	.byte	'.cocofun_8',0,1,138,1,6,1
	.word	.L43,.L156,.L42
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_8')
	.sect	'.debug_abbrev'
.L153:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_8')
	.sect	'.debug_line'
.L154:
	.word	.L714-.L713
.L713:
	.half	3
	.word	.L716-.L715
.L715:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0,0,0,0
	.byte	'IfxEdsadc.h',0,1,0,0
	.byte	'IfxPort.h',0,2,0,0,0
.L716:
	.byte	4,2,5,56,7,0,5,2
	.word	.L43
	.byte	3,185,7,1,4,3,5,40,9
	.half	.L717-.L43
	.byte	3,229,125,1,9
	.half	.L156-.L717
	.byte	0,1,1,4,2,5,56,0,5,2
	.word	.L43
	.byte	3,195,7,1,4,3,5,40,9
	.half	.L717-.L43
	.byte	3,219,125,1,9
	.half	.L156-.L717
	.byte	0,1,1,4,2,5,56,0,5,2
	.word	.L43
	.byte	3,155,7,1,4,3,5,40,9
	.half	.L717-.L43
	.byte	3,131,126,1,9
	.half	.L156-.L717
	.byte	0,1,1,4,2,5,56,0,5,2
	.word	.L43
	.byte	3,175,7,1,4,3,5,40,9
	.half	.L717-.L43
	.byte	3,239,125,1,9
	.half	.L156-.L717
	.byte	0,1,1,4,2,5,56,0,5,2
	.word	.L43
	.byte	3,205,7,1,4,3,5,40,9
	.half	.L717-.L43
	.byte	3,209,125,1,9
	.half	.L156-.L717
	.byte	0,1,1
.L714:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_8')
	.sect	'.debug_ranges'
.L155:
	.word	-1,.L43,0,.L156-.L43,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_9')
	.sect	'.debug_info'
.L157:
	.word	215
	.half	3
	.word	.L158
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L160,.L159
	.byte	2
	.word	.L68
	.byte	3
	.byte	'.cocofun_9',0,1,138,1,6,1
	.word	.L41,.L161,.L40
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_9')
	.sect	'.debug_abbrev'
.L158:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_9')
	.sect	'.debug_line'
.L159:
	.word	.L719-.L718
.L718:
	.half	3
	.word	.L721-.L720
.L720:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc\\IfxEdsadc_Edsadc.c',0,0,0,0
	.byte	'IfxEdsadc.h',0,1,0,0,0
.L721:
	.byte	4,2,5,41,7,0,5,2
	.word	.L41
	.byte	3,186,7,1,5,56,9
	.half	.L722-.L41
	.byte	1,5,67,9
	.half	.L723-.L722
	.byte	1,9
	.half	.L161-.L723
	.byte	0,1,1,4,2,5,41,0,5,2
	.word	.L41
	.byte	3,196,7,1,5,56,9
	.half	.L722-.L41
	.byte	1,5,67,9
	.half	.L723-.L722
	.byte	1,3,118,1,7,9
	.half	.L161-.L723
	.byte	0,1,1,4,2,5,41,0,5,2
	.word	.L41
	.byte	3,156,7,1,5,56,9
	.half	.L722-.L41
	.byte	1,5,67,9
	.half	.L723-.L722
	.byte	1,3,30,1,7,9
	.half	.L161-.L723
	.byte	0,1,1,4,2,5,41,0,5,2
	.word	.L41
	.byte	3,176,7,1,5,56,9
	.half	.L722-.L41
	.byte	1,5,67,9
	.half	.L723-.L722
	.byte	1,3,10,1,7,9
	.half	.L161-.L723
	.byte	0,1,1,4,2,5,41,0,5,2
	.word	.L41
	.byte	3,206,7,1,5,56,9
	.half	.L722-.L41
	.byte	1,5,67,9
	.half	.L723-.L722
	.byte	1,3,108,1,7,9
	.half	.L161-.L723
	.byte	0,1,1
.L719:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_9')
	.sect	'.debug_ranges'
.L160:
	.word	-1,.L41,0,.L161-.L41,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_6')
	.sect	'.debug_loc'
.L35:
	.word	-1,.L2,0,.L146-.L2
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_7')
	.sect	'.debug_loc'
.L44:
	.word	-1,.L45,0,.L151-.L45
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_8')
	.sect	'.debug_loc'
.L42:
	.word	-1,.L43,0,.L156-.L43
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_9')
	.sect	'.debug_loc'
.L40:
	.word	-1,.L41,0,.L161-.L41
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEdsadc_Edsadc_calcDIVCG')
	.sect	'.debug_loc'
.L64:
	.word	-1,.L65,0,.L400-.L65
	.half	2
	.byte	138,0
	.word	0,0
.L404:
	.word	-1,.L65,.L472-.L65,.L407-.L65
	.half	5
	.byte	144,32,157,32,0
	.word	.L6-.L65,.L414-.L65
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L403:
	.word	-1,.L65,.L406-.L65,.L407-.L65
	.half	1
	.byte	81
	.word	.L4-.L65,.L413-.L65
	.half	1
	.byte	81
	.word	0,0
.L408:
	.word	-1,.L65,.L473-.L65,.L412-.L65
	.half	1
	.byte	95
	.word	0,0
.L405:
	.word	-1,.L65,.L2-.L65,.L146-.L65
	.half	1
	.byte	82
	.word	.L406-.L65,.L400-.L65
	.half	1
	.byte	82
	.word	0,0
.L401:
	.word	-1,.L65,.L2-.L65,.L146-.L65
	.half	1
	.byte	84
	.word	0,.L400-.L65
	.half	1
	.byte	84
	.word	0,0
.L402:
	.word	-1,.L65,.L2-.L65,.L146-.L65
	.half	1
	.byte	100
	.word	0,.L400-.L65
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEdsadc_Edsadc_calcDIVM')
	.sect	'.debug_loc'
.L33:
	.word	-1,.L34,0,.L389-.L34
	.half	2
	.byte	138,0
	.word	0,0
.L395:
	.word	-1,.L34,.L409-.L34,.L398-.L34
	.half	5
	.byte	144,32,157,32,0
	.word	.L6-.L34,.L414-.L34
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L394:
	.word	-1,.L34,.L397-.L34,.L398-.L34
	.half	1
	.byte	81
	.word	.L4-.L34,.L413-.L34
	.half	1
	.byte	81
	.word	0,0
.L399:
	.word	-1,.L34,.L411-.L34,.L412-.L34
	.half	1
	.byte	95
	.word	0,0
.L396:
	.word	-1,.L34,.L2-.L34,.L410-.L34
	.half	1
	.byte	82
	.word	.L397-.L34,.L389-.L34
	.half	1
	.byte	82
	.word	0,0
.L390:
	.word	-1,.L34,.L2-.L34,.L410-.L34
	.half	1
	.byte	84
	.word	0,.L389-.L34
	.half	1
	.byte	84
	.word	0,0
.L392:
	.word	-1,.L34,.L2-.L34,.L410-.L34
	.half	1
	.byte	100
	.word	0,.L389-.L34
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEdsadc_Edsadc_initCarrierGen')
	.sect	'.debug_loc'
.L36:
	.word	-1,.L37,0,.L415-.L37
	.half	2
	.byte	138,0
	.word	.L415-.L37,.L11-.L37
	.half	2
	.byte	138,8
	.word	.L11-.L37,.L11-.L37
	.half	2
	.byte	138,0
	.word	.L11-.L37,.L162-.L37
	.half	2
	.byte	138,8
	.word	.L162-.L37,.L162-.L37
	.half	2
	.byte	138,0
	.word	0,0
.L180:
	.word	0,0
.L168:
	.word	-1,.L37,.L169-.L37,.L187-.L37
	.half	1
	.byte	88
	.word	0,0
.L166:
	.word	-1,.L37,0,.L416-.L37
	.half	1
	.byte	101
	.word	.L418-.L37,.L162-.L37
	.half	1
	.byte	109
	.word	0,0
.L164:
	.word	-1,.L37,0,.L169-.L37
	.half	1
	.byte	100
	.word	.L417-.L37,.L162-.L37
	.half	1
	.byte	108
	.word	0,0
.L198:
	.word	0,0
.L196:
	.word	0,0
.L184:
	.word	0,0
.L194:
	.word	0,0
.L182:
	.word	0,0
.L200:
	.word	-1,.L37,.L421-.L37,.L162-.L37
	.half	1
	.byte	111
	.word	0,0
.L175:
	.word	-1,.L37,.L420-.L37,.L421-.L37
	.half	1
	.byte	111
	.word	0,0
.L192:
	.word	0,0
.L171:
	.word	-1,.L37,.L416-.L37,.L419-.L37
	.half	1
	.byte	82
	.word	0,0
.L172:
	.word	-1,.L37,0,.L162-.L37
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEdsadc_Edsadc_initCarrierGenConfig')
	.sect	'.debug_loc'
.L66:
	.word	-1,.L67,0,.L386-.L67
	.half	2
	.byte	138,0
	.word	0,0
.L387:
	.word	-1,.L67,0,.L386-.L67
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEdsadc_Edsadc_initChannel')
	.sect	'.debug_loc'
.L38:
	.word	-1,.L39,0,.L422-.L39
	.half	2
	.byte	138,0
	.word	.L422-.L39,.L22-.L39
	.half	2
	.byte	138,16
	.word	.L22-.L39,.L22-.L39
	.half	2
	.byte	138,0
	.word	.L22-.L39,.L267-.L39
	.half	2
	.byte	138,16
	.word	.L267-.L39,.L267-.L39
	.half	2
	.byte	138,0
	.word	0,0
.L348:
	.word	0,0
.L350:
	.word	0,0
.L268:
	.word	-1,.L39,0,.L423-.L39
	.half	1
	.byte	100
	.word	.L427-.L39,.L428-.L39
	.half	1
	.byte	111
	.word	.L429-.L39,.L430-.L39
	.half	1
	.byte	100
	.word	.L431-.L39,.L432-.L39
	.half	1
	.byte	100
	.word	.L433-.L39,.L434-.L39
	.half	1
	.byte	100
	.word	.L435-.L39,.L436-.L39
	.half	1
	.byte	100
	.word	.L437-.L39,.L273-.L39
	.half	1
	.byte	100
	.word	0,0
.L278:
	.word	0,0
.L289:
	.word	0,0
.L298:
	.word	0,0
.L282:
	.word	0,0
.L344:
	.word	-1,.L39,.L45-.L39,.L151-.L39
	.half	1
	.byte	111
	.word	.L43-.L39,.L156-.L39
	.half	1
	.byte	111
	.word	.L41-.L39,.L161-.L39
	.half	1
	.byte	111
	.word	.L447-.L39,.L448-.L39
	.half	1
	.byte	111
	.word	0,0
.L300:
	.word	0,0
.L270:
	.word	-1,.L39,0,.L424-.L39
	.half	1
	.byte	101
	.word	.L425-.L39,.L426-.L39
	.half	1
	.byte	108
	.word	0,0
.L361:
	.word	0,0
.L363:
	.word	0,0
.L357:
	.word	-1,.L39,.L45-.L39,.L151-.L39
	.half	1
	.byte	111
	.word	.L43-.L39,.L156-.L39
	.half	1
	.byte	111
	.word	.L41-.L39,.L161-.L39
	.half	1
	.byte	111
	.word	.L448-.L39,.L449-.L39
	.half	1
	.byte	111
	.word	0,0
.L308:
	.word	-1,.L39,.L45-.L39,.L151-.L39
	.half	1
	.byte	111
	.word	.L428-.L39,.L444-.L39
	.half	1
	.byte	111
	.word	.L43-.L39,.L156-.L39
	.half	1
	.byte	111
	.word	.L41-.L39,.L161-.L39
	.half	1
	.byte	111
	.word	.L13-.L39,.L446-.L39
	.half	1
	.byte	111
	.word	0,0
.L312:
	.word	0,0
.L331:
	.word	-1,.L39,.L45-.L39,.L151-.L39
	.half	1
	.byte	111
	.word	.L43-.L39,.L156-.L39
	.half	1
	.byte	111
	.word	.L41-.L39,.L161-.L39
	.half	1
	.byte	111
	.word	.L446-.L39,.L447-.L39
	.half	1
	.byte	111
	.word	0,0
.L335:
	.word	0,0
.L271:
	.word	-1,.L39,.L438-.L39,.L274-.L39
	.half	1
	.byte	100
	.word	.L439-.L39,.L285-.L39
	.half	1
	.byte	100
	.word	.L440-.L39,.L294-.L39
	.half	1
	.byte	100
	.word	.L441-.L39,.L442-.L39
	.half	1
	.byte	100
	.word	.L443-.L39,.L302-.L39
	.half	1
	.byte	100
	.word	.L45-.L39,.L151-.L39
	.half	1
	.byte	109
	.word	.L445-.L39,.L444-.L39
	.half	1
	.byte	109
	.word	.L43-.L39,.L156-.L39
	.half	1
	.byte	109
	.word	.L41-.L39,.L161-.L39
	.half	1
	.byte	109
	.word	.L13-.L39,.L267-.L39
	.half	1
	.byte	109
	.word	0,0
.L276:
	.word	0,0
.L287:
	.word	0,0
.L296:
	.word	0,0
.L280:
	.word	0,0
.L370:
	.word	-1,.L39,.L45-.L39,.L151-.L39
	.half	1
	.byte	111
	.word	.L43-.L39,.L156-.L39
	.half	1
	.byte	111
	.word	.L41-.L39,.L161-.L39
	.half	1
	.byte	111
	.word	.L449-.L39,.L12-.L39
	.half	1
	.byte	111
	.word	0,0
.L374:
	.word	0,0
.L376:
	.word	0,0
.L327:
	.word	0,0
.L352:
	.word	0,0
.L365:
	.word	0,0
.L316:
	.word	0,0
.L339:
	.word	0,0
.L378:
	.word	0,0
.L325:
	.word	0,0
.L314:
	.word	0,0
.L337:
	.word	0,0
.L304:
	.word	-1,.L39,.L45-.L39,.L151-.L39
	.half	1
	.byte	108
	.word	.L426-.L39,.L444-.L39
	.half	1
	.byte	108
	.word	.L43-.L39,.L156-.L39
	.half	1
	.byte	108
	.word	.L41-.L39,.L161-.L39
	.half	1
	.byte	108
	.word	.L13-.L39,.L267-.L39
	.half	1
	.byte	108
	.word	0,0
.L323:
	.word	0,0
.L291:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEdsadc_Edsadc_initChannelConfig')
	.sect	'.debug_loc'
.L46:
	.word	-1,.L47,0,.L382-.L47
	.half	2
	.byte	138,0
	.word	0,0
.L384:
	.word	-1,.L47,0,.L23-.L47
	.half	1
	.byte	100
	.word	.L450-.L47,.L382-.L47
	.half	1
	.byte	98
	.word	.L25-.L47,.L451-.L47
	.half	1
	.byte	100
	.word	0,0
.L385:
	.word	-1,.L47,0,.L382-.L47
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEdsadc_Edsadc_initCombFilter')
	.sect	'.debug_loc'
.L48:
	.word	-1,.L49,0,.L207-.L49
	.half	2
	.byte	138,0
	.word	0,0
.L209:
	.word	-1,.L49,0,.L207-.L49
	.half	1
	.byte	100
	.word	0,0
.L211:
	.word	-1,.L49,0,.L207-.L49
	.half	1
	.byte	101
	.word	0,0
.L213:
	.word	-1,.L49,.L452-.L49,.L207-.L49
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEdsadc_Edsadc_initDemodulator')
	.sect	'.debug_loc'
.L50:
	.word	-1,.L51,0,.L214-.L51
	.half	2
	.byte	138,0
	.word	0,0
.L215:
	.word	-1,.L51,0,.L214-.L51
	.half	1
	.byte	100
	.word	0,0
.L217:
	.word	-1,.L51,0,.L214-.L51
	.half	1
	.byte	101
	.word	0,0
.L219:
	.word	-1,.L51,.L453-.L51,.L214-.L51
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEdsadc_Edsadc_initFirFilter')
	.sect	'.debug_loc'
.L52:
	.word	-1,.L53,0,.L220-.L53
	.half	2
	.byte	138,0
	.word	0,0
.L221:
	.word	-1,.L53,0,.L220-.L53
	.half	1
	.byte	100
	.word	0,0
.L223:
	.word	-1,.L53,0,.L220-.L53
	.half	1
	.byte	101
	.word	0,0
.L225:
	.word	-1,.L53,.L454-.L53,.L220-.L53
	.half	1
	.byte	81
	.word	0,0
.L227:
	.word	-1,.L53,.L455-.L53,.L220-.L53
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEdsadc_Edsadc_initIntegrator')
	.sect	'.debug_loc'
.L54:
	.word	-1,.L55,0,.L228-.L55
	.half	2
	.byte	138,0
	.word	0,0
.L229:
	.word	-1,.L55,0,.L228-.L55
	.half	1
	.byte	100
	.word	0,0
.L231:
	.word	-1,.L55,0,.L228-.L55
	.half	1
	.byte	101
	.word	0,0
.L233:
	.word	-1,.L55,.L456-.L55,.L228-.L55
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEdsadc_Edsadc_initModulator')
	.sect	'.debug_loc'
.L56:
	.word	-1,.L57,0,.L457-.L57
	.half	2
	.byte	138,0
	.word	.L457-.L57,.L234-.L57
	.half	2
	.byte	138,8
	.word	.L234-.L57,.L234-.L57
	.half	2
	.byte	138,0
	.word	0,0
.L235:
	.word	-1,.L57,0,.L242-.L57
	.half	1
	.byte	100
	.word	.L241-.L57,.L234-.L57
	.half	1
	.byte	108
	.word	0,0
.L237:
	.word	-1,.L57,0,.L458-.L57
	.half	1
	.byte	101
	.word	.L459-.L57,.L460-.L57
	.half	1
	.byte	111
	.word	0,0
.L239:
	.word	-1,.L57,.L461-.L57,.L234-.L57
	.half	1
	.byte	88
	.word	0,0
.L245:
	.word	-1,.L57,.L458-.L57,.L462-.L57
	.half	1
	.byte	82
	.word	0,0
.L244:
	.word	-1,.L57,0,.L234-.L57
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEdsadc_Edsadc_initModule')
	.sect	'.debug_loc'
.L58:
	.word	-1,.L59,0,.L246-.L59
	.half	2
	.byte	138,0
	.word	0,0
.L249:
	.word	-1,.L59,0,.L463-.L59
	.half	1
	.byte	101
	.word	.L464-.L59,.L246-.L59
	.half	1
	.byte	111
	.word	0,0
.L247:
	.word	-1,.L59,0,.L463-.L59
	.half	1
	.byte	100
	.word	0,0
.L251:
	.word	-1,.L59,.L465-.L59,.L246-.L59
	.half	1
	.byte	108
	.word	0,0
.L257:
	.word	-1,.L59,.L469-.L59,.L246-.L59
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L254:
	.word	-1,.L59,.L463-.L59,.L466-.L59
	.half	1
	.byte	82
	.word	.L467-.L59,.L26-.L59
	.half	1
	.byte	95
	.word	.L468-.L59,.L26-.L59
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEdsadc_Edsadc_initModuleConfig')
	.sect	'.debug_loc'
.L60:
	.word	-1,.L61,0,.L258-.L61
	.half	2
	.byte	138,0
	.word	0,0
.L259:
	.word	-1,.L61,0,.L258-.L61
	.half	1
	.byte	100
	.word	0,0
.L260:
	.word	-1,.L61,0,.L258-.L61
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxEdsadc_Edsadc_initRectifier')
	.sect	'.debug_loc'
.L62:
	.word	-1,.L63,0,.L261-.L63
	.half	2
	.byte	138,0
	.word	0,0
.L262:
	.word	-1,.L63,0,.L261-.L63
	.half	1
	.byte	100
	.word	0,0
.L264:
	.word	-1,.L63,0,.L261-.L63
	.half	1
	.byte	101
	.word	0,0
.L266:
	.word	-1,.L63,.L470-.L63,.L471-.L63
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L724:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxEdsadc_Edsadc_calcDIVM')
	.sect	'.debug_frame'
	.word	24
	.word	.L724,.L34,.L389-.L34
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxEdsadc_Edsadc_initCarrierGen')
	.sect	'.debug_frame'
	.word	52
	.word	.L724,.L37,.L162-.L37
	.byte	4
	.word	(.L415-.L37)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L11-.L415)/2
	.byte	19,0,8,26,19,8,22,26,3,19,138,8,4
	.word	(.L162-.L11)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('IfxEdsadc_Edsadc_initChannel')
	.sect	'.debug_frame'
	.word	52
	.word	.L724,.L39,.L267-.L39
	.byte	4
	.word	(.L422-.L39)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L22-.L422)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L267-.L22)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('IfxEdsadc_Edsadc_initChannelConfig')
	.sect	'.debug_frame'
	.word	16
	.word	.L724,.L47,.L382-.L47
	.byte	8,19,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxEdsadc_Edsadc_initCombFilter')
	.sect	'.debug_frame'
	.word	20
	.word	.L724,.L49,.L207-.L49
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxEdsadc_Edsadc_initDemodulator')
	.sect	'.debug_frame'
	.word	20
	.word	.L724,.L51,.L214-.L51
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxEdsadc_Edsadc_initFirFilter')
	.sect	'.debug_frame'
	.word	20
	.word	.L724,.L53,.L220-.L53
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxEdsadc_Edsadc_initIntegrator')
	.sect	'.debug_frame'
	.word	20
	.word	.L724,.L55,.L228-.L55
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxEdsadc_Edsadc_initModulator')
	.sect	'.debug_frame'
	.word	36
	.word	.L724,.L57,.L234-.L57
	.byte	4
	.word	(.L457-.L57)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L234-.L457)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxEdsadc_Edsadc_initModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L724,.L59,.L246-.L59
	.sdecl	'.debug_frame',debug,cluster('IfxEdsadc_Edsadc_initModuleConfig')
	.sect	'.debug_frame'
	.word	20
	.word	.L724,.L61,.L258-.L61
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxEdsadc_Edsadc_initRectifier')
	.sect	'.debug_frame'
	.word	20
	.word	.L724,.L63,.L261-.L63
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxEdsadc_Edsadc_calcDIVCG')
	.sect	'.debug_frame'
	.word	24
	.word	.L724,.L65,.L400-.L65
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxEdsadc_Edsadc_initCarrierGenConfig')
	.sect	'.debug_frame'
	.word	24
	.word	.L724,.L67,.L386-.L67
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L725:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_6')
	.sect	'.debug_frame'
	.word	24
	.word	.L725,.L2,.L146-.L2
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_9')
	.sect	'.debug_frame'
	.word	24
	.word	.L725,.L41,.L161-.L41
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_8')
	.sect	'.debug_frame'
	.word	24
	.word	.L725,.L43,.L156-.L43
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_7')
	.sect	'.debug_frame'
	.word	24
	.word	.L725,.L45,.L151-.L45
	.byte	8,18,8,19,8,20,8,21,8,22,8,23


	; Module end
