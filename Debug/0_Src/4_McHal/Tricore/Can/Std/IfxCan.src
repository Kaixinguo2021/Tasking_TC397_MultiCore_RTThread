	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\4_McHal\\Tricore\\Can\\Std\\.IfxCan.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include\\libc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.src ..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c'

	
$TC162
	.sdecl	'.zrodata.IfxCan..3.cnt',data,rom
	.sect	'.zrodata.IfxCan..3.cnt'
	.align	2
.3.cnt:	.type	object
	.size	.3.cnt,4
	.word	1036831949
	.sdecl	'.zrodata.IfxCan..4.cnt',data,rom
	.sect	'.zrodata.IfxCan..4.cnt'
	.align	2
.4.cnt:	.type	object
	.size	.4.cnt,4
	.word	1176256512
	
	.sdecl	'.text.IfxCan.IfxCan_Node_clearRxBufferNewDataFlag',code,cluster('IfxCan_Node_clearRxBufferNewDataFlag')
	.sect	'.text.IfxCan.IfxCan_Node_clearRxBufferNewDataFlag'
	.align	2
	
	.global	IfxCan_Node_clearRxBufferNewDataFlag

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	     1  /**
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	     2   * \file IfxCan.c
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	     3   * \brief CAN  basic functionality
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	     4   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	     5   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	     6   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	     7   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	     8   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	     9   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    10   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    11   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    12   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    13   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    14   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    15   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    16   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    17   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    18   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    19   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    20   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    21   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    22   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    23   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    24   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    25   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    26   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    27   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    28   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    29   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    30   * language processor.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    31   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    32   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    33   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    34   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    35   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    36   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    37   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    38   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    39   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    40   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    41   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    42  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    43  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    44  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    45  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    46  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    47  #include "IfxCan.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    48  #include "IfxCan_bf.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    49  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    50  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    51  /*-------------------------Function Implementations---------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    52  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    53  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    54  void IfxCan_Node_clearRxBufferNewDataFlag(Ifx_CAN_N *node, IfxCan_RxBufferId rxBufferId)
; Function IfxCan_Node_clearRxBufferNewDataFlag
.L174:
IfxCan_Node_clearRxBufferNewDataFlag:	.type	func

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    55  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    56      uint32 value;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    57  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    58      if (rxBufferId < IfxCan_RxBufferId_32)
	mov	d15,#32
.L1162:
	jge.u	d4,d15,.L2
.L1163:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    59      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    60          value         = (1U << rxBufferId);
	mov	d15,#1
.L1164:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    61          node->NDAT1.U = value;
	sh	d15,d15,d4
	st.w	[a4]408,d15
.L821:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    62      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    63      else
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    64      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    65          value         = (1U << (rxBufferId - 32));
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    66          node->NDAT2.U = value;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    67      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    68  }
	ret
.L2:
	mov	d15,#1
.L1165:
	add	d0,d4,#-32
.L1166:
	sh	d15,d15,d0
	st.w	[a4]412,d15
.L822:
	ret
.L698:
	
__IfxCan_Node_clearRxBufferNewDataFlag_function_end:
	.size	IfxCan_Node_clearRxBufferNewDataFlag,__IfxCan_Node_clearRxBufferNewDataFlag_function_end-IfxCan_Node_clearRxBufferNewDataFlag
.L366:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_Node_getDataLength',code,cluster('IfxCan_Node_getDataLength')
	.sect	'.text.IfxCan.IfxCan_Node_getDataLength'
	.align	2
	
	.global	IfxCan_Node_getDataLength

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    69  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    70  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    71  uint32 IfxCan_Node_getDataLength(IfxCan_DataLengthCode dataLengthCode)
; Function IfxCan_Node_getDataLength
.L176:
IfxCan_Node_getDataLength:	.type	func

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    72  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    73      uint32 numBytes;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    74  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    75      if (dataLengthCode <= IfxCan_DataLengthCode_8)
	fcall	.cocofun_7
.L825:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    76      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    77          numBytes = (uint32)dataLengthCode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    78      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    79      else if (dataLengthCode <= IfxCan_DataLengthCode_24)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    80      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    81          numBytes = ((uint32)dataLengthCode - 6) << 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    82      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    83      else
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    84      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    85          numBytes = ((uint32)dataLengthCode - 11) << 4;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    86      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    87  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    88      return (numBytes + 3) >> 2;
	add	d4,#3
.L826:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    89  }
	sh	d2,d4,#-2
	ret
.L528:
	
__IfxCan_Node_getDataLength_function_end:
	.size	IfxCan_Node_getDataLength,__IfxCan_Node_getDataLength_function_end-IfxCan_Node_getDataLength
.L281:
	; End of function
	
	.sdecl	'.text.IfxCan..cocofun_7',code,cluster('.cocofun_7')
	.sect	'.text.IfxCan..cocofun_7'
	.align	2
; Function .cocofun_7
.L178:
.cocofun_7:	.type	func
; Function body .cocofun_7, coco_iter:0
	jlt.u	d4,#9,.L5
.L1355:
	jge.u	d4,#13,.L6
.L1356:
	sh	d4,#2
.L823:
	add	d4,d4,#-24
	j	.L7
.L6:
	sh	d4,#4
.L824:
	add	d4,d4,#-176
.L7:
.L5:
	fret
.L486:
	; End of function
	.sdecl	'.text.IfxCan.IfxCan_Node_getDataLengthFromCode',code,cluster('IfxCan_Node_getDataLengthFromCode')
	.sect	'.text.IfxCan.IfxCan_Node_getDataLengthFromCode'
	.align	2
	
	.global	IfxCan_Node_getDataLengthFromCode

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    90  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    91  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    92  uint32 IfxCan_Node_getDataLengthFromCode(Ifx_CAN_N *node, IfxCan_DataLengthCode dataLengthCode)
; Function IfxCan_Node_getDataLengthFromCode
.L180:
IfxCan_Node_getDataLengthFromCode:	.type	func

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    93  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    94      uint32 numBytes;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    95      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    96  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    97      if ((dataLengthCode <= IfxCan_DataLengthCode_64) && (dataLengthCode > IfxCan_DataLengthCode_24))
	add	d15,d4,#-13
	extr.u	d15,d15,#0,#8
.L963:
	jge.u	d15,#3,.L9
.L964:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    98      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	    99          numBytes = ((uint32)dataLengthCode - 11) * 16;
	sh	d4,#4
.L827:
	add	d4,d4,#-176
	j	.L10
.L9:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   100      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   101      else if ((dataLengthCode <= IfxCan_DataLengthCode_24) && (dataLengthCode > IfxCan_DataLengthCode_8))
	add	d15,d4,#-9
	extr.u	d15,d15,#0,#8
.L965:
	jge.u	d15,#4,.L11
.L966:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   102      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   103          numBytes = ((uint32)dataLengthCode - 6) * 4;
	sh	d4,#2
.L828:
	add	d4,d4,#-24
.L11:
.L10:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   104      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   105      else
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   106      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   107          numBytes = (uint32)dataLengthCode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   108      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   109  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   110      return (numBytes + 3) / 4;
	add	d4,#3
.L829:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   111  }
	sh	d2,d4,#-2
	ret
.L533:
	
__IfxCan_Node_getDataLengthFromCode_function_end:
	.size	IfxCan_Node_getDataLengthFromCode,__IfxCan_Node_getDataLengthFromCode_function_end-IfxCan_Node_getDataLengthFromCode
.L286:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_Node_getExtendedFilterElementAddress',code,cluster('IfxCan_Node_getExtendedFilterElementAddress')
	.sect	'.text.IfxCan.IfxCan_Node_getExtendedFilterElementAddress'
	.align	2
	
	.global	IfxCan_Node_getExtendedFilterElementAddress

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   112  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   113  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   114  Ifx_CAN_EXTMSG *IfxCan_Node_getExtendedFilterElementAddress(uint32 ramBaseAddress, uint16 extendedFilterListStartAddress, uint8 filterNumber)
; Function IfxCan_Node_getExtendedFilterElementAddress
.L182:
IfxCan_Node_getExtendedFilterElementAddress:	.type	func

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   115  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   116      uint32 extendedFilterElementAddress, filterIndex;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   117  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   118      filterIndex                  = filterNumber * 8;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   119      extendedFilterElementAddress = ramBaseAddress + extendedFilterListStartAddress + filterIndex;
	add	d4,d5
.L831:
	sh	d6,#3
.L830:
	add	d4,d6
.L1215:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   120  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   121      return (Ifx_CAN_EXTMSG *)extendedFilterElementAddress;
	mov.a	a2,d4
.L1216:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   122  }
	ret
.L749:
	
__IfxCan_Node_getExtendedFilterElementAddress_function_end:
	.size	IfxCan_Node_getExtendedFilterElementAddress,__IfxCan_Node_getExtendedFilterElementAddress_function_end-IfxCan_Node_getExtendedFilterElementAddress
.L411:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_Node_getFrameMode',code,cluster('IfxCan_Node_getFrameMode')
	.sect	'.text.IfxCan.IfxCan_Node_getFrameMode'
	.align	2
	
	.global	IfxCan_Node_getFrameMode

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   123  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   124  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   125  IfxCan_FrameMode IfxCan_Node_getFrameMode(Ifx_CAN_RXMSG *rxBufferElement)
; Function IfxCan_Node_getFrameMode
.L184:
IfxCan_Node_getFrameMode:	.type	func

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   126  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   127      IfxCan_FrameMode frameMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   128  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   129      /* if CAN FD long frame is been selected */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   130      if (rxBufferElement->R1.B.FDF)
	ld.bu	d15,[a4]6
.L971:
	jz.t	d15:5,.L15
.L972:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   131      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   132          /* if bitrate switch is been set */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   133          if (rxBufferElement->R1.B.BRS)
	ld.bu	d15,[a4]6
.L973:
	jz.t	d15:4,.L16
.L974:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   134          {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   135              frameMode = IfxCan_FrameMode_fdLongAndFast;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   136          }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   137          /* if bitrate switch is not been set */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   138          else
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   139          {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   140              frameMode = IfxCan_FrameMode_fdLong;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   141          }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   142      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   143      /* if CAN FD long frame is not been selected */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   144      else
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   145      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   146          frameMode = IfxCan_FrameMode_standard;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   147      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   148  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   149      return frameMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   150  }
	mov	d2,#2
	ret
.L16:
	mov	d2,#1
	ret
.L15:
	mov	d2,#0
	ret
.L539:
	
__IfxCan_Node_getFrameMode_function_end:
	.size	IfxCan_Node_getFrameMode,__IfxCan_Node_getFrameMode_function_end-IfxCan_Node_getFrameMode
.L291:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_Node_getFrameModeFromTxEventFifo',code,cluster('IfxCan_Node_getFrameModeFromTxEventFifo')
	.sect	'.text.IfxCan.IfxCan_Node_getFrameModeFromTxEventFifo'
	.align	2
	
	.global	IfxCan_Node_getFrameModeFromTxEventFifo

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   151  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   152  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   153  IfxCan_FrameMode IfxCan_Node_getFrameModeFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; Function IfxCan_Node_getFrameModeFromTxEventFifo
.L186:
IfxCan_Node_getFrameModeFromTxEventFifo:	.type	func

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   154  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   155      IfxCan_FrameMode frameMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   156  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   157      /* if CAN FD long frame is been selected */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   158      if (txEventFifoElement->E1.B.FDF)
	ld.bu	d15,[a4]6
.L1326:
	jz.t	d15:5,.L20
.L1327:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   159      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   160          /* if bitrate switch is been set */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   161          if (txEventFifoElement->E1.B.BRS)
	ld.bu	d15,[a4]6
.L1328:
	jz.t	d15:4,.L21
.L1329:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   162          {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   163              frameMode = IfxCan_FrameMode_fdLongAndFast;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   164          }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   165          /* if bitrate switch is not been set */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   166          else
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   167          {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   168              frameMode = IfxCan_FrameMode_fdLong;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   169          }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   170      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   171      /* if CAN FD long frame is not been selected */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   172      else
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   173      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   174          frameMode = IfxCan_FrameMode_standard;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   175      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   176  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   177      return frameMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   178  }
	mov	d2,#2
	ret
.L21:
	mov	d2,#1
	ret
.L20:
	mov	d2,#0
	ret
.L806:
	
__IfxCan_Node_getFrameModeFromTxEventFifo_function_end:
	.size	IfxCan_Node_getFrameModeFromTxEventFifo,__IfxCan_Node_getFrameModeFromTxEventFifo_function_end-IfxCan_Node_getFrameModeFromTxEventFifo
.L466:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_Node_getRxBufferDataFieldSize',code,cluster('IfxCan_Node_getRxBufferDataFieldSize')
	.sect	'.text.IfxCan.IfxCan_Node_getRxBufferDataFieldSize'
	.align	2
	
	.global	IfxCan_Node_getRxBufferDataFieldSize

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   179  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   180  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   181  uint8 IfxCan_Node_getRxBufferDataFieldSize(Ifx_CAN_N *node)
; Function IfxCan_Node_getRxBufferDataFieldSize
.L188:
IfxCan_Node_getRxBufferDataFieldSize:	.type	func

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   182  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   183      IfxCan_DataFieldSize sizeCode = (IfxCan_DataFieldSize)node->RX.ESC.B.RBDS;
	ld.bu	d15,[a4]445
.L832:
	and	d15,#7
.L1171:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   184  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   185      uint8                size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   186  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   187      if (sizeCode < IfxCan_DataFieldSize_32)
	jge.u	d15,#5,.L25
.L1172:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   188      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   189          size = ((uint8)sizeCode + 2) * 4;
	sha	d15,#2
.L833:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   190      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   191      else
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   192      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   193          size = ((uint8)sizeCode - 3) * 16;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   194      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   195  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   196      return size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   197  }
	add	d2,d15,#8
	ret
.L25:
	sha	d15,#4
.L834:
	add	d2,d15,#-48
	ret
.L703:
	
__IfxCan_Node_getRxBufferDataFieldSize_function_end:
	.size	IfxCan_Node_getRxBufferDataFieldSize,__IfxCan_Node_getRxBufferDataFieldSize_function_end-IfxCan_Node_getRxBufferDataFieldSize
.L371:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_Node_getRxBufferElementAddress',code,cluster('IfxCan_Node_getRxBufferElementAddress')
	.sect	'.text.IfxCan.IfxCan_Node_getRxBufferElementAddress'
	.align	2
	
	.global	IfxCan_Node_getRxBufferElementAddress

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   198  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   199  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   200  Ifx_CAN_RXMSG *IfxCan_Node_getRxBufferElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 rxBuffersStartAddress, IfxCan_RxBufferId rxBufferNumber)
; Function IfxCan_Node_getRxBufferElementAddress
.L190:
IfxCan_Node_getRxBufferElementAddress:	.type	func
	mov	d15,d4
.L835:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   201  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   202      uint16 rxBufferIndex, rxBufferSize, numOfDataBytes, numOfconfigBytes = 8;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   203  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   204      numOfDataBytes = IfxCan_Node_getRxBufferDataFieldSize(node);
	mov	e8,d6,d5
	call	IfxCan_Node_getRxBufferDataFieldSize
.L714:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   205      rxBufferSize   = numOfconfigBytes + numOfDataBytes;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   206      rxBufferIndex  = rxBufferSize * ((uint16)rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   207      uint32 rxBufferElementAddress = ramBaseAddress + rxBuffersStartAddress + rxBufferIndex;
	fcall	.cocofun_6
.L838:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   208  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   209      return (Ifx_CAN_RXMSG *)rxBufferElementAddress;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   210  }
	ret
.L707:
	
__IfxCan_Node_getRxBufferElementAddress_function_end:
	.size	IfxCan_Node_getRxBufferElementAddress,__IfxCan_Node_getRxBufferElementAddress_function_end-IfxCan_Node_getRxBufferElementAddress
.L376:
	; End of function
	
	.sdecl	'.text.IfxCan..cocofun_6',code,cluster('.cocofun_6')
	.sect	'.text.IfxCan..cocofun_6'
	.align	2
; Function .cocofun_6
.L192:
.cocofun_6:	.type	func
; Function body .cocofun_6, coco_iter:0
	add	d0,d2,#8
.L1348:
	mul	d9,d0
.L837:
	add	d15,d8
.L836:
	add	d15,d9
.L1349:
	mov.a	a2,d15
.L1350:
	fret
.L481:
	; End of function
	.sdecl	'.text.IfxCan.IfxCan_Node_getRxFifo0DataFieldSize',code,cluster('IfxCan_Node_getRxFifo0DataFieldSize')
	.sect	'.text.IfxCan.IfxCan_Node_getRxFifo0DataFieldSize'
	.align	2
	
	.global	IfxCan_Node_getRxFifo0DataFieldSize

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   211  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   212  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   213  uint8 IfxCan_Node_getRxFifo0DataFieldSize(Ifx_CAN_N *node)
; Function IfxCan_Node_getRxFifo0DataFieldSize
.L194:
IfxCan_Node_getRxFifo0DataFieldSize:	.type	func

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   214  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   215      IfxCan_DataFieldSize sizeCode = (IfxCan_DataFieldSize)node->RX.ESC.B.F0DS;
	ld.bu	d15,[a4]444
.L839:
	and	d15,#7
.L1181:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   216  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   217      uint8                size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   218  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   219      if (sizeCode < IfxCan_DataFieldSize_32)
	jge.u	d15,#5,.L29
.L1182:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   220      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   221          size = ((uint8)sizeCode + 2) * 4;
	sha	d15,#2
.L840:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   222      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   223      else
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   224      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   225          size = ((uint8)sizeCode - 3) * 16;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   226      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   227  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   228      return size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   229  }
	add	d2,d15,#8
	ret
.L29:
	sha	d15,#4
.L841:
	add	d2,d15,#-48
	ret
.L715:
	
__IfxCan_Node_getRxFifo0DataFieldSize_function_end:
	.size	IfxCan_Node_getRxFifo0DataFieldSize,__IfxCan_Node_getRxFifo0DataFieldSize_function_end-IfxCan_Node_getRxFifo0DataFieldSize
.L381:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_Node_getRxFifo0ElementAddress',code,cluster('IfxCan_Node_getRxFifo0ElementAddress')
	.sect	'.text.IfxCan.IfxCan_Node_getRxFifo0ElementAddress'
	.align	2
	
	.global	IfxCan_Node_getRxFifo0ElementAddress

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   230  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   231  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   232  Ifx_CAN_RXMSG *IfxCan_Node_getRxFifo0ElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 rxFifo0StartAddress, IfxCan_RxBufferId rxBufferNumber)
; Function IfxCan_Node_getRxFifo0ElementAddress
.L196:
IfxCan_Node_getRxFifo0ElementAddress:	.type	func
	mov	d15,d4
.L842:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   233  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   234      uint16 rxFifoElementIndex, rxFifoElementSize, numOfDataBytes, numOfconfigBytes = 8;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   235  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   236      numOfDataBytes     = IfxCan_Node_getRxFifo0DataFieldSize(node);
	mov	e8,d6,d5
	call	IfxCan_Node_getRxFifo0DataFieldSize
.L725:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   237      rxFifoElementSize  = numOfconfigBytes + numOfDataBytes;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   238      rxFifoElementIndex = rxFifoElementSize * ((uint16)rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   239      uint32 rxFifoElementAddress = ramBaseAddress + rxFifo0StartAddress + rxFifoElementIndex;
	fcall	.cocofun_6
.L843:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   240  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   241      return (Ifx_CAN_RXMSG *)rxFifoElementAddress;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   242  }
	ret
.L719:
	
__IfxCan_Node_getRxFifo0ElementAddress_function_end:
	.size	IfxCan_Node_getRxFifo0ElementAddress,__IfxCan_Node_getRxFifo0ElementAddress_function_end-IfxCan_Node_getRxFifo0ElementAddress
.L386:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_Node_getRxFifo1DataFieldSize',code,cluster('IfxCan_Node_getRxFifo1DataFieldSize')
	.sect	'.text.IfxCan.IfxCan_Node_getRxFifo1DataFieldSize'
	.align	2
	
	.global	IfxCan_Node_getRxFifo1DataFieldSize

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   243  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   244  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   245  uint8 IfxCan_Node_getRxFifo1DataFieldSize(Ifx_CAN_N *node)
; Function IfxCan_Node_getRxFifo1DataFieldSize
.L198:
IfxCan_Node_getRxFifo1DataFieldSize:	.type	func

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   246  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   247      IfxCan_DataFieldSize sizeCode = (IfxCan_DataFieldSize)node->RX.ESC.B.F1DS;
	ld.bu	d15,[a4]444
	extr.u	d15,d15,#4,#3
.L844:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   248  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   249      uint8                size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   250  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   251      if (sizeCode < IfxCan_DataFieldSize_32)
	jge.u	d15,#5,.L33
.L1191:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   252      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   253          size = ((uint8)sizeCode + 2) * 4;
	sha	d15,#2
.L845:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   254      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   255      else
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   256      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   257          size = ((uint8)sizeCode - 3) * 16;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   258      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   259  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   260      return size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   261  }
	add	d2,d15,#8
	ret
.L33:
	sha	d15,#4
.L846:
	add	d2,d15,#-48
	ret
.L726:
	
__IfxCan_Node_getRxFifo1DataFieldSize_function_end:
	.size	IfxCan_Node_getRxFifo1DataFieldSize,__IfxCan_Node_getRxFifo1DataFieldSize_function_end-IfxCan_Node_getRxFifo1DataFieldSize
.L391:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_Node_getRxFifo1ElementAddress',code,cluster('IfxCan_Node_getRxFifo1ElementAddress')
	.sect	'.text.IfxCan.IfxCan_Node_getRxFifo1ElementAddress'
	.align	2
	
	.global	IfxCan_Node_getRxFifo1ElementAddress

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   262  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   263  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   264  Ifx_CAN_RXMSG *IfxCan_Node_getRxFifo1ElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 rxFifo1StartAddress, IfxCan_RxBufferId rxBufferNumber)
; Function IfxCan_Node_getRxFifo1ElementAddress
.L200:
IfxCan_Node_getRxFifo1ElementAddress:	.type	func
	mov	d15,d4
.L847:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   265  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   266      uint16 rxFifoElementIndex, rxFifoElementSize, numOfDataBytes, numOfconfigBytes = 8;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   267  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   268      numOfDataBytes     = IfxCan_Node_getRxFifo1DataFieldSize(node);
	mov	e8,d6,d5
	call	IfxCan_Node_getRxFifo1DataFieldSize
.L736:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   269      rxFifoElementSize  = numOfconfigBytes + numOfDataBytes;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   270      rxFifoElementIndex = rxFifoElementSize * ((uint16)rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   271      uint32 rxFifoElementAddress = ramBaseAddress + rxFifo1StartAddress + rxFifoElementIndex;
	fcall	.cocofun_6
.L848:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   272  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   273      return (Ifx_CAN_RXMSG *)rxFifoElementAddress;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   274  }
	ret
.L730:
	
__IfxCan_Node_getRxFifo1ElementAddress_function_end:
	.size	IfxCan_Node_getRxFifo1ElementAddress,__IfxCan_Node_getRxFifo1ElementAddress_function_end-IfxCan_Node_getRxFifo1ElementAddress
.L396:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_Node_getStandardFilterElementAddress',code,cluster('IfxCan_Node_getStandardFilterElementAddress')
	.sect	'.text.IfxCan.IfxCan_Node_getStandardFilterElementAddress'
	.align	2
	
	.global	IfxCan_Node_getStandardFilterElementAddress

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   275  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   276  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   277  Ifx_CAN_STDMSG *IfxCan_Node_getStandardFilterElementAddress(uint32 ramBaseAddress, uint16 standardFilterListStartAddress, uint8 filterNumber)
; Function IfxCan_Node_getStandardFilterElementAddress
.L202:
IfxCan_Node_getStandardFilterElementAddress:	.type	func

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   278  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   279      uint32 standardFilterElementAddress, filterIndex;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   280  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   281      filterIndex                  = filterNumber * 4;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   282      standardFilterElementAddress = ramBaseAddress + standardFilterListStartAddress + filterIndex;
	add	d4,d5
.L850:
	sh	d6,#2
.L849:
	add	d4,d6
.L1221:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   283  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   284      return (Ifx_CAN_STDMSG *)standardFilterElementAddress;
	mov.a	a2,d4
.L1222:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   285  }
	ret
.L754:
	
__IfxCan_Node_getStandardFilterElementAddress_function_end:
	.size	IfxCan_Node_getStandardFilterElementAddress,__IfxCan_Node_getStandardFilterElementAddress_function_end-IfxCan_Node_getStandardFilterElementAddress
.L416:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_Node_getTxBufferDataFieldSize',code,cluster('IfxCan_Node_getTxBufferDataFieldSize')
	.sect	'.text.IfxCan.IfxCan_Node_getTxBufferDataFieldSize'
	.align	2
	
	.global	IfxCan_Node_getTxBufferDataFieldSize

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   286  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   287  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   288  uint8 IfxCan_Node_getTxBufferDataFieldSize(Ifx_CAN_N *node)
; Function IfxCan_Node_getTxBufferDataFieldSize
.L204:
IfxCan_Node_getTxBufferDataFieldSize:	.type	func

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   289  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   290      IfxCan_DataFieldSize sizeCode = (IfxCan_DataFieldSize)node->TX.ESC.B.TBDS;
	ld.bu	d15,[a4]456
.L851:
	and	d15,#7
.L1144:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   291  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   292      uint8                size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   293  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   294      if (sizeCode < IfxCan_DataFieldSize_32)
	jge.u	d15,#5,.L38
.L1145:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   295      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   296          size = ((uint8)sizeCode + 2) * 4;
	sha	d15,#2
.L852:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   297      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   298      else
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   299      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   300          size = ((uint8)sizeCode - 3) * 16;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   301      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   302  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   303      return size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   304  }
	add	d2,d15,#8
	ret
.L38:
	sha	d15,#4
.L853:
	add	d2,d15,#-48
	ret
.L669:
	
__IfxCan_Node_getTxBufferDataFieldSize_function_end:
	.size	IfxCan_Node_getTxBufferDataFieldSize,__IfxCan_Node_getTxBufferDataFieldSize_function_end-IfxCan_Node_getTxBufferDataFieldSize
.L346:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_Node_getTxBufferElementAddress',code,cluster('IfxCan_Node_getTxBufferElementAddress')
	.sect	'.text.IfxCan.IfxCan_Node_getTxBufferElementAddress'
	.align	2
	
	.global	IfxCan_Node_getTxBufferElementAddress

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   305  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   306  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   307  Ifx_CAN_TXMSG *IfxCan_Node_getTxBufferElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 txBuffersStartAddress, IfxCan_TxBufferId txBufferNumber)
; Function IfxCan_Node_getTxBufferElementAddress
.L206:
IfxCan_Node_getTxBufferElementAddress:	.type	func
	mov	d15,d4
.L854:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   308  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   309      uint16 txBufferIndex, txBufferSize, numOfDataBytes, numOfConfigBytes = 8;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   310  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   311      numOfDataBytes = IfxCan_Node_getTxBufferDataFieldSize(node);
	mov	e8,d6,d5
	call	IfxCan_Node_getTxBufferDataFieldSize
.L681:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   312      txBufferSize   = numOfConfigBytes + numOfDataBytes;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   313      txBufferIndex  = txBufferSize * ((uint16)txBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   314  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   315      uint32 txBufferElementAddress = ramBaseAddress + txBuffersStartAddress + txBufferIndex;
	fcall	.cocofun_6
.L855:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   316      return (Ifx_CAN_TXMSG *)txBufferElementAddress;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   317  }
	ret
.L674:
	
__IfxCan_Node_getTxBufferElementAddress_function_end:
	.size	IfxCan_Node_getTxBufferElementAddress,__IfxCan_Node_getTxBufferElementAddress_function_end-IfxCan_Node_getTxBufferElementAddress
.L351:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_Node_getTxEventFifoElementAddress',code,cluster('IfxCan_Node_getTxEventFifoElementAddress')
	.sect	'.text.IfxCan.IfxCan_Node_getTxEventFifoElementAddress'
	.align	2
	
	.global	IfxCan_Node_getTxEventFifoElementAddress

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   318  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   319  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   320  Ifx_CAN_TXEVENT *IfxCan_Node_getTxEventFifoElementAddress(uint32 ramBaseAddress, uint16 txEventFifoStartAddress, uint8 txEventFifoNumber)
; Function IfxCan_Node_getTxEventFifoElementAddress
.L208:
IfxCan_Node_getTxEventFifoElementAddress:	.type	func

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   321  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   322      uint32 txEventFifoElementAddress, txEventFifoIndex;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   323  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   324      txEventFifoIndex          = txEventFifoNumber * 8;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   325      txEventFifoElementAddress = ramBaseAddress + txEventFifoStartAddress + txEventFifoIndex;
	add	d4,d5
.L856:
	sh	d6,#3
.L857:
	add	d4,d6
.L1334:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   326  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   327      return (Ifx_CAN_TXEVENT *)txEventFifoElementAddress;
	mov.a	a2,d4
.L1335:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   328  }
	ret
.L810:
	
__IfxCan_Node_getTxEventFifoElementAddress_function_end:
	.size	IfxCan_Node_getTxEventFifoElementAddress,__IfxCan_Node_getTxEventFifoElementAddress_function_end-IfxCan_Node_getTxEventFifoElementAddress
.L471:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_Node_initRxPin',code,cluster('IfxCan_Node_initRxPin')
	.sect	'.text.IfxCan.IfxCan_Node_initRxPin'
	.align	2
	
	.global	IfxCan_Node_initRxPin

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   329  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   330  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   331  boolean IfxCan_Node_initRxPin(Ifx_CAN_N *node, IfxCan_Rxd_In *rxd, IfxPort_InputMode mode, IfxPort_PadDriver padDriver)
; Function IfxCan_Node_initRxPin
.L210:
IfxCan_Node_initRxPin:	.type	func
	mov.aa	a15,a5
.L860:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   332  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   333      IfxPort_setPinModeInput(rxd->pin.port, rxd->pin.pinIndex, mode);
	mov	d8,d5
	ld.bu	d15,[a15]12
.L553:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
	extr.u	d5,d4,#0,#8
	mov.aa	a12,a4
.L859:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
	mov	d4,d15
	ld.a	a4,[a15]8
.L858:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
	call	IfxPort_setPinMode
.L554:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   334      IfxPort_setPinPadDriver(rxd->pin.port, rxd->pin.pinIndex, padDriver);
	ld.a	a4,[a15]8
.L979:
	ld.bu	d4,[a15]12
.L980:
	mov	d5,d8
	call	IfxPort_setPinPadDriver
.L981:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   335      node->NPCR.B.RXSEL = rxd->select;
	ld.bu	d0,[a15]16
.L982:
	ld.bu	d15,[a12]64
.L983:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   336  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   337      return TRUE;
	mov	d2,#1
.L984:
	insert	d15,d15,d0,#0,#3
	st.b	[a12]64,d15
.L985:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   338  }
	ret
.L544:
	
__IfxCan_Node_initRxPin_function_end:
	.size	IfxCan_Node_initRxPin,__IfxCan_Node_initRxPin_function_end-IfxCan_Node_initRxPin
.L296:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_Node_initTxPin',code,cluster('IfxCan_Node_initTxPin')
	.sect	'.text.IfxCan.IfxCan_Node_initTxPin'
	.align	2
	
	.global	IfxCan_Node_initTxPin

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   339  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   340  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   341  boolean IfxCan_Node_initTxPin(IfxCan_Txd_Out *txd, IfxPort_OutputMode mode, IfxPort_PadDriver padDriver)
; Function IfxCan_Node_initTxPin
.L212:
IfxCan_Node_initTxPin:	.type	func
	mov	d8,d5
	mov.aa	a15,a4
.L569:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   342  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   343      IfxPort_setPinModeOutput(txd->pin.port, txd->pin.pinIndex, mode, txd->select);
	ld.bu	d15,[a15]12
.L990:
	ld.bu	d5,[a15]16
.L861:
	ld.a	a4,[a15]8
.L862:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    42   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    43   * \defgroup IfxLld_Port_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    44   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    45   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    46   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    47   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    48   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    49   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    50   * \ingroup IfxLld_Port_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    51   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    52  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    53  #ifndef IFXPORT_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    54  #define IFXPORT_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    55  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    56  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    57  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    58  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    60  #include "_Impl/IfxPort_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    62  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    63  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    65  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    67  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    68  /** \addtogroup IfxLld_Port_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    69   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    70  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    71   * HSCT module.declared in MODULE_PORTx.LPCRx
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    75      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    76      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    77  } IfxPort_ControlledBy;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    78  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    79  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    80   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    81  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    82  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    83      IfxPort_InputMode_undefined    = -1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    84      IfxPort_InputMode_noPullDevice = 0 << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    85          IfxPort_InputMode_pullDown = 1U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    86          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    87  } IfxPort_InputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    89  /** \brief specifies LVDS-M or LVDS-H mode as declare in Register MODULE_PORT.LPCRx.LVDSM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    93      IfxPort_LvdsMode_high   = 0, /**< \brief LVDS-H Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    94      IfxPort_LvdsMode_medium = 1  /**< \brief LVDS-M Mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    95  } IfxPort_LvdsMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    97  /** \brief Ifx_P input / output mode definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	    99   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   116      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   117      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   118      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   119      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   120      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   121      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   122  } IfxPort_Mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   124  /** \brief Pin output alternate index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   125   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   126  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   127  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   128      IfxPort_OutputIdx_general  = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   130          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   131          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   132          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   133          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   134          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   135          IfxPort_OutputIdx_alt7 = 0x17U << 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   136  } IfxPort_OutputIdx;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   138  /** \brief Pin output mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   140  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   141  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   142      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   143          IfxPort_OutputMode_openDrain = 0x18U << 3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   144          IfxPort_OutputMode_none      = 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   145  } IfxPort_OutputMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   147  /** \brief Pad driver mode definition (strength and slew rate).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   149   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   150   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   151  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   152  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   158      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   159      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   160      IfxPort_PadDriver_ttlSpeed4            = 11, /**< \brief Speed grade 4. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   161      IfxPort_PadDriver_ttl3v3Speed1         = 12, /**< \brief 3.3v Pad supply speed1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   162      IfxPort_PadDriver_ttl3v3Speed2         = 13, /**< \brief 3.3v Pad supply speed2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   163      IfxPort_PadDriver_ttl3v3Speed3         = 14, /**< \brief 3.3v Pad supply speed3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadDriver_ttl3v3Speed4         = 15  /**< \brief 3.3v Pad supply speed4 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   165  } IfxPort_PadDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   167  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   169  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   170  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   171      IfxPort_PadSupply_3v = 0,  /**< \brief select,3.3v */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   172      IfxPort_PadSupply_5v = 1   /**< \brief select,5V */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   173  } IfxPort_PadSupply;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   174  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   175  /** \brief enable analog/digital mode for port pin, as Defined in MODULE_PORTx.PDISC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   176   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   177  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   178  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   179      IfxPort_PinFunctionMode_digital = 0,  /**< \brief Pad Pn.x is enabled and can be selected for digital function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   180      IfxPort_PinFunctionMode_analog  = 1   /**< \brief Pad Pn.x is enabled and can be selected for analog function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   181  } IfxPort_PinFunctionMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   182  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   183  /** \brief Ifx_P output modification modes definition.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   185   * \see Ifx_P.OMR, IfxPort_setPinState()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   186   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   187  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   188  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   189      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   190      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   191      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   192      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   193  } IfxPort_State;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   194  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   195  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   196  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   197  /** \brief Enable/DIsable LVDS direction TX or RX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   198   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   199  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   200  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   201      IfxPort_LvdsDirection_rx = 0,  /**< \brief LVDS direction RX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   202      IfxPort_LvdsDirection_tx = 1   /**< \brief LVDS direction TX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   203  } IfxPort_LvdsDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   205  /** \brief Enable/DIsable LVDS Path.declared in MODULE_PORTx.LPCRx.TX_EN and MODULE_PORTx.LPCRx.RX_EN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   207  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   208  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   209      IfxPort_LvdsPath_enable  = 0, /**< \brief LVDS enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   210      IfxPort_LvdsPath_disable = 1  /**< \brief LVDS disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   211  } IfxPort_LvdsPath;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   212  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   213  /** \brief Specifies whether LVDS pull down resistor must be enabled/disabled as declared in Register MODULE_PORT.LPCRx.PWDPD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   214   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   215  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   216  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   217      IfxPort_LvdsPullDown_disable = 0,  /**< \brief Disable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   218      IfxPort_LvdsPullDown_enable  = 1   /**< \brief Enable Pull Down resistor */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   219  } IfxPort_LvdsPullDown;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   221  /** \brief Specifies LVDS-Termination mode as declare in Register MODULE_PORT.LPCRx.TERM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   223  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   224  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   225      IfxPort_LvdsTerminationMode_external = 0,  /**< \brief Termination Mode External */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   226      IfxPort_LvdsTerminationMode_internal = 1   /**< \brief Termination Mode Internal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   227  } IfxPort_LvdsTerminationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   229  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   230  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   231  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   233  /** \addtogroup IfxLld_Port_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   234   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   235  /** \brief To Configure LVDS mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   236   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   237  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   239      IfxPort_LvdsMode     lvdsMode;                   /**< \brief specifies LVDS-M or LVDS-H mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   240      IfxPort_ControlledBy enablePortControlled;       /**< \brief specifies whether LVDS is controlled by PORT or HSCT */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   241      IfxPort_PadSupply    padSupply;                  /**< \brief specify supply voltage */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   242  } IfxPort_LvdsConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   244  /** \brief Defines a pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   245   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   246  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   247  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   248      Ifx_P *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   249      uint8  pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   250  } IfxPort_Pin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   252  /** \brief To configure pins
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   253   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   254  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   255  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   256      Ifx_P            *port;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   257      uint8             pinIndex;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   258      IfxPort_OutputIdx mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   259      IfxPort_PadDriver padDriver;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   260  } IfxPort_Pin_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   262  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   264  /** \addtogroup IfxLld_Port_Std_SinglePin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   265   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   268  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   271  /** \brief Return the port state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   272   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   273   * \param pinIndex Specifies the pin for which the state should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   274   * \return Returns TRUE the pin is high; FALSE the pin is low
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   275   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   276   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   277   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   278   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   279   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   280   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   281   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   282   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   283   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   284  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   286  /** \brief set analog/digital mode for pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   287   * \param port Pointer to Port register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   288   * \param pinIndex specifies the pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   289   * \param mode set analog/digital mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   290   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   291   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   292  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   294  /** \brief Set the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   295   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   296   * \param pinIndex Specifies the pin to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   297   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   298   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   299   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   300   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   301   * IfxPort_setPinHigh(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   304   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   307  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   308  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   309  /** \brief Reset the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   310   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   311   * \param pinIndex Specifies the pin to be reset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   312   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   313   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   314   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   315   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   316   * IfxPort_setPinLow(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   317   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   318   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   319   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   320   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   321   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   322  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   324  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   325   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   326   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   327   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   328   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   331   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   332   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   333   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   334   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   335   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   336  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   337  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   338  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   339   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   340   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   341   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   342   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   343   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   344   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   345   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   346   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   347   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   348   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   350   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   351  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   352  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   353  /** \brief Set / Resets / Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   354   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   355   * \param pinIndex Specifies the pin to modify.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   356   * \param action Specifies the action: set, reset, toggle.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   357   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   359   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   360   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   361   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   362   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   363   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   366   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   367  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   368  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   369  /** \brief Toggle the port output.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   370   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   371   * \param pinIndex Specifies the pin to be toggled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   372   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   373   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   374   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   375   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   376   * IfxPort_togglePin(&MODULE_P33, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   377   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   378   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   379   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   382  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   384  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   385  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   386  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   388  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   389   * This function disables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   390   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   391   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   392   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   393   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   394   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   395   * /code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   396   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   397   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   398   *         // failed to disable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   399   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   400   * /endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   401   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   402   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   403   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   404   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   405  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   406  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   407  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   408   * This function enables the emergency stop function. A check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   409   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   410   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   411   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   413   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   415   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   416   *       // failed to enable emergency stop for P33.0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   417   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   418   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   419   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   420   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   421   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   422   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   423  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   425  /** \brief Configure the port input / output mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   426   * Also Configures the P40/P41 Port for digital functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   427   * which bydefault support analog functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   428   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   429   * \param pinIndex Specifies the pin to be configured.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   430   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   431   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   432   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   433   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   434   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   435   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   436   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   437   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   439  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   441  /** \brief set lvds mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   442   * \param port pointer to Port Register space
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   443   * \param pinIndex specifies pin index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   444   * \param pinMode specifes the mode of pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   445   * \param lvds config LVDS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   446   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   447   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   448  IFX_EXTERN void IfxPort_setPinModeLVDS(Ifx_P *port, uint8 pinIndex, IfxPort_Mode pinMode, IfxPort_LvdsConfig *lvds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   449  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   450  /** \brief Configure the pad driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   451   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   452   * \param pinIndex Specifies the pin for which the mode will be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   453   * \param padDriver Specifies the driver mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   454   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   455   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   456   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   458   * // enable strong 3.3V driver
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   459   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   460   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   461   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   462   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   463  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   465  /** \brief Enable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   466   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   467   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   468   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   469   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   470  IFX_EXTERN void IfxPort_setPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   472  /** \brief Disable the Pin Controller Selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   473   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   474   * \param pinIndex Specifies the pin for which the mode has to be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   475   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   476   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   477  IFX_EXTERN void IfxPort_resetPinControllerSelection(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   478  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   479  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   480  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   481  /** \addtogroup IfxLld_Port_Std_PortGroup
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   482   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   483  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   484  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   485  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   486  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   488  /** \brief Return the port group state
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   489   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   490   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   491   * \param mask selects the pins which should be read (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   492   * \return Returns the selected pin values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   493   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   494   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   495   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   496   * // read the current value of P33[7:0]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   497   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   498   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   501  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   503  /** \brief Set the port group state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   504   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   505   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   506   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   507   * \param data specifies the value which should be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   508   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   509   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   510   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   511   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   512   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   513   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   514   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   515   * // set initial value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   516   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   517   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   518   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   520  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   523  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   524  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   526  /** \brief Returns the module address of the selected Port module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   527   * \param port Pointer to PORT module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   528   * \return PORT module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   529   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   530  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   532  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   533   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   534   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   535   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   536  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   538  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   539   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   540   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   541   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   542   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   543   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   545   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   546   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   547   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   548   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   549   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   550   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   551   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   552  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   554  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   555   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   556   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   557   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   558   * \param mode Specifies the port pin mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   559   * \param index Specifies the alternate (or general purpose) output channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   560   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   562   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   563   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   564   * // configure P33.[7:0] as GPIO outputs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   565   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   566   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   568   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   569  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   570  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   571  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   572   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   573   * \param pinIndex start at the given pin
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   574   * \param mask selects the pins which should be modified (starting from pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   575   * \param padDriver Specifies the pad driver strength.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   578   * Coding example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   579   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   580   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   581   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   582   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   583   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   584   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   585  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   587  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   588  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   589  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   590  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   591  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   593  /** \brief Disable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   594   * This function disables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   595   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   596   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   599   * \see IfxPort_disableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   602  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   604  /** \brief Enable the emergency stop function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   605   * This function enables the emergency stop function. No check is done on port functionality.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   606   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   607   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   608   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   609   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   610   * \see IfxPort_enableEmergencyStop()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   611   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   612   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   613  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   615  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   616   * \param port Pointer to the port which should be accessed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   617   * \param pinIndex Specifies the pin for which the mode has to be set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   618   * \param mode Selects the controller for the port pin(Tricore,EVADC,GETH,SCR etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   619   * 0-> normal function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   620   * 1-> Alternate functionality(SCR pin,EVADC PDD,GETH RGMII/MII etc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   621   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   622   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   623  IFX_EXTERN void IfxPort_modifyPinControllerSelection(Ifx_P *port, uint8 pinIndex, boolean mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   625  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   626  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   627  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   629  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   630  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   631      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   632  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   635  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   636  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   637      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   638  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   641  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   642  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   643      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   644  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   647  IFX_INLINE void IfxPort_setPinFunctionMode(Ifx_P *port, uint8 pinIndex, IfxPort_PinFunctionMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   648  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   649      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   650  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   651      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   652      port->PDISC.U |= (mode << pinIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   653      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   654  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   657  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   658  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   659      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   663  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   665      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   666  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   669  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   670  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   671      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   672  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   674  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   675  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   676  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Port\Std\IfxPort.h	   677      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
	or	d5,d4
.L991:
	mov	d4,d15
	call	IfxPort_setPinMode
.L570:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   344      IfxPort_setPinPadDriver(txd->pin.port, txd->pin.pinIndex, padDriver);
	ld.a	a4,[a15]8
.L992:
	ld.bu	d4,[a15]12
.L993:
	mov	d5,d8
	call	IfxPort_setPinPadDriver
.L994:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   345  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   346      return TRUE;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   347  }
	mov	d2,#1
	ret
.L562:
	
__IfxCan_Node_initTxPin_function_end:
	.size	IfxCan_Node_initTxPin,__IfxCan_Node_initTxPin_function_end-IfxCan_Node_initTxPin
.L301:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_Node_isRxBufferNewDataUpdated',code,cluster('IfxCan_Node_isRxBufferNewDataUpdated')
	.sect	'.text.IfxCan.IfxCan_Node_isRxBufferNewDataUpdated'
	.align	2
	
	.global	IfxCan_Node_isRxBufferNewDataUpdated

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   348  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   349  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   350  boolean IfxCan_Node_isRxBufferNewDataUpdated(Ifx_CAN_N *node, IfxCan_RxBufferId rxBufferId)
; Function IfxCan_Node_isRxBufferNewDataUpdated
.L214:
IfxCan_Node_isRxBufferNewDataUpdated:	.type	func

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   351  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   352      uint32  mask;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   353      boolean tempVar;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   354  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   355      if (rxBufferId < IfxCan_RxBufferId_32)
	mov	d15,#32
.L1200:
	jge.u	d4,d15,.L45
.L1201:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   356      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   357          mask    = (1U << rxBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   358          tempVar = (boolean)(node->NDAT1.U & mask);
	mov	d15,#1
	ld.w	d0,[a4]408
.L1202:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   359          return tempVar;
	sh	d15,d15,d4
	j	.L46
.L45:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   360      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   361      else
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   362      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   363          mask    = (1U << (rxBufferId - 32));
	mov	d15,#1
.L1203:
	add	d0,d4,#-32
.L1204:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   364          tempVar = (boolean)(node->NDAT2.U & mask);
	sh	d15,d15,d0
	ld.w	d0,[a4]412

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   365          return tempVar;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   366      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   367  }
.L46:
	extr.u	d2,d0,#0,#8
.L863:
	extr.u	d15,d15,#0,#8
.L864:
	and	d2,d15
	ret
.L737:
	
__IfxCan_Node_isRxBufferNewDataUpdated_function_end:
	.size	IfxCan_Node_isRxBufferNewDataUpdated,__IfxCan_Node_isRxBufferNewDataUpdated_function_end-IfxCan_Node_isRxBufferNewDataUpdated
.L401:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_Node_readData',code,cluster('IfxCan_Node_readData')
	.sect	'.text.IfxCan.IfxCan_Node_readData'
	.align	2
	
	.global	IfxCan_Node_readData

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   368  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   369  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   370  void IfxCan_Node_readData(Ifx_CAN_RXMSG *rxBufferElement, IfxCan_DataLengthCode dataLengthCode, uint32 *data)
; Function IfxCan_Node_readData
.L216:
IfxCan_Node_readData:	.type	func
	mov.aa	a15,a4
.L866:
	mov.aa	a12,a5
.L868:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   371  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   372      uint32  i;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   373      uint32 *destinationAddress = (uint32 *)rxBufferElement + 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   374      /* get number of data bytes from data length code (DLC) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   375      uint32  length             = IfxCan_Node_getDataLength(dataLengthCode);
	call	IfxCan_Node_getDataLength
.L865:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   376  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   377      /* read data from the data section of Rx Buffer element  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   378      for (i = 0; i < length; i++)
	mov	d15,#0
	lea	a15,[a15]8
.L867:
	j	.L48
.L49:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   379      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   380          data[i] = destinationAddress[i];
	add	d15,#1
	ld.w	d0,[a15+]
.L1209:
	st.w	[a12+],d0
.L48:
	jlt.u	d15,d2,.L49
.L1210:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   381      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   382  }
	ret
.L742:
	
__IfxCan_Node_readData_function_end:
	.size	IfxCan_Node_readData,__IfxCan_Node_readData_function_end-IfxCan_Node_readData
.L406:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_Node_setBitTiming',code,cluster('IfxCan_Node_setBitTiming')
	.sect	'.text.IfxCan.IfxCan_Node_setBitTiming'
	.align	2
	
	.global	IfxCan_Node_setBitTiming

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   383  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   384  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   385  void IfxCan_Node_setBitTiming(Ifx_CAN_N *node, float32 moduleFreq, uint32 baudrate, uint16 samplePoint, uint16 syncJumpWidth)
; Function IfxCan_Node_setBitTiming
.L218:
IfxCan_Node_setBitTiming:	.type	func
	fcall	.cocofun_9
.L999:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   386  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   387      sint32  maxBRP   = IFX_CAN_N_NBTP_NBRP_MSK + 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   388      sint32  minBRP   = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   389      sint32  maxTSEG1 = IFX_CAN_N_NBTP_NTSEG1_MSK + 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   390      sint32  minTSEG1 = 3;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   391      sint32  maxTSEG2 = IFX_CAN_N_NBTP_NTSEG2_MSK + 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   392      sint32  minTSEG2 = 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   393      sint32  maxTBAUD = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   394      sint32  minTBAUD = 8;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   395  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   396      sint32  tempBRP, tempSJW, tempTSEG1, tempTBAUD;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   397      sint32  bestBRP   = 1, bestSJW = 1, bestTBAUD = 8, bestTSEG1 = 3, bestTSEG2 = 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   398      float32 bestError = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   399  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   400      /*
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   401       * Bit timing & sampling
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   402       * Tq = (BRP+1)/Fcan if DIV8 = 0
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   403       * Tq = 8*(BRP+1)/Fcan if DIV8 = 1
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   404       * TSync = 1.Tq
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   405       * TSeg1 = (TSEG1+1)*Tq                >= 3Tq
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   406       * TSeg2 = (TSEG2+1)*Tq                >= 2Tq
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   407       * Bit Time = TSync + TSeg1 + TSeg2    >= 8Tq
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   408       *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   409       * Resynchronization:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   410       *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   411       * Tsjw = (SJW + 1)*Tq
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   412       * TSeg1 >= Tsjw + Tprop
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   413       * TSeg2 >= Tsjw
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   414       */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   415  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   416      /* search for best baudrate */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   417      bestError = (float32)baudrate;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   418      maxTBAUD  = maxTSEG1 + maxTSEG2 + 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   419  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   420      for (tempBRP = 1; tempBRP <= maxBRP; tempBRP++)
	lea	a15,511
.L50:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   421      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   422          float32 Fquanta = moduleFreq / tempBRP;
	fcall	.cocofun_12
.L1000:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   423          tempTBAUD = Fquanta / baudrate;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   424  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   425          if (tempTBAUD == 0)
	jeq	d11,#0,.L51
.L604:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   426          {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   427              break; /* to avoid division by 0 */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   428          }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   429  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   430          float32 tempBaudrate = Fquanta / tempTBAUD;
	fcall	.cocofun_14
.L1001:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   431          float32 error        = __absf(tempBaudrate - baudrate);
	insert	d1,d0,#0,#31,#1
.L878:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   432  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   433          if (tempTBAUD < minTBAUD)
	mov	d15,#8
.L1002:
	jlt	d11,d15,.L52
.L1003:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   434          {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   435              break;  /* below the minimum allowed limits, break is required otherwise TSEG1 and TSEG2 may result in negitive values */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   436          }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   437  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   438          if ((tempTBAUD <= maxTBAUD) && (bestError >= error))
	mov	d0,#385
.L1004:
	jlt	d0,d11,.L53
.L1005:
	cmp.f	d15,d3,d1
	and	d15,#6
	jeq	d15,#0,.L54
.L1006:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   439          {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   440              bestBRP   = tempBRP;
	mov	d9,d5
.L1007:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   441              bestTBAUD = tempTBAUD;
	mov	d6,d11
.L1008:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   442              bestError = error;
	mov	d3,d1
.L1009:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   443  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   444              if ((tempTBAUD <= 20) && (error < 0.1))
	mov	d15,#20
.L1010:
	jlt	d15,d11,.L55
.L1011:
	ld.w	d15,.3.cnt
.L1012:
	cmp.f	d15,d1,d15
	jnz.t	d15:0,.L56
.L55:
.L54:
.L53:
	add	d5,#1
	loop	a15,.L50

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   445              {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   446                  break;      /* optimal condition */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   447              }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   448          }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   449      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   450  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   451      if ((bestBRP == 0) && (tempBRP == (maxBRP + 1)))
.L56:
.L52:
.L51:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   452      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   453          bestBRP   = maxBRP;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   454          bestTBAUD = maxTBAUD;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   455  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   456          IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   457      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   458  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   459      if ((bestBRP == 0) && (tempTBAUD < minTBAUD))
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   460      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   461          bestBRP   = minBRP;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   462          bestTBAUD = minTBAUD;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   463  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   464          IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   465      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   466  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   467      /* search for best sample point */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   468      bestError = samplePoint * 0.25; /* 25% tolerance in sample point as max error */
	utof	d15,d10
.L1013:
	movh	d0,#16000
.L1014:
	mul.f	d8,d15,d0
.L880:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   469  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   470      if (bestTBAUD < maxTSEG1)
	mov	d15,#256
.L1015:
	min	d1,d6,d15
.L882:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   471      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   472          maxTSEG1 = bestTBAUD;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   473      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   474  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   475      bestTSEG1 = maxTSEG1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   476  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   477      for (tempTSEG1 = maxTSEG1; tempTSEG1 >= minTSEG1; tempTSEG1--)
	mov	d0,d1
.L606:
	mov	d11,#10000
.L57:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   478      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   479          sint32 tempSamplePoint = ((tempTSEG1 + 1) * 10000) / bestTBAUD;
	madd	d15,d11,d0,d11
.L1016:
	div	e2,d15,d6
.L883:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   480          sint32 error           = __abs(tempSamplePoint - samplePoint);
	sub	d15,d2,d10
.L1017:
	abs	d15,d15
.L884:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   481  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   482          if (bestError > error)
	itof	d5,d15
.L1018:
	cmp.f	d15,d8,d5
.L885:
	jz.t	d15:2,.L58
.L1019:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   483          {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   484              bestTSEG1 = tempTSEG1;
	mov	d1,d0
.L1020:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   485              bestError = (float)error;
	mov	d8,d5
.L58:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   486          }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   487  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   488          if (tempSamplePoint < samplePoint)
	jlt	d2,d10,.L59
.L607:
	add	d0,#-1
.L1021:
	jge	d0,#3,.L57

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   489          {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   490              /*least possible error */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   491              break;  /* least possible error has already occured */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   492          }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   493      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   494  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   495      bestTSEG2 = bestTBAUD - bestTSEG1 - 1;
.L59:
	sub	d15,d6,d1
.L1022:
	add	d15,#-1
.L1023:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   496  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   497      if (bestTSEG2 > maxTSEG2)
	min	d15,d15,#128
.L1024:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   498      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   499          bestTSEG2 = maxTSEG2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   500  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   501          IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   502      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   503  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   504      if (bestTSEG2 < minTSEG2)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   505      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   506          bestTSEG2 = minTSEG2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   507  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   508          IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   509      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   510  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   511      /* search for best SJW */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   512      bestError = 10000;
	max	d8,d15,#2
	ld.w	d0,.4.cnt
.L881:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   513  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   514      for (tempSJW = 1; tempSJW <= bestTSEG2; tempSJW++)
	mov	d5,#1
	j	.L60
.L61:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   515      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   516          sint32 tempSyncJumpWidth = (tempSJW * 10000) / bestTBAUD;
	mul	d15,d5,d11
.L1025:
	fcall	.cocofun_11
.L879:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   517          sint32 error             = __abs(tempSyncJumpWidth - syncJumpWidth);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   518  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   519          if (bestError > error)
	jz.t	d15:2,.L62
.L889:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   520          {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   521              bestSJW   = tempSJW;
	mov	d4,d5
.L1026:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   522              bestError = (float)error;
	mov	d0,d2
.L62:
	add	d5,#1
.L60:
	jge	d8,d5,.L61
.L1027:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   523          }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   524      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   525  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   526      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   527          node->NBTP.B.NBRP   = bestBRP - 1;
	ld.hu	d15,[a4]286
.L1028:
	add	d9,#-1
.L890:
	insert	d15,d15,d9,#0,#9
	st.h	[a4]286,d15
.L1029:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   528          node->NBTP.B.NSJW   = bestSJW - 1;
	ld.bu	d15,[a4]287
.L1030:
	add	d4,#-1
.L891:
	insert	d15,d15,d4,#1,#7
	st.b	[a4]287,d15
.L1031:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   529          node->NBTP.B.NTSEG1 = bestTSEG1 - 1;
	add	d1,#-1
	st.b	[a4]285,d1
.L893:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   530          node->NBTP.B.NTSEG2 = bestTSEG2 - 1;
	ld.bu	d15,[a4]284
.L1032:
	add	d8,#-1
.L892:
	insert	d15,d15,d8,#0,#7
	st.b	[a4]284,d15
.L1033:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   531      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   532  }
	ret
.L580:
	
__IfxCan_Node_setBitTiming_function_end:
	.size	IfxCan_Node_setBitTiming,__IfxCan_Node_setBitTiming_function_end-IfxCan_Node_setBitTiming
.L306:
	; End of function
	
	.sdecl	'.text.IfxCan..cocofun_14',code,cluster('.cocofun_14')
	.sect	'.text.IfxCan..cocofun_14'
	.align	2
; Function .cocofun_14
.L220:
.cocofun_14:	.type	func
; Function body .cocofun_14, coco_iter:0
	itof	d1,d11
.L1392:
	div.f	d0,d0,d1
.L876:
	sub.f	d0,d0,d2
	fret
.L521:
	; End of function
	.sdecl	'.text.IfxCan..cocofun_12',code,cluster('.cocofun_12')
	.sect	'.text.IfxCan..cocofun_12'
	.align	2
; Function .cocofun_12
.L222:
.cocofun_12:	.type	func
; Function body .cocofun_12, coco_iter:0
	itof	d0,d5
.L1382:
	div.f	d0,d8,d0
.L875:
	div.f	d1,d0,d2
.L877:
	ftoiz	d11,d1
	fret
.L511:
	; End of function
	.sdecl	'.text.IfxCan..cocofun_11',code,cluster('.cocofun_11')
	.sect	'.text.IfxCan..cocofun_11'
	.align	2
; Function .cocofun_11
.L224:
.cocofun_11:	.type	func
; Function body .cocofun_11, coco_iter:0
	div	e2,d15,d6
.L886:
	sub	d2,d7
.L887:
	abs	d15,d2
.L888:
	itof	d2,d15
.L1377:
	cmp.f	d15,d0,d2
	fret
.L506:
	; End of function
	.sdecl	'.text.IfxCan..cocofun_9',code,cluster('.cocofun_9')
	.sect	'.text.IfxCan..cocofun_9'
	.align	2
; Function .cocofun_9
.L226:
.cocofun_9:	.type	func
; Function body .cocofun_9, coco_iter:0
	utof	d2,d5
.L1366:
	mov	d9,#1
.L871:
	mov	d3,d2
.L872:
	mov	d8,d4
.L873:
	mov	d10,d6
.L874:
	mov	d4,d9
.L870:
	mov	d5,d9
.L869:
	mov	d6,#8
	fret
.L496:
	; End of function
	.sdecl	'.text.IfxCan.IfxCan_Node_setBitTimingValues',code,cluster('IfxCan_Node_setBitTimingValues')
	.sect	'.text.IfxCan.IfxCan_Node_setBitTimingValues'
	.align	2
	
	.global	IfxCan_Node_setBitTimingValues

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   533  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   534  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   535  void IfxCan_Node_setBitTimingValues(Ifx_CAN_N *node, uint16 syncJumpWidth, uint8 timeSegment2, uint8 timeSegment1, uint16 prescaler)
; Function IfxCan_Node_setBitTimingValues
.L228:
IfxCan_Node_setBitTimingValues:	.type	func

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   536  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   537      Ifx_CAN_N_NBTP nbtp;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   538      nbtp.U        = node->NBTP.U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   539      nbtp.B.NSJW   = syncJumpWidth;
	extr.u	d0,d4,#0,#8
	ld.w	d15,[a4]284
.L894:
	insert	d15,d15,d0,#25,#7
.L1038:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   540      nbtp.B.NTSEG1 = timeSegment1;
	insert	d15,d15,d6,#8,#8
.L1039:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   541      nbtp.B.NTSEG2 = timeSegment2;
	insert	d15,d15,d5,#0,#7
.L1040:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   542      nbtp.B.NBRP   = prescaler;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   543  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   544      node->NBTP.U  = nbtp.U;
	insert	d15,d15,d7,#16,#9
	st.w	[a4]284,d15
.L1041:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   545  }
	ret
.L613:
	
__IfxCan_Node_setBitTimingValues_function_end:
	.size	IfxCan_Node_setBitTimingValues,__IfxCan_Node_setBitTimingValues_function_end-IfxCan_Node_setBitTimingValues
.L311:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_Node_setFastBitTiming',code,cluster('IfxCan_Node_setFastBitTiming')
	.sect	'.text.IfxCan.IfxCan_Node_setFastBitTiming'
	.align	2
	
	.global	IfxCan_Node_setFastBitTiming

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   546  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   547  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   548  void IfxCan_Node_setFastBitTiming(Ifx_CAN_N *node, float32 moduleFreq, uint32 baudrate, uint16 samplePoint, uint16 syncJumpWidth)
; Function IfxCan_Node_setFastBitTiming
.L230:
IfxCan_Node_setFastBitTiming:	.type	func
	fcall	.cocofun_9
.L897:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   549  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   550      sint32  maxBRP   = IFX_CAN_N_DBTP_DBRP_MSK + 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   551      sint32  minBRP   = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   552      sint32  maxTSEG1 = IFX_CAN_N_DBTP_DTSEG1_MSK + 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   553      sint32  minTSEG1 = 3;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   554      sint32  maxTSEG2 = IFX_CAN_N_DBTP_DTSEG2_MSK + 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   555      sint32  minTSEG2 = 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   556      sint32  maxTBAUD = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   557      sint32  minTBAUD = 8;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   558  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   559      sint32  tempBRP, tempSJW, tempTSEG1, tempTBAUD;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   560      sint32  bestBRP   = 1, bestSJW = 1, bestTBAUD = 8, bestTSEG1 = 3, bestTSEG2 = 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   561      float32 bestError = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   562  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   563      /*
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   564       * Bit timing & sampling
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   565       * Tq = (BRP+1)/Fcan if DIV8 = 0
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   566       * Tq = 8*(BRP+1)/Fcan if DIV8 = 1
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   567       * TSync = 1.Tq
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   568       * TSeg1 = (TSEG1+1)*Tq                >= 3Tq
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   569       * TSeg2 = (TSEG2+1)*Tq                >= 2Tq
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   570       * Bit Time = TSync + TSeg1 + TSeg2    >= 8Tq
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   571       *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   572       * Resynchronization:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   573       *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   574       * Tsjw = (SJW + 1)*Tq
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   575       * TSeg1 >= Tsjw + Tprop
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   576       * TSeg2 >= Tsjw
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   577       */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   578  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   579      /* search for best baudrate */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   580      bestError = (float32)baudrate;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   581      maxTBAUD  = maxTSEG1 + maxTSEG2 + 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   582  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   583      for (tempBRP = 1; tempBRP <= maxBRP; tempBRP++)
	lea	a15,31
.L63:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   584      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   585          float32 Fquanta = moduleFreq / tempBRP;
	fcall	.cocofun_12
.L895:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   586          tempTBAUD = Fquanta / baudrate;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   587  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   588          if (tempTBAUD == 0)
	jeq	d11,#0,.L64
.L639:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   589          {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   590              break; /* to avoid division by 0 */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   591          }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   592  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   593          float32 tempBaudrate = Fquanta / tempTBAUD;
	fcall	.cocofun_14
.L896:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   594          float32 error        = __absf(tempBaudrate - baudrate);
	insert	d0,d0,#0,#31,#1
.L1046:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   595  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   596          if (tempTBAUD < minTBAUD)
	mov	d15,#8
.L1047:
	jlt	d11,d15,.L65
.L1048:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   597          {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   598              break;  /* below the minimum allowed limits, break is required otherwise TSEG1 and TSEG2 may result in negitive values */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   599          }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   600  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   601          if ((tempTBAUD <= maxTBAUD) && (bestError >= error))
	mov	d15,#49
.L1049:
	jlt	d15,d11,.L66
.L1050:
	cmp.f	d15,d3,d0
	and	d15,#6
	jeq	d15,#0,.L67
.L1051:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   602          {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   603              bestBRP   = tempBRP;
	mov	d9,d5
.L1052:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   604              bestTBAUD = tempTBAUD;
	mov	d6,d11
.L1053:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   605              bestError = error;
	mov	d3,d0
.L1054:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   606  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   607              if ((tempTBAUD <= 20) && (error < 0.1))
	mov	d15,#20
.L1055:
	jlt	d15,d11,.L68
.L1056:
	ld.w	d15,.3.cnt
.L1057:
	cmp.f	d15,d0,d15
	jnz.t	d15:0,.L69
.L68:
.L67:
.L66:
	add	d5,#1
	loop	a15,.L63

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   608              {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   609                  break;      /* optimal condition */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   610              }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   611          }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   612      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   613  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   614      if ((bestBRP == 0) && (tempBRP == (maxBRP + 1)))
.L69:
.L65:
.L64:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   615      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   616          bestBRP   = maxBRP;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   617          bestTBAUD = maxTBAUD;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   618  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   619          IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   620      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   621  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   622      if ((bestBRP == 0) && (tempTBAUD < minTBAUD))
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   623      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   624          bestBRP   = minBRP;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   625          bestTBAUD = minTBAUD;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   626  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   627          IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   628      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   629  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   630      /* search for best sample point */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   631      bestError = samplePoint * 0.25; /* 25% tolerance in sample point as max error */
	utof	d15,d10
.L1058:
	movh	d0,#16000
.L1059:
	mul.f	d0,d15,d0
.L898:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   632  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   633      if (bestTBAUD < maxTSEG1)
	min	d5,d6,#32
.L899:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   634      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   635          maxTSEG1 = bestTBAUD;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   636      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   637  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   638      bestTSEG1 = maxTSEG1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   639  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   640      for (tempTSEG1 = maxTSEG1; tempTSEG1 >= minTSEG1; tempTSEG1--)
	mov	d1,d5
.L641:
	mov	d11,#10000
.L70:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   641      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   642          sint32 tempSamplePoint = ((tempTSEG1 + 1) * 10000) / bestTBAUD;
	madd	d15,d11,d1,d11
.L1060:
	div	e2,d15,d6
.L900:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   643          sint32 error           = __abs(tempSamplePoint - samplePoint);
	sub	d15,d2,d10
.L1061:
	abs	d15,d15
.L901:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   644  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   645          if (bestError > error)
	itof	d8,d15
.L1062:
	cmp.f	d15,d0,d8
.L902:
	jz.t	d15:2,.L71
.L1063:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   646          {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   647              bestTSEG1 = tempTSEG1;
	mov	d5,d1
.L1064:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   648              bestError = (float)error;
	mov	d0,d8
.L71:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   649          }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   650  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   651          if (tempSamplePoint < samplePoint)
	jlt	d2,d10,.L72
.L642:
	add	d1,#-1
.L1065:
	jge	d1,#3,.L70

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   652          {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   653              break;  /* least possible error has already occured */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   654          }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   655      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   656  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   657      bestTSEG2 = bestTBAUD - bestTSEG1 - 1;
.L72:
	sub	d15,d6,d5
.L1066:
	add	d15,#-1
.L1067:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   658  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   659      if (bestTSEG2 > maxTSEG2)
	min	d15,d15,#16
.L1068:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   660      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   661          bestTSEG2 = maxTSEG2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   662  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   663          IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   664      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   665  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   666      if (bestTSEG2 < minTSEG2)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   667      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   668          bestTSEG2 = minTSEG2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   669  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   670          IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   671      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   672  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   673      /* search for best SJW */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   674      bestError = 10000;
	max	d8,d15,#2
	ld.w	d0,.4.cnt
.L905:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   675  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   676      for (tempSJW = 1; tempSJW <= bestTSEG2; tempSJW++)
	mov	d1,#1
	j	.L73
.L74:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   677      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   678          sint32 tempSyncJumpWidth = (tempSJW * 10000) / bestTBAUD;
	mul	d15,d1,d11
.L1069:
	fcall	.cocofun_11
.L1070:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   679          sint32 error             = __abs(tempSyncJumpWidth - syncJumpWidth);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   680  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   681          if (bestError > error)
	jz.t	d15:2,.L75
.L1071:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   682          {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   683              bestSJW   = tempSJW;
	mov	d4,d1
.L1072:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   684              bestError = (float)error;
	mov	d0,d2
.L75:
	add	d1,#1
.L73:
	jge	d8,d1,.L74
.L1073:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   685          }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   686      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   687  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   688      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   689          node->DBTP.B.DBRP   = bestBRP - 1;
	ld.bu	d15,[a4]270
.L1074:
	add	d9,#-1
.L903:
	insert	d15,d15,d9,#0,#5
	st.b	[a4]270,d15
.L1075:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   690          node->DBTP.B.DSJW   = bestSJW - 1;
	lea	a15,[a4]268
.L1076:
	ld.bu	d15,[a15]
.L1077:
	add	d4,#-1
.L904:
	insert	d15,d15,d4,#0,#4
	st.b	[a15],d15
.L1078:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   691          node->DBTP.B.DTSEG1 = bestTSEG1 - 1;
	ld.bu	d15,[a4]269
.L1079:
	add	d5,#-1
.L907:
	insert	d15,d15,d5,#0,#5
	st.b	[a4]269,d15
.L1080:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   692          node->DBTP.B.DTSEG2 = bestTSEG2 - 1;
	ld.bu	d15,[a15]
.L1081:
	add	d8,#-1
.L906:
	insert	d15,d15,d8,#4,#4
	st.b	[a15],d15
.L1082:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   693      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   694  }
	ret
.L621:
	
__IfxCan_Node_setFastBitTiming_function_end:
	.size	IfxCan_Node_setFastBitTiming,__IfxCan_Node_setFastBitTiming_function_end-IfxCan_Node_setFastBitTiming
.L316:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_Node_setFastBitTimingValues',code,cluster('IfxCan_Node_setFastBitTimingValues')
	.sect	'.text.IfxCan.IfxCan_Node_setFastBitTimingValues'
	.align	2
	
	.global	IfxCan_Node_setFastBitTimingValues

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   695  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   696  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   697  void IfxCan_Node_setFastBitTimingValues(Ifx_CAN_N *node, uint16 syncJumpWidth, uint8 timeSegment2, uint8 timeSegment1, uint16 prescaler)
; Function IfxCan_Node_setFastBitTimingValues
.L232:
IfxCan_Node_setFastBitTimingValues:	.type	func

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   698  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   699      Ifx_CAN_N_DBTP dbtp;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   700      dbtp.U        = node->DBTP.U;
	ld.w	d15,[a4]268
.L908:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   701      dbtp.B.DSJW   = syncJumpWidth;
	insert	d15,d15,d4,#0,#4
.L1087:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   702      dbtp.B.DTSEG1 = timeSegment1;
	insert	d15,d15,d6,#8,#5
.L1088:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   703      dbtp.B.DTSEG2 = timeSegment2;
	insert	d15,d15,d5,#4,#4
.L1089:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   704      dbtp.B.DBRP   = prescaler;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   705  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   706      node->DBTP.U  = dbtp.U;
	insert	d15,d15,d7,#16,#5
	st.w	[a4]268,d15
.L1090:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   707  }
	ret
.L647:
	
__IfxCan_Node_setFastBitTimingValues_function_end:
	.size	IfxCan_Node_setFastBitTimingValues,__IfxCan_Node_setFastBitTimingValues_function_end-IfxCan_Node_setFastBitTimingValues
.L321:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_Node_setFrameMode',code,cluster('IfxCan_Node_setFrameMode')
	.sect	'.text.IfxCan.IfxCan_Node_setFrameMode'
	.align	2
	
	.global	IfxCan_Node_setFrameMode

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   708  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   709  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   710  void IfxCan_Node_setFrameMode(Ifx_CAN_N *node, IfxCan_FrameMode frameMode)
; Function IfxCan_Node_setFrameMode
.L234:
IfxCan_Node_setFrameMode:	.type	func

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   711  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   712      switch (frameMode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   713      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   714      case IfxCan_FrameMode_standard:
	jeq	d4,#0,.L76
.L1095:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   715          node->CCCR.B.FDOE = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   716          node->CCCR.B.BRSE = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   717          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   718      case IfxCan_FrameMode_fdLong:
	jeq	d4,#1,.L77
.L1096:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   719          node->CCCR.B.FDOE = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   720          node->CCCR.B.BRSE = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   721          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   722      case IfxCan_FrameMode_fdLongAndFast:
	jeq	d4,#2,.L78
.L1097:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   723          node->CCCR.B.FDOE = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   724          node->CCCR.B.BRSE = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   725          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   726      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   727  }
	ret
.L76:
	ld.bu	d15,[a4]281
.L1098:
	insert	d15,d15,#0,#0,#1
	j	.L80
.L77:
	ld.bu	d15,[a4]281
.L1099:
	or	d15,#1
.L80:
	st.b	[a4]281,d15
.L1100:
	ld.bu	d15,[a4]281
.L1101:
	insert	d15,d15,#0,#1,#1
	j	.L81
.L78:
	ld.bu	d15,[a4]281
.L1102:
	or	d15,#1
	st.b	[a4]281,d15
.L1103:
	ld.bu	d15,[a4]281
.L1104:
	or	d15,#2
.L81:
	st.b	[a4]281,d15
.L1105:
	ret
.L655:
	
__IfxCan_Node_setFrameMode_function_end:
	.size	IfxCan_Node_setFrameMode,__IfxCan_Node_setFrameMode_function_end-IfxCan_Node_setFrameMode
.L326:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_Node_setFrameModeReq',code,cluster('IfxCan_Node_setFrameModeReq')
	.sect	'.text.IfxCan.IfxCan_Node_setFrameModeReq'
	.align	2
	
	.global	IfxCan_Node_setFrameModeReq

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   728  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   729  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   730  void IfxCan_Node_setFrameModeReq(Ifx_CAN_TXMSG *txBufferElement, IfxCan_FrameMode frameMode)
; Function IfxCan_Node_setFrameModeReq
.L236:
IfxCan_Node_setFrameModeReq:	.type	func

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   731  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   732      switch (frameMode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   733      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   734      case IfxCan_FrameMode_standard:
	jeq	d4,#0,.L82
.L1110:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   735          txBufferElement->T1.B.FDF = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   736          txBufferElement->T1.B.BRS = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   737          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   738      case IfxCan_FrameMode_fdLong:
	jeq	d4,#1,.L83
.L1111:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   739          txBufferElement->T1.B.FDF = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   740          txBufferElement->T1.B.BRS = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   741          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   742      case IfxCan_FrameMode_fdLongAndFast:
	jeq	d4,#2,.L84
.L1112:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   743          txBufferElement->T1.B.FDF = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   744          txBufferElement->T1.B.BRS = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   745          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   746      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   747  }
	ret
.L82:
	ld.bu	d15,[a4]6
.L1113:
	insert	d15,d15,#0,#5,#1
	j	.L86
.L83:
	ld.bu	d15,[a4]6
.L1114:
	or	d15,#32
.L86:
	st.b	[a4]6,d15
.L1115:
	ld.bu	d15,[a4]6
.L1116:
	insert	d15,d15,#0,#4,#1
	j	.L87
.L84:
	ld.bu	d15,[a4]6
.L1117:
	or	d15,#32
	st.b	[a4]6,d15
.L1118:
	ld.bu	d15,[a4]6
.L1119:
	or	d15,#16
.L87:
	st.b	[a4]6,d15
.L1120:
	ret
.L658:
	
__IfxCan_Node_setFrameModeReq_function_end:
	.size	IfxCan_Node_setFrameModeReq,__IfxCan_Node_setFrameModeReq_function_end-IfxCan_Node_setFrameModeReq
.L331:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_Node_setFrameModeRequest',code,cluster('IfxCan_Node_setFrameModeRequest')
	.sect	'.text.IfxCan.IfxCan_Node_setFrameModeRequest'
	.align	2
	
	.global	IfxCan_Node_setFrameModeRequest

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   748  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   749  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   750  void IfxCan_Node_setFrameModeRequest(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, IfxCan_FrameMode frameMode)
; Function IfxCan_Node_setFrameModeRequest
.L238:
IfxCan_Node_setFrameModeRequest:	.type	func

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   751  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   752      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   753  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   754      switch (frameMode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   755      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   756      case IfxCan_FrameMode_standard:
	jeq	d4,#0,.L88
.L1125:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   757          txBufferElement->T1.B.FDF = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   758          txBufferElement->T1.B.BRS = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   759          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   760      case IfxCan_FrameMode_fdLong:
	jeq	d4,#1,.L89
.L1126:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   761          txBufferElement->T1.B.FDF = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   762          txBufferElement->T1.B.BRS = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   763          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   764      case IfxCan_FrameMode_fdLongAndFast:
	jeq	d4,#2,.L90
.L1127:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   765          txBufferElement->T1.B.FDF = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   766          txBufferElement->T1.B.BRS = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   767          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   768      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   769  }
	ret
.L88:
	ld.bu	d15,[a5]6
.L1128:
	insert	d15,d15,#0,#5,#1
	j	.L92
.L89:
	ld.bu	d15,[a5]6
.L1129:
	or	d15,#32
.L92:
	st.b	[a5]6,d15
.L1130:
	ld.bu	d15,[a5]6
.L1131:
	insert	d15,d15,#0,#4,#1
	j	.L93
.L90:
	ld.bu	d15,[a5]6
.L1132:
	or	d15,#32
	st.b	[a5]6,d15
.L1133:
	ld.bu	d15,[a5]6
.L1134:
	or	d15,#16
.L93:
	st.b	[a5]6,d15
.L1135:
	ret
.L662:
	
__IfxCan_Node_setFrameModeRequest_function_end:
	.size	IfxCan_Node_setFrameModeRequest,__IfxCan_Node_setFrameModeRequest_function_end-IfxCan_Node_setFrameModeRequest
.L336:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_Node_setGroupInterruptLine',code,cluster('IfxCan_Node_setGroupInterruptLine')
	.sect	'.text.IfxCan.IfxCan_Node_setGroupInterruptLine'
	.align	2
	
	.global	IfxCan_Node_setGroupInterruptLine

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   770  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   771  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   772  void IfxCan_Node_setGroupInterruptLine(Ifx_CAN_N *node, IfxCan_InterruptGroup interruptGroup, IfxCan_InterruptLine interruptLine)
; Function IfxCan_Node_setGroupInterruptLine
.L240:
IfxCan_Node_setGroupInterruptLine:	.type	func

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   773  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   774      if (interruptGroup <= IfxCan_InterruptGroup_loi)
	jge.u	d4,#8,.L94
.L1227:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   775      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   776          node->GRINT1.U |= (interruptLine) << (interruptGroup * 4);
	sha	d4,#2
	ld.w	d15,[a4]20
.L909:
	sha	d5,d5,d4
.L910:
	or	d15,d5
	st.w	[a4]20,d15
.L1228:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   777      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   778      else
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   779      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   780          node->GRINT2.U |= (interruptLine) << ((interruptGroup % 8) * 4);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   781      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   782  }
	ret
.L94:
	and	d15,d4,#7
	ld.w	d0,[a4]24
.L1229:
	sha	d15,#2
.L1230:
	sha	d5,d5,d15
.L911:
	or	d0,d5
	st.w	[a4]24,d0
.L1231:
	ret
.L758:
	
__IfxCan_Node_setGroupInterruptLine_function_end:
	.size	IfxCan_Node_setGroupInterruptLine,__IfxCan_Node_setGroupInterruptLine_function_end-IfxCan_Node_setGroupInterruptLine
.L421:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_Node_setInterruptLine',code,cluster('IfxCan_Node_setInterruptLine')
	.sect	'.text.IfxCan.IfxCan_Node_setInterruptLine'
	.align	2
	
	.global	IfxCan_Node_setInterruptLine

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   783  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   784  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   785  void IfxCan_Node_setInterruptLine(Ifx_CAN_N *node, IfxCan_Interrupt interrupt, IfxCan_InterruptLine interruptLine)
; Function IfxCan_Node_setInterruptLine
.L242:
IfxCan_Node_setInterruptLine:	.type	func

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   786  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   787      switch (interrupt)
	mov	d15,#29
	movh.a	a15,#@his(.5.jmp)
	lea	a15,[a15]@los(.5.jmp)
	jlt	d15,d4,.L97
	mov	d15,#0
	jlt	d4,d15,.L97
	sub	d15,d4,d15
	addsc.a	a15,a15,d15,#2
	ld.a	a15,[a15]
	ji	a15
.L912:
	
	.sdecl	'.rodata.IfxCan..5.jmp',data,rom
	.sect	'.rodata.IfxCan..5.jmp'
	.align	4
.5.jmp:	.type	object
	.word	.L98
	.word	.L99
	.word	.L100
	.word	.L101
	.word	.L102
	.word	.L103
	.word	.L104
	.word	.L105
	.word	.L106
	.word	.L107
	.word	.L108
	.word	.L109
	.word	.L110
	.word	.L111
	.word	.L112
	.word	.L113
	.word	.L114
	.word	.L115
	.word	.L116
	.word	.L117
	.word	.L118
	.word	.L119
	.word	.L120
	.word	.L121
	.word	.L122
	.word	.L123
	.word	.L124
	.word	.L125
	.word	.L126
	.word	.L127
	
	.sect	'.text.IfxCan.IfxCan_Node_setInterruptLine'

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   788      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   789      case IfxCan_Interrupt_rxFifo0NewMessage:
.L98:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   790          node->GRINT2.B.RXF0N = interruptLine;
	ld.bu	d15,[a4]26
.L1236:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   791          break;
	insert	d15,d15,d5,#0,#4
	j	.L128

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   792      case IfxCan_Interrupt_rxFifo0WatermarkReached:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   793      case IfxCan_Interrupt_rxFifo1WatermarkReached:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   794      case IfxCan_Interrupt_txEventFifoWatermarkReached:
.L111:
.L103:
.L99:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   795          node->GRINT1.B.WATI = interruptLine;
	ld.bu	d15,[a4]21
.L1237:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   796          break;
	insert	d15,d15,d5,#0,#4
	j	.L129

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   797      case IfxCan_Interrupt_rxFifo0Full:
.L100:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   798          node->GRINT2.B.RXF0F = interruptLine;
	ld.bu	d15,[a4]25
.L1238:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   799          break;
	insert	d15,d15,d5,#0,#4
	j	.L130

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   800      case IfxCan_Interrupt_rxFifo0MessageLost:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   801      case IfxCan_Interrupt_rxFifo1MessageLost:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   802      case IfxCan_Interrupt_txEventFifoEventLost:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   803      case IfxCan_Interrupt_timestampWraparound:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   804      case IfxCan_Interrupt_errorPassive:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   805      case IfxCan_Interrupt_warningStatus:
.L122:
.L121:
.L114:
.L113:
.L105:
.L101:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   806          node->GRINT1.B.ALRT = interruptLine;
	ld.bu	d15,[a4]21
.L1239:
	insert	d15,d15,d5,#4,#4

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   807          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   808      case IfxCan_Interrupt_rxFifo1NewMessage:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   809          node->GRINT2.B.RXF1N = interruptLine;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   810          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   811      case IfxCan_Interrupt_rxFifo1Full:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   812          node->GRINT2.B.RXF1F = interruptLine;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   813          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   814      case IfxCan_Interrupt_highPriorityMessage:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   815          node->GRINT1.B.HPE = interruptLine;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   816          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   817      case IfxCan_Interrupt_transmissionCompleted:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   818      case IfxCan_Interrupt_transmissionCancellationFinished:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   819          node->GRINT2.B.TRACO = interruptLine;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   820          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   821      case IfxCan_Interrupt_txFifoEmpty:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   822          node->GRINT2.B.TRAQ = interruptLine;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   823          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   824      case IfxCan_Interrupt_txEventFifoNewEntry:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   825      case IfxCan_Interrupt_txEventFifoFull:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   826          node->GRINT1.B.TEFIFO = interruptLine;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   827          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   828      case IfxCan_Interrupt_messageRAMAccessFailure:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   829      case IfxCan_Interrupt_bitErrorCorrected:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   830      case IfxCan_Interrupt_bitErrorUncorrected:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   831      case IfxCan_Interrupt_watchdog:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   832          node->GRINT1.B.MOER = interruptLine;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   833          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   834      case IfxCan_Interrupt_timeoutOccurred:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   835          node->GRINT2.B.RETI = interruptLine;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   836          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   837      case IfxCan_Interrupt_messageStoredToDedicatedRxBuffer:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   838          node->GRINT2.B.REINT = interruptLine;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   839          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   840      case IfxCan_Interrupt_errorLoggingOverflow:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   841          node->GRINT1.B.SAFE = interruptLine;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   842          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   843      case IfxCan_Interrupt_busOffStatus:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   844          node->GRINT1.B.BOFF = interruptLine;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   845          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   846      case IfxCan_Interrupt_protocolErrorArbitration:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   847      case IfxCan_Interrupt_protocolErrorData:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   848      case IfxCan_Interrupt_AccessToReservedAddress:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   849          node->GRINT1.B.LOI = interruptLine;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   850          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   851      default:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   852          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   853      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   854  }
.L129:
	st.b	[a4]21,d15
.L97:
	ret
.L102:
	ld.bu	d15,[a4]25
.L1240:
	insert	d15,d15,d5,#4,#4
.L130:
	st.b	[a4]25,d15
.L1241:
	ret
.L104:
	ld.bu	d15,[a4]24
.L1242:
	insert	d15,d15,d5,#4,#4
	j	.L133
.L106:
	ld.bu	d15,[a4]20
.L1243:
	insert	d15,d15,d5,#4,#4
	j	.L134
.L108:
.L107:
	ld.bu	d15,[a4]27
.L1244:
	insert	d15,d15,d5,#4,#4
	j	.L135
.L109:
	ld.bu	d15,[a4]27
.L1245:
	insert	d15,d15,d5,#0,#4
.L135:
	st.b	[a4]27,d15
.L1246:
	ret
.L112:
.L110:
	ld.bu	d15,[a4]20
.L1247:
	insert	d15,d15,d5,#0,#4
.L134:
	st.b	[a4]20,d15
.L1248:
	ret
.L124:
.L119:
.L118:
.L115:
	ld.bu	d15,[a4]22
.L1249:
	insert	d15,d15,d5,#0,#4
	j	.L138
.L116:
	ld.bu	d15,[a4]26
.L1250:
	insert	d15,d15,d5,#4,#4
.L128:
	st.b	[a4]26,d15
.L1251:
	ret
.L117:
	ld.bu	d15,[a4]24
.L1252:
	insert	d15,d15,d5,#0,#4
.L133:
	st.b	[a4]24,d15
.L1253:
	ret
.L120:
	ld.bu	d15,[a4]22
.L1254:
	insert	d15,d15,d5,#4,#4
.L138:
	st.b	[a4]22,d15
.L1255:
	ret
.L123:
	ld.bu	d15,[a4]23
.L1256:
	insert	d15,d15,d5,#0,#4
	j	.L142
.L127:
.L126:
.L125:
	ld.bu	d15,[a4]23
.L1257:
	insert	d15,d15,d5,#4,#4
.L142:
	st.b	[a4]23,d15
.L1258:
	ret
.L764:
	
__IfxCan_Node_setInterruptLine_function_end:
	.size	IfxCan_Node_setInterruptLine,__IfxCan_Node_setInterruptLine_function_end-IfxCan_Node_setInterruptLine
.L426:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_Node_writeTxBufData',code,cluster('IfxCan_Node_writeTxBufData')
	.sect	'.text.IfxCan.IfxCan_Node_writeTxBufData'
	.align	2
	
	.global	IfxCan_Node_writeTxBufData

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   855  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   856  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   857  void IfxCan_Node_writeTxBufData(Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode, uint32 *data)
; Function IfxCan_Node_writeTxBufData
.L244:
IfxCan_Node_writeTxBufData:	.type	func
	mov.aa	a15,a4
.L914:
	mov.aa	a12,a5
.L916:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   858  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   859      uint32  i;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   860  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   861      uint32 *destinationAddress = (uint32 *)txBufferElement + 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   862      /* get number of data bytes from data length code (DLC) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   863      uint32  length             = IfxCan_Node_getDataLength(dataLengthCode);
	call	IfxCan_Node_getDataLength
.L917:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   864  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   865      /* write data into the data section of Tx Buffer element  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   866      for (i = 0; i < length; i++)
	fcall	.cocofun_10
.L913:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   867      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   868          destinationAddress[i] = data[i];
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   869      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   870  }
	ret
.L682:
	
__IfxCan_Node_writeTxBufData_function_end:
	.size	IfxCan_Node_writeTxBufData,__IfxCan_Node_writeTxBufData_function_end-IfxCan_Node_writeTxBufData
.L356:
	; End of function
	
	.sdecl	'.text.IfxCan..cocofun_10',code,cluster('.cocofun_10')
	.sect	'.text.IfxCan..cocofun_10'
	.align	2
; Function .cocofun_10
.L246:
.cocofun_10:	.type	func
; Function body .cocofun_10, coco_iter:0
	mov	d15,#0
	lea	a15,[a15]8
.L915:
	j	.L143
.L144:
	add	d15,#1
	ld.w	d0,[a12+]
.L1371:
	st.w	[a15+],d0
.L143:
	jlt.u	d15,d2,.L144
.L1372:
	fret
.L501:
	; End of function
	.sdecl	'.text.IfxCan.IfxCan_Node_writeData',code,cluster('IfxCan_Node_writeData')
	.sect	'.text.IfxCan.IfxCan_Node_writeData'
	.align	2
	
	.global	IfxCan_Node_writeData

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   871  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   872  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   873  void IfxCan_Node_writeData(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode, uint32 *data)
; Function IfxCan_Node_writeData
.L248:
IfxCan_Node_writeData:	.type	func
	mov.aa	a15,a5
.L919:
	mov.aa	a12,a6
.L695:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   874  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   875      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   876      uint32  i;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   877  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   878      uint32 *destinationAddress = (uint32 *)txBufferElement + 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   879      /* get number of data bytes from data length code (DLC) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   880      uint32  length             = IfxCan_Node_getDataLength(dataLengthCode);
	call	IfxCan_Node_getDataLength
.L920:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   881  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   882      /* write data into the data section of Tx Buffer element  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   883      for (i = 0; i < length; i++)
	fcall	.cocofun_10
.L918:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   884      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   885          destinationAddress[i] = data[i];
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   886      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   887  }
	ret
.L690:
	
__IfxCan_Node_writeData_function_end:
	.size	IfxCan_Node_writeData,__IfxCan_Node_writeData_function_end-IfxCan_Node_writeData
.L361:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_disableModule',code,cluster('IfxCan_disableModule')
	.sect	'.text.IfxCan.IfxCan_disableModule'
	.align	2
	
	.global	IfxCan_disableModule

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   888  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   889  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   890  void IfxCan_disableModule(Ifx_CAN *can)
; Function IfxCan_disableModule
.L250:
IfxCan_disableModule:	.type	func
	mov.aa	a15,a4
.L922:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   891  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   892      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L921:
	mov	d8,d2
.L924:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   893      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L923:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   894  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   895      /*Disable module */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   896      can->CLC.B.DISR = 1U;
	fcall	.cocofun_8
.L926:
	ld.bu	d15,[a3]
.L1263:
	or	d15,#1
	fcall	.cocofun_8
	st.b	[a3],d15
.L1264:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     2   * \file IfxCan.h
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     3   * \brief CAN  basic functionality
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     4   * \ingroup IfxLld_Can
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     5   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     8   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     9   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    11   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    16   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    18   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    25   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    32   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    40   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    41   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    42   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    43   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    44   * \defgroup IfxLld_Can_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    45   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    46   * \defgroup IfxLld_Can_Std_Data_Structures Data Structures
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    47   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    48   * \defgroup IfxLld_Can_Std_Node_Functions Node Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    49   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    50   * \defgroup IfxLld_Can_Std_Tx_Element_Functions Tx Element Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    51   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    52   * \defgroup IfxLld_Can_Std_Rx_Element_Functions Rx Element Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    53   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    54   * \defgroup IfxLld_Can_Std_Filter_Functions Filter Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    55   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    56   * \defgroup IfxLld_Can_Std_Interrupt_Functions Interrupt Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    57   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    58   * \defgroup IfxLld_Can_Std_Module_Functions Module Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    59   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    60   * \defgroup IfxLld_Can_Std_Tx_Event_FIFO_Element_Functions Tx Event FIFO Element Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    61   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    62   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    63  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    64  #ifndef IFXCAN_H
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    65  #define IFXCAN_H 1
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    66  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    67  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    68  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    69  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    70  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    71  #include "_Impl/IfxCan_cfg.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    72  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    73  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    74  #include "_PinMap/IfxCan_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    75  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    76  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    77  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    78  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    79  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    80  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    81  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    82  /** \addtogroup IfxLld_Can_Std_Enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    83   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    84  /** \brief Status of warning limit for error counters in CAN node
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    85   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    86  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    87  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    88      IfxCan_CanNodeErrorWarningLimitStatus_notReached = 0,  /**< \brief Error counters are below the warning limit */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    89      IfxCan_CanNodeErrorWarningLimitStatus_reached    = 1   /**< \brief Error counter reached the warning limit */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    90  } IfxCan_CanNodeErrorWarningLimitStatus;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    91  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    92  /** \brief Clock selection option\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    93   * Description in Ifx_CAN.MCR.CLKSELx, (x = 0,1,2)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    94   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    95  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    96  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    97      IfxCan_ClockSelect_0,     /**< \brief clock selection 0  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    98      IfxCan_ClockSelect_1,     /**< \brief clock selection 1  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    99      IfxCan_ClockSelect_2,     /**< \brief clock selection 2  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   100      IfxCan_ClockSelect_3      /**< \brief clock selection 3  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   101  } IfxCan_ClockSelect;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   102  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   103  /** \brief Type of Clock Source selection\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   104   * Description in Ifx_CAN.MCR.CLKSELx, (x = 0,1,2)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   105   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   106  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   107  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   108      IfxCan_ClockSource_noClock      = 0,  /**< \brief No clock is switched on */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   109      IfxCan_ClockSource_asynchronous = 1,  /**< \brief The Asynchronous clock source is switched on */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   110      IfxCan_ClockSource_synchronous  = 2,  /**< \brief The Synchronous clock source is switched on */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   111      IfxCan_ClockSource_both         = 3   /**< \brief Both clock sources are switched on */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   112  } IfxCan_ClockSource;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   113  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   114  /** \brief Data Field Size\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   115   * Definition in Ifx_CAN.N[x]TX.ESC.B.TBDS, Ifx_CAN.N[x].RX.ESC.B.RBDS, Ifx_CAN.N[x].RX.ESC.B.FyDS (x= 0,1,2,3; y = 0, 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   116   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   117  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   118  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   119      IfxCan_DataFieldSize_8,      /**< \brief 8 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   120      IfxCan_DataFieldSize_12,     /**< \brief 12 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   121      IfxCan_DataFieldSize_16,     /**< \brief 16 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   122      IfxCan_DataFieldSize_20,     /**< \brief 20 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   123      IfxCan_DataFieldSize_24,     /**< \brief 24 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   124      IfxCan_DataFieldSize_32,     /**< \brief 32 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   125      IfxCan_DataFieldSize_48,     /**< \brief 48 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   126      IfxCan_DataFieldSize_64      /**< \brief 64 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   127  } IfxCan_DataFieldSize;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   128  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   129  /** \brief Data Length code of the Message
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   130   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   131  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   132  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   133      IfxCan_DataLengthCode_0,      /**< \brief 0 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   134      IfxCan_DataLengthCode_1,      /**< \brief 1 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   135      IfxCan_DataLengthCode_2,      /**< \brief 2 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   136      IfxCan_DataLengthCode_3,      /**< \brief 3 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   137      IfxCan_DataLengthCode_4,      /**< \brief 4 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   138      IfxCan_DataLengthCode_5,      /**< \brief 5 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   139      IfxCan_DataLengthCode_6,      /**< \brief 6 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   140      IfxCan_DataLengthCode_7,      /**< \brief 7 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   141      IfxCan_DataLengthCode_8,      /**< \brief 8 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   142      IfxCan_DataLengthCode_12,     /**< \brief 12 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   143      IfxCan_DataLengthCode_16,     /**< \brief 16 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   144      IfxCan_DataLengthCode_20,     /**< \brief 20 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   145      IfxCan_DataLengthCode_24,     /**< \brief 24 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   146      IfxCan_DataLengthCode_32,     /**< \brief 32 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   147      IfxCan_DataLengthCode_48,     /**< \brief 48 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   148      IfxCan_DataLengthCode_64      /**< \brief 64 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   149  } IfxCan_DataLengthCode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   150  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   151  /** \brief Filter Element Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   152   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   154  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   155      IfxCan_FilterElementConfiguration_disable,                     /**< \brief Disable filter element */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   156      IfxCan_FilterElementConfiguration_storeInRxFifo0,              /**< \brief Store in Rx FIFO 0 if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   157      IfxCan_FilterElementConfiguration_storeInRxFifo1,              /**< \brief Store in Rx FIFO 1 if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   158      IfxCan_FilterElementConfiguration_rejectId,                    /**< \brief Reject ID if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   159      IfxCan_FilterElementConfiguration_setPriority,                 /**< \brief Set priority if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   160      IfxCan_FilterElementConfiguration_setPriorityAndStoreInFifo0,  /**< \brief Set priority and store in FIFO 0 if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   161      IfxCan_FilterElementConfiguration_setPriorityAndStoreInFifo1,  /**< \brief Set priority and store in FIFO 1 if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   162      IfxCan_FilterElementConfiguration_storeInRxBuffer              /**< \brief Store into Rx Buffer */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   163  } IfxCan_FilterElementConfiguration;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   164  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   165  /** \brief Filter Type
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   166   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   167  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   168  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   169      IfxCan_FilterType_range,    /**< \brief Range filter from SF1ID to SF2ID (SF2ID is greater than SF1ID) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   170      IfxCan_FilterType_dualId,   /**< \brief Dual ID filter for SF1ID or SF2ID */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   171      IfxCan_FilterType_classic,  /**< \brief Classic filter: SF1ID = filter, SF2ID = mask */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   172      IfxCan_FilterType_none      /**< \brief Reserved */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   173  } IfxCan_FilterType;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   174  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   175  /** \brief CAN Frame mode\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   176   * Description in Ifx_CAN.N[x].CCCR.CME, (x= 0 to 3)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   177   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   178  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   179  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   180      IfxCan_FrameMode_standard,      /**< \brief Standard CAN frame (transmit and receive) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   181      IfxCan_FrameMode_fdLong,        /**< \brief CAN FD long frame in transmit and CAN FD long and fast frame in receive */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   182      IfxCan_FrameMode_fdLongAndFast  /**< \brief CAN FD long and fast frames (transmit and receive) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   183  } IfxCan_FrameMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   184  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   185  /** \brief CAN frame type
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   186   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   187  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   188  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   189      IfxCan_FrameType_receive,             /**< \brief Data frame is received */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   190      IfxCan_FrameType_transmit,            /**< \brief Data frame is generated */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   191      IfxCan_FrameType_transmitAndReceive,  /**< \brief for both transmit and receive frames */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   192      IfxCan_FrameType_remoteRequest,       /**< \brief Remote request frame is generated */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   193      IfxCan_FrameType_remoteAnswer         /**< \brief Answer frame is generated on reception of the corresponding remote request */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   194  } IfxCan_FrameType;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   195  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   196  /** \brief Type of interrupt\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   197   * Definition in Ifx_CAN.N[x].IE, Ifx_CAN.N[x].IR, Ifx_CAN.N[x].ILS, (x= 0 to 3)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   198   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   199  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   200  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   201      IfxCan_Interrupt_rxFifo0NewMessage,                 /**< \brief Rx FIFO 0 New Message Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   202      IfxCan_Interrupt_rxFifo0WatermarkReached,           /**< \brief Rx FIFO 0 Watermark Reached Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   203      IfxCan_Interrupt_rxFifo0Full,                       /**< \brief Rx FIFO 0 Full Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   204      IfxCan_Interrupt_rxFifo0MessageLost,                /**< \brief Rx FIFO 0 Message Lost Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   205      IfxCan_Interrupt_rxFifo1NewMessage,                 /**< \brief Rx FIFO 1 New Message Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   206      IfxCan_Interrupt_rxFifo1WatermarkReached,           /**< \brief Rx FIFO 1 Watermark Reached Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   207      IfxCan_Interrupt_rxFifo1Full,                       /**< \brief Rx FIFO 1 Full Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   208      IfxCan_Interrupt_rxFifo1MessageLost,                /**< \brief Rx FIFO 1 Message Lost Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   209      IfxCan_Interrupt_highPriorityMessage,               /**< \brief High Priority Message Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   210      IfxCan_Interrupt_transmissionCompleted,             /**< \brief Transmission Completed Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   211      IfxCan_Interrupt_transmissionCancellationFinished,  /**< \brief Transmission Cancellation Finished Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   212      IfxCan_Interrupt_txFifoEmpty,                       /**< \brief Tx FIFO Empty Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   213      IfxCan_Interrupt_txEventFifoNewEntry,               /**< \brief Tx Event FIFO New Entry Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   214      IfxCan_Interrupt_txEventFifoWatermarkReached,       /**< \brief Tx Event FIFO Watermark Reached Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   215      IfxCan_Interrupt_txEventFifoFull,                   /**< \brief Tx Event FIFO Full Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   216      IfxCan_Interrupt_txEventFifoEventLost,              /**< \brief Tx Event FIFO Event Lost Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   217      IfxCan_Interrupt_timestampWraparound,               /**< \brief Timestamp Wraparound Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   218      IfxCan_Interrupt_messageRAMAccessFailure,           /**< \brief Message RAM Access Failure Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   219      IfxCan_Interrupt_timeoutOccurred,                   /**< \brief Timeout Occurred Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   220      IfxCan_Interrupt_messageStoredToDedicatedRxBuffer,  /**< \brief Message stored to Dedicated Rx Buffer Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   221      IfxCan_Interrupt_bitErrorCorrected,                 /**< \brief Bit Error Corrected Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   222      IfxCan_Interrupt_bitErrorUncorrected,               /**< \brief Bit Error Uncorrected Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   223      IfxCan_Interrupt_errorLoggingOverflow,              /**< \brief Error Logging Overflow Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   224      IfxCan_Interrupt_errorPassive,                      /**< \brief Error Passive Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   225      IfxCan_Interrupt_warningStatus,                     /**< \brief Warning Status Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   226      IfxCan_Interrupt_busOffStatus,                      /**< \brief Bus_Off Status Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   227      IfxCan_Interrupt_watchdog,                          /**< \brief Watchdog Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   228      IfxCan_Interrupt_protocolErrorArbitration,          /**< \brief Protocol Error in Arbitration phase Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   229      IfxCan_Interrupt_protocolErrorData,                 /**< \brief Protocol Error in Data phase Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   230      IfxCan_Interrupt_AccessToReservedAddress            /**< \brief Access to Reserved Address Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   231  } IfxCan_Interrupt;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   232  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   233  /** \brief Type of interrupt\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   234   * Definition in Ifx_CAN.GRINT[x] (x= 0 , 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   235   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   236  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   237  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   238      IfxCan_InterruptGroup_tefifo,  /**< \brief Transmit Event FIFO Incidents */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   239      IfxCan_InterruptGroup_hpe,     /**< \brief High Priority Events */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   240      IfxCan_InterruptGroup_wati,    /**< \brief Watermark interrupts are mapped here. */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   241      IfxCan_InterruptGroup_alrt,    /**< \brief Alerts */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   242      IfxCan_InterruptGroup_moer,    /**< \brief Module errors */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   243      IfxCan_InterruptGroup_safe,    /**< \brief Safety counter overflow */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   244      IfxCan_InterruptGroup_boff,    /**< \brief Bus Off */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   245      IfxCan_InterruptGroup_loi,     /**< \brief Last Error Interrupts */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   246      IfxCan_InterruptGroup_reint,   /**< \brief Message stored in dedicated receive buffer interrupt (IR.DRX) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   247      IfxCan_InterruptGroup_rxf1f,   /**< \brief Receive FIFO1 full interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   248      IfxCan_InterruptGroup_rxf0f,   /**< \brief Receive FIFO0 full interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   249      IfxCan_InterruptGroup_rxf1n,   /**< \brief Receive FIFO1 new message Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   250      IfxCan_InterruptGroup_rxf0n,   /**< \brief Receive FIFO0 new message Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   251      IfxCan_InterruptGroup_reti,    /**< \brief Receive timeouts */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   252      IfxCan_InterruptGroup_traq,    /**< \brief Transmission Queue Events */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   253      IfxCan_InterruptGroup_traco    /**< \brief Interrupts of the transmission control */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   254  } IfxCan_InterruptGroup;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   255  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   256  /** \brief Interrupt line number INT_Ox (x= 0 - 15) \n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   257   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   258  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   259  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   260      IfxCan_InterruptLine_0,     /**< \brief Interrupt Line 0  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   261      IfxCan_InterruptLine_1,     /**< \brief Interrupt Line 1  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   262      IfxCan_InterruptLine_2,     /**< \brief Interrupt Line 2  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   263      IfxCan_InterruptLine_3,     /**< \brief Interrupt Line 3  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   264      IfxCan_InterruptLine_4,     /**< \brief Interrupt Line 4  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   265      IfxCan_InterruptLine_5,     /**< \brief Interrupt Line 5  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   266      IfxCan_InterruptLine_6,     /**< \brief Interrupt Line 6  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   267      IfxCan_InterruptLine_7,     /**< \brief Interrupt Line 7  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   268      IfxCan_InterruptLine_8,     /**< \brief Interrupt Line 8  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   269      IfxCan_InterruptLine_9,     /**< \brief Interrupt Line 9  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   270      IfxCan_InterruptLine_10,    /**< \brief Interrupt Line 10  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   271      IfxCan_InterruptLine_11,    /**< \brief Interrupt Line 11  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   272      IfxCan_InterruptLine_12,    /**< \brief Interrupt Line 12  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   273      IfxCan_InterruptLine_13,    /**< \brief Interrupt Line 13  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   274      IfxCan_InterruptLine_14,    /**< \brief Interrupt Line 14  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   275      IfxCan_InterruptLine_15     /**< \brief Interrupt Line 15  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   276  } IfxCan_InterruptLine;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   277  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   278  /** \brief Type of last error to occur on the CAN node
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   279   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   280  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   281  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   282      IfxCan_LastErrorCodeType_noError       = 0, /**< \brief No Error occured in the recent CAN message transmission or reception. */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   283      IfxCan_LastErrorCodeType_stuffError    = 1, /**< \brief More than 5 consecutive equal bits recieved in CAN message */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   284      IfxCan_LastErrorCodeType_formError     = 2, /**< \brief Fixed format part of recieved frame has wrong format */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   285      IfxCan_LastErrorCodeType_ackError      = 3, /**< \brief No ACK recieved from another node for transmitted CAN message */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   286      IfxCan_LastErrorCodeType_bit1Error     = 4, /**< \brief Transmitted recessive and read back dominant on the CAN bus. */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   287      IfxCan_LastErrorCodeType_bit0Error     = 5, /**< \brief Transmitted dominant and read back recessive on the CAN bus. */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   288      IfxCan_LastErrorCodeType_crcError      = 6, /**< \brief CRC Error */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   289      IfxCan_LastErrorCodeType_noCANBusEvent = 7  /**< \brief No CAN bus event occured */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   290  } IfxCan_LastErrorCodeType;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   291  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   292  /** \brief Message Id length (Standard / Extended)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   293   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   294  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   295  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   296      IfxCan_MessageIdLength_standard,  /**< \brief Standard Message ID */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   297      IfxCan_MessageIdLength_extended,  /**< \brief Extended Message ID */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   298      IfxCan_MessageIdLength_both       /**< \brief Both Standard and Extended message IDs */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   299  } IfxCan_MessageIdLength;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   300  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   301  /** \brief Indicate the action to be taken with the messages which do not match with any element of the filter.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   302   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   303  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   304  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   305      IfxCan_NonMatchingFrame_acceptToRxFifo0 = 0,  /**< \brief Accept the non matching messages into Rx FIFO 0 */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   306      IfxCan_NonMatchingFrame_acceptToRxFifo1 = 1,  /**< \brief Accepts the non matching messages into Rx FIFO 1 */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   307      IfxCan_NonMatchingFrame_reject          = 2   /**< \brief Reject the non-matching messages */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   308  } IfxCan_NonMatchingFrame;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   309  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   310  /** \brief Rx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   311   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   312  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   313  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   314      IfxCan_RxBufferId_0,     /**< \brief Rx buffer 0  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   315      IfxCan_RxBufferId_1,     /**< \brief Rx buffer 1  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   316      IfxCan_RxBufferId_2,     /**< \brief Rx buffer 2  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   317      IfxCan_RxBufferId_3,     /**< \brief Rx buffer 3  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   318      IfxCan_RxBufferId_4,     /**< \brief Rx buffer 4  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   319      IfxCan_RxBufferId_5,     /**< \brief Rx buffer 5  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   320      IfxCan_RxBufferId_6,     /**< \brief Rx buffer 6  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   321      IfxCan_RxBufferId_7,     /**< \brief Rx buffer 7  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   322      IfxCan_RxBufferId_8,     /**< \brief Rx buffer 8  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   323      IfxCan_RxBufferId_9,     /**< \brief Rx buffer 9  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   324      IfxCan_RxBufferId_10,    /**< \brief Rx buffer 10  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   325      IfxCan_RxBufferId_11,    /**< \brief Rx buffer 11  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   326      IfxCan_RxBufferId_12,    /**< \brief Rx buffer 12  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   327      IfxCan_RxBufferId_13,    /**< \brief Rx buffer 13  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   328      IfxCan_RxBufferId_14,    /**< \brief Rx buffer 14  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   329      IfxCan_RxBufferId_15,    /**< \brief Rx buffer 15  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   330      IfxCan_RxBufferId_16,    /**< \brief Rx buffer 16  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   331      IfxCan_RxBufferId_17,    /**< \brief Rx buffer 17  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   332      IfxCan_RxBufferId_18,    /**< \brief Rx buffer 18  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   333      IfxCan_RxBufferId_19,    /**< \brief Rx buffer 19  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   334      IfxCan_RxBufferId_20,    /**< \brief Rx buffer 20  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   335      IfxCan_RxBufferId_21,    /**< \brief Rx buffer 21  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   336      IfxCan_RxBufferId_22,    /**< \brief Rx buffer 22  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   337      IfxCan_RxBufferId_23,    /**< \brief Rx buffer 23  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   338      IfxCan_RxBufferId_24,    /**< \brief Rx buffer 24  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   339      IfxCan_RxBufferId_25,    /**< \brief Rx buffer 25  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   340      IfxCan_RxBufferId_26,    /**< \brief Rx buffer 26  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   341      IfxCan_RxBufferId_27,    /**< \brief Rx buffer 27  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   342      IfxCan_RxBufferId_28,    /**< \brief Rx buffer 28  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   343      IfxCan_RxBufferId_29,    /**< \brief Rx buffer 29  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   344      IfxCan_RxBufferId_30,    /**< \brief Rx buffer 30  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   345      IfxCan_RxBufferId_31,    /**< \brief Rx buffer 31  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   346      IfxCan_RxBufferId_32,    /**< \brief Rx buffer 32  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   347      IfxCan_RxBufferId_33,    /**< \brief Rx buffer 33  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   348      IfxCan_RxBufferId_34,    /**< \brief Rx buffer 34  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   349      IfxCan_RxBufferId_35,    /**< \brief Rx buffer 35  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   350      IfxCan_RxBufferId_36,    /**< \brief Rx buffer 36  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   351      IfxCan_RxBufferId_37,    /**< \brief Rx buffer 37  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   352      IfxCan_RxBufferId_38,    /**< \brief Rx buffer 38  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   353      IfxCan_RxBufferId_39,    /**< \brief Rx buffer 39  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   354      IfxCan_RxBufferId_40,    /**< \brief Rx buffer 40  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   355      IfxCan_RxBufferId_41,    /**< \brief Rx buffer 41  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   356      IfxCan_RxBufferId_42,    /**< \brief Rx buffer 42  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   357      IfxCan_RxBufferId_43,    /**< \brief Rx buffer 43  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   358      IfxCan_RxBufferId_44,    /**< \brief Rx buffer 44  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   359      IfxCan_RxBufferId_45,    /**< \brief Rx buffer 45  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   360      IfxCan_RxBufferId_46,    /**< \brief Rx buffer 46  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   361      IfxCan_RxBufferId_47,    /**< \brief Rx buffer 47  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   362      IfxCan_RxBufferId_48,    /**< \brief Rx buffer 48  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   363      IfxCan_RxBufferId_49,    /**< \brief Rx buffer 49  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   364      IfxCan_RxBufferId_50,    /**< \brief Rx buffer 50  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   365      IfxCan_RxBufferId_51,    /**< \brief Rx buffer 51  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   366      IfxCan_RxBufferId_52,    /**< \brief Rx buffer 52  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   367      IfxCan_RxBufferId_53,    /**< \brief Rx buffer 53  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   368      IfxCan_RxBufferId_54,    /**< \brief Rx buffer 54  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   369      IfxCan_RxBufferId_55,    /**< \brief Rx buffer 55  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   370      IfxCan_RxBufferId_56,    /**< \brief Rx buffer 56  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   371      IfxCan_RxBufferId_57,    /**< \brief Rx buffer 57  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   372      IfxCan_RxBufferId_58,    /**< \brief Rx buffer 58  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   373      IfxCan_RxBufferId_59,    /**< \brief Rx buffer 59  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   374      IfxCan_RxBufferId_60,    /**< \brief Rx buffer 60  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   375      IfxCan_RxBufferId_61,    /**< \brief Rx buffer 61  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   376      IfxCan_RxBufferId_62,    /**< \brief Rx buffer 62  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   377      IfxCan_RxBufferId_63     /**< \brief Rx buffer 63  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   378  } IfxCan_RxBufferId;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   379  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   380  /** \brief Rx FIFO 0/1 operating mode\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   381   * Description in Ifx_CAN.N[x].RXFyC.FyOM, (x= 0 to 3; y = 0, 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   382   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   383  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   384  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   385      IfxCan_RxFifoMode_blocking,  /**< \brief Blocking mode */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   386      IfxCan_RxFifoMode_overwrite  /**< \brief Overwrite mode */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   387  } IfxCan_RxFifoMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   388  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   389  /** \brief Rx Buffers or FIFO 0 or combination Mode of reception
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   390   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   391  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   392  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   393      IfxCan_RxMode_dedicatedBuffers,  /**< \brief Rx dedicated buffers operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   394      IfxCan_RxMode_fifo0,             /**< \brief Rx FIFO 0 operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   395      IfxCan_RxMode_fifo1,             /**< \brief Rx FIFO 1 operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   396      IfxCan_RxMode_sharedFifo0,       /**< \brief Rx shared dedicated buffers and Rx FIFO 0 operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   397      IfxCan_RxMode_sharedFifo1,       /**< \brief Rx shared dedicated buffers and Rx FIFO 1 operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   398      IfxCan_RxMode_sharedAll          /**< \brief Rx shared dedicated buffers and Rx FIFO 0 and Rx FIFO 1 operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   399  } IfxCan_RxMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   400  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   401  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   402   * Definition in Ifx_CAN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   403   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   404  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   405  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   406      IfxCan_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   407      IfxCan_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   408  } IfxCan_SleepMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   409  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   410  /** \brief CAN API status definition
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   411   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   412  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   413  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   414      IfxCan_Status_ok                = 0x00000000,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   415      IfxCan_Status_notInitialised    = 0x00000001,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   416      IfxCan_Status_busOff            = 0x00000010,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   417      IfxCan_Status_notSentBusy       = 0x00000020,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   418      IfxCan_Status_receiveEmpty      = 0x00000040,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   419      IfxCan_Status_messageLost       = 0x00000080,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   420      IfxCan_Status_newData           = 0x00000100,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   421      IfxCan_Status_newDataButOneLost = 0x00000180
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   422  } IfxCan_Status;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   423  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   424  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   425   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   426  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   427  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   428      IfxCan_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   429      IfxCan_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   430      IfxCan_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   431  } IfxCan_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   432  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   433  /** \brief Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   434   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   435  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   436  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   437      IfxCan_TxBufferId_0,     /**< \brief Tx buffer 0  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   438      IfxCan_TxBufferId_1,     /**< \brief Tx buffer 1  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   439      IfxCan_TxBufferId_2,     /**< \brief Tx buffer 2  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   440      IfxCan_TxBufferId_3,     /**< \brief Tx buffer 3  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   441      IfxCan_TxBufferId_4,     /**< \brief Tx buffer 4  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   442      IfxCan_TxBufferId_5,     /**< \brief Tx buffer 5  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   443      IfxCan_TxBufferId_6,     /**< \brief Tx buffer 6  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   444      IfxCan_TxBufferId_7,     /**< \brief Tx buffer 7  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   445      IfxCan_TxBufferId_8,     /**< \brief Tx buffer 8  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   446      IfxCan_TxBufferId_9,     /**< \brief Tx buffer 9  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   447      IfxCan_TxBufferId_10,    /**< \brief Tx buffer 10  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   448      IfxCan_TxBufferId_11,    /**< \brief Tx buffer 11  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   449      IfxCan_TxBufferId_12,    /**< \brief Tx buffer 12  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   450      IfxCan_TxBufferId_13,    /**< \brief Tx buffer 13  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   451      IfxCan_TxBufferId_14,    /**< \brief Tx buffer 14  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   452      IfxCan_TxBufferId_15,    /**< \brief Tx buffer 15  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   453      IfxCan_TxBufferId_16,    /**< \brief Tx buffer 16  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   454      IfxCan_TxBufferId_17,    /**< \brief Tx buffer 17  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   455      IfxCan_TxBufferId_18,    /**< \brief Tx buffer 18  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   456      IfxCan_TxBufferId_19,    /**< \brief Tx buffer 19  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   457      IfxCan_TxBufferId_20,    /**< \brief Tx buffer 20  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   458      IfxCan_TxBufferId_21,    /**< \brief Tx buffer 21  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   459      IfxCan_TxBufferId_22,    /**< \brief Tx buffer 22  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   460      IfxCan_TxBufferId_23,    /**< \brief Tx buffer 23  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   461      IfxCan_TxBufferId_24,    /**< \brief Tx buffer 24  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   462      IfxCan_TxBufferId_25,    /**< \brief Tx buffer 25  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   463      IfxCan_TxBufferId_26,    /**< \brief Tx buffer 26  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   464      IfxCan_TxBufferId_27,    /**< \brief Tx buffer 27  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   465      IfxCan_TxBufferId_28,    /**< \brief Tx buffer 28  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   466      IfxCan_TxBufferId_29,    /**< \brief Tx buffer 29  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   467      IfxCan_TxBufferId_30,    /**< \brief Tx buffer 30  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   468      IfxCan_TxBufferId_31     /**< \brief Tx buffer 31  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   469  } IfxCan_TxBufferId;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   470  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   471  /** \brief Tx FIFO/Queue Mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   472   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   473  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   474  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   475      IfxCan_TxMode_fifo,              /**< \brief Tx FIFO operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   476      IfxCan_TxMode_queue,             /**< \brief Tx Queue operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   477      IfxCan_TxMode_dedicatedBuffers,  /**< \brief Tx dedicated buffers operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   478      IfxCan_TxMode_sharedFifo,        /**< \brief Tx shared dedicated buffers and Tx FIFO operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   479      IfxCan_TxMode_sharedQueue        /**< \brief Tx shared dedicated buffers and Tx Queue operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   480  } IfxCan_TxMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   481  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   482  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   483  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   484  /** \brief CAN node Bus Off status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   485   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   486  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   487  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   488      IfxCan_CanNodeBusOffErrorStatus_NoErr     = 0, /**< \brief CAN node not in Bus Off state */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   489      IfxCan_CanNodeBusOffErrorStatus_BusOffErr = 1  /**< \brief CAN node in Bus Off state */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   490  } IfxCan_CanNodeBusOffErrorStatus;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   491  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   492  /** \brief CAN node communication state
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   493   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   494  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   495  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   496      IfxCan_CanNodeCommunicationState_synchronize = 0,  /**< \brief CAN node is synchronizing on CAN communication */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   497      IfxCan_CanNodeCommunicationState_idle        = 1,  /**< \brief Node is neither receiving nor transmitting */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   498      IfxCan_CanNodeCommunicationState_receive     = 2,  /**< \brief Node is operating as receiver */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   499      IfxCan_CanNodeCommunicationState_transmit    = 3   /**< \brief Node is operating as transmitter */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   500  } IfxCan_CanNodeCommunicationState;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   501  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   502  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   503  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   504  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   505  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   506  /** \addtogroup IfxLld_Can_Std_Data_Structures
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   507   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   508  /** \brief tructure for Filter configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   509   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   510  typedef struct
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   511  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   512      uint8                             number;                     /**< \brief Filter Number */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   513      IfxCan_FilterElementConfiguration elementConfiguration;       /**< \brief *FEC, Filter Element Configuration of (standard / extended ID) filter element */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   514      IfxCan_FilterType                 type;                       /**< \brief *FT, Filter Type of (standard / extended ID) filter element */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   515      uint32                            id1;                        /**< \brief *FID1 First ID of (standard / extended ID) filter element */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   516      uint32                            id2;                        /**< \brief *FID2 Second ID of (standard / extended ID) filter element */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   517      IfxCan_RxBufferId                 rxBufferOffset;             /**< \brief Rx Buffer number to set the offset to the Rx Buffer Start Address */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   518  } IfxCan_Filter;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   519  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   520  /** \brief Configuration for Interrupt groups
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   521   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   522  typedef struct
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   523  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   524      IfxCan_InterruptLine interruptLine;       /**< \brief Intterupt line to which this interruipt has to be connetced to */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   525      Ifx_Priority         priority;            /**< \brief Priority of the interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   526      IfxSrc_Tos           typeOfService;       /**< \brief Type of Service */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   527  } IfxCan_GroupInterruptConfig;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   528  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   529  /** \brief Structure for CAN Message configuration (transmit/receive)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   530   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   531  typedef struct
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   532  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   533      uint8                  bufferNumber;                /**< \brief (Tx / Rx) Buffer Element number */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   534      uint32                 messageId;                   /**< \brief ID, Identifier */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   535      boolean                remoteTransmitRequest;       /**< \brief RTR, Remote Transmit Request (enable / disable) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   536      IfxCan_MessageIdLength messageIdLength;             /**< \brief XTD, Message Id length (Standard / Extended) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   537      boolean                errorStateIndicator;         /**< \brief ESI, Error State Indicator (enable / disable) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   538      IfxCan_DataLengthCode  dataLengthCode;              /**< \brief DLC, Data Length Code */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   539      IfxCan_FrameMode       frameMode;                   /**< \brief CAN frame mode */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   540      boolean                txEventFifoControl;          /**< \brief EFC, Tx Event FIFO Control (enable / disable) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   541      boolean                storeInTxFifoQueue;          /**< \brief Write message in Tx FIFO/QUEUE */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   542      boolean                readFromRxFifo0;             /**< \brief Read message from Rx FIFO 0 */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   543      boolean                readFromRxFifo1;             /**< \brief Read message from Rx FIFO 1 */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   544  } IfxCan_Message;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   545  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   546  /** \brief Structure for Message RAM configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   547   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   548  typedef struct
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   549  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   550      uint32 baseAddress;                          /**< \brief Message RAM base address of the CAN */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   551      uint16 standardFilterListStartAddress;       /**< \brief Start address of Standard Message ID filter list (32-bit word address) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   552      uint16 extendedFilterListStartAddress;       /**< \brief Start address of Extended Message ID filter list (32-bit word address) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   553      uint16 rxFifo0StartAddress;                  /**< \brief Start address of Rx FIFO 0 in Message RAM (32-bit word address) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   554      uint16 rxFifo1StartAddress;                  /**< \brief Start address of Rx FIFO 1 in Message RAM (32-bit word address) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   555      uint16 rxBuffersStartAddress;                /**< \brief Start address of Rx Buffers section in the Message RAM (32-bit word address). */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   556      uint16 txEventFifoStartAddress;              /**< \brief Start address of Tx Event FIFO in Message RAM (32-bit w ord address) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   557      uint16 txBuffersStartAddress;                /**< \brief Start address of Tx Buffers section in the Message RAM (32-bit word address). */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   558  } IfxCan_MessageRAM;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   559  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   560  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   561  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   562  /** \addtogroup IfxLld_Can_Std_Node_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   563   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   564  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   565  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   566  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   567  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   568  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   569  /** \brief Disables the configuration change\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   570   * The CPU has no write access to the protected configuration registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   571   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   573   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   574  IFX_INLINE void IfxCan_Node_disableConfigurationChange(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   575  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   576  /** \brief Enables the configuration change\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   577   * The CPU has write access to the protected configuration registers (while CCCR.INIT = 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   578   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   579   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   580   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   581  IFX_INLINE void IfxCan_Node_enableConfigurationChange(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   582  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   583  /** \brief Enables the internal Virtual CAN bus loopback mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   584   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   585   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   586   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   587  IFX_INLINE void IfxCan_Node_enableLoopbackMode(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   588  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   589  /** \brief Returns the status of whether the CAN Node is synchronised or not
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   590   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   591   * \return Status TRUE: synchronized, FALSE : Sync in progress
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   592   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   593  IFX_INLINE boolean IfxCan_Node_isNodeSynchronized(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   594  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   595  /** \brief Initialises the node\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   596   * 0= Normal Operation\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   597   * 1= Initialization is started
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   598   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   599   * \param enable Enable / Disable choice
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   600   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   601   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   602  IFX_INLINE void IfxCan_Node_setInitialisation(Ifx_CAN_N *node, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   603  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   604  /** \brief Sets Transceiver Delay Compensation offset
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   605   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   606   * \param delay delay offset value
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   607   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   608   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   609  IFX_INLINE void IfxCan_Node_setTransceiverDelayCompensationOffset(Ifx_CAN_N *node, uint8 delay);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   610  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   611  /** \brief Get the LEC error status of the CAN node.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   612   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   613   * \return LEC error status in CAN node PSR register
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   614   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   615  IFX_INLINE IfxCan_LastErrorCodeType IfxCan_Node_getLastErroCodeStatus(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   616  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   617  /** \brief Error Passive status of the CAN node.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   618   * TRUE: CAN node in error passive.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   619   * FALSE: CAN node not in error passive.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   620   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   621   * \return Error Passive error status of CAN node (TRUE/FALSE).
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   622   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   623  IFX_INLINE boolean IfxCan_Node_isErrorPassive(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   624  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   625  /** \brief Get the warning status of the CAN node.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   626   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   627   * \return Warning status in CAN node
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   628   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   629  IFX_INLINE IfxCan_CanNodeErrorWarningLimitStatus IfxCan_Node_getWarningStatus(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   630  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   631  /** \brief Get the Bus Off status of the CAN node.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   632   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   633   * \return Bus Off Error status in CAN node
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   634   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   635  IFX_INLINE IfxCan_CanNodeBusOffErrorStatus IfxCan_Node_getBusOffStatus(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   636  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   637  /** \brief Get the Activity status of the CAN node.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   638   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   639   * \return Activity status of CAN node
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   640   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   641  IFX_INLINE IfxCan_CanNodeCommunicationState IfxCan_Node_getActivityStatus(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   642  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   643  /** \brief Get the Error status in data phase of the CAN node in the recent CANFD operation with bit rate switch.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   644   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   645   * \return Error status of the recent CAN FD with BRS flag set.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   646   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   647  IFX_INLINE IfxCan_LastErrorCodeType IfxCan_Node_getDataPhaseLastErrorCode(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   648  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   649  /** \brief Protocol Exception Event status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   650   * TRUE: Protocol Exception event occured.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   651   * FALSE: Protocol Exception event not occured.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   652   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   653   * \return Get the Protocol Exception event status (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   654   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   655  IFX_INLINE boolean IfxCan_Node_isProtocolExceptionEventOccured(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   656  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   657  /** \brief Returns the error status of the recent recieved CAN FD message.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   658   * TRUE : Error status indicator is enabled
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   659   * FALSE: Erro status indicator not enabled.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   660   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   661   * \return Error indicator for recent received CAN FD message (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   662   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   663  IFX_INLINE boolean IfxCan_Node_isErrorStatusIndicatorEnabled(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   664  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   665  /** \brief Bit Rate Switch status of the last recieved CAN FD message.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   666   * TRUE: Bit rate switch is enabled.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   667   * FALSE: Bit rate switch is disabled.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   668   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   669   * \return Bit Rate Switch flag status (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   670   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   671  IFX_INLINE boolean IfxCan_Node_isBitRateSwitchFlagEnabled(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   672  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   673  /** \brief Return the DLC code corresponding to the data length in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   674   * \param dataLength Data length in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   675   * \return Data length code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   676   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   677  IFX_INLINE IfxCan_DataLengthCode IfxCan_Node_getCodeFromDataLengthInBytes(uint32 dataLength);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   678  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   679  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   680  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   681  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   682  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   683  /** \brief Converts data length code (DLC) into number of words
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   684   * \param dataLengthCode DLC, Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   685   * \return Number of data words
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   686   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   687  IFX_EXTERN uint32 IfxCan_Node_getDataLength(IfxCan_DataLengthCode dataLengthCode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   688  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   689  /** \brief Converts data length code (DLC) into number of data words.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   690   * This function is deprecated. Use new function IfxCan_Node_getDataLength
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   691   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   692   * \param dataLengthCode DLC, Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   693   * \return Number of data words
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   694   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   695  IFX_EXTERN uint32 IfxCan_Node_getDataLengthFromCode(Ifx_CAN_N *node, IfxCan_DataLengthCode dataLengthCode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   696  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   697  /** \brief Returns CAN frame mode of operation for a received frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   698   * \param rxBufferElement Rx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   699   * \return CAN frame mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   700   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   701  IFX_EXTERN IfxCan_FrameMode IfxCan_Node_getFrameMode(Ifx_CAN_RXMSG *rxBufferElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   702  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   703  /** \brief Select and initialise the CAN node receive pin
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   704   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   705   * \param rxd Rx pin
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   706   * \param mode Input mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   707   * \param padDriver Pad Driver Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   708   * \return TRUE: Returns TRUE if the operation was successful\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   709   * FALSE: Returns FALSE if the operation was errorneous
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   710   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   711  IFX_EXTERN boolean IfxCan_Node_initRxPin(Ifx_CAN_N *node, IfxCan_Rxd_In *rxd, IfxPort_InputMode mode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   712  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   713  /** \brief Select and initialise the CAN node transmit pin
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   714   * \param txd Tx pin
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   715   * \param mode Output mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   716   * \param padDriver Pad driver Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   717   * \return TRUE: Returns TRUE if the operation was successful\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   718   * FALSE: Returns FALSE if the operation was errorneous
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   719   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   720  IFX_EXTERN boolean IfxCan_Node_initTxPin(IfxCan_Txd_Out *txd, IfxPort_OutputMode mode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   721  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   722  /** \brief Calculates and Sets the CAN baudrate for standard frames and arbitration phase of CAND FD frames
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   723   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   724   * \param moduleFreq Specifies the CAN module frequency
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   725   * \param baudrate Specifies the baud rate. Unit: baud
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   726   * \param samplePoint Specifies the sample point. Range = [0, 10000] resp. [0%, 100%] of the total bit time.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   727   * \param syncJumpWidth Specifies the re-synchronization jump width
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   728   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   729   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   730  IFX_EXTERN void IfxCan_Node_setBitTiming(Ifx_CAN_N *node, float32 moduleFreq, uint32 baudrate, uint16 samplePoint, uint16 syncJumpWidth);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   731  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   732  /** \brief Sets the values of CAN baudrate for standard frames
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   733   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   734   * \param syncJumpWidth Synchronization Jump Width
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   735   * \param timeSegment2 Time segment after sample point
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   736   * \param timeSegment1 Time segment before sample point
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   737   * \param prescaler Baud Rate Prescaler
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   738   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   739   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   740  IFX_EXTERN void IfxCan_Node_setBitTimingValues(Ifx_CAN_N *node, uint16 syncJumpWidth, uint8 timeSegment2, uint8 timeSegment1, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   741  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   742  /** \brief Calulates and Sets the CAN fast baudrate for CAN FD frames data phase
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   743   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   744   * \param moduleFreq Specifies the CAN module frequency
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   745   * \param baudrate Specifies the baud rate. Unit: baud
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   746   * \param samplePoint Specifies the sample point. Range = [0, 10000] resp. [0%, 100%] of the total bit time.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   747   * \param syncJumpWidth Specifies the re-synchronization jump width
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   748   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   749   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   750  IFX_EXTERN void IfxCan_Node_setFastBitTiming(Ifx_CAN_N *node, float32 moduleFreq, uint32 baudrate, uint16 samplePoint, uint16 syncJumpWidth);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   751  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   752  /** \brief Sets the values of CAN fast baudrate for CAN FD frames data phase
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   753   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   754   * \param syncJumpWidth Synchronization Jump Width
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   755   * \param timeSegment2 Time segment after sample point
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   756   * \param timeSegment1 Time segment before sample point
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   757   * \param prescaler Baud Rate Prescaler
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   759   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   760  IFX_EXTERN void IfxCan_Node_setFastBitTimingValues(Ifx_CAN_N *node, uint16 syncJumpWidth, uint8 timeSegment2, uint8 timeSegment1, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   761  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   762  /** \brief Enables the CAN frame mode for transmission
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   763   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   764   * \param frameMode CAN frame mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   766   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   767  IFX_EXTERN void IfxCan_Node_setFrameMode(Ifx_CAN_N *node, IfxCan_FrameMode frameMode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   768  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   769  /** \brief Sets CAN frame mode request for transmission
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   770   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   771   * \param frameMode CAN frame mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   773   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   774  IFX_EXTERN void IfxCan_Node_setFrameModeReq(Ifx_CAN_TXMSG *txBufferElement, IfxCan_FrameMode frameMode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   775  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   776  /** \brief Sets CAN frame mode request for transmission.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   777   * This function is deprecated. Use new function IfxCan_Node_setFrameModeReq
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   778   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   779   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   780   * \param frameMode CAN frame mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   781   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   782   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   783  IFX_EXTERN void IfxCan_Node_setFrameModeRequest(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, IfxCan_FrameMode frameMode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   784  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   785  /** \brief Converts data length code (DLC) into number of bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   786   * \param dataLengthCode Data length code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   787   * \return Data length in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   788   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   789  IFX_EXTERN uint32 IfxCan_Node_getDataLengthInBytes(IfxCan_DataLengthCode dataLengthCode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   790  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   791  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   792  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   793  /** \addtogroup IfxLld_Can_Std_Tx_Element_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   794   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   795  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   796  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   797  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   798  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   799  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   800  /** \brief Returns Tx FIFO/Queue Put Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   801   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   802   * \return Tx Buffer Element Number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   803   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   804  IFX_INLINE IfxCan_TxBufferId IfxCan_Node_getTxFifoQueuePutIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   805  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   806  /** \brief Returns the status of whether cancellation is finished on the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   807   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   808   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   809   * \return Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   810   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   811  IFX_INLINE boolean IfxCan_Node_isTxBufferCancellationFinished(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   812  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   813  /** \brief Returns the status of pending request of the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   814   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   815   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   816   * \return Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   817   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   818  IFX_INLINE boolean IfxCan_Node_isTxBufferRequestPending(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   819  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   820  /** \brief Returns the status of whether transmission occured on the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   821   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   822   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   823   * \return Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   824   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   825  IFX_INLINE boolean IfxCan_Node_isTxBufferTransmissionOccured(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   826  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   827  /** \brief Returns the status of Tx Fifo/Queue is full or not
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   828   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   829   * \return Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   830   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   831  IFX_INLINE boolean IfxCan_Node_isTxFifoQueueFull(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   832  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   833  /** \brief pauses the CAN Node for two CAN bit times before starting the next transmission
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   834   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   835   * \param enable Enable / Disable choice
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   836   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   837   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   838  IFX_INLINE void IfxCan_Node_pauseTransmission(Ifx_CAN_N *node, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   839  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   840  /** \brief Sets the Data Length Code (DLC) for transmit frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   841   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   842   * \param dataLengthCode DLC, data length code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   843   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   844   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   845  IFX_INLINE void IfxCan_Node_setDataLength(Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   846  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   847  /** \brief Sets the Data Length Code (DLC) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   848   * This function is deprecated. Use new function IfxCan_Node_setDataLength
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   849   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   850   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   851   * \param dataLengthCode DLC, data length code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   852   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   853   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   854  IFX_INLINE void IfxCan_Node_setDataLengthCode(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   855  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   856  /** \brief Sets the number of dedicated Tx Buffers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   857   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   858   * \param number Number of Tx Buffers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   859   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   860   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   861  IFX_INLINE void IfxCan_Node_setDedicatedTxBuffersNumber(Ifx_CAN_N *node, uint8 number);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   862  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   863  /** \brief Sets the Error State Indicator (ESI) for transmit frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   864   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   865   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   866   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   867   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   868  IFX_INLINE void IfxCan_Node_setErrStateIndicator(Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   869  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   870  /** \brief Sets the Error State Indicator (ESI) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   871   * This function is decprecated. Use new function IfxCan_Node_setErrStateIndicator
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   872   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   873   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   874   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   875   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   876   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   877  IFX_INLINE void IfxCan_Node_setErrorStateIndicator(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   878  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   879  /** \brief Sets the Message Marker (MM) for transmit frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   880   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   881   * \param bufferId MM, Message Marker , Buffer Id
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   882   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   883   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   884  IFX_INLINE void IfxCan_Node_setMessageMarker(Ifx_CAN_TXMSG *txBufferElement, IfxCan_TxBufferId bufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   885  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   886  /** \brief Sets the identifier (ID) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   887   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   888   * \param messageId Identifier
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   889   * \param messageIdLength Message Id length (Standard / Extended)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   890   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   891   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   892  IFX_INLINE void IfxCan_Node_setMsgId(Ifx_CAN_TXMSG *txBufferElement, uint32 messageId, IfxCan_MessageIdLength messageIdLength);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   893  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   894  /** \brief Sets the identifier (ID) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   895   * This function is deprecated. Use the new function IfxCan_Node_setMsgId
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   896   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   897   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   898   * \param messageId Identifier
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   899   * \param messageIdLength Message Id length (Standard / Extended)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   900   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   901   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   902  IFX_INLINE void IfxCan_Node_setMesssageId(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, uint32 messageId, IfxCan_MessageIdLength messageIdLength);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   903  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   904  /** \brief Sets the remote Transmit Request (RTR) for transmit frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   905   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   906   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   907   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   908   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   909  IFX_INLINE void IfxCan_Node_setRemoteTransmitReq(Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   910  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   911  /** \brief Sets the remote Transmit Request (RTR) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   912   * This function is deprecated. Use new function IfxCan_Node_setRemoteTransmitReq
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   913   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   914   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   915   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   916   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   917   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   918  IFX_INLINE void IfxCan_Node_setRemoteTransmitRequest(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   919  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   920  /** \brief Sets Transmit FIFO/Queue Mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   921   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   922   * \param mode Tx FIFO/Queue Mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   923   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   924   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   925  IFX_INLINE void IfxCan_Node_setTransmitFifoQueueMode(Ifx_CAN_N *node, IfxCan_TxMode mode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   926  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   927  /** \brief Sets Transmit FIFO/Queue Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   928   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   929   * \param number Number of Tx Buffers used for Tx FIFO/Queue
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   930   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   931   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   932  IFX_INLINE void IfxCan_Node_setTransmitFifoQueueSize(Ifx_CAN_N *node, uint8 number);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   933  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   934  /** \brief Sets the Add Request for the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   935   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   936   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   937   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   938   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   939  IFX_INLINE void IfxCan_Node_setTxBufferAddRequest(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   940  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   941  /** \brief Sets the Cancellation Request for the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   942   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   943   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   944   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   945   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   946  IFX_INLINE void IfxCan_Node_setTxBufferCancellationRequest(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   947  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   948  /** \brief Sets Tx Buffer Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   949   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   950   * \param size Tx Buffer Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   951   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   952   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   953  IFX_INLINE void IfxCan_Node_setTxBufferDataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   954  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   955  /** \brief Sets the start address of Tx Buffers section in the Message RAM (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   956   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   957   * \param address Start address of Tx Buffers in the message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   958   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   959   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   960  IFX_INLINE void IfxCan_Node_setTxBuffersStartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   961  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   962  /** \brief Sets the Tx Event Fifo Control (EFC) for transmit frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   963   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   964   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   965   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   966   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   967  IFX_INLINE void IfxCan_Node_setTxEventFifoCtrl(Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   968  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   969  /** \brief Sets the Tx Event Fifo Control (EFC) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   970   * This function is deprecated. Use new function IfxCan_Node_setTxEventFifoCtrl
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   971   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   972   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   973   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   974   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   975   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   976  IFX_INLINE void IfxCan_Node_setTxEventFifoControl(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   977  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   978  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   979  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   980  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   981  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   982  /** \brief Returns Tx Buffer Data Field Size in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   983   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   984   * \return Data field size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   985   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   986  IFX_EXTERN uint8 IfxCan_Node_getTxBufferDataFieldSize(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   987  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   988  /** \brief Returns the address of selected Tx buffer element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   989   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   990   * \param ramBaseAddress Message RAM base address of CAN module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   991   * \param txBuffersStartAddress Start address of Tx Buffers section in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   992   * \param txBufferNumber Tx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   993   * \return Tx Buffer Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   994   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   995  IFX_EXTERN Ifx_CAN_TXMSG *IfxCan_Node_getTxBufferElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 txBuffersStartAddress, IfxCan_TxBufferId txBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   996  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   997  /** \brief Writes Data into Tx buffer element Node_writeTxBufData
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   998   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   999   * \param dataLengthCode DLC, Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1000   * \param data Pointer to data (in words)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1001   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1002   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1003  IFX_EXTERN void IfxCan_Node_writeTxBufData(Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode, uint32 *data);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1004  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1005  /** \brief Writes Data into Tx buffer element.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1006   * This function is deprecated. Use new function IfxCan_Node_writeTxBufData
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1007   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1008   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1009   * \param dataLengthCode DLC, Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1010   * \param data Pointer to data (in words)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1011   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1012   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1013  IFX_EXTERN void IfxCan_Node_writeData(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode, uint32 *data);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1014  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1015  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1016  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1017  /** \addtogroup IfxLld_Can_Std_Rx_Element_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1018   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1019  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1020  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1021  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1022  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1023  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1024  /** \brief Returns the Data Length Code from the received frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1025   * \param rxBufferElement Rx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1026   * \return Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1027   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1028  IFX_INLINE uint32 IfxCan_Node_getDataLengthCode(Ifx_CAN_RXMSG *rxBufferElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1029  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1030  /** \brief Returns the identifier (ID) from the received frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1031   * \param rxBufferElement Rx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1032   * \return Identifier
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1033   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1034  IFX_INLINE uint32 IfxCan_Node_getMesssageId(Ifx_CAN_RXMSG *rxBufferElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1035  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1036  /** \brief Returns Rx FIFO 0 Fill Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1037   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1038   * \return Fill level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1039   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1040  IFX_INLINE uint8 IfxCan_Node_getRxFifo0FillLevel(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1041  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1042  /** \brief Returns Rx FIFO 0 get index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1043   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1044   * \return Rx Buffer Element Number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1045   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1046  IFX_INLINE IfxCan_RxBufferId IfxCan_Node_getRxFifo0GetIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1047  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1048  /** \brief Returns Rx FIFO 1 Fill Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1049   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1050   * \return Fill level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1051   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1052  IFX_INLINE uint8 IfxCan_Node_getRxFifo1FillLevel(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1053  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1054  /** \brief Returns Rx FIFO 1 get index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1055   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1056   * \return Rx Buffer Element Number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1057   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1058  IFX_INLINE IfxCan_RxBufferId IfxCan_Node_getRxFifo1GetIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1059  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1060  /** \brief Sets Rx Buffer Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1061   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1062   * \param size Rx Buffer Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1063   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1064   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1065  IFX_INLINE void IfxCan_Node_setRxBufferDataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1066  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1067  /** \brief Sets the start address of Rx Buffers section in the Message RAM (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1068   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1069   * \param address Start address of Rx Buffers in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1070   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1071   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1072  IFX_INLINE void IfxCan_Node_setRxBuffersStartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1073  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1074  /** \brief Sets Rx FIFO 0 Acknowledge Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1075   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1076   * \param RxBufferNumber Rx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1077   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1078   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1079  IFX_INLINE void IfxCan_Node_setRxFifo0AcknowledgeIndex(Ifx_CAN_N *node, IfxCan_RxBufferId RxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1080  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1081  /** \brief Sets Rx Buffer Fifo 0 Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1082   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1083   * \param size Rx FIFO 0 Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1084   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1085   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1086  IFX_INLINE void IfxCan_Node_setRxFifo0DataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1087  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1088  /** \brief Sets Rx Buffer Fifo 0 operating mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1089   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1090   * \param mode Rx FIFO 0 operating Mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1091   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1092   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1093  IFX_INLINE void IfxCan_Node_setRxFifo0OperatingMode(Ifx_CAN_N *node, IfxCan_RxFifoMode mode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1094  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1095  /** \brief Sets Rx FIFO 0 Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1096   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1097   * \param size Rx FIFO 0 Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1098   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1099   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1100  IFX_INLINE void IfxCan_Node_setRxFifo0Size(Ifx_CAN_N *node, uint8 size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1101  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1102  /** \brief Sets the start address of Rx FIFO 0 section in the Message RAM (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1103   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1104   * \param address Start address of Rx FIFO 0 in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1105   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1106   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1107  IFX_INLINE void IfxCan_Node_setRxFifo0StartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1108  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1109  /** \brief Sets Rx FIFO 0 Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1110   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1111   * \param level Rx FIFO 0 Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1112   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1113   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1114  IFX_INLINE void IfxCan_Node_setRxFifo0WatermarkLevel(Ifx_CAN_N *node, uint8 level);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1115  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1116  /** \brief Sets Rx FIFO 1 Acknowledge Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1117   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1118   * \param RxBufferNumber Rx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1119   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1120   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1121  IFX_INLINE void IfxCan_Node_setRxFifo1AcknowledgeIndex(Ifx_CAN_N *node, IfxCan_RxBufferId RxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1122  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1123  /** \brief Sets Rx Buffer Fifo 1 Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1124   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1125   * \param size Rx FIFO 1 Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1126   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1127   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1128  IFX_INLINE void IfxCan_Node_setRxFifo1DataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1129  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1130  /** \brief Sets Rx Buffer Fifo 1 operating mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1131   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1132   * \param mode Rx FIFO 1 operating Mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1133   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1134   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1135  IFX_INLINE void IfxCan_Node_setRxFifo1OperatingMode(Ifx_CAN_N *node, IfxCan_RxFifoMode mode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1136  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1137  /** \brief Sets Rx FIFO 1 Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1138   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1139   * \param size Rx FIFO 1 Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1140   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1141   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1142  IFX_INLINE void IfxCan_Node_setRxFifo1Size(Ifx_CAN_N *node, uint8 size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1143  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1144  /** \brief Sets the start address of Rx FIFO 1 section in the Message RAM (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1145   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1146   * \param address Start address of Rx FIFO 1 in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1147   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1148   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1149  IFX_INLINE void IfxCan_Node_setRxFifo1StartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1150  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1151  /** \brief Sets Rx FIFO 1 Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1152   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1153   * \param level Rx FIFO 1 Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1154   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1155   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1156  IFX_INLINE void IfxCan_Node_setRxFifo1WatermarkLevel(Ifx_CAN_N *node, uint8 level);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1157  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1158  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1159  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1160  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1161  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1162  /** \brief Clears the New Data flag of the selected Rx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1163   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1164   * \param rxBufferId Rx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1165   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1166   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1167  IFX_EXTERN void IfxCan_Node_clearRxBufferNewDataFlag(Ifx_CAN_N *node, IfxCan_RxBufferId rxBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1168  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1169  /** \brief Returns Rx Buffer Data Field Size in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1170   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1171   * \return Data field size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1172   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1173  IFX_EXTERN uint8 IfxCan_Node_getRxBufferDataFieldSize(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1174  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1175  /** \brief Returns the address of selected Rx buffer element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1176   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1177   * \param ramBaseAddress Message RAM base address of CAN Module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1178   * \param rxBuffersStartAddress Start address of Rx Buffers section in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1179   * \param rxBufferNumber Rx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1180   * \return Rx Buffer Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1181   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1182  IFX_EXTERN Ifx_CAN_RXMSG *IfxCan_Node_getRxBufferElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 rxBuffersStartAddress, IfxCan_RxBufferId rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1183  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1184  /** \brief Returns Rx FIFO 0 Data Field Size in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1185   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1186   * \return Data field size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1187   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1188  IFX_EXTERN uint8 IfxCan_Node_getRxFifo0DataFieldSize(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1189  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1190  /** \brief Returns the address of selected Rx FIFO 0 element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1191   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1192   * \param ramBaseAddress Message RAM base address of CAN Module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1193   * \param rxFifo0StartAddress Start address of Rx FIFO 0 section in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1194   * \param rxBufferNumber Rx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1195   * \return Rx FIFO 0 Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1196   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1197  IFX_EXTERN Ifx_CAN_RXMSG *IfxCan_Node_getRxFifo0ElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 rxFifo0StartAddress, IfxCan_RxBufferId rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1198  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1199  /** \brief Returns Rx FIFO 1 Data Field Size in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1200   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1201   * \return Data field size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1202   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1203  IFX_EXTERN uint8 IfxCan_Node_getRxFifo1DataFieldSize(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1204  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1205  /** \brief Returns the address of selected Rx FIFO 1 element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1206   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1207   * \param ramBaseAddress Message RAM base address of CAN Module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1208   * \param rxFifo1StartAddress Start address of Rx FIFO 1 section in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1209   * \param rxBufferNumber Rx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1210   * \return Rx FIFO 1 Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1211   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1212  IFX_EXTERN Ifx_CAN_RXMSG *IfxCan_Node_getRxFifo1ElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 rxFifo1StartAddress, IfxCan_RxBufferId rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1213  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1214  /** \brief Returns the status of whether the selcted Rx buffer has been updated from new data
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1215   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1216   * \param rxBufferId Rx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1217   * \return Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1218   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1219  IFX_EXTERN boolean IfxCan_Node_isRxBufferNewDataUpdated(Ifx_CAN_N *node, IfxCan_RxBufferId rxBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1220  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1221  /** \brief Reads data from Rx buffer element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1222   * \param rxBufferElement Rx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1223   * \param dataLengthCode DLC, Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1224   * \param data Pointer to data (in words)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1225   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1226   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1227  IFX_EXTERN void IfxCan_Node_readData(Ifx_CAN_RXMSG *rxBufferElement, IfxCan_DataLengthCode dataLengthCode, uint32 *data);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1228  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1229  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1230  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1231  /** \addtogroup IfxLld_Can_Std_Filter_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1232   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1233  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1234  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1235  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1236  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1237  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1238  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1239   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1242  IFX_INLINE void IfxCan_Node_acceptRemoteFramesWithStandardId(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1243  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1244  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1245   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1246   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1247   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1248  IFX_INLINE void IfxCan_Node_acceptRemoteFrameswithExtendedId(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1249  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1250  /** \brief Configure the filter for non matching frames with extended id.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1251   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1252   * \param filter action to be performed on non matching messages.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1253   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1254   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1255  IFX_INLINE void IfxCan_Node_configureExtendedFilterForNonMatchingFrames(Ifx_CAN_N *node, IfxCan_NonMatchingFrame filter);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1256  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1257  /** \brief Configure the filter for non matching frames with standard id.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1258   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1259   * \param filter action to be performed on non matching messages.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1260   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1261   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1262  IFX_INLINE void IfxCan_Node_configureStandardFilterForNonMatchingFrames(Ifx_CAN_N *node, IfxCan_NonMatchingFrame filter);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1263  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1264  /** \brief Reject the remote frames with extended id.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1265   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1266   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1267   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1268  IFX_INLINE void IfxCan_Node_rejectRemoteFramesWithExtendedId(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1269  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1270  /** \brief Reject the remote frames with standard id.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1271   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1272   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1273   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1274  IFX_INLINE void IfxCan_Node_rejectRemoteFramesWithStandardId(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1275  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1276  /** \brief Sets the Extended Filter Element Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1277   * \param extendedFilterElement Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1278   * \param filterElementConfiguration Filter Element Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1279   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1280   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1281  IFX_INLINE void IfxCan_Node_setExtendedFilterConfiguration(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_FilterElementConfiguration filterElementConfiguration);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1282  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1283  /** \brief Sets the Extended Filter ID 1 for Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1284   * \param extendedFilterElement Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1285   * \param id Filter ID 1
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1286   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1287   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1288  IFX_INLINE void IfxCan_Node_setExtendedFilterId1(Ifx_CAN_EXTMSG *extendedFilterElement, uint32 id);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1289  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1290  /** \brief Sets the Extended Filter ID 2 for Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1291   * \param extendedFilterElement Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1292   * \param id Filter ID 2
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1293   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1294   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1295  IFX_INLINE void IfxCan_Node_setExtendedFilterId2(Ifx_CAN_EXTMSG *extendedFilterElement, uint32 id);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1296  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1297  /** \brief Sets the Extended Message ID filter list size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1298   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1299   * \param size Number of Extended Message ID filter elements
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1300   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1301   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1302  IFX_INLINE void IfxCan_Node_setExtendedFilterListSize(Ifx_CAN_N *node, uint8 size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1303  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1304  /** \brief Sets the start address of Extended Message ID filter list (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1305   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1306   * \param address Start address of Extended Message ID filter list in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1307   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1308   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1309  IFX_INLINE void IfxCan_Node_setExtendedFilterListStartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1310  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1311  /** \brief Sets the Offset to the Rx Buffer Start Address RXBC.RBSA for storage of a matching message for Extended filter element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1312   * \param extendedFilterElement Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1313   * \param rxBufferNumber Offset to the Rx Buffer Start Address RXBC.RBSA for storage of a matching message (Rx buffer number)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1314   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1315   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1316  IFX_INLINE void IfxCan_Node_setExtendedFilterRxBufferOffset(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_RxBufferId rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1317  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1318  /** \brief Sets the Extended Filter Type for Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1319   * \param extendedFilterElement Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1320   * \param filterType Filter Type
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1321   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1322   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1323  IFX_INLINE void IfxCan_Node_setExtendedFilterType(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_FilterType filterType);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1324  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1325  /** \brief Sets the Standard Filter Element Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1326   * \param standardFilterElement Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1327   * \param filterElementConfiguration Filter Element Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1328   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1329   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1330  IFX_INLINE void IfxCan_Node_setStandardFilterConfiguration(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_FilterElementConfiguration filterElementConfiguration);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1331  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1332  /** \brief Sets the Standard Filter ID 1 for Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1333   * \param standardFilterElement Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1334   * \param id Filter ID 1
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1335   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1336   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1337  IFX_INLINE void IfxCan_Node_setStandardFilterId1(Ifx_CAN_STDMSG *standardFilterElement, uint32 id);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1338  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1339  /** \brief Sets the Standard Filter ID 2 for Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1340   * \param standardFilterElement Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1341   * \param id Filter ID 2
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1342   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1343   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1344  IFX_INLINE void IfxCan_Node_setStandardFilterId2(Ifx_CAN_STDMSG *standardFilterElement, uint32 id);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1345  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1346  /** \brief Sets the Standard  Message ID filter list size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1347   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1348   * \param size Number of Standard Message ID filter elements
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1349   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1350   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1351  IFX_INLINE void IfxCan_Node_setStandardFilterListSize(Ifx_CAN_N *node, uint8 size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1352  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1353  /** \brief Sets the start address of Standard Message ID filter list (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1354   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1355   * \param address Start address of Standard Message ID filter in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1356   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1357   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1358  IFX_INLINE void IfxCan_Node_setStandardFilterListStartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1359  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1360  /** \brief Sets the Offset to the Rx Buffer Start Address RXBC.RBSA for storage of a matching message for standard filter element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1361   * \param standardFilterElement Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1362   * \param rxBufferNumber Offset to the Rx Buffer Start Address RXBC.RBSA for storage of a matching message (Rx buffer number)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1363   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1365  IFX_INLINE void IfxCan_Node_setStandardFilterRxBufferOffset(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_RxBufferId rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1366  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1367  /** \brief Sets the Standard Filter Type for Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1368   * \param standardFilterElement Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1369   * \param filterType Filter Type
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1370   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1371   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1372  IFX_INLINE void IfxCan_Node_setStandardFilterType(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_FilterType filterType);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1373  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1374  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1375  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1376  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1377  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1378  /** \brief Returns the address of selected extended filter element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1379   * \param ramBaseAddress Message RAM base address of CAN Module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1380   * \param extendedFilterListStartAddress Start address of Extended Message ID filter list (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1381   * \param filterNumber extended filter element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1382   * \return Extended Filter Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1383   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1384  IFX_EXTERN Ifx_CAN_EXTMSG *IfxCan_Node_getExtendedFilterElementAddress(uint32 ramBaseAddress, uint16 extendedFilterListStartAddress, uint8 filterNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1385  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1386  /** \brief Returns the address of selected standard filter element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1387   * \param ramBaseAddress Message RAM base address of CAN Module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1388   * \param standardFilterListStartAddress Start address of Standard Message ID filter list (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1389   * \param filterNumber Standard filter element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1390   * \return Standard Filter Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1391   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1392  IFX_EXTERN Ifx_CAN_STDMSG *IfxCan_Node_getStandardFilterElementAddress(uint32 ramBaseAddress, uint16 standardFilterListStartAddress, uint8 filterNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1393  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1394  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1395  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1396  /** \addtogroup IfxLld_Can_Std_Interrupt_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1397   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1398  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1399  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1400  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1401  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1402  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1403  /** \brief Clears the selected interrupt Flag
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1404   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1405   * \param interrupt Type of Interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1406   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1407   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1408  IFX_INLINE void IfxCan_Node_clearInterruptFlag(Ifx_CAN_N *node, IfxCan_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1409  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1410  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1411   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1412   * \param interrupt Type of Interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1413   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1414   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1415  IFX_INLINE void IfxCan_Node_disableInterrupt(Ifx_CAN_N *node, IfxCan_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1416  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1417  /** \brief Disables the Cancellation Finished Interrupt of the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1418   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1419   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1420   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1421   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1422  IFX_INLINE void IfxCan_Node_disableTxBufferCancellationFinishedInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1423  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1424  /** \brief Disables the Transmission Interrupt of the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1425   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1426   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1427   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1428   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1429  IFX_INLINE void IfxCan_Node_disableTxBufferTransmissionInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1430  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1431  /** \brief Enables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1432   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1433   * \param interrupt Type of Interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1434   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1435   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1436  IFX_INLINE void IfxCan_Node_enableInterrupt(Ifx_CAN_N *node, IfxCan_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1437  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1438  /** \brief Enables the Cancellation Finished Interrupt of the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1439   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1440   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1441   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1442   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1443  IFX_INLINE void IfxCan_Node_enableTxBufferCancellationFinishedInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1444  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1445  /** \brief Enables the Transmission Interrupt of the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1446   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1447   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1448   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1449   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1450  IFX_INLINE void IfxCan_Node_enableTxBufferTransmissionInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1451  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1452  /** \brief Returns the status of selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1453   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1454   * \param interrupt Type of Interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1455   * \return Status TRUE / FALSE
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1456   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1457  IFX_INLINE boolean IfxCan_Node_getInterruptFlagStatus(Ifx_CAN_N *node, IfxCan_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1458  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1459  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1460  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1461  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1462  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1463  /** \brief Sets the slected interrupt to the selcted interrupt line
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1464   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1465   * \param interruptGroup Type of Interrupt group
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1466   * \param interruptLine Interrupt line number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1467   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1468   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1469  IFX_EXTERN void IfxCan_Node_setGroupInterruptLine(Ifx_CAN_N *node, IfxCan_InterruptGroup interruptGroup, IfxCan_InterruptLine interruptLine);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1470  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1471  /** \brief Sets the slected interrupt to the selcted interrupt line
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1472   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1473   * \param interrupt Type of Interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1474   * \param interruptLine Interrupt line number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1475   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1476   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1477  IFX_EXTERN void IfxCan_Node_setInterruptLine(Ifx_CAN_N *node, IfxCan_Interrupt interrupt, IfxCan_InterruptLine interruptLine);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1478  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1479  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1480  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1481  /** \addtogroup IfxLld_Can_Std_Module_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1482   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1483  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1484  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1485  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1486  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1487  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1488  /** \brief Returns the base adress of the selected Node of CAN module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1489   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1490   * \param nodeId Node number of the module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1491   * \return Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1492   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1493  IFX_INLINE Ifx_CAN_N *IfxCan_getNodePointer(Ifx_CAN *can, IfxCan_NodeId nodeId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1494  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1495  /** \brief Returns the status of module enabled or disabled
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1496   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1497   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1498   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1499  IFX_INLINE boolean IfxCan_isModuleEnabled(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1500  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1501  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1502   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1503   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1504   * \param can Pointer to CAN module registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1505   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1506   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1507  IFX_INLINE boolean IfxCan_isModuleSuspended(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1508  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1509  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1510   * \param can pointer to CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1511   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1512   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1513   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1514  IFX_INLINE void IfxCan_setSleepMode(Ifx_CAN *can, IfxCan_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1515  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1516  /** \brief Set the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1517   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1518   * \param can Pointer to CAN module registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1519   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1520   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1521   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1522  IFX_INLINE void IfxCan_setSuspendMode(Ifx_CAN *can, IfxCan_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1523  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1524  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1525  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1526  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1527  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1528  /** \brief Disables the module (sets the disable request)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1529   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1530   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1531   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1532  IFX_EXTERN void IfxCan_disableModule(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1533  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1534  /** \brief Enables the module (clears the disable request)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1535   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1536   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1537   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1538  IFX_EXTERN void IfxCan_enableModule(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1539  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1540  /**
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1541   * \param can Module index of the CAN
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1542   * \return CAN module register address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1543   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1544  IFX_EXTERN Ifx_CAN *IfxCan_getAddress(IfxCan_Index can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1545  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1546  /** \brief API to get the resource index of the CAN specified.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1547   * \return can resource index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1548   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1549  IFX_EXTERN IfxCan_Index IfxCan_getIndex(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1550  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1551  /** \brief Returns the operatinf frequency of the CAN module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1552   * \return Module Frequency
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1553   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1554  IFX_EXTERN float32 IfxCan_getModuleFrequency(void);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1555  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1556  /** \brief resets CAN kernel
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1557   * \param can pointer to CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1558   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1559   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1560  IFX_EXTERN void IfxCan_resetModule(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1561  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1562  /** \brief sets the clocksource selection
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1563   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1564   * \param clockSelect Clock selection option
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1565   * \param clockSource Type of Clock Source selection
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1566   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1567   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1568  IFX_EXTERN void IfxCan_setClockSource(Ifx_CAN *can, IfxCan_ClockSelect clockSelect, IfxCan_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1569  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1570  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1571  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1572  /** \addtogroup IfxLld_Can_Std_Tx_Event_FIFO_Element_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1573   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1574  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1575  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1576  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1577  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1578  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1579  /** \brief Returns the Bit Rate Switch (BRS) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1580   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1581   * \return Bit Rate Switch (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1582   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1583  IFX_INLINE boolean IfxCan_Node_getBRSFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1584  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1585  /** \brief Returns the Data Length Code from the Tx Event Fifo Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1586   * \param txEventFifoElement Tx Event Fifo Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1587   * \return Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1588   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1589  IFX_INLINE uint32 IfxCan_Node_getDLCFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1590  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1591  /** \brief Returns the Error State Indicator (ESI) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1592   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1593   * \return Error State Indicator
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1594   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1595  IFX_INLINE boolean IfxCan_Node_getESIFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1596  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1597  /** \brief Returns the FD Format (FDF) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1598   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1599   * \return FD format (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1600   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1601  IFX_INLINE boolean IfxCan_Node_getFDFFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1602  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1603  /** \brief Returns the Message Marker (MM) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1604   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1605   * \return Message Marker
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1606   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1607  IFX_INLINE uint8 IfxCan_Node_getMMFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1608  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1609  /** \brief Returns the identifier (ID) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1610   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1611   * \return Identifier
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1612   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1613  IFX_INLINE uint32 IfxCan_Node_getMesssageIdFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1614  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1615  /** \brief Returns the Remote Transmission Request Status (RTR) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1616   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1617   * \return Remote Transmission Request Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1618   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1619  IFX_INLINE boolean IfxCan_Node_getRTRFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1620  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1621  /** \brief Returns the Tx Time Stamp (TXTS) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1622   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1623   * \return Tx Time Stamp
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1624   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1625  IFX_INLINE uint16 IfxCan_Node_getTXTSFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1626  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1627  /** \brief Returns the Tx Event Fifo Acknowledge Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1628   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1629   * \return Returns Tx Event Fifo Acknowledge Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1630   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1631  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoAcknowledgeIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1632  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1633  /** \brief Returns the Tx Event Fifo Fill Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1634   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1635   * \return Returns Tx Event Fifo Fill Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1636   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1637  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoFillLevel(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1638  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1639  /** \brief Returns the Tx Event Fifo Get Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1640   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1641   * \return Returns Tx Event Fifo Get Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1642   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1643  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoGetIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1644  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1645  /** \brief Returns the Tx Event Fifo Put Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1646   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1647   * \return Returns Tx Event Fifo Put Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1648   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1649  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoPutIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1650  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1651  /** \brief Returns Tx Event Fifo Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1652   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1653   * \return Tx Event Fifo Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1654   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1655  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoSize(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1656  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1657  /** \brief Returns Tx Event Fifo Start Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1658   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1659   * \return Tx Event Fifo Start Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1660   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1661  IFX_INLINE uint16 IfxCan_Node_getTxEventFifoStartAddress(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1662  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1663  /** \brief Returns Tx Event Fifo Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1664   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1665   * \return Tx Event Fifo Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1666   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1667  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoWatermarkLevel(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1668  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1669  /** \brief Returns the status of Tx Event Fifo Element lost
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1670   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1671   * \return Returns status of Tx Event Fifo Element Lost\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1672   * True : elemnt lost\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1673   * False : element not lost
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1674   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1675  IFX_INLINE boolean IfxCan_Node_isTxEventFifoElementLost(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1676  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1677  /** \brief Returns the status of Tx Event Fifo Full
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1678   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1679   * \return Returns status of Tx Event Fifo Full\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1680   * True : Fifo full\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1681   * False : Fifo not full
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1682   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1683  IFX_INLINE boolean IfxCan_Node_isTxEventFifoFull(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1684  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1685  /** \brief Sets Tx Event Fifo Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1686   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1687   * \param size Tx Event Fifo Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1688   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1689   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1690  IFX_INLINE void IfxCan_Node_setTxEventFifoSize(Ifx_CAN_N *node, uint8 size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1691  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1692  /** \brief Sets Tx Event Fifo Start Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1693   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1694   * \param address Tx Event Fifo Start Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1695   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1696   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1697  IFX_INLINE void IfxCan_Node_setTxEventFifoStartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1698  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1699  /** \brief Sets Tx Event Fifo Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1700   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1701   * \param level Tx Event Fifo Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1702   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1703   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1704  IFX_INLINE void IfxCan_Node_setTxEventFifoWatermarkLevel(Ifx_CAN_N *node, uint8 level);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1705  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1706  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1707  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1708  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1709  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1710  /** \brief Returns CAN frame mode of operation for a Tx Event Fifo Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1711   * \param txEventFifoElement Tx Event Fifo Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1712   * \return CAN frame mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1713   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1714  IFX_EXTERN IfxCan_FrameMode IfxCan_Node_getFrameModeFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1715  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1716  /** \brief Returns the address of selected Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1717   * \param ramBaseAddress Message RAM base address of CAN module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1718   * \param txEventFifoStartAddress Start address of Tx Event Fifo section in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1719   * \param txEventFifoNumber Tx Event Fifo element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1720   * \return Tx Event Fifo Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1721   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1722  IFX_EXTERN Ifx_CAN_TXEVENT *IfxCan_Node_getTxEventFifoElementAddress(uint32 ramBaseAddress, uint16 txEventFifoStartAddress, uint8 txEventFifoNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1723  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1724  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1725  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1726  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1727  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1728  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1729  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1730  /** \brief CAN frame format of the last received message.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1731   * TRUE: CAN FD frame received
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1732   * FALSE: CAN FD frame not received
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1733   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1734   * \return CAN Frame format (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1735   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1736  IFX_INLINE boolean IfxCan_Node_isCanFDMsgReceived(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1737  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1738  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1739  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1740  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1741  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1742  /** \brief Returns the address of interrupt node source register
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1743   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1744   * \param interruptLine Interrupt line number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1745   * \return Address of interrupt node source register
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1746   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1747  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxCan_getSrcPointer(Ifx_CAN *can, IfxCan_InterruptLine interruptLine);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1748  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1749  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1750  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1751  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1752  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1753  IFX_INLINE void IfxCan_Node_acceptRemoteFramesWithStandardId(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1754  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1755      node->GFC.B.RRFS = 0U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1756  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1757  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1758  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1759  IFX_INLINE void IfxCan_Node_acceptRemoteFrameswithExtendedId(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1760  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1761      node->GFC.B.RRFE = 0U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1762  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1763  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1764  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1765  IFX_INLINE void IfxCan_Node_clearInterruptFlag(Ifx_CAN_N *node, IfxCan_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1766  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1767      uint32 value = (1U << interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1768      node->IR.U = value;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1770  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1771  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1772  IFX_INLINE void IfxCan_Node_configureExtendedFilterForNonMatchingFrames(Ifx_CAN_N *node, IfxCan_NonMatchingFrame filter)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1774      node->GFC.B.ANFE = filter;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1776  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1777  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1778  IFX_INLINE void IfxCan_Node_configureStandardFilterForNonMatchingFrames(Ifx_CAN_N *node, IfxCan_NonMatchingFrame filter)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1780      node->GFC.B.ANFS = filter;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1782  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1783  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1784  IFX_INLINE void IfxCan_Node_disableConfigurationChange(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1786      node->CCCR.B.CCE = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1787  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1788      while (node->CCCR.B.CCE != 0)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1789      {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1790  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1791      node->CCCR.B.INIT = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1792  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1793      while (node->CCCR.B.INIT != 0)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1794      {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1795  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1796  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1797  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1798  IFX_INLINE void IfxCan_Node_disableInterrupt(Ifx_CAN_N *node, IfxCan_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1799  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1800      uint32 mask = (1U << interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1801      node->IE.U = node->IE.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1802  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1803  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1804  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1805  IFX_INLINE void IfxCan_Node_disableTxBufferCancellationFinishedInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1806  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1807      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1808      node->TX.BCIE.U = node->TX.BCIE.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1809  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1810  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1811  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1812  IFX_INLINE void IfxCan_Node_disableTxBufferTransmissionInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1813  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1814      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1815      node->TX.BTIE.U = node->TX.BTIE.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1816  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1817  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1818  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1819  IFX_INLINE void IfxCan_Node_enableConfigurationChange(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1820  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1821      Ifx_CAN_N_CCCR cccr;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1822  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1823      /* If INIT already set, clear it before setting again. */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1824      /* The module needs some time if INIT was rewritten !*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1825      if (node->CCCR.B.INIT == 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1826      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1827          node->CCCR.B.CCE = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1828  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1829          while (node->CCCR.B.CCE != 0)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1830          {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1831  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1832          node->CCCR.B.INIT = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1833  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1834          while (node->CCCR.B.INIT != 0)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1835          {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1836      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1837  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1838      node->CCCR.B.INIT = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1839  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1840      while (node->CCCR.B.INIT != 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1841      {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1842  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1843      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1844          cccr.U       = node->CCCR.U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1845          cccr.B.INIT  = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1846          cccr.B.CCE   = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1847          node->CCCR.U = cccr.U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1848      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1849  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1850  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1851  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1852  IFX_INLINE void IfxCan_Node_enableInterrupt(Ifx_CAN_N *node, IfxCan_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1853  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1854      uint32 mask = (1U << interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1855      node->IE.U = node->IE.U | (mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1856  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1857  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1858  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1859  IFX_INLINE void IfxCan_Node_enableLoopbackMode(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1860  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1861      node->NPCR.B.LBM = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1862  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1863  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1864  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1865  IFX_INLINE void IfxCan_Node_enableTxBufferCancellationFinishedInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1866  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1867      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1868      node->TX.BCIE.U = node->TX.BCIE.U | (mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1869  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1870  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1871  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1872  IFX_INLINE void IfxCan_Node_enableTxBufferTransmissionInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1873  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1874      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1875      node->TX.BTIE.U = node->TX.BTIE.U | (mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1876  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1877  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1878  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1879  IFX_INLINE boolean IfxCan_Node_getBRSFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1880  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1881      return txEventFifoElement->E1.B.BRS;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1882  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1883  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1884  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1885  IFX_INLINE uint32 IfxCan_Node_getDLCFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1886  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1887      return (IfxCan_DataLengthCode)txEventFifoElement->E1.B.DLC;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1888  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1889  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1890  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1891  IFX_INLINE uint32 IfxCan_Node_getDataLengthCode(Ifx_CAN_RXMSG *rxBufferElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1892  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1893      return (IfxCan_DataLengthCode)rxBufferElement->R1.B.DLC;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1894  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1895  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1896  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1897  IFX_INLINE boolean IfxCan_Node_getESIFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1898  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1899      return txEventFifoElement->E0.B.ESI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1900  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1901  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1902  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1903  IFX_INLINE boolean IfxCan_Node_getFDFFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1904  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1905      return txEventFifoElement->E1.B.FDF;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1906  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1907  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1908  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1909  IFX_INLINE boolean IfxCan_Node_getInterruptFlagStatus(Ifx_CAN_N *node, IfxCan_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1910  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1911      uint32  mask   = (1U << interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1912      boolean status = (node->IR.U & mask) != 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1913      return status;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1914  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1915  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1916  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1917  IFX_INLINE uint8 IfxCan_Node_getMMFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1918  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1919      return (uint8)txEventFifoElement->E1.B.MM;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1920  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1921  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1922  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1923  IFX_INLINE uint32 IfxCan_Node_getMesssageId(Ifx_CAN_RXMSG *rxBufferElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1924  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1925      /* get identifier extention */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1926      IfxCan_MessageIdLength messageIdLength = (IfxCan_MessageIdLength)rxBufferElement->R0.B.XTD;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1927  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1928      /* get identifier */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1929      return rxBufferElement->R0.B.ID >> ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1930  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1931  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1932  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1933  IFX_INLINE uint32 IfxCan_Node_getMesssageIdFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1934  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1935      /* get identifier extention */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1936      IfxCan_MessageIdLength messageIdLength = (IfxCan_MessageIdLength)txEventFifoElement->E0.B.XTD;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1937  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1938      /* get identifier */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1939      return txEventFifoElement->E0.B.ID >> ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1940  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1941  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1942  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1943  IFX_INLINE boolean IfxCan_Node_getRTRFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1944  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1945      return txEventFifoElement->E0.B.RTR;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1946  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1947  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1948  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1949  IFX_INLINE uint8 IfxCan_Node_getRxFifo0FillLevel(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1950  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1951      return node->RX.F0S.B.F0FL;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1952  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1953  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1954  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1955  IFX_INLINE IfxCan_RxBufferId IfxCan_Node_getRxFifo0GetIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1956  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1957      return (IfxCan_RxBufferId)node->RX.F0S.B.F0GI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1958  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1959  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1960  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1961  IFX_INLINE uint8 IfxCan_Node_getRxFifo1FillLevel(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1962  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1963      return node->RX.F1S.B.F1FL;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1964  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1965  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1966  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1967  IFX_INLINE IfxCan_RxBufferId IfxCan_Node_getRxFifo1GetIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1968  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1969      return (IfxCan_RxBufferId)node->RX.F1S.B.F1GI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1970  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1971  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1972  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1973  IFX_INLINE uint16 IfxCan_Node_getTXTSFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1974  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1975      return (uint16)txEventFifoElement->E1.B.TXTS;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1976  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1977  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1978  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1979  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoAcknowledgeIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1980  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1981      return (uint8)node->TX.EFA.B.EFAI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1982  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1983  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1984  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1985  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoFillLevel(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1986  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1987      return (uint8)node->TX.EFS.B.EFFL;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1988  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1989  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1990  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1991  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoGetIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1992  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1993      return (uint8)node->TX.EFS.B.EFGI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1994  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1995  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1996  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1997  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoPutIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1998  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1999      return (uint8)node->TX.EFS.B.EFPI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2000  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2001  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2002  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2003  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoSize(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2004  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2005      return (uint8)node->TX.EFC.B.EFS;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2006  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2007  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2008  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2009  IFX_INLINE uint16 IfxCan_Node_getTxEventFifoStartAddress(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2010  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2011      return (uint16)node->TX.EFC.B.EFSA;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2012  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2013  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2014  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2015  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoWatermarkLevel(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2016  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2017      return (uint8)node->TX.EFC.B.EFWM;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2018  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2019  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2020  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2021  IFX_INLINE IfxCan_TxBufferId IfxCan_Node_getTxFifoQueuePutIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2022  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2023      return (IfxCan_TxBufferId)node->TX.FQS.B.TFQPI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2024  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2025  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2026  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2027  IFX_INLINE boolean IfxCan_Node_isNodeSynchronized(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2028  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2029      return (boolean)((node->PSR.B.ACT != 0) ? 1 : 0);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2030  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2031  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2032  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2033  IFX_INLINE boolean IfxCan_Node_isTxBufferCancellationFinished(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2034  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2035      uint32  mask    = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2036      boolean tempVar = (boolean)(node->TX.BTO.U & mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2037      return tempVar;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2038  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2039  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2040  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2041  IFX_INLINE boolean IfxCan_Node_isTxBufferRequestPending(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2042  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2043      uint32  mask    = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2044      boolean tempVar = (boolean)(node->TX.BRP.U & mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2045      return tempVar;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2046  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2047  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2048  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2049  IFX_INLINE boolean IfxCan_Node_isTxBufferTransmissionOccured(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2050  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2051      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2052      return (boolean)(node->TX.BTO.U & mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2053  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2054  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2055  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2056  IFX_INLINE boolean IfxCan_Node_isTxEventFifoElementLost(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2057  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2058      return node->TX.EFS.B.TEFL;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2059  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2060  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2061  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2062  IFX_INLINE boolean IfxCan_Node_isTxEventFifoFull(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2063  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2064      return node->TX.EFS.B.EFF;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2065  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2066  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2067  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2068  IFX_INLINE boolean IfxCan_Node_isTxFifoQueueFull(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2069  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2070      return node->TX.FQS.B.TFQF;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2071  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2072  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2073  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2074  IFX_INLINE void IfxCan_Node_pauseTransmission(Ifx_CAN_N *node, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2075  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2076      node->CCCR.B.TXP = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2077  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2078  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2079  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2080  IFX_INLINE void IfxCan_Node_rejectRemoteFramesWithExtendedId(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2081  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2082      node->GFC.B.RRFE = 1U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2083  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2084  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2085  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2086  IFX_INLINE void IfxCan_Node_rejectRemoteFramesWithStandardId(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2087  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2088      node->GFC.B.RRFS = 1U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2089  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2090  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2091  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2092  IFX_INLINE void IfxCan_Node_setDataLength(Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2093  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2094      txBufferElement->T1.B.DLC = dataLengthCode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2095  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2096  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2097  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2098  IFX_INLINE void IfxCan_Node_setDataLengthCode(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2099  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2100      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2101      txBufferElement->T1.B.DLC = dataLengthCode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2102  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2103  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2104  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2105  IFX_INLINE void IfxCan_Node_setDedicatedTxBuffersNumber(Ifx_CAN_N *node, uint8 number)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2106  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2107      node->TX.BC.B.NDTB = number;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2108  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2109  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2110  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2111  IFX_INLINE void IfxCan_Node_setErrStateIndicator(Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2112  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2113      txBufferElement->T0.B.ESI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2114  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2115  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2116  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2117  IFX_INLINE void IfxCan_Node_setErrorStateIndicator(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2118  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2119      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2120      txBufferElement->T0.B.ESI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2121  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2122  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2123  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2124  IFX_INLINE void IfxCan_Node_setExtendedFilterConfiguration(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_FilterElementConfiguration filterElementConfiguration)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2125  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2126      extendedFilterElement->F0.B.EFEC = filterElementConfiguration;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2127  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2128  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2129  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2130  IFX_INLINE void IfxCan_Node_setExtendedFilterId1(Ifx_CAN_EXTMSG *extendedFilterElement, uint32 id)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2131  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2132      extendedFilterElement->F0.B.EFID1 = id;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2133  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2134  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2135  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2136  IFX_INLINE void IfxCan_Node_setExtendedFilterId2(Ifx_CAN_EXTMSG *extendedFilterElement, uint32 id)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2137  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2138      extendedFilterElement->F1.B.EFID2 = id;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2139  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2140  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2141  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2142  IFX_INLINE void IfxCan_Node_setExtendedFilterListSize(Ifx_CAN_N *node, uint8 size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2143  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2144      node->XIDFC.B.LSE = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2145  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2146  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2147  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2148  IFX_INLINE void IfxCan_Node_setExtendedFilterListStartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2149  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2150      node->XIDFC.B.FLESA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2151  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2152  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2153  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2154  IFX_INLINE void IfxCan_Node_setExtendedFilterRxBufferOffset(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_RxBufferId rxBufferNumber)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2155  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2156      extendedFilterElement->F1.B.EFID2 = (uint8)rxBufferNumber;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2157  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2158  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2159  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2160  IFX_INLINE void IfxCan_Node_setExtendedFilterType(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_FilterType filterType)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2161  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2162      extendedFilterElement->F1.B.EFT = filterType;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2163  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2164  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2165  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2166  IFX_INLINE void IfxCan_Node_setInitialisation(Ifx_CAN_N *node, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2167  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2168      node->CCCR.B.INIT = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2169  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2170  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2171  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2172  IFX_INLINE void IfxCan_Node_setMessageMarker(Ifx_CAN_TXMSG *txBufferElement, IfxCan_TxBufferId bufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2173  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2174      txBufferElement->T1.B.MM = bufferId;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2175  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2176  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2177  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2178  IFX_INLINE void IfxCan_Node_setMsgId(Ifx_CAN_TXMSG *txBufferElement, uint32 messageId, IfxCan_MessageIdLength messageIdLength)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2179  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2180      /* set identifier extention */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2181      txBufferElement->T0.B.XTD = (messageIdLength != IfxCan_MessageIdLength_extended) ? 0 : 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2182      /* set identifier */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2183      txBufferElement->T0.B.ID  = messageId << ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2184  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2185  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2186  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2187  IFX_INLINE void IfxCan_Node_setMesssageId(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, uint32 messageId, IfxCan_MessageIdLength messageIdLength)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2188  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2189      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2190      /* set identifier extention */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2191      txBufferElement->T0.B.XTD = (messageIdLength != IfxCan_MessageIdLength_extended) ? 0 : 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2192      /* set identifier */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2193      txBufferElement->T0.B.ID  = messageId << ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2194  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2195  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2196  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2197  IFX_INLINE void IfxCan_Node_setRemoteTransmitReq(Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2198  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2199      txBufferElement->T0.B.RTR = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2200  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2201  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2202  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2203  IFX_INLINE void IfxCan_Node_setRemoteTransmitRequest(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2204  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2205      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2206      txBufferElement->T0.B.RTR = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2207  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2208  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2209  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2210  IFX_INLINE void IfxCan_Node_setRxBufferDataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2211  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2212      node->RX.ESC.B.RBDS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2213  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2214  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2215  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2216  IFX_INLINE void IfxCan_Node_setRxBuffersStartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2217  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2218      node->RX.BC.B.RBSA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2219  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2220  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2221  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2222  IFX_INLINE void IfxCan_Node_setRxFifo0AcknowledgeIndex(Ifx_CAN_N *node, IfxCan_RxBufferId RxBufferNumber)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2223  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2224      node->RX.F0A.B.F0AI = RxBufferNumber;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2225  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2226  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2227  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2228  IFX_INLINE void IfxCan_Node_setRxFifo0DataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2229  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2230      node->RX.ESC.B.F0DS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2231  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2232  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2233  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2234  IFX_INLINE void IfxCan_Node_setRxFifo0OperatingMode(Ifx_CAN_N *node, IfxCan_RxFifoMode mode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2235  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2236      node->RX.F0C.B.F0OM = mode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2237  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2238  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2239  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2240  IFX_INLINE void IfxCan_Node_setRxFifo0Size(Ifx_CAN_N *node, uint8 size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2241  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2242      node->RX.F0C.B.F0S = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2243  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2244  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2245  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2246  IFX_INLINE void IfxCan_Node_setRxFifo0StartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2247  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2248      node->RX.F0C.B.F0SA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2249  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2250  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2251  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2252  IFX_INLINE void IfxCan_Node_setRxFifo0WatermarkLevel(Ifx_CAN_N *node, uint8 level)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2253  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2254      node->RX.F0C.B.F0WM = level;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2255  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2256  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2257  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2258  IFX_INLINE void IfxCan_Node_setRxFifo1AcknowledgeIndex(Ifx_CAN_N *node, IfxCan_RxBufferId RxBufferNumber)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2259  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2260      node->RX.F1A.B.F1AI = RxBufferNumber;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2261  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2262  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2263  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2264  IFX_INLINE void IfxCan_Node_setRxFifo1DataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2265  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2266      node->RX.ESC.B.F1DS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2267  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2268  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2269  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2270  IFX_INLINE void IfxCan_Node_setRxFifo1OperatingMode(Ifx_CAN_N *node, IfxCan_RxFifoMode mode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2271  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2272      node->RX.F1C.B.F1OM = mode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2273  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2274  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2275  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2276  IFX_INLINE void IfxCan_Node_setRxFifo1Size(Ifx_CAN_N *node, uint8 size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2277  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2278      node->RX.F1C.B.F1S = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2279  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2280  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2281  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2282  IFX_INLINE void IfxCan_Node_setRxFifo1StartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2283  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2284      node->RX.F1C.B.F1SA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2285  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2286  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2287  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2288  IFX_INLINE void IfxCan_Node_setRxFifo1WatermarkLevel(Ifx_CAN_N *node, uint8 level)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2289  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2290      node->RX.F1C.B.F1WM = level;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2291  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2292  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2293  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2294  IFX_INLINE void IfxCan_Node_setStandardFilterConfiguration(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_FilterElementConfiguration filterElementConfiguration)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2295  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2296      standardFilterElement->S0.B.SFEC = filterElementConfiguration;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2297  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2298  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2299  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2300  IFX_INLINE void IfxCan_Node_setStandardFilterId1(Ifx_CAN_STDMSG *standardFilterElement, uint32 id)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2301  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2302      standardFilterElement->S0.B.SFID1 = id;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2303  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2304  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2305  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2306  IFX_INLINE void IfxCan_Node_setStandardFilterId2(Ifx_CAN_STDMSG *standardFilterElement, uint32 id)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2307  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2308      standardFilterElement->S0.B.SFID2 = id;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2309  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2310  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2311  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2312  IFX_INLINE void IfxCan_Node_setStandardFilterListSize(Ifx_CAN_N *node, uint8 size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2313  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2314      node->SIDFC.B.LSS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2315  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2316  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2317  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2318  IFX_INLINE void IfxCan_Node_setStandardFilterListStartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2319  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2320      node->SIDFC.B.FLSSA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2321  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2322  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2323  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2324  IFX_INLINE void IfxCan_Node_setStandardFilterRxBufferOffset(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_RxBufferId rxBufferNumber)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2325  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2326      standardFilterElement->S0.B.SFID2 = (uint8)rxBufferNumber;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2327  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2328  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2329  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2330  IFX_INLINE void IfxCan_Node_setStandardFilterType(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_FilterType filterType)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2331  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2332      standardFilterElement->S0.B.SFT = filterType;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2333  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2334  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2335  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2336  IFX_INLINE void IfxCan_Node_setTransceiverDelayCompensationOffset(Ifx_CAN_N *node, uint8 delay)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2337  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2338      /* enable Transceiver Delay Compensation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2339      node->DBTP.B.TDC  = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2340      /* set Transceiver Delay Compensation offset */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2341      node->TDCR.B.TDCO = delay;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2342  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2343  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2344  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2345  IFX_INLINE void IfxCan_Node_setTransmitFifoQueueMode(Ifx_CAN_N *node, IfxCan_TxMode mode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2346  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2347      if ((mode == IfxCan_TxMode_fifo) || (mode == IfxCan_TxMode_queue))
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2348      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2349          node->TX.BC.B.TFQM = mode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2350      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2351      else
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2352      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2353          IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE); /* wrong selection  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2354      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2355  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2356  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2357  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2358  IFX_INLINE void IfxCan_Node_setTransmitFifoQueueSize(Ifx_CAN_N *node, uint8 number)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2359  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2360      node->TX.BC.B.TFQS = number;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2361  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2362  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2363  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2364  IFX_INLINE void IfxCan_Node_setTxBufferAddRequest(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2365  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2366      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2367      node->TX.BAR.U = node->TX.BAR.U | (mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2368  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2369  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2370  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2371  IFX_INLINE void IfxCan_Node_setTxBufferCancellationRequest(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2372  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2373      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2374      node->TX.BCR.U = node->TX.BCR.U | (mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2375  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2376  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2377  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2378  IFX_INLINE void IfxCan_Node_setTxBufferDataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2379  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2380      node->TX.ESC.B.TBDS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2381  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2382  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2383  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2384  IFX_INLINE void IfxCan_Node_setTxBuffersStartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2385  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2386      node->TX.BC.B.TBSA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2387  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2388  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2389  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2390  IFX_INLINE void IfxCan_Node_setTxEventFifoCtrl(Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2391  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2392      txBufferElement->T1.B.EFC = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2393  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2394  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2395  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2396  IFX_INLINE void IfxCan_Node_setTxEventFifoControl(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2397  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2398      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2399      txBufferElement->T1.B.EFC = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2400  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2401  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2402  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2403  IFX_INLINE void IfxCan_Node_setTxEventFifoSize(Ifx_CAN_N *node, uint8 size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2404  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2405      node->TX.EFC.B.EFS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2406  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2407  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2408  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2409  IFX_INLINE void IfxCan_Node_setTxEventFifoStartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2410  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2411      node->TX.EFC.B.EFSA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2412  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2413  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2414  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2415  IFX_INLINE void IfxCan_Node_setTxEventFifoWatermarkLevel(Ifx_CAN_N *node, uint8 level)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2416  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2417      node->TX.EFC.B.EFWM = level;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2418  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2419  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2420  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2421  IFX_INLINE Ifx_CAN_N *IfxCan_getNodePointer(Ifx_CAN *can, IfxCan_NodeId nodeId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2422  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2423      return &(can->N[nodeId]);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2424  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2425  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2426  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2427  IFX_INLINE boolean IfxCan_isModuleEnabled(Ifx_CAN *can)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2428  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2429      return can->CLC.B.DISS == 0;
	fcall	.cocofun_15
	lea	a15,[a3]-32768

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   897  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   898      /*Wait until module is disabled*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   899      while (IfxCan_isModuleEnabled(can) == TRUE)
.L147:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     2   * \file IfxCan.h
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     3   * \brief CAN  basic functionality
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     4   * \ingroup IfxLld_Can
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     5   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     8   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     9   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    11   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    16   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    18   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    25   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    32   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    40   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    41   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    42   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    43   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    44   * \defgroup IfxLld_Can_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    45   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    46   * \defgroup IfxLld_Can_Std_Data_Structures Data Structures
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    47   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    48   * \defgroup IfxLld_Can_Std_Node_Functions Node Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    49   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    50   * \defgroup IfxLld_Can_Std_Tx_Element_Functions Tx Element Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    51   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    52   * \defgroup IfxLld_Can_Std_Rx_Element_Functions Rx Element Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    53   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    54   * \defgroup IfxLld_Can_Std_Filter_Functions Filter Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    55   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    56   * \defgroup IfxLld_Can_Std_Interrupt_Functions Interrupt Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    57   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    58   * \defgroup IfxLld_Can_Std_Module_Functions Module Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    59   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    60   * \defgroup IfxLld_Can_Std_Tx_Event_FIFO_Element_Functions Tx Event FIFO Element Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    61   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    62   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    63  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    64  #ifndef IFXCAN_H
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    65  #define IFXCAN_H 1
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    66  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    67  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    68  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    69  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    70  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    71  #include "_Impl/IfxCan_cfg.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    72  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    73  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    74  #include "_PinMap/IfxCan_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    75  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    76  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    77  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    78  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    79  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    80  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    81  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    82  /** \addtogroup IfxLld_Can_Std_Enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    83   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    84  /** \brief Status of warning limit for error counters in CAN node
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    85   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    86  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    87  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    88      IfxCan_CanNodeErrorWarningLimitStatus_notReached = 0,  /**< \brief Error counters are below the warning limit */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    89      IfxCan_CanNodeErrorWarningLimitStatus_reached    = 1   /**< \brief Error counter reached the warning limit */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    90  } IfxCan_CanNodeErrorWarningLimitStatus;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    91  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    92  /** \brief Clock selection option\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    93   * Description in Ifx_CAN.MCR.CLKSELx, (x = 0,1,2)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    94   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    95  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    96  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    97      IfxCan_ClockSelect_0,     /**< \brief clock selection 0  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    98      IfxCan_ClockSelect_1,     /**< \brief clock selection 1  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    99      IfxCan_ClockSelect_2,     /**< \brief clock selection 2  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   100      IfxCan_ClockSelect_3      /**< \brief clock selection 3  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   101  } IfxCan_ClockSelect;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   102  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   103  /** \brief Type of Clock Source selection\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   104   * Description in Ifx_CAN.MCR.CLKSELx, (x = 0,1,2)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   105   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   106  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   107  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   108      IfxCan_ClockSource_noClock      = 0,  /**< \brief No clock is switched on */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   109      IfxCan_ClockSource_asynchronous = 1,  /**< \brief The Asynchronous clock source is switched on */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   110      IfxCan_ClockSource_synchronous  = 2,  /**< \brief The Synchronous clock source is switched on */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   111      IfxCan_ClockSource_both         = 3   /**< \brief Both clock sources are switched on */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   112  } IfxCan_ClockSource;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   113  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   114  /** \brief Data Field Size\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   115   * Definition in Ifx_CAN.N[x]TX.ESC.B.TBDS, Ifx_CAN.N[x].RX.ESC.B.RBDS, Ifx_CAN.N[x].RX.ESC.B.FyDS (x= 0,1,2,3; y = 0, 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   116   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   117  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   118  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   119      IfxCan_DataFieldSize_8,      /**< \brief 8 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   120      IfxCan_DataFieldSize_12,     /**< \brief 12 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   121      IfxCan_DataFieldSize_16,     /**< \brief 16 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   122      IfxCan_DataFieldSize_20,     /**< \brief 20 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   123      IfxCan_DataFieldSize_24,     /**< \brief 24 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   124      IfxCan_DataFieldSize_32,     /**< \brief 32 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   125      IfxCan_DataFieldSize_48,     /**< \brief 48 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   126      IfxCan_DataFieldSize_64      /**< \brief 64 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   127  } IfxCan_DataFieldSize;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   128  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   129  /** \brief Data Length code of the Message
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   130   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   131  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   132  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   133      IfxCan_DataLengthCode_0,      /**< \brief 0 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   134      IfxCan_DataLengthCode_1,      /**< \brief 1 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   135      IfxCan_DataLengthCode_2,      /**< \brief 2 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   136      IfxCan_DataLengthCode_3,      /**< \brief 3 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   137      IfxCan_DataLengthCode_4,      /**< \brief 4 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   138      IfxCan_DataLengthCode_5,      /**< \brief 5 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   139      IfxCan_DataLengthCode_6,      /**< \brief 6 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   140      IfxCan_DataLengthCode_7,      /**< \brief 7 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   141      IfxCan_DataLengthCode_8,      /**< \brief 8 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   142      IfxCan_DataLengthCode_12,     /**< \brief 12 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   143      IfxCan_DataLengthCode_16,     /**< \brief 16 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   144      IfxCan_DataLengthCode_20,     /**< \brief 20 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   145      IfxCan_DataLengthCode_24,     /**< \brief 24 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   146      IfxCan_DataLengthCode_32,     /**< \brief 32 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   147      IfxCan_DataLengthCode_48,     /**< \brief 48 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   148      IfxCan_DataLengthCode_64      /**< \brief 64 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   149  } IfxCan_DataLengthCode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   150  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   151  /** \brief Filter Element Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   152   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   154  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   155      IfxCan_FilterElementConfiguration_disable,                     /**< \brief Disable filter element */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   156      IfxCan_FilterElementConfiguration_storeInRxFifo0,              /**< \brief Store in Rx FIFO 0 if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   157      IfxCan_FilterElementConfiguration_storeInRxFifo1,              /**< \brief Store in Rx FIFO 1 if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   158      IfxCan_FilterElementConfiguration_rejectId,                    /**< \brief Reject ID if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   159      IfxCan_FilterElementConfiguration_setPriority,                 /**< \brief Set priority if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   160      IfxCan_FilterElementConfiguration_setPriorityAndStoreInFifo0,  /**< \brief Set priority and store in FIFO 0 if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   161      IfxCan_FilterElementConfiguration_setPriorityAndStoreInFifo1,  /**< \brief Set priority and store in FIFO 1 if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   162      IfxCan_FilterElementConfiguration_storeInRxBuffer              /**< \brief Store into Rx Buffer */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   163  } IfxCan_FilterElementConfiguration;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   164  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   165  /** \brief Filter Type
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   166   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   167  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   168  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   169      IfxCan_FilterType_range,    /**< \brief Range filter from SF1ID to SF2ID (SF2ID is greater than SF1ID) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   170      IfxCan_FilterType_dualId,   /**< \brief Dual ID filter for SF1ID or SF2ID */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   171      IfxCan_FilterType_classic,  /**< \brief Classic filter: SF1ID = filter, SF2ID = mask */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   172      IfxCan_FilterType_none      /**< \brief Reserved */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   173  } IfxCan_FilterType;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   174  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   175  /** \brief CAN Frame mode\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   176   * Description in Ifx_CAN.N[x].CCCR.CME, (x= 0 to 3)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   177   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   178  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   179  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   180      IfxCan_FrameMode_standard,      /**< \brief Standard CAN frame (transmit and receive) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   181      IfxCan_FrameMode_fdLong,        /**< \brief CAN FD long frame in transmit and CAN FD long and fast frame in receive */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   182      IfxCan_FrameMode_fdLongAndFast  /**< \brief CAN FD long and fast frames (transmit and receive) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   183  } IfxCan_FrameMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   184  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   185  /** \brief CAN frame type
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   186   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   187  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   188  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   189      IfxCan_FrameType_receive,             /**< \brief Data frame is received */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   190      IfxCan_FrameType_transmit,            /**< \brief Data frame is generated */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   191      IfxCan_FrameType_transmitAndReceive,  /**< \brief for both transmit and receive frames */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   192      IfxCan_FrameType_remoteRequest,       /**< \brief Remote request frame is generated */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   193      IfxCan_FrameType_remoteAnswer         /**< \brief Answer frame is generated on reception of the corresponding remote request */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   194  } IfxCan_FrameType;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   195  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   196  /** \brief Type of interrupt\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   197   * Definition in Ifx_CAN.N[x].IE, Ifx_CAN.N[x].IR, Ifx_CAN.N[x].ILS, (x= 0 to 3)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   198   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   199  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   200  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   201      IfxCan_Interrupt_rxFifo0NewMessage,                 /**< \brief Rx FIFO 0 New Message Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   202      IfxCan_Interrupt_rxFifo0WatermarkReached,           /**< \brief Rx FIFO 0 Watermark Reached Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   203      IfxCan_Interrupt_rxFifo0Full,                       /**< \brief Rx FIFO 0 Full Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   204      IfxCan_Interrupt_rxFifo0MessageLost,                /**< \brief Rx FIFO 0 Message Lost Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   205      IfxCan_Interrupt_rxFifo1NewMessage,                 /**< \brief Rx FIFO 1 New Message Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   206      IfxCan_Interrupt_rxFifo1WatermarkReached,           /**< \brief Rx FIFO 1 Watermark Reached Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   207      IfxCan_Interrupt_rxFifo1Full,                       /**< \brief Rx FIFO 1 Full Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   208      IfxCan_Interrupt_rxFifo1MessageLost,                /**< \brief Rx FIFO 1 Message Lost Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   209      IfxCan_Interrupt_highPriorityMessage,               /**< \brief High Priority Message Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   210      IfxCan_Interrupt_transmissionCompleted,             /**< \brief Transmission Completed Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   211      IfxCan_Interrupt_transmissionCancellationFinished,  /**< \brief Transmission Cancellation Finished Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   212      IfxCan_Interrupt_txFifoEmpty,                       /**< \brief Tx FIFO Empty Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   213      IfxCan_Interrupt_txEventFifoNewEntry,               /**< \brief Tx Event FIFO New Entry Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   214      IfxCan_Interrupt_txEventFifoWatermarkReached,       /**< \brief Tx Event FIFO Watermark Reached Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   215      IfxCan_Interrupt_txEventFifoFull,                   /**< \brief Tx Event FIFO Full Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   216      IfxCan_Interrupt_txEventFifoEventLost,              /**< \brief Tx Event FIFO Event Lost Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   217      IfxCan_Interrupt_timestampWraparound,               /**< \brief Timestamp Wraparound Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   218      IfxCan_Interrupt_messageRAMAccessFailure,           /**< \brief Message RAM Access Failure Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   219      IfxCan_Interrupt_timeoutOccurred,                   /**< \brief Timeout Occurred Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   220      IfxCan_Interrupt_messageStoredToDedicatedRxBuffer,  /**< \brief Message stored to Dedicated Rx Buffer Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   221      IfxCan_Interrupt_bitErrorCorrected,                 /**< \brief Bit Error Corrected Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   222      IfxCan_Interrupt_bitErrorUncorrected,               /**< \brief Bit Error Uncorrected Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   223      IfxCan_Interrupt_errorLoggingOverflow,              /**< \brief Error Logging Overflow Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   224      IfxCan_Interrupt_errorPassive,                      /**< \brief Error Passive Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   225      IfxCan_Interrupt_warningStatus,                     /**< \brief Warning Status Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   226      IfxCan_Interrupt_busOffStatus,                      /**< \brief Bus_Off Status Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   227      IfxCan_Interrupt_watchdog,                          /**< \brief Watchdog Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   228      IfxCan_Interrupt_protocolErrorArbitration,          /**< \brief Protocol Error in Arbitration phase Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   229      IfxCan_Interrupt_protocolErrorData,                 /**< \brief Protocol Error in Data phase Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   230      IfxCan_Interrupt_AccessToReservedAddress            /**< \brief Access to Reserved Address Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   231  } IfxCan_Interrupt;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   232  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   233  /** \brief Type of interrupt\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   234   * Definition in Ifx_CAN.GRINT[x] (x= 0 , 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   235   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   236  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   237  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   238      IfxCan_InterruptGroup_tefifo,  /**< \brief Transmit Event FIFO Incidents */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   239      IfxCan_InterruptGroup_hpe,     /**< \brief High Priority Events */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   240      IfxCan_InterruptGroup_wati,    /**< \brief Watermark interrupts are mapped here. */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   241      IfxCan_InterruptGroup_alrt,    /**< \brief Alerts */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   242      IfxCan_InterruptGroup_moer,    /**< \brief Module errors */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   243      IfxCan_InterruptGroup_safe,    /**< \brief Safety counter overflow */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   244      IfxCan_InterruptGroup_boff,    /**< \brief Bus Off */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   245      IfxCan_InterruptGroup_loi,     /**< \brief Last Error Interrupts */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   246      IfxCan_InterruptGroup_reint,   /**< \brief Message stored in dedicated receive buffer interrupt (IR.DRX) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   247      IfxCan_InterruptGroup_rxf1f,   /**< \brief Receive FIFO1 full interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   248      IfxCan_InterruptGroup_rxf0f,   /**< \brief Receive FIFO0 full interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   249      IfxCan_InterruptGroup_rxf1n,   /**< \brief Receive FIFO1 new message Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   250      IfxCan_InterruptGroup_rxf0n,   /**< \brief Receive FIFO0 new message Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   251      IfxCan_InterruptGroup_reti,    /**< \brief Receive timeouts */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   252      IfxCan_InterruptGroup_traq,    /**< \brief Transmission Queue Events */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   253      IfxCan_InterruptGroup_traco    /**< \brief Interrupts of the transmission control */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   254  } IfxCan_InterruptGroup;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   255  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   256  /** \brief Interrupt line number INT_Ox (x= 0 - 15) \n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   257   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   258  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   259  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   260      IfxCan_InterruptLine_0,     /**< \brief Interrupt Line 0  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   261      IfxCan_InterruptLine_1,     /**< \brief Interrupt Line 1  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   262      IfxCan_InterruptLine_2,     /**< \brief Interrupt Line 2  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   263      IfxCan_InterruptLine_3,     /**< \brief Interrupt Line 3  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   264      IfxCan_InterruptLine_4,     /**< \brief Interrupt Line 4  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   265      IfxCan_InterruptLine_5,     /**< \brief Interrupt Line 5  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   266      IfxCan_InterruptLine_6,     /**< \brief Interrupt Line 6  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   267      IfxCan_InterruptLine_7,     /**< \brief Interrupt Line 7  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   268      IfxCan_InterruptLine_8,     /**< \brief Interrupt Line 8  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   269      IfxCan_InterruptLine_9,     /**< \brief Interrupt Line 9  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   270      IfxCan_InterruptLine_10,    /**< \brief Interrupt Line 10  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   271      IfxCan_InterruptLine_11,    /**< \brief Interrupt Line 11  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   272      IfxCan_InterruptLine_12,    /**< \brief Interrupt Line 12  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   273      IfxCan_InterruptLine_13,    /**< \brief Interrupt Line 13  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   274      IfxCan_InterruptLine_14,    /**< \brief Interrupt Line 14  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   275      IfxCan_InterruptLine_15     /**< \brief Interrupt Line 15  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   276  } IfxCan_InterruptLine;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   277  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   278  /** \brief Type of last error to occur on the CAN node
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   279   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   280  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   281  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   282      IfxCan_LastErrorCodeType_noError       = 0, /**< \brief No Error occured in the recent CAN message transmission or reception. */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   283      IfxCan_LastErrorCodeType_stuffError    = 1, /**< \brief More than 5 consecutive equal bits recieved in CAN message */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   284      IfxCan_LastErrorCodeType_formError     = 2, /**< \brief Fixed format part of recieved frame has wrong format */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   285      IfxCan_LastErrorCodeType_ackError      = 3, /**< \brief No ACK recieved from another node for transmitted CAN message */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   286      IfxCan_LastErrorCodeType_bit1Error     = 4, /**< \brief Transmitted recessive and read back dominant on the CAN bus. */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   287      IfxCan_LastErrorCodeType_bit0Error     = 5, /**< \brief Transmitted dominant and read back recessive on the CAN bus. */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   288      IfxCan_LastErrorCodeType_crcError      = 6, /**< \brief CRC Error */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   289      IfxCan_LastErrorCodeType_noCANBusEvent = 7  /**< \brief No CAN bus event occured */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   290  } IfxCan_LastErrorCodeType;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   291  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   292  /** \brief Message Id length (Standard / Extended)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   293   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   294  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   295  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   296      IfxCan_MessageIdLength_standard,  /**< \brief Standard Message ID */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   297      IfxCan_MessageIdLength_extended,  /**< \brief Extended Message ID */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   298      IfxCan_MessageIdLength_both       /**< \brief Both Standard and Extended message IDs */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   299  } IfxCan_MessageIdLength;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   300  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   301  /** \brief Indicate the action to be taken with the messages which do not match with any element of the filter.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   302   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   303  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   304  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   305      IfxCan_NonMatchingFrame_acceptToRxFifo0 = 0,  /**< \brief Accept the non matching messages into Rx FIFO 0 */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   306      IfxCan_NonMatchingFrame_acceptToRxFifo1 = 1,  /**< \brief Accepts the non matching messages into Rx FIFO 1 */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   307      IfxCan_NonMatchingFrame_reject          = 2   /**< \brief Reject the non-matching messages */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   308  } IfxCan_NonMatchingFrame;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   309  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   310  /** \brief Rx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   311   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   312  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   313  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   314      IfxCan_RxBufferId_0,     /**< \brief Rx buffer 0  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   315      IfxCan_RxBufferId_1,     /**< \brief Rx buffer 1  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   316      IfxCan_RxBufferId_2,     /**< \brief Rx buffer 2  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   317      IfxCan_RxBufferId_3,     /**< \brief Rx buffer 3  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   318      IfxCan_RxBufferId_4,     /**< \brief Rx buffer 4  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   319      IfxCan_RxBufferId_5,     /**< \brief Rx buffer 5  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   320      IfxCan_RxBufferId_6,     /**< \brief Rx buffer 6  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   321      IfxCan_RxBufferId_7,     /**< \brief Rx buffer 7  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   322      IfxCan_RxBufferId_8,     /**< \brief Rx buffer 8  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   323      IfxCan_RxBufferId_9,     /**< \brief Rx buffer 9  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   324      IfxCan_RxBufferId_10,    /**< \brief Rx buffer 10  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   325      IfxCan_RxBufferId_11,    /**< \brief Rx buffer 11  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   326      IfxCan_RxBufferId_12,    /**< \brief Rx buffer 12  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   327      IfxCan_RxBufferId_13,    /**< \brief Rx buffer 13  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   328      IfxCan_RxBufferId_14,    /**< \brief Rx buffer 14  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   329      IfxCan_RxBufferId_15,    /**< \brief Rx buffer 15  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   330      IfxCan_RxBufferId_16,    /**< \brief Rx buffer 16  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   331      IfxCan_RxBufferId_17,    /**< \brief Rx buffer 17  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   332      IfxCan_RxBufferId_18,    /**< \brief Rx buffer 18  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   333      IfxCan_RxBufferId_19,    /**< \brief Rx buffer 19  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   334      IfxCan_RxBufferId_20,    /**< \brief Rx buffer 20  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   335      IfxCan_RxBufferId_21,    /**< \brief Rx buffer 21  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   336      IfxCan_RxBufferId_22,    /**< \brief Rx buffer 22  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   337      IfxCan_RxBufferId_23,    /**< \brief Rx buffer 23  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   338      IfxCan_RxBufferId_24,    /**< \brief Rx buffer 24  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   339      IfxCan_RxBufferId_25,    /**< \brief Rx buffer 25  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   340      IfxCan_RxBufferId_26,    /**< \brief Rx buffer 26  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   341      IfxCan_RxBufferId_27,    /**< \brief Rx buffer 27  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   342      IfxCan_RxBufferId_28,    /**< \brief Rx buffer 28  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   343      IfxCan_RxBufferId_29,    /**< \brief Rx buffer 29  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   344      IfxCan_RxBufferId_30,    /**< \brief Rx buffer 30  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   345      IfxCan_RxBufferId_31,    /**< \brief Rx buffer 31  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   346      IfxCan_RxBufferId_32,    /**< \brief Rx buffer 32  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   347      IfxCan_RxBufferId_33,    /**< \brief Rx buffer 33  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   348      IfxCan_RxBufferId_34,    /**< \brief Rx buffer 34  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   349      IfxCan_RxBufferId_35,    /**< \brief Rx buffer 35  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   350      IfxCan_RxBufferId_36,    /**< \brief Rx buffer 36  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   351      IfxCan_RxBufferId_37,    /**< \brief Rx buffer 37  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   352      IfxCan_RxBufferId_38,    /**< \brief Rx buffer 38  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   353      IfxCan_RxBufferId_39,    /**< \brief Rx buffer 39  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   354      IfxCan_RxBufferId_40,    /**< \brief Rx buffer 40  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   355      IfxCan_RxBufferId_41,    /**< \brief Rx buffer 41  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   356      IfxCan_RxBufferId_42,    /**< \brief Rx buffer 42  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   357      IfxCan_RxBufferId_43,    /**< \brief Rx buffer 43  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   358      IfxCan_RxBufferId_44,    /**< \brief Rx buffer 44  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   359      IfxCan_RxBufferId_45,    /**< \brief Rx buffer 45  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   360      IfxCan_RxBufferId_46,    /**< \brief Rx buffer 46  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   361      IfxCan_RxBufferId_47,    /**< \brief Rx buffer 47  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   362      IfxCan_RxBufferId_48,    /**< \brief Rx buffer 48  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   363      IfxCan_RxBufferId_49,    /**< \brief Rx buffer 49  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   364      IfxCan_RxBufferId_50,    /**< \brief Rx buffer 50  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   365      IfxCan_RxBufferId_51,    /**< \brief Rx buffer 51  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   366      IfxCan_RxBufferId_52,    /**< \brief Rx buffer 52  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   367      IfxCan_RxBufferId_53,    /**< \brief Rx buffer 53  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   368      IfxCan_RxBufferId_54,    /**< \brief Rx buffer 54  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   369      IfxCan_RxBufferId_55,    /**< \brief Rx buffer 55  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   370      IfxCan_RxBufferId_56,    /**< \brief Rx buffer 56  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   371      IfxCan_RxBufferId_57,    /**< \brief Rx buffer 57  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   372      IfxCan_RxBufferId_58,    /**< \brief Rx buffer 58  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   373      IfxCan_RxBufferId_59,    /**< \brief Rx buffer 59  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   374      IfxCan_RxBufferId_60,    /**< \brief Rx buffer 60  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   375      IfxCan_RxBufferId_61,    /**< \brief Rx buffer 61  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   376      IfxCan_RxBufferId_62,    /**< \brief Rx buffer 62  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   377      IfxCan_RxBufferId_63     /**< \brief Rx buffer 63  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   378  } IfxCan_RxBufferId;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   379  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   380  /** \brief Rx FIFO 0/1 operating mode\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   381   * Description in Ifx_CAN.N[x].RXFyC.FyOM, (x= 0 to 3; y = 0, 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   382   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   383  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   384  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   385      IfxCan_RxFifoMode_blocking,  /**< \brief Blocking mode */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   386      IfxCan_RxFifoMode_overwrite  /**< \brief Overwrite mode */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   387  } IfxCan_RxFifoMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   388  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   389  /** \brief Rx Buffers or FIFO 0 or combination Mode of reception
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   390   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   391  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   392  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   393      IfxCan_RxMode_dedicatedBuffers,  /**< \brief Rx dedicated buffers operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   394      IfxCan_RxMode_fifo0,             /**< \brief Rx FIFO 0 operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   395      IfxCan_RxMode_fifo1,             /**< \brief Rx FIFO 1 operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   396      IfxCan_RxMode_sharedFifo0,       /**< \brief Rx shared dedicated buffers and Rx FIFO 0 operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   397      IfxCan_RxMode_sharedFifo1,       /**< \brief Rx shared dedicated buffers and Rx FIFO 1 operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   398      IfxCan_RxMode_sharedAll          /**< \brief Rx shared dedicated buffers and Rx FIFO 0 and Rx FIFO 1 operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   399  } IfxCan_RxMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   400  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   401  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   402   * Definition in Ifx_CAN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   403   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   404  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   405  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   406      IfxCan_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   407      IfxCan_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   408  } IfxCan_SleepMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   409  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   410  /** \brief CAN API status definition
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   411   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   412  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   413  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   414      IfxCan_Status_ok                = 0x00000000,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   415      IfxCan_Status_notInitialised    = 0x00000001,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   416      IfxCan_Status_busOff            = 0x00000010,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   417      IfxCan_Status_notSentBusy       = 0x00000020,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   418      IfxCan_Status_receiveEmpty      = 0x00000040,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   419      IfxCan_Status_messageLost       = 0x00000080,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   420      IfxCan_Status_newData           = 0x00000100,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   421      IfxCan_Status_newDataButOneLost = 0x00000180
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   422  } IfxCan_Status;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   423  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   424  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   425   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   426  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   427  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   428      IfxCan_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   429      IfxCan_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   430      IfxCan_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   431  } IfxCan_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   432  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   433  /** \brief Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   434   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   435  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   436  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   437      IfxCan_TxBufferId_0,     /**< \brief Tx buffer 0  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   438      IfxCan_TxBufferId_1,     /**< \brief Tx buffer 1  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   439      IfxCan_TxBufferId_2,     /**< \brief Tx buffer 2  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   440      IfxCan_TxBufferId_3,     /**< \brief Tx buffer 3  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   441      IfxCan_TxBufferId_4,     /**< \brief Tx buffer 4  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   442      IfxCan_TxBufferId_5,     /**< \brief Tx buffer 5  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   443      IfxCan_TxBufferId_6,     /**< \brief Tx buffer 6  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   444      IfxCan_TxBufferId_7,     /**< \brief Tx buffer 7  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   445      IfxCan_TxBufferId_8,     /**< \brief Tx buffer 8  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   446      IfxCan_TxBufferId_9,     /**< \brief Tx buffer 9  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   447      IfxCan_TxBufferId_10,    /**< \brief Tx buffer 10  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   448      IfxCan_TxBufferId_11,    /**< \brief Tx buffer 11  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   449      IfxCan_TxBufferId_12,    /**< \brief Tx buffer 12  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   450      IfxCan_TxBufferId_13,    /**< \brief Tx buffer 13  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   451      IfxCan_TxBufferId_14,    /**< \brief Tx buffer 14  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   452      IfxCan_TxBufferId_15,    /**< \brief Tx buffer 15  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   453      IfxCan_TxBufferId_16,    /**< \brief Tx buffer 16  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   454      IfxCan_TxBufferId_17,    /**< \brief Tx buffer 17  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   455      IfxCan_TxBufferId_18,    /**< \brief Tx buffer 18  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   456      IfxCan_TxBufferId_19,    /**< \brief Tx buffer 19  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   457      IfxCan_TxBufferId_20,    /**< \brief Tx buffer 20  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   458      IfxCan_TxBufferId_21,    /**< \brief Tx buffer 21  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   459      IfxCan_TxBufferId_22,    /**< \brief Tx buffer 22  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   460      IfxCan_TxBufferId_23,    /**< \brief Tx buffer 23  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   461      IfxCan_TxBufferId_24,    /**< \brief Tx buffer 24  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   462      IfxCan_TxBufferId_25,    /**< \brief Tx buffer 25  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   463      IfxCan_TxBufferId_26,    /**< \brief Tx buffer 26  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   464      IfxCan_TxBufferId_27,    /**< \brief Tx buffer 27  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   465      IfxCan_TxBufferId_28,    /**< \brief Tx buffer 28  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   466      IfxCan_TxBufferId_29,    /**< \brief Tx buffer 29  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   467      IfxCan_TxBufferId_30,    /**< \brief Tx buffer 30  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   468      IfxCan_TxBufferId_31     /**< \brief Tx buffer 31  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   469  } IfxCan_TxBufferId;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   470  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   471  /** \brief Tx FIFO/Queue Mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   472   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   473  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   474  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   475      IfxCan_TxMode_fifo,              /**< \brief Tx FIFO operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   476      IfxCan_TxMode_queue,             /**< \brief Tx Queue operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   477      IfxCan_TxMode_dedicatedBuffers,  /**< \brief Tx dedicated buffers operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   478      IfxCan_TxMode_sharedFifo,        /**< \brief Tx shared dedicated buffers and Tx FIFO operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   479      IfxCan_TxMode_sharedQueue        /**< \brief Tx shared dedicated buffers and Tx Queue operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   480  } IfxCan_TxMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   481  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   482  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   483  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   484  /** \brief CAN node Bus Off status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   485   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   486  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   487  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   488      IfxCan_CanNodeBusOffErrorStatus_NoErr     = 0, /**< \brief CAN node not in Bus Off state */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   489      IfxCan_CanNodeBusOffErrorStatus_BusOffErr = 1  /**< \brief CAN node in Bus Off state */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   490  } IfxCan_CanNodeBusOffErrorStatus;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   491  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   492  /** \brief CAN node communication state
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   493   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   494  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   495  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   496      IfxCan_CanNodeCommunicationState_synchronize = 0,  /**< \brief CAN node is synchronizing on CAN communication */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   497      IfxCan_CanNodeCommunicationState_idle        = 1,  /**< \brief Node is neither receiving nor transmitting */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   498      IfxCan_CanNodeCommunicationState_receive     = 2,  /**< \brief Node is operating as receiver */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   499      IfxCan_CanNodeCommunicationState_transmit    = 3   /**< \brief Node is operating as transmitter */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   500  } IfxCan_CanNodeCommunicationState;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   501  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   502  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   503  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   504  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   505  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   506  /** \addtogroup IfxLld_Can_Std_Data_Structures
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   507   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   508  /** \brief tructure for Filter configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   509   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   510  typedef struct
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   511  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   512      uint8                             number;                     /**< \brief Filter Number */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   513      IfxCan_FilterElementConfiguration elementConfiguration;       /**< \brief *FEC, Filter Element Configuration of (standard / extended ID) filter element */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   514      IfxCan_FilterType                 type;                       /**< \brief *FT, Filter Type of (standard / extended ID) filter element */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   515      uint32                            id1;                        /**< \brief *FID1 First ID of (standard / extended ID) filter element */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   516      uint32                            id2;                        /**< \brief *FID2 Second ID of (standard / extended ID) filter element */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   517      IfxCan_RxBufferId                 rxBufferOffset;             /**< \brief Rx Buffer number to set the offset to the Rx Buffer Start Address */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   518  } IfxCan_Filter;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   519  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   520  /** \brief Configuration for Interrupt groups
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   521   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   522  typedef struct
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   523  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   524      IfxCan_InterruptLine interruptLine;       /**< \brief Intterupt line to which this interruipt has to be connetced to */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   525      Ifx_Priority         priority;            /**< \brief Priority of the interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   526      IfxSrc_Tos           typeOfService;       /**< \brief Type of Service */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   527  } IfxCan_GroupInterruptConfig;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   528  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   529  /** \brief Structure for CAN Message configuration (transmit/receive)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   530   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   531  typedef struct
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   532  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   533      uint8                  bufferNumber;                /**< \brief (Tx / Rx) Buffer Element number */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   534      uint32                 messageId;                   /**< \brief ID, Identifier */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   535      boolean                remoteTransmitRequest;       /**< \brief RTR, Remote Transmit Request (enable / disable) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   536      IfxCan_MessageIdLength messageIdLength;             /**< \brief XTD, Message Id length (Standard / Extended) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   537      boolean                errorStateIndicator;         /**< \brief ESI, Error State Indicator (enable / disable) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   538      IfxCan_DataLengthCode  dataLengthCode;              /**< \brief DLC, Data Length Code */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   539      IfxCan_FrameMode       frameMode;                   /**< \brief CAN frame mode */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   540      boolean                txEventFifoControl;          /**< \brief EFC, Tx Event FIFO Control (enable / disable) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   541      boolean                storeInTxFifoQueue;          /**< \brief Write message in Tx FIFO/QUEUE */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   542      boolean                readFromRxFifo0;             /**< \brief Read message from Rx FIFO 0 */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   543      boolean                readFromRxFifo1;             /**< \brief Read message from Rx FIFO 1 */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   544  } IfxCan_Message;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   545  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   546  /** \brief Structure for Message RAM configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   547   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   548  typedef struct
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   549  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   550      uint32 baseAddress;                          /**< \brief Message RAM base address of the CAN */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   551      uint16 standardFilterListStartAddress;       /**< \brief Start address of Standard Message ID filter list (32-bit word address) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   552      uint16 extendedFilterListStartAddress;       /**< \brief Start address of Extended Message ID filter list (32-bit word address) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   553      uint16 rxFifo0StartAddress;                  /**< \brief Start address of Rx FIFO 0 in Message RAM (32-bit word address) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   554      uint16 rxFifo1StartAddress;                  /**< \brief Start address of Rx FIFO 1 in Message RAM (32-bit word address) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   555      uint16 rxBuffersStartAddress;                /**< \brief Start address of Rx Buffers section in the Message RAM (32-bit word address). */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   556      uint16 txEventFifoStartAddress;              /**< \brief Start address of Tx Event FIFO in Message RAM (32-bit w ord address) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   557      uint16 txBuffersStartAddress;                /**< \brief Start address of Tx Buffers section in the Message RAM (32-bit word address). */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   558  } IfxCan_MessageRAM;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   559  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   560  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   561  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   562  /** \addtogroup IfxLld_Can_Std_Node_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   563   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   564  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   565  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   566  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   567  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   568  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   569  /** \brief Disables the configuration change\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   570   * The CPU has no write access to the protected configuration registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   571   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   573   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   574  IFX_INLINE void IfxCan_Node_disableConfigurationChange(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   575  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   576  /** \brief Enables the configuration change\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   577   * The CPU has write access to the protected configuration registers (while CCCR.INIT = 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   578   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   579   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   580   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   581  IFX_INLINE void IfxCan_Node_enableConfigurationChange(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   582  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   583  /** \brief Enables the internal Virtual CAN bus loopback mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   584   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   585   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   586   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   587  IFX_INLINE void IfxCan_Node_enableLoopbackMode(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   588  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   589  /** \brief Returns the status of whether the CAN Node is synchronised or not
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   590   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   591   * \return Status TRUE: synchronized, FALSE : Sync in progress
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   592   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   593  IFX_INLINE boolean IfxCan_Node_isNodeSynchronized(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   594  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   595  /** \brief Initialises the node\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   596   * 0= Normal Operation\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   597   * 1= Initialization is started
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   598   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   599   * \param enable Enable / Disable choice
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   600   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   601   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   602  IFX_INLINE void IfxCan_Node_setInitialisation(Ifx_CAN_N *node, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   603  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   604  /** \brief Sets Transceiver Delay Compensation offset
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   605   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   606   * \param delay delay offset value
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   607   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   608   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   609  IFX_INLINE void IfxCan_Node_setTransceiverDelayCompensationOffset(Ifx_CAN_N *node, uint8 delay);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   610  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   611  /** \brief Get the LEC error status of the CAN node.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   612   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   613   * \return LEC error status in CAN node PSR register
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   614   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   615  IFX_INLINE IfxCan_LastErrorCodeType IfxCan_Node_getLastErroCodeStatus(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   616  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   617  /** \brief Error Passive status of the CAN node.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   618   * TRUE: CAN node in error passive.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   619   * FALSE: CAN node not in error passive.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   620   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   621   * \return Error Passive error status of CAN node (TRUE/FALSE).
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   622   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   623  IFX_INLINE boolean IfxCan_Node_isErrorPassive(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   624  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   625  /** \brief Get the warning status of the CAN node.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   626   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   627   * \return Warning status in CAN node
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   628   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   629  IFX_INLINE IfxCan_CanNodeErrorWarningLimitStatus IfxCan_Node_getWarningStatus(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   630  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   631  /** \brief Get the Bus Off status of the CAN node.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   632   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   633   * \return Bus Off Error status in CAN node
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   634   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   635  IFX_INLINE IfxCan_CanNodeBusOffErrorStatus IfxCan_Node_getBusOffStatus(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   636  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   637  /** \brief Get the Activity status of the CAN node.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   638   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   639   * \return Activity status of CAN node
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   640   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   641  IFX_INLINE IfxCan_CanNodeCommunicationState IfxCan_Node_getActivityStatus(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   642  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   643  /** \brief Get the Error status in data phase of the CAN node in the recent CANFD operation with bit rate switch.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   644   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   645   * \return Error status of the recent CAN FD with BRS flag set.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   646   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   647  IFX_INLINE IfxCan_LastErrorCodeType IfxCan_Node_getDataPhaseLastErrorCode(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   648  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   649  /** \brief Protocol Exception Event status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   650   * TRUE: Protocol Exception event occured.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   651   * FALSE: Protocol Exception event not occured.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   652   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   653   * \return Get the Protocol Exception event status (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   654   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   655  IFX_INLINE boolean IfxCan_Node_isProtocolExceptionEventOccured(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   656  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   657  /** \brief Returns the error status of the recent recieved CAN FD message.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   658   * TRUE : Error status indicator is enabled
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   659   * FALSE: Erro status indicator not enabled.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   660   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   661   * \return Error indicator for recent received CAN FD message (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   662   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   663  IFX_INLINE boolean IfxCan_Node_isErrorStatusIndicatorEnabled(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   664  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   665  /** \brief Bit Rate Switch status of the last recieved CAN FD message.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   666   * TRUE: Bit rate switch is enabled.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   667   * FALSE: Bit rate switch is disabled.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   668   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   669   * \return Bit Rate Switch flag status (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   670   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   671  IFX_INLINE boolean IfxCan_Node_isBitRateSwitchFlagEnabled(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   672  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   673  /** \brief Return the DLC code corresponding to the data length in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   674   * \param dataLength Data length in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   675   * \return Data length code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   676   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   677  IFX_INLINE IfxCan_DataLengthCode IfxCan_Node_getCodeFromDataLengthInBytes(uint32 dataLength);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   678  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   679  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   680  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   681  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   682  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   683  /** \brief Converts data length code (DLC) into number of words
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   684   * \param dataLengthCode DLC, Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   685   * \return Number of data words
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   686   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   687  IFX_EXTERN uint32 IfxCan_Node_getDataLength(IfxCan_DataLengthCode dataLengthCode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   688  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   689  /** \brief Converts data length code (DLC) into number of data words.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   690   * This function is deprecated. Use new function IfxCan_Node_getDataLength
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   691   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   692   * \param dataLengthCode DLC, Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   693   * \return Number of data words
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   694   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   695  IFX_EXTERN uint32 IfxCan_Node_getDataLengthFromCode(Ifx_CAN_N *node, IfxCan_DataLengthCode dataLengthCode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   696  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   697  /** \brief Returns CAN frame mode of operation for a received frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   698   * \param rxBufferElement Rx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   699   * \return CAN frame mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   700   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   701  IFX_EXTERN IfxCan_FrameMode IfxCan_Node_getFrameMode(Ifx_CAN_RXMSG *rxBufferElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   702  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   703  /** \brief Select and initialise the CAN node receive pin
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   704   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   705   * \param rxd Rx pin
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   706   * \param mode Input mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   707   * \param padDriver Pad Driver Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   708   * \return TRUE: Returns TRUE if the operation was successful\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   709   * FALSE: Returns FALSE if the operation was errorneous
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   710   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   711  IFX_EXTERN boolean IfxCan_Node_initRxPin(Ifx_CAN_N *node, IfxCan_Rxd_In *rxd, IfxPort_InputMode mode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   712  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   713  /** \brief Select and initialise the CAN node transmit pin
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   714   * \param txd Tx pin
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   715   * \param mode Output mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   716   * \param padDriver Pad driver Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   717   * \return TRUE: Returns TRUE if the operation was successful\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   718   * FALSE: Returns FALSE if the operation was errorneous
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   719   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   720  IFX_EXTERN boolean IfxCan_Node_initTxPin(IfxCan_Txd_Out *txd, IfxPort_OutputMode mode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   721  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   722  /** \brief Calculates and Sets the CAN baudrate for standard frames and arbitration phase of CAND FD frames
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   723   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   724   * \param moduleFreq Specifies the CAN module frequency
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   725   * \param baudrate Specifies the baud rate. Unit: baud
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   726   * \param samplePoint Specifies the sample point. Range = [0, 10000] resp. [0%, 100%] of the total bit time.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   727   * \param syncJumpWidth Specifies the re-synchronization jump width
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   728   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   729   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   730  IFX_EXTERN void IfxCan_Node_setBitTiming(Ifx_CAN_N *node, float32 moduleFreq, uint32 baudrate, uint16 samplePoint, uint16 syncJumpWidth);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   731  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   732  /** \brief Sets the values of CAN baudrate for standard frames
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   733   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   734   * \param syncJumpWidth Synchronization Jump Width
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   735   * \param timeSegment2 Time segment after sample point
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   736   * \param timeSegment1 Time segment before sample point
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   737   * \param prescaler Baud Rate Prescaler
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   738   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   739   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   740  IFX_EXTERN void IfxCan_Node_setBitTimingValues(Ifx_CAN_N *node, uint16 syncJumpWidth, uint8 timeSegment2, uint8 timeSegment1, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   741  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   742  /** \brief Calulates and Sets the CAN fast baudrate for CAN FD frames data phase
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   743   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   744   * \param moduleFreq Specifies the CAN module frequency
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   745   * \param baudrate Specifies the baud rate. Unit: baud
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   746   * \param samplePoint Specifies the sample point. Range = [0, 10000] resp. [0%, 100%] of the total bit time.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   747   * \param syncJumpWidth Specifies the re-synchronization jump width
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   748   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   749   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   750  IFX_EXTERN void IfxCan_Node_setFastBitTiming(Ifx_CAN_N *node, float32 moduleFreq, uint32 baudrate, uint16 samplePoint, uint16 syncJumpWidth);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   751  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   752  /** \brief Sets the values of CAN fast baudrate for CAN FD frames data phase
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   753   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   754   * \param syncJumpWidth Synchronization Jump Width
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   755   * \param timeSegment2 Time segment after sample point
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   756   * \param timeSegment1 Time segment before sample point
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   757   * \param prescaler Baud Rate Prescaler
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   759   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   760  IFX_EXTERN void IfxCan_Node_setFastBitTimingValues(Ifx_CAN_N *node, uint16 syncJumpWidth, uint8 timeSegment2, uint8 timeSegment1, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   761  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   762  /** \brief Enables the CAN frame mode for transmission
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   763   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   764   * \param frameMode CAN frame mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   766   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   767  IFX_EXTERN void IfxCan_Node_setFrameMode(Ifx_CAN_N *node, IfxCan_FrameMode frameMode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   768  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   769  /** \brief Sets CAN frame mode request for transmission
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   770   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   771   * \param frameMode CAN frame mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   773   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   774  IFX_EXTERN void IfxCan_Node_setFrameModeReq(Ifx_CAN_TXMSG *txBufferElement, IfxCan_FrameMode frameMode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   775  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   776  /** \brief Sets CAN frame mode request for transmission.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   777   * This function is deprecated. Use new function IfxCan_Node_setFrameModeReq
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   778   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   779   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   780   * \param frameMode CAN frame mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   781   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   782   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   783  IFX_EXTERN void IfxCan_Node_setFrameModeRequest(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, IfxCan_FrameMode frameMode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   784  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   785  /** \brief Converts data length code (DLC) into number of bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   786   * \param dataLengthCode Data length code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   787   * \return Data length in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   788   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   789  IFX_EXTERN uint32 IfxCan_Node_getDataLengthInBytes(IfxCan_DataLengthCode dataLengthCode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   790  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   791  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   792  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   793  /** \addtogroup IfxLld_Can_Std_Tx_Element_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   794   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   795  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   796  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   797  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   798  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   799  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   800  /** \brief Returns Tx FIFO/Queue Put Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   801   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   802   * \return Tx Buffer Element Number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   803   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   804  IFX_INLINE IfxCan_TxBufferId IfxCan_Node_getTxFifoQueuePutIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   805  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   806  /** \brief Returns the status of whether cancellation is finished on the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   807   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   808   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   809   * \return Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   810   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   811  IFX_INLINE boolean IfxCan_Node_isTxBufferCancellationFinished(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   812  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   813  /** \brief Returns the status of pending request of the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   814   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   815   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   816   * \return Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   817   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   818  IFX_INLINE boolean IfxCan_Node_isTxBufferRequestPending(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   819  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   820  /** \brief Returns the status of whether transmission occured on the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   821   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   822   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   823   * \return Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   824   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   825  IFX_INLINE boolean IfxCan_Node_isTxBufferTransmissionOccured(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   826  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   827  /** \brief Returns the status of Tx Fifo/Queue is full or not
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   828   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   829   * \return Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   830   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   831  IFX_INLINE boolean IfxCan_Node_isTxFifoQueueFull(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   832  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   833  /** \brief pauses the CAN Node for two CAN bit times before starting the next transmission
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   834   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   835   * \param enable Enable / Disable choice
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   836   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   837   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   838  IFX_INLINE void IfxCan_Node_pauseTransmission(Ifx_CAN_N *node, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   839  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   840  /** \brief Sets the Data Length Code (DLC) for transmit frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   841   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   842   * \param dataLengthCode DLC, data length code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   843   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   844   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   845  IFX_INLINE void IfxCan_Node_setDataLength(Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   846  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   847  /** \brief Sets the Data Length Code (DLC) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   848   * This function is deprecated. Use new function IfxCan_Node_setDataLength
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   849   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   850   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   851   * \param dataLengthCode DLC, data length code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   852   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   853   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   854  IFX_INLINE void IfxCan_Node_setDataLengthCode(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   855  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   856  /** \brief Sets the number of dedicated Tx Buffers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   857   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   858   * \param number Number of Tx Buffers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   859   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   860   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   861  IFX_INLINE void IfxCan_Node_setDedicatedTxBuffersNumber(Ifx_CAN_N *node, uint8 number);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   862  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   863  /** \brief Sets the Error State Indicator (ESI) for transmit frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   864   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   865   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   866   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   867   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   868  IFX_INLINE void IfxCan_Node_setErrStateIndicator(Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   869  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   870  /** \brief Sets the Error State Indicator (ESI) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   871   * This function is decprecated. Use new function IfxCan_Node_setErrStateIndicator
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   872   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   873   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   874   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   875   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   876   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   877  IFX_INLINE void IfxCan_Node_setErrorStateIndicator(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   878  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   879  /** \brief Sets the Message Marker (MM) for transmit frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   880   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   881   * \param bufferId MM, Message Marker , Buffer Id
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   882   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   883   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   884  IFX_INLINE void IfxCan_Node_setMessageMarker(Ifx_CAN_TXMSG *txBufferElement, IfxCan_TxBufferId bufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   885  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   886  /** \brief Sets the identifier (ID) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   887   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   888   * \param messageId Identifier
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   889   * \param messageIdLength Message Id length (Standard / Extended)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   890   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   891   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   892  IFX_INLINE void IfxCan_Node_setMsgId(Ifx_CAN_TXMSG *txBufferElement, uint32 messageId, IfxCan_MessageIdLength messageIdLength);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   893  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   894  /** \brief Sets the identifier (ID) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   895   * This function is deprecated. Use the new function IfxCan_Node_setMsgId
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   896   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   897   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   898   * \param messageId Identifier
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   899   * \param messageIdLength Message Id length (Standard / Extended)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   900   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   901   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   902  IFX_INLINE void IfxCan_Node_setMesssageId(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, uint32 messageId, IfxCan_MessageIdLength messageIdLength);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   903  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   904  /** \brief Sets the remote Transmit Request (RTR) for transmit frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   905   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   906   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   907   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   908   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   909  IFX_INLINE void IfxCan_Node_setRemoteTransmitReq(Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   910  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   911  /** \brief Sets the remote Transmit Request (RTR) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   912   * This function is deprecated. Use new function IfxCan_Node_setRemoteTransmitReq
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   913   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   914   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   915   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   916   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   917   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   918  IFX_INLINE void IfxCan_Node_setRemoteTransmitRequest(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   919  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   920  /** \brief Sets Transmit FIFO/Queue Mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   921   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   922   * \param mode Tx FIFO/Queue Mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   923   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   924   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   925  IFX_INLINE void IfxCan_Node_setTransmitFifoQueueMode(Ifx_CAN_N *node, IfxCan_TxMode mode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   926  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   927  /** \brief Sets Transmit FIFO/Queue Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   928   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   929   * \param number Number of Tx Buffers used for Tx FIFO/Queue
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   930   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   931   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   932  IFX_INLINE void IfxCan_Node_setTransmitFifoQueueSize(Ifx_CAN_N *node, uint8 number);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   933  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   934  /** \brief Sets the Add Request for the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   935   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   936   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   937   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   938   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   939  IFX_INLINE void IfxCan_Node_setTxBufferAddRequest(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   940  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   941  /** \brief Sets the Cancellation Request for the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   942   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   943   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   944   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   945   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   946  IFX_INLINE void IfxCan_Node_setTxBufferCancellationRequest(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   947  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   948  /** \brief Sets Tx Buffer Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   949   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   950   * \param size Tx Buffer Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   951   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   952   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   953  IFX_INLINE void IfxCan_Node_setTxBufferDataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   954  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   955  /** \brief Sets the start address of Tx Buffers section in the Message RAM (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   956   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   957   * \param address Start address of Tx Buffers in the message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   958   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   959   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   960  IFX_INLINE void IfxCan_Node_setTxBuffersStartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   961  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   962  /** \brief Sets the Tx Event Fifo Control (EFC) for transmit frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   963   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   964   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   965   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   966   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   967  IFX_INLINE void IfxCan_Node_setTxEventFifoCtrl(Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   968  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   969  /** \brief Sets the Tx Event Fifo Control (EFC) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   970   * This function is deprecated. Use new function IfxCan_Node_setTxEventFifoCtrl
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   971   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   972   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   973   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   974   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   975   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   976  IFX_INLINE void IfxCan_Node_setTxEventFifoControl(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   977  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   978  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   979  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   980  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   981  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   982  /** \brief Returns Tx Buffer Data Field Size in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   983   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   984   * \return Data field size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   985   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   986  IFX_EXTERN uint8 IfxCan_Node_getTxBufferDataFieldSize(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   987  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   988  /** \brief Returns the address of selected Tx buffer element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   989   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   990   * \param ramBaseAddress Message RAM base address of CAN module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   991   * \param txBuffersStartAddress Start address of Tx Buffers section in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   992   * \param txBufferNumber Tx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   993   * \return Tx Buffer Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   994   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   995  IFX_EXTERN Ifx_CAN_TXMSG *IfxCan_Node_getTxBufferElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 txBuffersStartAddress, IfxCan_TxBufferId txBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   996  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   997  /** \brief Writes Data into Tx buffer element Node_writeTxBufData
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   998   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   999   * \param dataLengthCode DLC, Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1000   * \param data Pointer to data (in words)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1001   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1002   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1003  IFX_EXTERN void IfxCan_Node_writeTxBufData(Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode, uint32 *data);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1004  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1005  /** \brief Writes Data into Tx buffer element.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1006   * This function is deprecated. Use new function IfxCan_Node_writeTxBufData
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1007   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1008   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1009   * \param dataLengthCode DLC, Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1010   * \param data Pointer to data (in words)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1011   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1012   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1013  IFX_EXTERN void IfxCan_Node_writeData(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode, uint32 *data);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1014  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1015  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1016  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1017  /** \addtogroup IfxLld_Can_Std_Rx_Element_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1018   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1019  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1020  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1021  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1022  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1023  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1024  /** \brief Returns the Data Length Code from the received frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1025   * \param rxBufferElement Rx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1026   * \return Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1027   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1028  IFX_INLINE uint32 IfxCan_Node_getDataLengthCode(Ifx_CAN_RXMSG *rxBufferElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1029  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1030  /** \brief Returns the identifier (ID) from the received frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1031   * \param rxBufferElement Rx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1032   * \return Identifier
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1033   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1034  IFX_INLINE uint32 IfxCan_Node_getMesssageId(Ifx_CAN_RXMSG *rxBufferElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1035  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1036  /** \brief Returns Rx FIFO 0 Fill Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1037   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1038   * \return Fill level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1039   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1040  IFX_INLINE uint8 IfxCan_Node_getRxFifo0FillLevel(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1041  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1042  /** \brief Returns Rx FIFO 0 get index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1043   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1044   * \return Rx Buffer Element Number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1045   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1046  IFX_INLINE IfxCan_RxBufferId IfxCan_Node_getRxFifo0GetIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1047  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1048  /** \brief Returns Rx FIFO 1 Fill Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1049   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1050   * \return Fill level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1051   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1052  IFX_INLINE uint8 IfxCan_Node_getRxFifo1FillLevel(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1053  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1054  /** \brief Returns Rx FIFO 1 get index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1055   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1056   * \return Rx Buffer Element Number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1057   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1058  IFX_INLINE IfxCan_RxBufferId IfxCan_Node_getRxFifo1GetIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1059  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1060  /** \brief Sets Rx Buffer Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1061   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1062   * \param size Rx Buffer Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1063   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1064   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1065  IFX_INLINE void IfxCan_Node_setRxBufferDataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1066  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1067  /** \brief Sets the start address of Rx Buffers section in the Message RAM (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1068   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1069   * \param address Start address of Rx Buffers in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1070   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1071   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1072  IFX_INLINE void IfxCan_Node_setRxBuffersStartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1073  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1074  /** \brief Sets Rx FIFO 0 Acknowledge Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1075   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1076   * \param RxBufferNumber Rx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1077   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1078   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1079  IFX_INLINE void IfxCan_Node_setRxFifo0AcknowledgeIndex(Ifx_CAN_N *node, IfxCan_RxBufferId RxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1080  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1081  /** \brief Sets Rx Buffer Fifo 0 Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1082   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1083   * \param size Rx FIFO 0 Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1084   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1085   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1086  IFX_INLINE void IfxCan_Node_setRxFifo0DataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1087  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1088  /** \brief Sets Rx Buffer Fifo 0 operating mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1089   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1090   * \param mode Rx FIFO 0 operating Mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1091   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1092   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1093  IFX_INLINE void IfxCan_Node_setRxFifo0OperatingMode(Ifx_CAN_N *node, IfxCan_RxFifoMode mode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1094  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1095  /** \brief Sets Rx FIFO 0 Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1096   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1097   * \param size Rx FIFO 0 Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1098   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1099   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1100  IFX_INLINE void IfxCan_Node_setRxFifo0Size(Ifx_CAN_N *node, uint8 size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1101  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1102  /** \brief Sets the start address of Rx FIFO 0 section in the Message RAM (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1103   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1104   * \param address Start address of Rx FIFO 0 in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1105   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1106   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1107  IFX_INLINE void IfxCan_Node_setRxFifo0StartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1108  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1109  /** \brief Sets Rx FIFO 0 Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1110   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1111   * \param level Rx FIFO 0 Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1112   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1113   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1114  IFX_INLINE void IfxCan_Node_setRxFifo0WatermarkLevel(Ifx_CAN_N *node, uint8 level);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1115  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1116  /** \brief Sets Rx FIFO 1 Acknowledge Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1117   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1118   * \param RxBufferNumber Rx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1119   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1120   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1121  IFX_INLINE void IfxCan_Node_setRxFifo1AcknowledgeIndex(Ifx_CAN_N *node, IfxCan_RxBufferId RxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1122  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1123  /** \brief Sets Rx Buffer Fifo 1 Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1124   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1125   * \param size Rx FIFO 1 Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1126   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1127   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1128  IFX_INLINE void IfxCan_Node_setRxFifo1DataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1129  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1130  /** \brief Sets Rx Buffer Fifo 1 operating mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1131   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1132   * \param mode Rx FIFO 1 operating Mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1133   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1134   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1135  IFX_INLINE void IfxCan_Node_setRxFifo1OperatingMode(Ifx_CAN_N *node, IfxCan_RxFifoMode mode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1136  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1137  /** \brief Sets Rx FIFO 1 Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1138   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1139   * \param size Rx FIFO 1 Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1140   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1141   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1142  IFX_INLINE void IfxCan_Node_setRxFifo1Size(Ifx_CAN_N *node, uint8 size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1143  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1144  /** \brief Sets the start address of Rx FIFO 1 section in the Message RAM (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1145   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1146   * \param address Start address of Rx FIFO 1 in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1147   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1148   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1149  IFX_INLINE void IfxCan_Node_setRxFifo1StartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1150  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1151  /** \brief Sets Rx FIFO 1 Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1152   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1153   * \param level Rx FIFO 1 Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1154   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1155   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1156  IFX_INLINE void IfxCan_Node_setRxFifo1WatermarkLevel(Ifx_CAN_N *node, uint8 level);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1157  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1158  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1159  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1160  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1161  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1162  /** \brief Clears the New Data flag of the selected Rx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1163   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1164   * \param rxBufferId Rx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1165   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1166   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1167  IFX_EXTERN void IfxCan_Node_clearRxBufferNewDataFlag(Ifx_CAN_N *node, IfxCan_RxBufferId rxBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1168  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1169  /** \brief Returns Rx Buffer Data Field Size in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1170   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1171   * \return Data field size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1172   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1173  IFX_EXTERN uint8 IfxCan_Node_getRxBufferDataFieldSize(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1174  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1175  /** \brief Returns the address of selected Rx buffer element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1176   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1177   * \param ramBaseAddress Message RAM base address of CAN Module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1178   * \param rxBuffersStartAddress Start address of Rx Buffers section in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1179   * \param rxBufferNumber Rx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1180   * \return Rx Buffer Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1181   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1182  IFX_EXTERN Ifx_CAN_RXMSG *IfxCan_Node_getRxBufferElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 rxBuffersStartAddress, IfxCan_RxBufferId rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1183  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1184  /** \brief Returns Rx FIFO 0 Data Field Size in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1185   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1186   * \return Data field size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1187   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1188  IFX_EXTERN uint8 IfxCan_Node_getRxFifo0DataFieldSize(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1189  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1190  /** \brief Returns the address of selected Rx FIFO 0 element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1191   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1192   * \param ramBaseAddress Message RAM base address of CAN Module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1193   * \param rxFifo0StartAddress Start address of Rx FIFO 0 section in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1194   * \param rxBufferNumber Rx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1195   * \return Rx FIFO 0 Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1196   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1197  IFX_EXTERN Ifx_CAN_RXMSG *IfxCan_Node_getRxFifo0ElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 rxFifo0StartAddress, IfxCan_RxBufferId rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1198  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1199  /** \brief Returns Rx FIFO 1 Data Field Size in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1200   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1201   * \return Data field size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1202   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1203  IFX_EXTERN uint8 IfxCan_Node_getRxFifo1DataFieldSize(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1204  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1205  /** \brief Returns the address of selected Rx FIFO 1 element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1206   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1207   * \param ramBaseAddress Message RAM base address of CAN Module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1208   * \param rxFifo1StartAddress Start address of Rx FIFO 1 section in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1209   * \param rxBufferNumber Rx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1210   * \return Rx FIFO 1 Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1211   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1212  IFX_EXTERN Ifx_CAN_RXMSG *IfxCan_Node_getRxFifo1ElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 rxFifo1StartAddress, IfxCan_RxBufferId rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1213  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1214  /** \brief Returns the status of whether the selcted Rx buffer has been updated from new data
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1215   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1216   * \param rxBufferId Rx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1217   * \return Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1218   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1219  IFX_EXTERN boolean IfxCan_Node_isRxBufferNewDataUpdated(Ifx_CAN_N *node, IfxCan_RxBufferId rxBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1220  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1221  /** \brief Reads data from Rx buffer element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1222   * \param rxBufferElement Rx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1223   * \param dataLengthCode DLC, Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1224   * \param data Pointer to data (in words)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1225   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1226   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1227  IFX_EXTERN void IfxCan_Node_readData(Ifx_CAN_RXMSG *rxBufferElement, IfxCan_DataLengthCode dataLengthCode, uint32 *data);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1228  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1229  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1230  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1231  /** \addtogroup IfxLld_Can_Std_Filter_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1232   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1233  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1234  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1235  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1236  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1237  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1238  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1239   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1242  IFX_INLINE void IfxCan_Node_acceptRemoteFramesWithStandardId(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1243  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1244  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1245   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1246   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1247   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1248  IFX_INLINE void IfxCan_Node_acceptRemoteFrameswithExtendedId(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1249  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1250  /** \brief Configure the filter for non matching frames with extended id.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1251   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1252   * \param filter action to be performed on non matching messages.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1253   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1254   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1255  IFX_INLINE void IfxCan_Node_configureExtendedFilterForNonMatchingFrames(Ifx_CAN_N *node, IfxCan_NonMatchingFrame filter);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1256  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1257  /** \brief Configure the filter for non matching frames with standard id.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1258   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1259   * \param filter action to be performed on non matching messages.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1260   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1261   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1262  IFX_INLINE void IfxCan_Node_configureStandardFilterForNonMatchingFrames(Ifx_CAN_N *node, IfxCan_NonMatchingFrame filter);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1263  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1264  /** \brief Reject the remote frames with extended id.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1265   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1266   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1267   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1268  IFX_INLINE void IfxCan_Node_rejectRemoteFramesWithExtendedId(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1269  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1270  /** \brief Reject the remote frames with standard id.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1271   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1272   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1273   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1274  IFX_INLINE void IfxCan_Node_rejectRemoteFramesWithStandardId(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1275  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1276  /** \brief Sets the Extended Filter Element Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1277   * \param extendedFilterElement Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1278   * \param filterElementConfiguration Filter Element Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1279   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1280   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1281  IFX_INLINE void IfxCan_Node_setExtendedFilterConfiguration(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_FilterElementConfiguration filterElementConfiguration);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1282  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1283  /** \brief Sets the Extended Filter ID 1 for Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1284   * \param extendedFilterElement Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1285   * \param id Filter ID 1
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1286   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1287   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1288  IFX_INLINE void IfxCan_Node_setExtendedFilterId1(Ifx_CAN_EXTMSG *extendedFilterElement, uint32 id);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1289  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1290  /** \brief Sets the Extended Filter ID 2 for Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1291   * \param extendedFilterElement Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1292   * \param id Filter ID 2
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1293   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1294   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1295  IFX_INLINE void IfxCan_Node_setExtendedFilterId2(Ifx_CAN_EXTMSG *extendedFilterElement, uint32 id);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1296  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1297  /** \brief Sets the Extended Message ID filter list size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1298   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1299   * \param size Number of Extended Message ID filter elements
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1300   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1301   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1302  IFX_INLINE void IfxCan_Node_setExtendedFilterListSize(Ifx_CAN_N *node, uint8 size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1303  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1304  /** \brief Sets the start address of Extended Message ID filter list (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1305   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1306   * \param address Start address of Extended Message ID filter list in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1307   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1308   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1309  IFX_INLINE void IfxCan_Node_setExtendedFilterListStartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1310  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1311  /** \brief Sets the Offset to the Rx Buffer Start Address RXBC.RBSA for storage of a matching message for Extended filter element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1312   * \param extendedFilterElement Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1313   * \param rxBufferNumber Offset to the Rx Buffer Start Address RXBC.RBSA for storage of a matching message (Rx buffer number)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1314   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1315   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1316  IFX_INLINE void IfxCan_Node_setExtendedFilterRxBufferOffset(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_RxBufferId rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1317  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1318  /** \brief Sets the Extended Filter Type for Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1319   * \param extendedFilterElement Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1320   * \param filterType Filter Type
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1321   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1322   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1323  IFX_INLINE void IfxCan_Node_setExtendedFilterType(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_FilterType filterType);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1324  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1325  /** \brief Sets the Standard Filter Element Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1326   * \param standardFilterElement Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1327   * \param filterElementConfiguration Filter Element Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1328   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1329   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1330  IFX_INLINE void IfxCan_Node_setStandardFilterConfiguration(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_FilterElementConfiguration filterElementConfiguration);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1331  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1332  /** \brief Sets the Standard Filter ID 1 for Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1333   * \param standardFilterElement Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1334   * \param id Filter ID 1
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1335   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1336   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1337  IFX_INLINE void IfxCan_Node_setStandardFilterId1(Ifx_CAN_STDMSG *standardFilterElement, uint32 id);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1338  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1339  /** \brief Sets the Standard Filter ID 2 for Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1340   * \param standardFilterElement Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1341   * \param id Filter ID 2
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1342   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1343   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1344  IFX_INLINE void IfxCan_Node_setStandardFilterId2(Ifx_CAN_STDMSG *standardFilterElement, uint32 id);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1345  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1346  /** \brief Sets the Standard  Message ID filter list size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1347   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1348   * \param size Number of Standard Message ID filter elements
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1349   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1350   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1351  IFX_INLINE void IfxCan_Node_setStandardFilterListSize(Ifx_CAN_N *node, uint8 size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1352  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1353  /** \brief Sets the start address of Standard Message ID filter list (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1354   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1355   * \param address Start address of Standard Message ID filter in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1356   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1357   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1358  IFX_INLINE void IfxCan_Node_setStandardFilterListStartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1359  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1360  /** \brief Sets the Offset to the Rx Buffer Start Address RXBC.RBSA for storage of a matching message for standard filter element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1361   * \param standardFilterElement Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1362   * \param rxBufferNumber Offset to the Rx Buffer Start Address RXBC.RBSA for storage of a matching message (Rx buffer number)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1363   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1365  IFX_INLINE void IfxCan_Node_setStandardFilterRxBufferOffset(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_RxBufferId rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1366  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1367  /** \brief Sets the Standard Filter Type for Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1368   * \param standardFilterElement Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1369   * \param filterType Filter Type
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1370   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1371   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1372  IFX_INLINE void IfxCan_Node_setStandardFilterType(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_FilterType filterType);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1373  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1374  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1375  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1376  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1377  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1378  /** \brief Returns the address of selected extended filter element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1379   * \param ramBaseAddress Message RAM base address of CAN Module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1380   * \param extendedFilterListStartAddress Start address of Extended Message ID filter list (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1381   * \param filterNumber extended filter element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1382   * \return Extended Filter Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1383   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1384  IFX_EXTERN Ifx_CAN_EXTMSG *IfxCan_Node_getExtendedFilterElementAddress(uint32 ramBaseAddress, uint16 extendedFilterListStartAddress, uint8 filterNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1385  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1386  /** \brief Returns the address of selected standard filter element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1387   * \param ramBaseAddress Message RAM base address of CAN Module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1388   * \param standardFilterListStartAddress Start address of Standard Message ID filter list (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1389   * \param filterNumber Standard filter element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1390   * \return Standard Filter Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1391   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1392  IFX_EXTERN Ifx_CAN_STDMSG *IfxCan_Node_getStandardFilterElementAddress(uint32 ramBaseAddress, uint16 standardFilterListStartAddress, uint8 filterNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1393  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1394  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1395  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1396  /** \addtogroup IfxLld_Can_Std_Interrupt_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1397   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1398  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1399  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1400  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1401  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1402  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1403  /** \brief Clears the selected interrupt Flag
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1404   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1405   * \param interrupt Type of Interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1406   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1407   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1408  IFX_INLINE void IfxCan_Node_clearInterruptFlag(Ifx_CAN_N *node, IfxCan_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1409  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1410  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1411   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1412   * \param interrupt Type of Interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1413   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1414   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1415  IFX_INLINE void IfxCan_Node_disableInterrupt(Ifx_CAN_N *node, IfxCan_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1416  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1417  /** \brief Disables the Cancellation Finished Interrupt of the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1418   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1419   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1420   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1421   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1422  IFX_INLINE void IfxCan_Node_disableTxBufferCancellationFinishedInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1423  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1424  /** \brief Disables the Transmission Interrupt of the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1425   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1426   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1427   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1428   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1429  IFX_INLINE void IfxCan_Node_disableTxBufferTransmissionInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1430  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1431  /** \brief Enables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1432   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1433   * \param interrupt Type of Interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1434   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1435   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1436  IFX_INLINE void IfxCan_Node_enableInterrupt(Ifx_CAN_N *node, IfxCan_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1437  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1438  /** \brief Enables the Cancellation Finished Interrupt of the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1439   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1440   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1441   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1442   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1443  IFX_INLINE void IfxCan_Node_enableTxBufferCancellationFinishedInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1444  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1445  /** \brief Enables the Transmission Interrupt of the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1446   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1447   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1448   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1449   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1450  IFX_INLINE void IfxCan_Node_enableTxBufferTransmissionInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1451  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1452  /** \brief Returns the status of selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1453   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1454   * \param interrupt Type of Interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1455   * \return Status TRUE / FALSE
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1456   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1457  IFX_INLINE boolean IfxCan_Node_getInterruptFlagStatus(Ifx_CAN_N *node, IfxCan_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1458  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1459  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1460  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1461  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1462  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1463  /** \brief Sets the slected interrupt to the selcted interrupt line
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1464   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1465   * \param interruptGroup Type of Interrupt group
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1466   * \param interruptLine Interrupt line number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1467   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1468   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1469  IFX_EXTERN void IfxCan_Node_setGroupInterruptLine(Ifx_CAN_N *node, IfxCan_InterruptGroup interruptGroup, IfxCan_InterruptLine interruptLine);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1470  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1471  /** \brief Sets the slected interrupt to the selcted interrupt line
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1472   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1473   * \param interrupt Type of Interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1474   * \param interruptLine Interrupt line number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1475   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1476   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1477  IFX_EXTERN void IfxCan_Node_setInterruptLine(Ifx_CAN_N *node, IfxCan_Interrupt interrupt, IfxCan_InterruptLine interruptLine);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1478  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1479  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1480  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1481  /** \addtogroup IfxLld_Can_Std_Module_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1482   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1483  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1484  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1485  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1486  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1487  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1488  /** \brief Returns the base adress of the selected Node of CAN module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1489   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1490   * \param nodeId Node number of the module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1491   * \return Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1492   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1493  IFX_INLINE Ifx_CAN_N *IfxCan_getNodePointer(Ifx_CAN *can, IfxCan_NodeId nodeId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1494  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1495  /** \brief Returns the status of module enabled or disabled
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1496   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1497   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1498   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1499  IFX_INLINE boolean IfxCan_isModuleEnabled(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1500  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1501  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1502   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1503   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1504   * \param can Pointer to CAN module registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1505   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1506   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1507  IFX_INLINE boolean IfxCan_isModuleSuspended(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1508  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1509  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1510   * \param can pointer to CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1511   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1512   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1513   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1514  IFX_INLINE void IfxCan_setSleepMode(Ifx_CAN *can, IfxCan_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1515  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1516  /** \brief Set the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1517   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1518   * \param can Pointer to CAN module registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1519   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1520   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1521   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1522  IFX_INLINE void IfxCan_setSuspendMode(Ifx_CAN *can, IfxCan_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1523  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1524  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1525  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1526  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1527  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1528  /** \brief Disables the module (sets the disable request)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1529   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1530   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1531   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1532  IFX_EXTERN void IfxCan_disableModule(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1533  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1534  /** \brief Enables the module (clears the disable request)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1535   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1536   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1537   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1538  IFX_EXTERN void IfxCan_enableModule(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1539  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1540  /**
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1541   * \param can Module index of the CAN
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1542   * \return CAN module register address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1543   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1544  IFX_EXTERN Ifx_CAN *IfxCan_getAddress(IfxCan_Index can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1545  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1546  /** \brief API to get the resource index of the CAN specified.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1547   * \return can resource index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1548   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1549  IFX_EXTERN IfxCan_Index IfxCan_getIndex(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1550  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1551  /** \brief Returns the operatinf frequency of the CAN module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1552   * \return Module Frequency
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1553   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1554  IFX_EXTERN float32 IfxCan_getModuleFrequency(void);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1555  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1556  /** \brief resets CAN kernel
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1557   * \param can pointer to CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1558   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1559   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1560  IFX_EXTERN void IfxCan_resetModule(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1561  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1562  /** \brief sets the clocksource selection
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1563   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1564   * \param clockSelect Clock selection option
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1565   * \param clockSource Type of Clock Source selection
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1566   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1567   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1568  IFX_EXTERN void IfxCan_setClockSource(Ifx_CAN *can, IfxCan_ClockSelect clockSelect, IfxCan_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1569  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1570  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1571  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1572  /** \addtogroup IfxLld_Can_Std_Tx_Event_FIFO_Element_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1573   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1574  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1575  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1576  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1577  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1578  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1579  /** \brief Returns the Bit Rate Switch (BRS) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1580   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1581   * \return Bit Rate Switch (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1582   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1583  IFX_INLINE boolean IfxCan_Node_getBRSFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1584  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1585  /** \brief Returns the Data Length Code from the Tx Event Fifo Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1586   * \param txEventFifoElement Tx Event Fifo Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1587   * \return Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1588   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1589  IFX_INLINE uint32 IfxCan_Node_getDLCFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1590  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1591  /** \brief Returns the Error State Indicator (ESI) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1592   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1593   * \return Error State Indicator
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1594   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1595  IFX_INLINE boolean IfxCan_Node_getESIFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1596  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1597  /** \brief Returns the FD Format (FDF) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1598   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1599   * \return FD format (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1600   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1601  IFX_INLINE boolean IfxCan_Node_getFDFFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1602  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1603  /** \brief Returns the Message Marker (MM) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1604   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1605   * \return Message Marker
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1606   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1607  IFX_INLINE uint8 IfxCan_Node_getMMFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1608  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1609  /** \brief Returns the identifier (ID) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1610   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1611   * \return Identifier
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1612   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1613  IFX_INLINE uint32 IfxCan_Node_getMesssageIdFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1614  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1615  /** \brief Returns the Remote Transmission Request Status (RTR) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1616   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1617   * \return Remote Transmission Request Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1618   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1619  IFX_INLINE boolean IfxCan_Node_getRTRFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1620  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1621  /** \brief Returns the Tx Time Stamp (TXTS) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1622   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1623   * \return Tx Time Stamp
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1624   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1625  IFX_INLINE uint16 IfxCan_Node_getTXTSFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1626  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1627  /** \brief Returns the Tx Event Fifo Acknowledge Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1628   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1629   * \return Returns Tx Event Fifo Acknowledge Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1630   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1631  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoAcknowledgeIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1632  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1633  /** \brief Returns the Tx Event Fifo Fill Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1634   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1635   * \return Returns Tx Event Fifo Fill Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1636   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1637  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoFillLevel(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1638  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1639  /** \brief Returns the Tx Event Fifo Get Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1640   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1641   * \return Returns Tx Event Fifo Get Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1642   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1643  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoGetIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1644  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1645  /** \brief Returns the Tx Event Fifo Put Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1646   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1647   * \return Returns Tx Event Fifo Put Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1648   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1649  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoPutIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1650  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1651  /** \brief Returns Tx Event Fifo Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1652   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1653   * \return Tx Event Fifo Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1654   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1655  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoSize(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1656  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1657  /** \brief Returns Tx Event Fifo Start Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1658   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1659   * \return Tx Event Fifo Start Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1660   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1661  IFX_INLINE uint16 IfxCan_Node_getTxEventFifoStartAddress(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1662  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1663  /** \brief Returns Tx Event Fifo Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1664   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1665   * \return Tx Event Fifo Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1666   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1667  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoWatermarkLevel(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1668  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1669  /** \brief Returns the status of Tx Event Fifo Element lost
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1670   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1671   * \return Returns status of Tx Event Fifo Element Lost\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1672   * True : elemnt lost\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1673   * False : element not lost
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1674   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1675  IFX_INLINE boolean IfxCan_Node_isTxEventFifoElementLost(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1676  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1677  /** \brief Returns the status of Tx Event Fifo Full
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1678   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1679   * \return Returns status of Tx Event Fifo Full\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1680   * True : Fifo full\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1681   * False : Fifo not full
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1682   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1683  IFX_INLINE boolean IfxCan_Node_isTxEventFifoFull(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1684  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1685  /** \brief Sets Tx Event Fifo Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1686   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1687   * \param size Tx Event Fifo Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1688   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1689   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1690  IFX_INLINE void IfxCan_Node_setTxEventFifoSize(Ifx_CAN_N *node, uint8 size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1691  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1692  /** \brief Sets Tx Event Fifo Start Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1693   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1694   * \param address Tx Event Fifo Start Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1695   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1696   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1697  IFX_INLINE void IfxCan_Node_setTxEventFifoStartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1698  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1699  /** \brief Sets Tx Event Fifo Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1700   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1701   * \param level Tx Event Fifo Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1702   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1703   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1704  IFX_INLINE void IfxCan_Node_setTxEventFifoWatermarkLevel(Ifx_CAN_N *node, uint8 level);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1705  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1706  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1707  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1708  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1709  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1710  /** \brief Returns CAN frame mode of operation for a Tx Event Fifo Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1711   * \param txEventFifoElement Tx Event Fifo Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1712   * \return CAN frame mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1713   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1714  IFX_EXTERN IfxCan_FrameMode IfxCan_Node_getFrameModeFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1715  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1716  /** \brief Returns the address of selected Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1717   * \param ramBaseAddress Message RAM base address of CAN module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1718   * \param txEventFifoStartAddress Start address of Tx Event Fifo section in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1719   * \param txEventFifoNumber Tx Event Fifo element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1720   * \return Tx Event Fifo Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1721   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1722  IFX_EXTERN Ifx_CAN_TXEVENT *IfxCan_Node_getTxEventFifoElementAddress(uint32 ramBaseAddress, uint16 txEventFifoStartAddress, uint8 txEventFifoNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1723  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1724  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1725  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1726  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1727  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1728  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1729  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1730  /** \brief CAN frame format of the last received message.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1731   * TRUE: CAN FD frame received
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1732   * FALSE: CAN FD frame not received
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1733   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1734   * \return CAN Frame format (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1735   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1736  IFX_INLINE boolean IfxCan_Node_isCanFDMsgReceived(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1737  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1738  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1739  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1740  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1741  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1742  /** \brief Returns the address of interrupt node source register
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1743   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1744   * \param interruptLine Interrupt line number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1745   * \return Address of interrupt node source register
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1746   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1747  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxCan_getSrcPointer(Ifx_CAN *can, IfxCan_InterruptLine interruptLine);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1748  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1749  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1750  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1751  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1752  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1753  IFX_INLINE void IfxCan_Node_acceptRemoteFramesWithStandardId(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1754  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1755      node->GFC.B.RRFS = 0U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1756  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1757  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1758  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1759  IFX_INLINE void IfxCan_Node_acceptRemoteFrameswithExtendedId(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1760  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1761      node->GFC.B.RRFE = 0U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1762  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1763  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1764  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1765  IFX_INLINE void IfxCan_Node_clearInterruptFlag(Ifx_CAN_N *node, IfxCan_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1766  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1767      uint32 value = (1U << interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1768      node->IR.U = value;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1770  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1771  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1772  IFX_INLINE void IfxCan_Node_configureExtendedFilterForNonMatchingFrames(Ifx_CAN_N *node, IfxCan_NonMatchingFrame filter)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1774      node->GFC.B.ANFE = filter;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1776  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1777  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1778  IFX_INLINE void IfxCan_Node_configureStandardFilterForNonMatchingFrames(Ifx_CAN_N *node, IfxCan_NonMatchingFrame filter)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1780      node->GFC.B.ANFS = filter;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1782  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1783  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1784  IFX_INLINE void IfxCan_Node_disableConfigurationChange(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1786      node->CCCR.B.CCE = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1787  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1788      while (node->CCCR.B.CCE != 0)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1789      {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1790  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1791      node->CCCR.B.INIT = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1792  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1793      while (node->CCCR.B.INIT != 0)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1794      {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1795  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1796  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1797  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1798  IFX_INLINE void IfxCan_Node_disableInterrupt(Ifx_CAN_N *node, IfxCan_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1799  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1800      uint32 mask = (1U << interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1801      node->IE.U = node->IE.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1802  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1803  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1804  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1805  IFX_INLINE void IfxCan_Node_disableTxBufferCancellationFinishedInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1806  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1807      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1808      node->TX.BCIE.U = node->TX.BCIE.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1809  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1810  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1811  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1812  IFX_INLINE void IfxCan_Node_disableTxBufferTransmissionInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1813  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1814      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1815      node->TX.BTIE.U = node->TX.BTIE.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1816  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1817  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1818  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1819  IFX_INLINE void IfxCan_Node_enableConfigurationChange(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1820  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1821      Ifx_CAN_N_CCCR cccr;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1822  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1823      /* If INIT already set, clear it before setting again. */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1824      /* The module needs some time if INIT was rewritten !*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1825      if (node->CCCR.B.INIT == 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1826      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1827          node->CCCR.B.CCE = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1828  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1829          while (node->CCCR.B.CCE != 0)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1830          {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1831  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1832          node->CCCR.B.INIT = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1833  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1834          while (node->CCCR.B.INIT != 0)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1835          {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1836      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1837  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1838      node->CCCR.B.INIT = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1839  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1840      while (node->CCCR.B.INIT != 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1841      {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1842  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1843      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1844          cccr.U       = node->CCCR.U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1845          cccr.B.INIT  = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1846          cccr.B.CCE   = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1847          node->CCCR.U = cccr.U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1848      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1849  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1850  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1851  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1852  IFX_INLINE void IfxCan_Node_enableInterrupt(Ifx_CAN_N *node, IfxCan_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1853  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1854      uint32 mask = (1U << interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1855      node->IE.U = node->IE.U | (mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1856  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1857  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1858  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1859  IFX_INLINE void IfxCan_Node_enableLoopbackMode(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1860  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1861      node->NPCR.B.LBM = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1862  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1863  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1864  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1865  IFX_INLINE void IfxCan_Node_enableTxBufferCancellationFinishedInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1866  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1867      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1868      node->TX.BCIE.U = node->TX.BCIE.U | (mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1869  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1870  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1871  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1872  IFX_INLINE void IfxCan_Node_enableTxBufferTransmissionInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1873  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1874      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1875      node->TX.BTIE.U = node->TX.BTIE.U | (mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1876  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1877  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1878  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1879  IFX_INLINE boolean IfxCan_Node_getBRSFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1880  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1881      return txEventFifoElement->E1.B.BRS;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1882  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1883  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1884  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1885  IFX_INLINE uint32 IfxCan_Node_getDLCFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1886  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1887      return (IfxCan_DataLengthCode)txEventFifoElement->E1.B.DLC;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1888  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1889  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1890  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1891  IFX_INLINE uint32 IfxCan_Node_getDataLengthCode(Ifx_CAN_RXMSG *rxBufferElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1892  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1893      return (IfxCan_DataLengthCode)rxBufferElement->R1.B.DLC;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1894  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1895  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1896  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1897  IFX_INLINE boolean IfxCan_Node_getESIFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1898  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1899      return txEventFifoElement->E0.B.ESI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1900  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1901  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1902  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1903  IFX_INLINE boolean IfxCan_Node_getFDFFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1904  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1905      return txEventFifoElement->E1.B.FDF;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1906  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1907  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1908  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1909  IFX_INLINE boolean IfxCan_Node_getInterruptFlagStatus(Ifx_CAN_N *node, IfxCan_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1910  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1911      uint32  mask   = (1U << interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1912      boolean status = (node->IR.U & mask) != 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1913      return status;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1914  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1915  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1916  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1917  IFX_INLINE uint8 IfxCan_Node_getMMFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1918  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1919      return (uint8)txEventFifoElement->E1.B.MM;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1920  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1921  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1922  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1923  IFX_INLINE uint32 IfxCan_Node_getMesssageId(Ifx_CAN_RXMSG *rxBufferElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1924  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1925      /* get identifier extention */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1926      IfxCan_MessageIdLength messageIdLength = (IfxCan_MessageIdLength)rxBufferElement->R0.B.XTD;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1927  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1928      /* get identifier */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1929      return rxBufferElement->R0.B.ID >> ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1930  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1931  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1932  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1933  IFX_INLINE uint32 IfxCan_Node_getMesssageIdFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1934  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1935      /* get identifier extention */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1936      IfxCan_MessageIdLength messageIdLength = (IfxCan_MessageIdLength)txEventFifoElement->E0.B.XTD;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1937  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1938      /* get identifier */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1939      return txEventFifoElement->E0.B.ID >> ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1940  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1941  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1942  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1943  IFX_INLINE boolean IfxCan_Node_getRTRFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1944  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1945      return txEventFifoElement->E0.B.RTR;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1946  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1947  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1948  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1949  IFX_INLINE uint8 IfxCan_Node_getRxFifo0FillLevel(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1950  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1951      return node->RX.F0S.B.F0FL;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1952  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1953  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1954  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1955  IFX_INLINE IfxCan_RxBufferId IfxCan_Node_getRxFifo0GetIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1956  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1957      return (IfxCan_RxBufferId)node->RX.F0S.B.F0GI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1958  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1959  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1960  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1961  IFX_INLINE uint8 IfxCan_Node_getRxFifo1FillLevel(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1962  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1963      return node->RX.F1S.B.F1FL;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1964  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1965  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1966  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1967  IFX_INLINE IfxCan_RxBufferId IfxCan_Node_getRxFifo1GetIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1968  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1969      return (IfxCan_RxBufferId)node->RX.F1S.B.F1GI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1970  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1971  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1972  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1973  IFX_INLINE uint16 IfxCan_Node_getTXTSFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1974  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1975      return (uint16)txEventFifoElement->E1.B.TXTS;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1976  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1977  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1978  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1979  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoAcknowledgeIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1980  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1981      return (uint8)node->TX.EFA.B.EFAI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1982  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1983  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1984  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1985  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoFillLevel(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1986  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1987      return (uint8)node->TX.EFS.B.EFFL;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1988  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1989  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1990  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1991  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoGetIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1992  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1993      return (uint8)node->TX.EFS.B.EFGI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1994  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1995  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1996  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1997  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoPutIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1998  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1999      return (uint8)node->TX.EFS.B.EFPI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2000  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2001  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2002  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2003  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoSize(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2004  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2005      return (uint8)node->TX.EFC.B.EFS;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2006  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2007  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2008  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2009  IFX_INLINE uint16 IfxCan_Node_getTxEventFifoStartAddress(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2010  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2011      return (uint16)node->TX.EFC.B.EFSA;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2012  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2013  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2014  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2015  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoWatermarkLevel(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2016  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2017      return (uint8)node->TX.EFC.B.EFWM;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2018  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2019  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2020  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2021  IFX_INLINE IfxCan_TxBufferId IfxCan_Node_getTxFifoQueuePutIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2022  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2023      return (IfxCan_TxBufferId)node->TX.FQS.B.TFQPI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2024  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2025  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2026  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2027  IFX_INLINE boolean IfxCan_Node_isNodeSynchronized(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2028  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2029      return (boolean)((node->PSR.B.ACT != 0) ? 1 : 0);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2030  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2031  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2032  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2033  IFX_INLINE boolean IfxCan_Node_isTxBufferCancellationFinished(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2034  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2035      uint32  mask    = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2036      boolean tempVar = (boolean)(node->TX.BTO.U & mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2037      return tempVar;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2038  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2039  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2040  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2041  IFX_INLINE boolean IfxCan_Node_isTxBufferRequestPending(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2042  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2043      uint32  mask    = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2044      boolean tempVar = (boolean)(node->TX.BRP.U & mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2045      return tempVar;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2046  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2047  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2048  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2049  IFX_INLINE boolean IfxCan_Node_isTxBufferTransmissionOccured(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2050  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2051      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2052      return (boolean)(node->TX.BTO.U & mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2053  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2054  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2055  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2056  IFX_INLINE boolean IfxCan_Node_isTxEventFifoElementLost(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2057  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2058      return node->TX.EFS.B.TEFL;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2059  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2060  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2061  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2062  IFX_INLINE boolean IfxCan_Node_isTxEventFifoFull(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2063  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2064      return node->TX.EFS.B.EFF;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2065  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2066  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2067  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2068  IFX_INLINE boolean IfxCan_Node_isTxFifoQueueFull(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2069  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2070      return node->TX.FQS.B.TFQF;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2071  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2072  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2073  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2074  IFX_INLINE void IfxCan_Node_pauseTransmission(Ifx_CAN_N *node, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2075  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2076      node->CCCR.B.TXP = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2077  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2078  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2079  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2080  IFX_INLINE void IfxCan_Node_rejectRemoteFramesWithExtendedId(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2081  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2082      node->GFC.B.RRFE = 1U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2083  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2084  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2085  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2086  IFX_INLINE void IfxCan_Node_rejectRemoteFramesWithStandardId(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2087  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2088      node->GFC.B.RRFS = 1U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2089  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2090  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2091  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2092  IFX_INLINE void IfxCan_Node_setDataLength(Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2093  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2094      txBufferElement->T1.B.DLC = dataLengthCode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2095  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2096  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2097  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2098  IFX_INLINE void IfxCan_Node_setDataLengthCode(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2099  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2100      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2101      txBufferElement->T1.B.DLC = dataLengthCode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2102  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2103  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2104  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2105  IFX_INLINE void IfxCan_Node_setDedicatedTxBuffersNumber(Ifx_CAN_N *node, uint8 number)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2106  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2107      node->TX.BC.B.NDTB = number;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2108  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2109  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2110  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2111  IFX_INLINE void IfxCan_Node_setErrStateIndicator(Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2112  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2113      txBufferElement->T0.B.ESI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2114  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2115  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2116  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2117  IFX_INLINE void IfxCan_Node_setErrorStateIndicator(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2118  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2119      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2120      txBufferElement->T0.B.ESI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2121  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2122  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2123  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2124  IFX_INLINE void IfxCan_Node_setExtendedFilterConfiguration(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_FilterElementConfiguration filterElementConfiguration)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2125  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2126      extendedFilterElement->F0.B.EFEC = filterElementConfiguration;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2127  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2128  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2129  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2130  IFX_INLINE void IfxCan_Node_setExtendedFilterId1(Ifx_CAN_EXTMSG *extendedFilterElement, uint32 id)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2131  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2132      extendedFilterElement->F0.B.EFID1 = id;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2133  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2134  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2135  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2136  IFX_INLINE void IfxCan_Node_setExtendedFilterId2(Ifx_CAN_EXTMSG *extendedFilterElement, uint32 id)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2137  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2138      extendedFilterElement->F1.B.EFID2 = id;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2139  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2140  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2141  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2142  IFX_INLINE void IfxCan_Node_setExtendedFilterListSize(Ifx_CAN_N *node, uint8 size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2143  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2144      node->XIDFC.B.LSE = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2145  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2146  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2147  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2148  IFX_INLINE void IfxCan_Node_setExtendedFilterListStartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2149  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2150      node->XIDFC.B.FLESA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2151  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2152  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2153  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2154  IFX_INLINE void IfxCan_Node_setExtendedFilterRxBufferOffset(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_RxBufferId rxBufferNumber)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2155  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2156      extendedFilterElement->F1.B.EFID2 = (uint8)rxBufferNumber;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2157  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2158  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2159  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2160  IFX_INLINE void IfxCan_Node_setExtendedFilterType(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_FilterType filterType)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2161  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2162      extendedFilterElement->F1.B.EFT = filterType;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2163  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2164  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2165  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2166  IFX_INLINE void IfxCan_Node_setInitialisation(Ifx_CAN_N *node, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2167  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2168      node->CCCR.B.INIT = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2169  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2170  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2171  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2172  IFX_INLINE void IfxCan_Node_setMessageMarker(Ifx_CAN_TXMSG *txBufferElement, IfxCan_TxBufferId bufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2173  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2174      txBufferElement->T1.B.MM = bufferId;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2175  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2176  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2177  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2178  IFX_INLINE void IfxCan_Node_setMsgId(Ifx_CAN_TXMSG *txBufferElement, uint32 messageId, IfxCan_MessageIdLength messageIdLength)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2179  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2180      /* set identifier extention */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2181      txBufferElement->T0.B.XTD = (messageIdLength != IfxCan_MessageIdLength_extended) ? 0 : 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2182      /* set identifier */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2183      txBufferElement->T0.B.ID  = messageId << ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2184  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2185  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2186  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2187  IFX_INLINE void IfxCan_Node_setMesssageId(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, uint32 messageId, IfxCan_MessageIdLength messageIdLength)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2188  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2189      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2190      /* set identifier extention */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2191      txBufferElement->T0.B.XTD = (messageIdLength != IfxCan_MessageIdLength_extended) ? 0 : 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2192      /* set identifier */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2193      txBufferElement->T0.B.ID  = messageId << ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2194  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2195  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2196  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2197  IFX_INLINE void IfxCan_Node_setRemoteTransmitReq(Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2198  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2199      txBufferElement->T0.B.RTR = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2200  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2201  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2202  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2203  IFX_INLINE void IfxCan_Node_setRemoteTransmitRequest(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2204  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2205      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2206      txBufferElement->T0.B.RTR = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2207  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2208  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2209  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2210  IFX_INLINE void IfxCan_Node_setRxBufferDataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2211  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2212      node->RX.ESC.B.RBDS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2213  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2214  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2215  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2216  IFX_INLINE void IfxCan_Node_setRxBuffersStartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2217  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2218      node->RX.BC.B.RBSA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2219  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2220  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2221  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2222  IFX_INLINE void IfxCan_Node_setRxFifo0AcknowledgeIndex(Ifx_CAN_N *node, IfxCan_RxBufferId RxBufferNumber)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2223  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2224      node->RX.F0A.B.F0AI = RxBufferNumber;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2225  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2226  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2227  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2228  IFX_INLINE void IfxCan_Node_setRxFifo0DataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2229  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2230      node->RX.ESC.B.F0DS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2231  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2232  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2233  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2234  IFX_INLINE void IfxCan_Node_setRxFifo0OperatingMode(Ifx_CAN_N *node, IfxCan_RxFifoMode mode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2235  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2236      node->RX.F0C.B.F0OM = mode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2237  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2238  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2239  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2240  IFX_INLINE void IfxCan_Node_setRxFifo0Size(Ifx_CAN_N *node, uint8 size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2241  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2242      node->RX.F0C.B.F0S = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2243  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2244  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2245  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2246  IFX_INLINE void IfxCan_Node_setRxFifo0StartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2247  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2248      node->RX.F0C.B.F0SA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2249  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2250  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2251  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2252  IFX_INLINE void IfxCan_Node_setRxFifo0WatermarkLevel(Ifx_CAN_N *node, uint8 level)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2253  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2254      node->RX.F0C.B.F0WM = level;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2255  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2256  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2257  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2258  IFX_INLINE void IfxCan_Node_setRxFifo1AcknowledgeIndex(Ifx_CAN_N *node, IfxCan_RxBufferId RxBufferNumber)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2259  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2260      node->RX.F1A.B.F1AI = RxBufferNumber;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2261  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2262  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2263  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2264  IFX_INLINE void IfxCan_Node_setRxFifo1DataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2265  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2266      node->RX.ESC.B.F1DS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2267  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2268  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2269  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2270  IFX_INLINE void IfxCan_Node_setRxFifo1OperatingMode(Ifx_CAN_N *node, IfxCan_RxFifoMode mode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2271  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2272      node->RX.F1C.B.F1OM = mode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2273  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2274  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2275  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2276  IFX_INLINE void IfxCan_Node_setRxFifo1Size(Ifx_CAN_N *node, uint8 size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2277  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2278      node->RX.F1C.B.F1S = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2279  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2280  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2281  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2282  IFX_INLINE void IfxCan_Node_setRxFifo1StartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2283  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2284      node->RX.F1C.B.F1SA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2285  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2286  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2287  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2288  IFX_INLINE void IfxCan_Node_setRxFifo1WatermarkLevel(Ifx_CAN_N *node, uint8 level)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2289  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2290      node->RX.F1C.B.F1WM = level;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2291  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2292  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2293  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2294  IFX_INLINE void IfxCan_Node_setStandardFilterConfiguration(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_FilterElementConfiguration filterElementConfiguration)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2295  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2296      standardFilterElement->S0.B.SFEC = filterElementConfiguration;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2297  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2298  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2299  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2300  IFX_INLINE void IfxCan_Node_setStandardFilterId1(Ifx_CAN_STDMSG *standardFilterElement, uint32 id)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2301  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2302      standardFilterElement->S0.B.SFID1 = id;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2303  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2304  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2305  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2306  IFX_INLINE void IfxCan_Node_setStandardFilterId2(Ifx_CAN_STDMSG *standardFilterElement, uint32 id)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2307  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2308      standardFilterElement->S0.B.SFID2 = id;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2309  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2310  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2311  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2312  IFX_INLINE void IfxCan_Node_setStandardFilterListSize(Ifx_CAN_N *node, uint8 size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2313  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2314      node->SIDFC.B.LSS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2315  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2316  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2317  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2318  IFX_INLINE void IfxCan_Node_setStandardFilterListStartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2319  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2320      node->SIDFC.B.FLSSA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2321  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2322  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2323  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2324  IFX_INLINE void IfxCan_Node_setStandardFilterRxBufferOffset(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_RxBufferId rxBufferNumber)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2325  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2326      standardFilterElement->S0.B.SFID2 = (uint8)rxBufferNumber;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2327  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2328  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2329  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2330  IFX_INLINE void IfxCan_Node_setStandardFilterType(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_FilterType filterType)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2331  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2332      standardFilterElement->S0.B.SFT = filterType;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2333  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2334  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2335  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2336  IFX_INLINE void IfxCan_Node_setTransceiverDelayCompensationOffset(Ifx_CAN_N *node, uint8 delay)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2337  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2338      /* enable Transceiver Delay Compensation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2339      node->DBTP.B.TDC  = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2340      /* set Transceiver Delay Compensation offset */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2341      node->TDCR.B.TDCO = delay;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2342  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2343  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2344  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2345  IFX_INLINE void IfxCan_Node_setTransmitFifoQueueMode(Ifx_CAN_N *node, IfxCan_TxMode mode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2346  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2347      if ((mode == IfxCan_TxMode_fifo) || (mode == IfxCan_TxMode_queue))
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2348      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2349          node->TX.BC.B.TFQM = mode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2350      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2351      else
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2352      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2353          IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE); /* wrong selection  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2354      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2355  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2356  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2357  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2358  IFX_INLINE void IfxCan_Node_setTransmitFifoQueueSize(Ifx_CAN_N *node, uint8 number)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2359  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2360      node->TX.BC.B.TFQS = number;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2361  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2362  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2363  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2364  IFX_INLINE void IfxCan_Node_setTxBufferAddRequest(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2365  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2366      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2367      node->TX.BAR.U = node->TX.BAR.U | (mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2368  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2369  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2370  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2371  IFX_INLINE void IfxCan_Node_setTxBufferCancellationRequest(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2372  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2373      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2374      node->TX.BCR.U = node->TX.BCR.U | (mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2375  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2376  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2377  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2378  IFX_INLINE void IfxCan_Node_setTxBufferDataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2379  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2380      node->TX.ESC.B.TBDS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2381  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2382  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2383  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2384  IFX_INLINE void IfxCan_Node_setTxBuffersStartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2385  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2386      node->TX.BC.B.TBSA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2387  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2388  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2389  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2390  IFX_INLINE void IfxCan_Node_setTxEventFifoCtrl(Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2391  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2392      txBufferElement->T1.B.EFC = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2393  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2394  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2395  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2396  IFX_INLINE void IfxCan_Node_setTxEventFifoControl(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2397  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2398      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2399      txBufferElement->T1.B.EFC = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2400  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2401  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2402  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2403  IFX_INLINE void IfxCan_Node_setTxEventFifoSize(Ifx_CAN_N *node, uint8 size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2404  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2405      node->TX.EFC.B.EFS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2406  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2407  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2408  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2409  IFX_INLINE void IfxCan_Node_setTxEventFifoStartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2410  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2411      node->TX.EFC.B.EFSA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2412  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2413  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2414  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2415  IFX_INLINE void IfxCan_Node_setTxEventFifoWatermarkLevel(Ifx_CAN_N *node, uint8 level)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2416  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2417      node->TX.EFC.B.EFWM = level;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2418  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2419  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2420  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2421  IFX_INLINE Ifx_CAN_N *IfxCan_getNodePointer(Ifx_CAN *can, IfxCan_NodeId nodeId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2422  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2423      return &(can->N[nodeId]);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2424  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2425  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2426  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2427  IFX_INLINE boolean IfxCan_isModuleEnabled(Ifx_CAN *can)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2428  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2429      return can->CLC.B.DISS == 0;
	ld.bu	d15,[a15]
.L775:
	jz.t	d15:1,.L147
.L1265:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   900      {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   901  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   902      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d8
.L927:
	j	IfxScuWdt_setCpuEndinit
.L769:
	
__IfxCan_disableModule_function_end:
	.size	IfxCan_disableModule,__IfxCan_disableModule_function_end-IfxCan_disableModule
.L431:
	; End of function
	
	.sdecl	'.text.IfxCan..cocofun_15',code,cluster('.cocofun_15')
	.sect	'.text.IfxCan..cocofun_15'
	.align	2
; Function .cocofun_15
.L252:
.cocofun_15:	.type	func
; Function body .cocofun_15, coco_iter:1

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     2   * \file IfxCan.h
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     3   * \brief CAN  basic functionality
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     4   * \ingroup IfxLld_Can
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     5   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     8   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     9   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    11   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    16   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    18   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    25   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    32   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    40   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    41   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    42   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    43   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    44   * \defgroup IfxLld_Can_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    45   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    46   * \defgroup IfxLld_Can_Std_Data_Structures Data Structures
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    47   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    48   * \defgroup IfxLld_Can_Std_Node_Functions Node Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    49   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    50   * \defgroup IfxLld_Can_Std_Tx_Element_Functions Tx Element Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    51   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    52   * \defgroup IfxLld_Can_Std_Rx_Element_Functions Rx Element Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    53   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    54   * \defgroup IfxLld_Can_Std_Filter_Functions Filter Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    55   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    56   * \defgroup IfxLld_Can_Std_Interrupt_Functions Interrupt Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    57   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    58   * \defgroup IfxLld_Can_Std_Module_Functions Module Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    59   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    60   * \defgroup IfxLld_Can_Std_Tx_Event_FIFO_Element_Functions Tx Event FIFO Element Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    61   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    62   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    63  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    64  #ifndef IFXCAN_H
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    65  #define IFXCAN_H 1
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    66  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    67  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    68  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    69  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    70  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    71  #include "_Impl/IfxCan_cfg.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    72  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    73  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    74  #include "_PinMap/IfxCan_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    75  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    76  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    77  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    78  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    79  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    80  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    81  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    82  /** \addtogroup IfxLld_Can_Std_Enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    83   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    84  /** \brief Status of warning limit for error counters in CAN node
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    85   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    86  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    87  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    88      IfxCan_CanNodeErrorWarningLimitStatus_notReached = 0,  /**< \brief Error counters are below the warning limit */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    89      IfxCan_CanNodeErrorWarningLimitStatus_reached    = 1   /**< \brief Error counter reached the warning limit */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    90  } IfxCan_CanNodeErrorWarningLimitStatus;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    91  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    92  /** \brief Clock selection option\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    93   * Description in Ifx_CAN.MCR.CLKSELx, (x = 0,1,2)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    94   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    95  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    96  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    97      IfxCan_ClockSelect_0,     /**< \brief clock selection 0  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    98      IfxCan_ClockSelect_1,     /**< \brief clock selection 1  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    99      IfxCan_ClockSelect_2,     /**< \brief clock selection 2  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   100      IfxCan_ClockSelect_3      /**< \brief clock selection 3  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   101  } IfxCan_ClockSelect;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   102  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   103  /** \brief Type of Clock Source selection\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   104   * Description in Ifx_CAN.MCR.CLKSELx, (x = 0,1,2)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   105   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   106  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   107  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   108      IfxCan_ClockSource_noClock      = 0,  /**< \brief No clock is switched on */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   109      IfxCan_ClockSource_asynchronous = 1,  /**< \brief The Asynchronous clock source is switched on */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   110      IfxCan_ClockSource_synchronous  = 2,  /**< \brief The Synchronous clock source is switched on */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   111      IfxCan_ClockSource_both         = 3   /**< \brief Both clock sources are switched on */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   112  } IfxCan_ClockSource;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   113  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   114  /** \brief Data Field Size\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   115   * Definition in Ifx_CAN.N[x]TX.ESC.B.TBDS, Ifx_CAN.N[x].RX.ESC.B.RBDS, Ifx_CAN.N[x].RX.ESC.B.FyDS (x= 0,1,2,3; y = 0, 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   116   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   117  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   118  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   119      IfxCan_DataFieldSize_8,      /**< \brief 8 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   120      IfxCan_DataFieldSize_12,     /**< \brief 12 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   121      IfxCan_DataFieldSize_16,     /**< \brief 16 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   122      IfxCan_DataFieldSize_20,     /**< \brief 20 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   123      IfxCan_DataFieldSize_24,     /**< \brief 24 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   124      IfxCan_DataFieldSize_32,     /**< \brief 32 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   125      IfxCan_DataFieldSize_48,     /**< \brief 48 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   126      IfxCan_DataFieldSize_64      /**< \brief 64 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   127  } IfxCan_DataFieldSize;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   128  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   129  /** \brief Data Length code of the Message
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   130   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   131  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   132  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   133      IfxCan_DataLengthCode_0,      /**< \brief 0 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   134      IfxCan_DataLengthCode_1,      /**< \brief 1 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   135      IfxCan_DataLengthCode_2,      /**< \brief 2 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   136      IfxCan_DataLengthCode_3,      /**< \brief 3 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   137      IfxCan_DataLengthCode_4,      /**< \brief 4 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   138      IfxCan_DataLengthCode_5,      /**< \brief 5 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   139      IfxCan_DataLengthCode_6,      /**< \brief 6 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   140      IfxCan_DataLengthCode_7,      /**< \brief 7 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   141      IfxCan_DataLengthCode_8,      /**< \brief 8 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   142      IfxCan_DataLengthCode_12,     /**< \brief 12 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   143      IfxCan_DataLengthCode_16,     /**< \brief 16 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   144      IfxCan_DataLengthCode_20,     /**< \brief 20 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   145      IfxCan_DataLengthCode_24,     /**< \brief 24 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   146      IfxCan_DataLengthCode_32,     /**< \brief 32 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   147      IfxCan_DataLengthCode_48,     /**< \brief 48 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   148      IfxCan_DataLengthCode_64      /**< \brief 64 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   149  } IfxCan_DataLengthCode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   150  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   151  /** \brief Filter Element Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   152   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   154  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   155      IfxCan_FilterElementConfiguration_disable,                     /**< \brief Disable filter element */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   156      IfxCan_FilterElementConfiguration_storeInRxFifo0,              /**< \brief Store in Rx FIFO 0 if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   157      IfxCan_FilterElementConfiguration_storeInRxFifo1,              /**< \brief Store in Rx FIFO 1 if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   158      IfxCan_FilterElementConfiguration_rejectId,                    /**< \brief Reject ID if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   159      IfxCan_FilterElementConfiguration_setPriority,                 /**< \brief Set priority if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   160      IfxCan_FilterElementConfiguration_setPriorityAndStoreInFifo0,  /**< \brief Set priority and store in FIFO 0 if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   161      IfxCan_FilterElementConfiguration_setPriorityAndStoreInFifo1,  /**< \brief Set priority and store in FIFO 1 if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   162      IfxCan_FilterElementConfiguration_storeInRxBuffer              /**< \brief Store into Rx Buffer */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   163  } IfxCan_FilterElementConfiguration;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   164  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   165  /** \brief Filter Type
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   166   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   167  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   168  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   169      IfxCan_FilterType_range,    /**< \brief Range filter from SF1ID to SF2ID (SF2ID is greater than SF1ID) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   170      IfxCan_FilterType_dualId,   /**< \brief Dual ID filter for SF1ID or SF2ID */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   171      IfxCan_FilterType_classic,  /**< \brief Classic filter: SF1ID = filter, SF2ID = mask */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   172      IfxCan_FilterType_none      /**< \brief Reserved */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   173  } IfxCan_FilterType;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   174  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   175  /** \brief CAN Frame mode\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   176   * Description in Ifx_CAN.N[x].CCCR.CME, (x= 0 to 3)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   177   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   178  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   179  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   180      IfxCan_FrameMode_standard,      /**< \brief Standard CAN frame (transmit and receive) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   181      IfxCan_FrameMode_fdLong,        /**< \brief CAN FD long frame in transmit and CAN FD long and fast frame in receive */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   182      IfxCan_FrameMode_fdLongAndFast  /**< \brief CAN FD long and fast frames (transmit and receive) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   183  } IfxCan_FrameMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   184  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   185  /** \brief CAN frame type
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   186   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   187  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   188  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   189      IfxCan_FrameType_receive,             /**< \brief Data frame is received */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   190      IfxCan_FrameType_transmit,            /**< \brief Data frame is generated */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   191      IfxCan_FrameType_transmitAndReceive,  /**< \brief for both transmit and receive frames */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   192      IfxCan_FrameType_remoteRequest,       /**< \brief Remote request frame is generated */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   193      IfxCan_FrameType_remoteAnswer         /**< \brief Answer frame is generated on reception of the corresponding remote request */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   194  } IfxCan_FrameType;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   195  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   196  /** \brief Type of interrupt\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   197   * Definition in Ifx_CAN.N[x].IE, Ifx_CAN.N[x].IR, Ifx_CAN.N[x].ILS, (x= 0 to 3)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   198   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   199  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   200  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   201      IfxCan_Interrupt_rxFifo0NewMessage,                 /**< \brief Rx FIFO 0 New Message Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   202      IfxCan_Interrupt_rxFifo0WatermarkReached,           /**< \brief Rx FIFO 0 Watermark Reached Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   203      IfxCan_Interrupt_rxFifo0Full,                       /**< \brief Rx FIFO 0 Full Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   204      IfxCan_Interrupt_rxFifo0MessageLost,                /**< \brief Rx FIFO 0 Message Lost Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   205      IfxCan_Interrupt_rxFifo1NewMessage,                 /**< \brief Rx FIFO 1 New Message Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   206      IfxCan_Interrupt_rxFifo1WatermarkReached,           /**< \brief Rx FIFO 1 Watermark Reached Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   207      IfxCan_Interrupt_rxFifo1Full,                       /**< \brief Rx FIFO 1 Full Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   208      IfxCan_Interrupt_rxFifo1MessageLost,                /**< \brief Rx FIFO 1 Message Lost Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   209      IfxCan_Interrupt_highPriorityMessage,               /**< \brief High Priority Message Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   210      IfxCan_Interrupt_transmissionCompleted,             /**< \brief Transmission Completed Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   211      IfxCan_Interrupt_transmissionCancellationFinished,  /**< \brief Transmission Cancellation Finished Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   212      IfxCan_Interrupt_txFifoEmpty,                       /**< \brief Tx FIFO Empty Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   213      IfxCan_Interrupt_txEventFifoNewEntry,               /**< \brief Tx Event FIFO New Entry Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   214      IfxCan_Interrupt_txEventFifoWatermarkReached,       /**< \brief Tx Event FIFO Watermark Reached Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   215      IfxCan_Interrupt_txEventFifoFull,                   /**< \brief Tx Event FIFO Full Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   216      IfxCan_Interrupt_txEventFifoEventLost,              /**< \brief Tx Event FIFO Event Lost Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   217      IfxCan_Interrupt_timestampWraparound,               /**< \brief Timestamp Wraparound Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   218      IfxCan_Interrupt_messageRAMAccessFailure,           /**< \brief Message RAM Access Failure Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   219      IfxCan_Interrupt_timeoutOccurred,                   /**< \brief Timeout Occurred Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   220      IfxCan_Interrupt_messageStoredToDedicatedRxBuffer,  /**< \brief Message stored to Dedicated Rx Buffer Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   221      IfxCan_Interrupt_bitErrorCorrected,                 /**< \brief Bit Error Corrected Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   222      IfxCan_Interrupt_bitErrorUncorrected,               /**< \brief Bit Error Uncorrected Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   223      IfxCan_Interrupt_errorLoggingOverflow,              /**< \brief Error Logging Overflow Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   224      IfxCan_Interrupt_errorPassive,                      /**< \brief Error Passive Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   225      IfxCan_Interrupt_warningStatus,                     /**< \brief Warning Status Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   226      IfxCan_Interrupt_busOffStatus,                      /**< \brief Bus_Off Status Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   227      IfxCan_Interrupt_watchdog,                          /**< \brief Watchdog Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   228      IfxCan_Interrupt_protocolErrorArbitration,          /**< \brief Protocol Error in Arbitration phase Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   229      IfxCan_Interrupt_protocolErrorData,                 /**< \brief Protocol Error in Data phase Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   230      IfxCan_Interrupt_AccessToReservedAddress            /**< \brief Access to Reserved Address Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   231  } IfxCan_Interrupt;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   232  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   233  /** \brief Type of interrupt\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   234   * Definition in Ifx_CAN.GRINT[x] (x= 0 , 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   235   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   236  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   237  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   238      IfxCan_InterruptGroup_tefifo,  /**< \brief Transmit Event FIFO Incidents */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   239      IfxCan_InterruptGroup_hpe,     /**< \brief High Priority Events */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   240      IfxCan_InterruptGroup_wati,    /**< \brief Watermark interrupts are mapped here. */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   241      IfxCan_InterruptGroup_alrt,    /**< \brief Alerts */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   242      IfxCan_InterruptGroup_moer,    /**< \brief Module errors */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   243      IfxCan_InterruptGroup_safe,    /**< \brief Safety counter overflow */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   244      IfxCan_InterruptGroup_boff,    /**< \brief Bus Off */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   245      IfxCan_InterruptGroup_loi,     /**< \brief Last Error Interrupts */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   246      IfxCan_InterruptGroup_reint,   /**< \brief Message stored in dedicated receive buffer interrupt (IR.DRX) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   247      IfxCan_InterruptGroup_rxf1f,   /**< \brief Receive FIFO1 full interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   248      IfxCan_InterruptGroup_rxf0f,   /**< \brief Receive FIFO0 full interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   249      IfxCan_InterruptGroup_rxf1n,   /**< \brief Receive FIFO1 new message Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   250      IfxCan_InterruptGroup_rxf0n,   /**< \brief Receive FIFO0 new message Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   251      IfxCan_InterruptGroup_reti,    /**< \brief Receive timeouts */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   252      IfxCan_InterruptGroup_traq,    /**< \brief Transmission Queue Events */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   253      IfxCan_InterruptGroup_traco    /**< \brief Interrupts of the transmission control */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   254  } IfxCan_InterruptGroup;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   255  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   256  /** \brief Interrupt line number INT_Ox (x= 0 - 15) \n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   257   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   258  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   259  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   260      IfxCan_InterruptLine_0,     /**< \brief Interrupt Line 0  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   261      IfxCan_InterruptLine_1,     /**< \brief Interrupt Line 1  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   262      IfxCan_InterruptLine_2,     /**< \brief Interrupt Line 2  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   263      IfxCan_InterruptLine_3,     /**< \brief Interrupt Line 3  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   264      IfxCan_InterruptLine_4,     /**< \brief Interrupt Line 4  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   265      IfxCan_InterruptLine_5,     /**< \brief Interrupt Line 5  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   266      IfxCan_InterruptLine_6,     /**< \brief Interrupt Line 6  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   267      IfxCan_InterruptLine_7,     /**< \brief Interrupt Line 7  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   268      IfxCan_InterruptLine_8,     /**< \brief Interrupt Line 8  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   269      IfxCan_InterruptLine_9,     /**< \brief Interrupt Line 9  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   270      IfxCan_InterruptLine_10,    /**< \brief Interrupt Line 10  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   271      IfxCan_InterruptLine_11,    /**< \brief Interrupt Line 11  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   272      IfxCan_InterruptLine_12,    /**< \brief Interrupt Line 12  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   273      IfxCan_InterruptLine_13,    /**< \brief Interrupt Line 13  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   274      IfxCan_InterruptLine_14,    /**< \brief Interrupt Line 14  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   275      IfxCan_InterruptLine_15     /**< \brief Interrupt Line 15  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   276  } IfxCan_InterruptLine;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   277  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   278  /** \brief Type of last error to occur on the CAN node
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   279   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   280  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   281  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   282      IfxCan_LastErrorCodeType_noError       = 0, /**< \brief No Error occured in the recent CAN message transmission or reception. */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   283      IfxCan_LastErrorCodeType_stuffError    = 1, /**< \brief More than 5 consecutive equal bits recieved in CAN message */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   284      IfxCan_LastErrorCodeType_formError     = 2, /**< \brief Fixed format part of recieved frame has wrong format */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   285      IfxCan_LastErrorCodeType_ackError      = 3, /**< \brief No ACK recieved from another node for transmitted CAN message */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   286      IfxCan_LastErrorCodeType_bit1Error     = 4, /**< \brief Transmitted recessive and read back dominant on the CAN bus. */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   287      IfxCan_LastErrorCodeType_bit0Error     = 5, /**< \brief Transmitted dominant and read back recessive on the CAN bus. */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   288      IfxCan_LastErrorCodeType_crcError      = 6, /**< \brief CRC Error */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   289      IfxCan_LastErrorCodeType_noCANBusEvent = 7  /**< \brief No CAN bus event occured */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   290  } IfxCan_LastErrorCodeType;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   291  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   292  /** \brief Message Id length (Standard / Extended)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   293   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   294  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   295  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   296      IfxCan_MessageIdLength_standard,  /**< \brief Standard Message ID */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   297      IfxCan_MessageIdLength_extended,  /**< \brief Extended Message ID */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   298      IfxCan_MessageIdLength_both       /**< \brief Both Standard and Extended message IDs */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   299  } IfxCan_MessageIdLength;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   300  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   301  /** \brief Indicate the action to be taken with the messages which do not match with any element of the filter.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   302   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   303  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   304  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   305      IfxCan_NonMatchingFrame_acceptToRxFifo0 = 0,  /**< \brief Accept the non matching messages into Rx FIFO 0 */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   306      IfxCan_NonMatchingFrame_acceptToRxFifo1 = 1,  /**< \brief Accepts the non matching messages into Rx FIFO 1 */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   307      IfxCan_NonMatchingFrame_reject          = 2   /**< \brief Reject the non-matching messages */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   308  } IfxCan_NonMatchingFrame;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   309  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   310  /** \brief Rx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   311   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   312  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   313  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   314      IfxCan_RxBufferId_0,     /**< \brief Rx buffer 0  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   315      IfxCan_RxBufferId_1,     /**< \brief Rx buffer 1  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   316      IfxCan_RxBufferId_2,     /**< \brief Rx buffer 2  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   317      IfxCan_RxBufferId_3,     /**< \brief Rx buffer 3  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   318      IfxCan_RxBufferId_4,     /**< \brief Rx buffer 4  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   319      IfxCan_RxBufferId_5,     /**< \brief Rx buffer 5  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   320      IfxCan_RxBufferId_6,     /**< \brief Rx buffer 6  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   321      IfxCan_RxBufferId_7,     /**< \brief Rx buffer 7  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   322      IfxCan_RxBufferId_8,     /**< \brief Rx buffer 8  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   323      IfxCan_RxBufferId_9,     /**< \brief Rx buffer 9  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   324      IfxCan_RxBufferId_10,    /**< \brief Rx buffer 10  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   325      IfxCan_RxBufferId_11,    /**< \brief Rx buffer 11  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   326      IfxCan_RxBufferId_12,    /**< \brief Rx buffer 12  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   327      IfxCan_RxBufferId_13,    /**< \brief Rx buffer 13  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   328      IfxCan_RxBufferId_14,    /**< \brief Rx buffer 14  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   329      IfxCan_RxBufferId_15,    /**< \brief Rx buffer 15  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   330      IfxCan_RxBufferId_16,    /**< \brief Rx buffer 16  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   331      IfxCan_RxBufferId_17,    /**< \brief Rx buffer 17  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   332      IfxCan_RxBufferId_18,    /**< \brief Rx buffer 18  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   333      IfxCan_RxBufferId_19,    /**< \brief Rx buffer 19  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   334      IfxCan_RxBufferId_20,    /**< \brief Rx buffer 20  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   335      IfxCan_RxBufferId_21,    /**< \brief Rx buffer 21  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   336      IfxCan_RxBufferId_22,    /**< \brief Rx buffer 22  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   337      IfxCan_RxBufferId_23,    /**< \brief Rx buffer 23  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   338      IfxCan_RxBufferId_24,    /**< \brief Rx buffer 24  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   339      IfxCan_RxBufferId_25,    /**< \brief Rx buffer 25  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   340      IfxCan_RxBufferId_26,    /**< \brief Rx buffer 26  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   341      IfxCan_RxBufferId_27,    /**< \brief Rx buffer 27  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   342      IfxCan_RxBufferId_28,    /**< \brief Rx buffer 28  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   343      IfxCan_RxBufferId_29,    /**< \brief Rx buffer 29  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   344      IfxCan_RxBufferId_30,    /**< \brief Rx buffer 30  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   345      IfxCan_RxBufferId_31,    /**< \brief Rx buffer 31  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   346      IfxCan_RxBufferId_32,    /**< \brief Rx buffer 32  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   347      IfxCan_RxBufferId_33,    /**< \brief Rx buffer 33  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   348      IfxCan_RxBufferId_34,    /**< \brief Rx buffer 34  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   349      IfxCan_RxBufferId_35,    /**< \brief Rx buffer 35  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   350      IfxCan_RxBufferId_36,    /**< \brief Rx buffer 36  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   351      IfxCan_RxBufferId_37,    /**< \brief Rx buffer 37  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   352      IfxCan_RxBufferId_38,    /**< \brief Rx buffer 38  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   353      IfxCan_RxBufferId_39,    /**< \brief Rx buffer 39  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   354      IfxCan_RxBufferId_40,    /**< \brief Rx buffer 40  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   355      IfxCan_RxBufferId_41,    /**< \brief Rx buffer 41  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   356      IfxCan_RxBufferId_42,    /**< \brief Rx buffer 42  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   357      IfxCan_RxBufferId_43,    /**< \brief Rx buffer 43  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   358      IfxCan_RxBufferId_44,    /**< \brief Rx buffer 44  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   359      IfxCan_RxBufferId_45,    /**< \brief Rx buffer 45  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   360      IfxCan_RxBufferId_46,    /**< \brief Rx buffer 46  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   361      IfxCan_RxBufferId_47,    /**< \brief Rx buffer 47  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   362      IfxCan_RxBufferId_48,    /**< \brief Rx buffer 48  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   363      IfxCan_RxBufferId_49,    /**< \brief Rx buffer 49  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   364      IfxCan_RxBufferId_50,    /**< \brief Rx buffer 50  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   365      IfxCan_RxBufferId_51,    /**< \brief Rx buffer 51  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   366      IfxCan_RxBufferId_52,    /**< \brief Rx buffer 52  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   367      IfxCan_RxBufferId_53,    /**< \brief Rx buffer 53  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   368      IfxCan_RxBufferId_54,    /**< \brief Rx buffer 54  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   369      IfxCan_RxBufferId_55,    /**< \brief Rx buffer 55  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   370      IfxCan_RxBufferId_56,    /**< \brief Rx buffer 56  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   371      IfxCan_RxBufferId_57,    /**< \brief Rx buffer 57  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   372      IfxCan_RxBufferId_58,    /**< \brief Rx buffer 58  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   373      IfxCan_RxBufferId_59,    /**< \brief Rx buffer 59  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   374      IfxCan_RxBufferId_60,    /**< \brief Rx buffer 60  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   375      IfxCan_RxBufferId_61,    /**< \brief Rx buffer 61  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   376      IfxCan_RxBufferId_62,    /**< \brief Rx buffer 62  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   377      IfxCan_RxBufferId_63     /**< \brief Rx buffer 63  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   378  } IfxCan_RxBufferId;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   379  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   380  /** \brief Rx FIFO 0/1 operating mode\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   381   * Description in Ifx_CAN.N[x].RXFyC.FyOM, (x= 0 to 3; y = 0, 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   382   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   383  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   384  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   385      IfxCan_RxFifoMode_blocking,  /**< \brief Blocking mode */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   386      IfxCan_RxFifoMode_overwrite  /**< \brief Overwrite mode */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   387  } IfxCan_RxFifoMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   388  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   389  /** \brief Rx Buffers or FIFO 0 or combination Mode of reception
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   390   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   391  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   392  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   393      IfxCan_RxMode_dedicatedBuffers,  /**< \brief Rx dedicated buffers operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   394      IfxCan_RxMode_fifo0,             /**< \brief Rx FIFO 0 operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   395      IfxCan_RxMode_fifo1,             /**< \brief Rx FIFO 1 operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   396      IfxCan_RxMode_sharedFifo0,       /**< \brief Rx shared dedicated buffers and Rx FIFO 0 operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   397      IfxCan_RxMode_sharedFifo1,       /**< \brief Rx shared dedicated buffers and Rx FIFO 1 operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   398      IfxCan_RxMode_sharedAll          /**< \brief Rx shared dedicated buffers and Rx FIFO 0 and Rx FIFO 1 operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   399  } IfxCan_RxMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   400  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   401  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   402   * Definition in Ifx_CAN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   403   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   404  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   405  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   406      IfxCan_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   407      IfxCan_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   408  } IfxCan_SleepMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   409  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   410  /** \brief CAN API status definition
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   411   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   412  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   413  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   414      IfxCan_Status_ok                = 0x00000000,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   415      IfxCan_Status_notInitialised    = 0x00000001,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   416      IfxCan_Status_busOff            = 0x00000010,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   417      IfxCan_Status_notSentBusy       = 0x00000020,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   418      IfxCan_Status_receiveEmpty      = 0x00000040,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   419      IfxCan_Status_messageLost       = 0x00000080,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   420      IfxCan_Status_newData           = 0x00000100,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   421      IfxCan_Status_newDataButOneLost = 0x00000180
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   422  } IfxCan_Status;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   423  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   424  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   425   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   426  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   427  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   428      IfxCan_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   429      IfxCan_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   430      IfxCan_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   431  } IfxCan_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   432  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   433  /** \brief Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   434   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   435  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   436  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   437      IfxCan_TxBufferId_0,     /**< \brief Tx buffer 0  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   438      IfxCan_TxBufferId_1,     /**< \brief Tx buffer 1  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   439      IfxCan_TxBufferId_2,     /**< \brief Tx buffer 2  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   440      IfxCan_TxBufferId_3,     /**< \brief Tx buffer 3  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   441      IfxCan_TxBufferId_4,     /**< \brief Tx buffer 4  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   442      IfxCan_TxBufferId_5,     /**< \brief Tx buffer 5  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   443      IfxCan_TxBufferId_6,     /**< \brief Tx buffer 6  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   444      IfxCan_TxBufferId_7,     /**< \brief Tx buffer 7  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   445      IfxCan_TxBufferId_8,     /**< \brief Tx buffer 8  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   446      IfxCan_TxBufferId_9,     /**< \brief Tx buffer 9  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   447      IfxCan_TxBufferId_10,    /**< \brief Tx buffer 10  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   448      IfxCan_TxBufferId_11,    /**< \brief Tx buffer 11  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   449      IfxCan_TxBufferId_12,    /**< \brief Tx buffer 12  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   450      IfxCan_TxBufferId_13,    /**< \brief Tx buffer 13  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   451      IfxCan_TxBufferId_14,    /**< \brief Tx buffer 14  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   452      IfxCan_TxBufferId_15,    /**< \brief Tx buffer 15  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   453      IfxCan_TxBufferId_16,    /**< \brief Tx buffer 16  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   454      IfxCan_TxBufferId_17,    /**< \brief Tx buffer 17  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   455      IfxCan_TxBufferId_18,    /**< \brief Tx buffer 18  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   456      IfxCan_TxBufferId_19,    /**< \brief Tx buffer 19  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   457      IfxCan_TxBufferId_20,    /**< \brief Tx buffer 20  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   458      IfxCan_TxBufferId_21,    /**< \brief Tx buffer 21  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   459      IfxCan_TxBufferId_22,    /**< \brief Tx buffer 22  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   460      IfxCan_TxBufferId_23,    /**< \brief Tx buffer 23  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   461      IfxCan_TxBufferId_24,    /**< \brief Tx buffer 24  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   462      IfxCan_TxBufferId_25,    /**< \brief Tx buffer 25  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   463      IfxCan_TxBufferId_26,    /**< \brief Tx buffer 26  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   464      IfxCan_TxBufferId_27,    /**< \brief Tx buffer 27  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   465      IfxCan_TxBufferId_28,    /**< \brief Tx buffer 28  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   466      IfxCan_TxBufferId_29,    /**< \brief Tx buffer 29  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   467      IfxCan_TxBufferId_30,    /**< \brief Tx buffer 30  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   468      IfxCan_TxBufferId_31     /**< \brief Tx buffer 31  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   469  } IfxCan_TxBufferId;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   470  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   471  /** \brief Tx FIFO/Queue Mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   472   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   473  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   474  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   475      IfxCan_TxMode_fifo,              /**< \brief Tx FIFO operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   476      IfxCan_TxMode_queue,             /**< \brief Tx Queue operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   477      IfxCan_TxMode_dedicatedBuffers,  /**< \brief Tx dedicated buffers operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   478      IfxCan_TxMode_sharedFifo,        /**< \brief Tx shared dedicated buffers and Tx FIFO operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   479      IfxCan_TxMode_sharedQueue        /**< \brief Tx shared dedicated buffers and Tx Queue operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   480  } IfxCan_TxMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   481  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   482  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   483  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   484  /** \brief CAN node Bus Off status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   485   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   486  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   487  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   488      IfxCan_CanNodeBusOffErrorStatus_NoErr     = 0, /**< \brief CAN node not in Bus Off state */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   489      IfxCan_CanNodeBusOffErrorStatus_BusOffErr = 1  /**< \brief CAN node in Bus Off state */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   490  } IfxCan_CanNodeBusOffErrorStatus;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   491  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   492  /** \brief CAN node communication state
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   493   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   494  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   495  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   496      IfxCan_CanNodeCommunicationState_synchronize = 0,  /**< \brief CAN node is synchronizing on CAN communication */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   497      IfxCan_CanNodeCommunicationState_idle        = 1,  /**< \brief Node is neither receiving nor transmitting */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   498      IfxCan_CanNodeCommunicationState_receive     = 2,  /**< \brief Node is operating as receiver */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   499      IfxCan_CanNodeCommunicationState_transmit    = 3   /**< \brief Node is operating as transmitter */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   500  } IfxCan_CanNodeCommunicationState;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   501  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   502  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   503  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   504  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   505  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   506  /** \addtogroup IfxLld_Can_Std_Data_Structures
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   507   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   508  /** \brief tructure for Filter configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   509   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   510  typedef struct
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   511  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   512      uint8                             number;                     /**< \brief Filter Number */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   513      IfxCan_FilterElementConfiguration elementConfiguration;       /**< \brief *FEC, Filter Element Configuration of (standard / extended ID) filter element */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   514      IfxCan_FilterType                 type;                       /**< \brief *FT, Filter Type of (standard / extended ID) filter element */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   515      uint32                            id1;                        /**< \brief *FID1 First ID of (standard / extended ID) filter element */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   516      uint32                            id2;                        /**< \brief *FID2 Second ID of (standard / extended ID) filter element */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   517      IfxCan_RxBufferId                 rxBufferOffset;             /**< \brief Rx Buffer number to set the offset to the Rx Buffer Start Address */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   518  } IfxCan_Filter;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   519  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   520  /** \brief Configuration for Interrupt groups
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   521   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   522  typedef struct
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   523  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   524      IfxCan_InterruptLine interruptLine;       /**< \brief Intterupt line to which this interruipt has to be connetced to */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   525      Ifx_Priority         priority;            /**< \brief Priority of the interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   526      IfxSrc_Tos           typeOfService;       /**< \brief Type of Service */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   527  } IfxCan_GroupInterruptConfig;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   528  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   529  /** \brief Structure for CAN Message configuration (transmit/receive)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   530   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   531  typedef struct
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   532  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   533      uint8                  bufferNumber;                /**< \brief (Tx / Rx) Buffer Element number */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   534      uint32                 messageId;                   /**< \brief ID, Identifier */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   535      boolean                remoteTransmitRequest;       /**< \brief RTR, Remote Transmit Request (enable / disable) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   536      IfxCan_MessageIdLength messageIdLength;             /**< \brief XTD, Message Id length (Standard / Extended) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   537      boolean                errorStateIndicator;         /**< \brief ESI, Error State Indicator (enable / disable) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   538      IfxCan_DataLengthCode  dataLengthCode;              /**< \brief DLC, Data Length Code */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   539      IfxCan_FrameMode       frameMode;                   /**< \brief CAN frame mode */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   540      boolean                txEventFifoControl;          /**< \brief EFC, Tx Event FIFO Control (enable / disable) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   541      boolean                storeInTxFifoQueue;          /**< \brief Write message in Tx FIFO/QUEUE */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   542      boolean                readFromRxFifo0;             /**< \brief Read message from Rx FIFO 0 */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   543      boolean                readFromRxFifo1;             /**< \brief Read message from Rx FIFO 1 */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   544  } IfxCan_Message;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   545  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   546  /** \brief Structure for Message RAM configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   547   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   548  typedef struct
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   549  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   550      uint32 baseAddress;                          /**< \brief Message RAM base address of the CAN */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   551      uint16 standardFilterListStartAddress;       /**< \brief Start address of Standard Message ID filter list (32-bit word address) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   552      uint16 extendedFilterListStartAddress;       /**< \brief Start address of Extended Message ID filter list (32-bit word address) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   553      uint16 rxFifo0StartAddress;                  /**< \brief Start address of Rx FIFO 0 in Message RAM (32-bit word address) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   554      uint16 rxFifo1StartAddress;                  /**< \brief Start address of Rx FIFO 1 in Message RAM (32-bit word address) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   555      uint16 rxBuffersStartAddress;                /**< \brief Start address of Rx Buffers section in the Message RAM (32-bit word address). */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   556      uint16 txEventFifoStartAddress;              /**< \brief Start address of Tx Event FIFO in Message RAM (32-bit w ord address) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   557      uint16 txBuffersStartAddress;                /**< \brief Start address of Tx Buffers section in the Message RAM (32-bit word address). */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   558  } IfxCan_MessageRAM;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   559  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   560  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   561  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   562  /** \addtogroup IfxLld_Can_Std_Node_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   563   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   564  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   565  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   566  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   567  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   568  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   569  /** \brief Disables the configuration change\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   570   * The CPU has no write access to the protected configuration registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   571   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   573   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   574  IFX_INLINE void IfxCan_Node_disableConfigurationChange(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   575  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   576  /** \brief Enables the configuration change\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   577   * The CPU has write access to the protected configuration registers (while CCCR.INIT = 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   578   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   579   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   580   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   581  IFX_INLINE void IfxCan_Node_enableConfigurationChange(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   582  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   583  /** \brief Enables the internal Virtual CAN bus loopback mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   584   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   585   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   586   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   587  IFX_INLINE void IfxCan_Node_enableLoopbackMode(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   588  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   589  /** \brief Returns the status of whether the CAN Node is synchronised or not
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   590   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   591   * \return Status TRUE: synchronized, FALSE : Sync in progress
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   592   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   593  IFX_INLINE boolean IfxCan_Node_isNodeSynchronized(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   594  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   595  /** \brief Initialises the node\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   596   * 0= Normal Operation\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   597   * 1= Initialization is started
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   598   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   599   * \param enable Enable / Disable choice
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   600   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   601   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   602  IFX_INLINE void IfxCan_Node_setInitialisation(Ifx_CAN_N *node, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   603  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   604  /** \brief Sets Transceiver Delay Compensation offset
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   605   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   606   * \param delay delay offset value
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   607   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   608   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   609  IFX_INLINE void IfxCan_Node_setTransceiverDelayCompensationOffset(Ifx_CAN_N *node, uint8 delay);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   610  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   611  /** \brief Get the LEC error status of the CAN node.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   612   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   613   * \return LEC error status in CAN node PSR register
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   614   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   615  IFX_INLINE IfxCan_LastErrorCodeType IfxCan_Node_getLastErroCodeStatus(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   616  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   617  /** \brief Error Passive status of the CAN node.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   618   * TRUE: CAN node in error passive.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   619   * FALSE: CAN node not in error passive.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   620   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   621   * \return Error Passive error status of CAN node (TRUE/FALSE).
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   622   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   623  IFX_INLINE boolean IfxCan_Node_isErrorPassive(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   624  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   625  /** \brief Get the warning status of the CAN node.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   626   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   627   * \return Warning status in CAN node
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   628   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   629  IFX_INLINE IfxCan_CanNodeErrorWarningLimitStatus IfxCan_Node_getWarningStatus(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   630  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   631  /** \brief Get the Bus Off status of the CAN node.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   632   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   633   * \return Bus Off Error status in CAN node
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   634   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   635  IFX_INLINE IfxCan_CanNodeBusOffErrorStatus IfxCan_Node_getBusOffStatus(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   636  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   637  /** \brief Get the Activity status of the CAN node.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   638   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   639   * \return Activity status of CAN node
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   640   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   641  IFX_INLINE IfxCan_CanNodeCommunicationState IfxCan_Node_getActivityStatus(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   642  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   643  /** \brief Get the Error status in data phase of the CAN node in the recent CANFD operation with bit rate switch.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   644   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   645   * \return Error status of the recent CAN FD with BRS flag set.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   646   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   647  IFX_INLINE IfxCan_LastErrorCodeType IfxCan_Node_getDataPhaseLastErrorCode(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   648  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   649  /** \brief Protocol Exception Event status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   650   * TRUE: Protocol Exception event occured.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   651   * FALSE: Protocol Exception event not occured.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   652   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   653   * \return Get the Protocol Exception event status (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   654   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   655  IFX_INLINE boolean IfxCan_Node_isProtocolExceptionEventOccured(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   656  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   657  /** \brief Returns the error status of the recent recieved CAN FD message.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   658   * TRUE : Error status indicator is enabled
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   659   * FALSE: Erro status indicator not enabled.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   660   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   661   * \return Error indicator for recent received CAN FD message (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   662   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   663  IFX_INLINE boolean IfxCan_Node_isErrorStatusIndicatorEnabled(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   664  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   665  /** \brief Bit Rate Switch status of the last recieved CAN FD message.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   666   * TRUE: Bit rate switch is enabled.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   667   * FALSE: Bit rate switch is disabled.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   668   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   669   * \return Bit Rate Switch flag status (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   670   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   671  IFX_INLINE boolean IfxCan_Node_isBitRateSwitchFlagEnabled(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   672  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   673  /** \brief Return the DLC code corresponding to the data length in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   674   * \param dataLength Data length in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   675   * \return Data length code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   676   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   677  IFX_INLINE IfxCan_DataLengthCode IfxCan_Node_getCodeFromDataLengthInBytes(uint32 dataLength);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   678  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   679  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   680  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   681  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   682  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   683  /** \brief Converts data length code (DLC) into number of words
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   684   * \param dataLengthCode DLC, Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   685   * \return Number of data words
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   686   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   687  IFX_EXTERN uint32 IfxCan_Node_getDataLength(IfxCan_DataLengthCode dataLengthCode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   688  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   689  /** \brief Converts data length code (DLC) into number of data words.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   690   * This function is deprecated. Use new function IfxCan_Node_getDataLength
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   691   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   692   * \param dataLengthCode DLC, Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   693   * \return Number of data words
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   694   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   695  IFX_EXTERN uint32 IfxCan_Node_getDataLengthFromCode(Ifx_CAN_N *node, IfxCan_DataLengthCode dataLengthCode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   696  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   697  /** \brief Returns CAN frame mode of operation for a received frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   698   * \param rxBufferElement Rx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   699   * \return CAN frame mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   700   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   701  IFX_EXTERN IfxCan_FrameMode IfxCan_Node_getFrameMode(Ifx_CAN_RXMSG *rxBufferElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   702  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   703  /** \brief Select and initialise the CAN node receive pin
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   704   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   705   * \param rxd Rx pin
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   706   * \param mode Input mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   707   * \param padDriver Pad Driver Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   708   * \return TRUE: Returns TRUE if the operation was successful\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   709   * FALSE: Returns FALSE if the operation was errorneous
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   710   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   711  IFX_EXTERN boolean IfxCan_Node_initRxPin(Ifx_CAN_N *node, IfxCan_Rxd_In *rxd, IfxPort_InputMode mode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   712  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   713  /** \brief Select and initialise the CAN node transmit pin
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   714   * \param txd Tx pin
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   715   * \param mode Output mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   716   * \param padDriver Pad driver Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   717   * \return TRUE: Returns TRUE if the operation was successful\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   718   * FALSE: Returns FALSE if the operation was errorneous
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   719   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   720  IFX_EXTERN boolean IfxCan_Node_initTxPin(IfxCan_Txd_Out *txd, IfxPort_OutputMode mode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   721  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   722  /** \brief Calculates and Sets the CAN baudrate for standard frames and arbitration phase of CAND FD frames
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   723   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   724   * \param moduleFreq Specifies the CAN module frequency
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   725   * \param baudrate Specifies the baud rate. Unit: baud
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   726   * \param samplePoint Specifies the sample point. Range = [0, 10000] resp. [0%, 100%] of the total bit time.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   727   * \param syncJumpWidth Specifies the re-synchronization jump width
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   728   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   729   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   730  IFX_EXTERN void IfxCan_Node_setBitTiming(Ifx_CAN_N *node, float32 moduleFreq, uint32 baudrate, uint16 samplePoint, uint16 syncJumpWidth);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   731  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   732  /** \brief Sets the values of CAN baudrate for standard frames
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   733   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   734   * \param syncJumpWidth Synchronization Jump Width
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   735   * \param timeSegment2 Time segment after sample point
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   736   * \param timeSegment1 Time segment before sample point
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   737   * \param prescaler Baud Rate Prescaler
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   738   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   739   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   740  IFX_EXTERN void IfxCan_Node_setBitTimingValues(Ifx_CAN_N *node, uint16 syncJumpWidth, uint8 timeSegment2, uint8 timeSegment1, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   741  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   742  /** \brief Calulates and Sets the CAN fast baudrate for CAN FD frames data phase
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   743   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   744   * \param moduleFreq Specifies the CAN module frequency
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   745   * \param baudrate Specifies the baud rate. Unit: baud
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   746   * \param samplePoint Specifies the sample point. Range = [0, 10000] resp. [0%, 100%] of the total bit time.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   747   * \param syncJumpWidth Specifies the re-synchronization jump width
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   748   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   749   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   750  IFX_EXTERN void IfxCan_Node_setFastBitTiming(Ifx_CAN_N *node, float32 moduleFreq, uint32 baudrate, uint16 samplePoint, uint16 syncJumpWidth);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   751  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   752  /** \brief Sets the values of CAN fast baudrate for CAN FD frames data phase
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   753   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   754   * \param syncJumpWidth Synchronization Jump Width
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   755   * \param timeSegment2 Time segment after sample point
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   756   * \param timeSegment1 Time segment before sample point
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   757   * \param prescaler Baud Rate Prescaler
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   759   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   760  IFX_EXTERN void IfxCan_Node_setFastBitTimingValues(Ifx_CAN_N *node, uint16 syncJumpWidth, uint8 timeSegment2, uint8 timeSegment1, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   761  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   762  /** \brief Enables the CAN frame mode for transmission
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   763   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   764   * \param frameMode CAN frame mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   766   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   767  IFX_EXTERN void IfxCan_Node_setFrameMode(Ifx_CAN_N *node, IfxCan_FrameMode frameMode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   768  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   769  /** \brief Sets CAN frame mode request for transmission
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   770   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   771   * \param frameMode CAN frame mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   773   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   774  IFX_EXTERN void IfxCan_Node_setFrameModeReq(Ifx_CAN_TXMSG *txBufferElement, IfxCan_FrameMode frameMode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   775  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   776  /** \brief Sets CAN frame mode request for transmission.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   777   * This function is deprecated. Use new function IfxCan_Node_setFrameModeReq
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   778   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   779   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   780   * \param frameMode CAN frame mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   781   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   782   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   783  IFX_EXTERN void IfxCan_Node_setFrameModeRequest(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, IfxCan_FrameMode frameMode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   784  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   785  /** \brief Converts data length code (DLC) into number of bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   786   * \param dataLengthCode Data length code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   787   * \return Data length in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   788   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   789  IFX_EXTERN uint32 IfxCan_Node_getDataLengthInBytes(IfxCan_DataLengthCode dataLengthCode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   790  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   791  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   792  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   793  /** \addtogroup IfxLld_Can_Std_Tx_Element_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   794   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   795  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   796  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   797  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   798  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   799  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   800  /** \brief Returns Tx FIFO/Queue Put Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   801   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   802   * \return Tx Buffer Element Number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   803   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   804  IFX_INLINE IfxCan_TxBufferId IfxCan_Node_getTxFifoQueuePutIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   805  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   806  /** \brief Returns the status of whether cancellation is finished on the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   807   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   808   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   809   * \return Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   810   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   811  IFX_INLINE boolean IfxCan_Node_isTxBufferCancellationFinished(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   812  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   813  /** \brief Returns the status of pending request of the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   814   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   815   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   816   * \return Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   817   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   818  IFX_INLINE boolean IfxCan_Node_isTxBufferRequestPending(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   819  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   820  /** \brief Returns the status of whether transmission occured on the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   821   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   822   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   823   * \return Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   824   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   825  IFX_INLINE boolean IfxCan_Node_isTxBufferTransmissionOccured(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   826  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   827  /** \brief Returns the status of Tx Fifo/Queue is full or not
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   828   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   829   * \return Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   830   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   831  IFX_INLINE boolean IfxCan_Node_isTxFifoQueueFull(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   832  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   833  /** \brief pauses the CAN Node for two CAN bit times before starting the next transmission
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   834   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   835   * \param enable Enable / Disable choice
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   836   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   837   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   838  IFX_INLINE void IfxCan_Node_pauseTransmission(Ifx_CAN_N *node, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   839  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   840  /** \brief Sets the Data Length Code (DLC) for transmit frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   841   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   842   * \param dataLengthCode DLC, data length code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   843   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   844   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   845  IFX_INLINE void IfxCan_Node_setDataLength(Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   846  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   847  /** \brief Sets the Data Length Code (DLC) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   848   * This function is deprecated. Use new function IfxCan_Node_setDataLength
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   849   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   850   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   851   * \param dataLengthCode DLC, data length code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   852   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   853   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   854  IFX_INLINE void IfxCan_Node_setDataLengthCode(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   855  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   856  /** \brief Sets the number of dedicated Tx Buffers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   857   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   858   * \param number Number of Tx Buffers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   859   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   860   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   861  IFX_INLINE void IfxCan_Node_setDedicatedTxBuffersNumber(Ifx_CAN_N *node, uint8 number);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   862  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   863  /** \brief Sets the Error State Indicator (ESI) for transmit frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   864   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   865   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   866   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   867   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   868  IFX_INLINE void IfxCan_Node_setErrStateIndicator(Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   869  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   870  /** \brief Sets the Error State Indicator (ESI) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   871   * This function is decprecated. Use new function IfxCan_Node_setErrStateIndicator
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   872   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   873   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   874   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   875   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   876   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   877  IFX_INLINE void IfxCan_Node_setErrorStateIndicator(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   878  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   879  /** \brief Sets the Message Marker (MM) for transmit frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   880   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   881   * \param bufferId MM, Message Marker , Buffer Id
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   882   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   883   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   884  IFX_INLINE void IfxCan_Node_setMessageMarker(Ifx_CAN_TXMSG *txBufferElement, IfxCan_TxBufferId bufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   885  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   886  /** \brief Sets the identifier (ID) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   887   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   888   * \param messageId Identifier
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   889   * \param messageIdLength Message Id length (Standard / Extended)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   890   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   891   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   892  IFX_INLINE void IfxCan_Node_setMsgId(Ifx_CAN_TXMSG *txBufferElement, uint32 messageId, IfxCan_MessageIdLength messageIdLength);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   893  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   894  /** \brief Sets the identifier (ID) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   895   * This function is deprecated. Use the new function IfxCan_Node_setMsgId
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   896   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   897   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   898   * \param messageId Identifier
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   899   * \param messageIdLength Message Id length (Standard / Extended)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   900   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   901   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   902  IFX_INLINE void IfxCan_Node_setMesssageId(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, uint32 messageId, IfxCan_MessageIdLength messageIdLength);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   903  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   904  /** \brief Sets the remote Transmit Request (RTR) for transmit frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   905   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   906   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   907   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   908   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   909  IFX_INLINE void IfxCan_Node_setRemoteTransmitReq(Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   910  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   911  /** \brief Sets the remote Transmit Request (RTR) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   912   * This function is deprecated. Use new function IfxCan_Node_setRemoteTransmitReq
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   913   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   914   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   915   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   916   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   917   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   918  IFX_INLINE void IfxCan_Node_setRemoteTransmitRequest(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   919  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   920  /** \brief Sets Transmit FIFO/Queue Mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   921   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   922   * \param mode Tx FIFO/Queue Mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   923   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   924   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   925  IFX_INLINE void IfxCan_Node_setTransmitFifoQueueMode(Ifx_CAN_N *node, IfxCan_TxMode mode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   926  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   927  /** \brief Sets Transmit FIFO/Queue Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   928   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   929   * \param number Number of Tx Buffers used for Tx FIFO/Queue
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   930   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   931   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   932  IFX_INLINE void IfxCan_Node_setTransmitFifoQueueSize(Ifx_CAN_N *node, uint8 number);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   933  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   934  /** \brief Sets the Add Request for the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   935   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   936   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   937   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   938   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   939  IFX_INLINE void IfxCan_Node_setTxBufferAddRequest(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   940  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   941  /** \brief Sets the Cancellation Request for the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   942   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   943   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   944   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   945   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   946  IFX_INLINE void IfxCan_Node_setTxBufferCancellationRequest(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   947  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   948  /** \brief Sets Tx Buffer Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   949   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   950   * \param size Tx Buffer Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   951   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   952   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   953  IFX_INLINE void IfxCan_Node_setTxBufferDataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   954  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   955  /** \brief Sets the start address of Tx Buffers section in the Message RAM (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   956   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   957   * \param address Start address of Tx Buffers in the message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   958   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   959   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   960  IFX_INLINE void IfxCan_Node_setTxBuffersStartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   961  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   962  /** \brief Sets the Tx Event Fifo Control (EFC) for transmit frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   963   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   964   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   965   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   966   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   967  IFX_INLINE void IfxCan_Node_setTxEventFifoCtrl(Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   968  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   969  /** \brief Sets the Tx Event Fifo Control (EFC) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   970   * This function is deprecated. Use new function IfxCan_Node_setTxEventFifoCtrl
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   971   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   972   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   973   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   974   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   975   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   976  IFX_INLINE void IfxCan_Node_setTxEventFifoControl(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   977  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   978  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   979  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   980  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   981  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   982  /** \brief Returns Tx Buffer Data Field Size in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   983   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   984   * \return Data field size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   985   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   986  IFX_EXTERN uint8 IfxCan_Node_getTxBufferDataFieldSize(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   987  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   988  /** \brief Returns the address of selected Tx buffer element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   989   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   990   * \param ramBaseAddress Message RAM base address of CAN module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   991   * \param txBuffersStartAddress Start address of Tx Buffers section in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   992   * \param txBufferNumber Tx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   993   * \return Tx Buffer Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   994   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   995  IFX_EXTERN Ifx_CAN_TXMSG *IfxCan_Node_getTxBufferElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 txBuffersStartAddress, IfxCan_TxBufferId txBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   996  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   997  /** \brief Writes Data into Tx buffer element Node_writeTxBufData
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   998   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   999   * \param dataLengthCode DLC, Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1000   * \param data Pointer to data (in words)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1001   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1002   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1003  IFX_EXTERN void IfxCan_Node_writeTxBufData(Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode, uint32 *data);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1004  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1005  /** \brief Writes Data into Tx buffer element.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1006   * This function is deprecated. Use new function IfxCan_Node_writeTxBufData
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1007   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1008   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1009   * \param dataLengthCode DLC, Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1010   * \param data Pointer to data (in words)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1011   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1012   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1013  IFX_EXTERN void IfxCan_Node_writeData(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode, uint32 *data);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1014  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1015  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1016  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1017  /** \addtogroup IfxLld_Can_Std_Rx_Element_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1018   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1019  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1020  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1021  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1022  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1023  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1024  /** \brief Returns the Data Length Code from the received frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1025   * \param rxBufferElement Rx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1026   * \return Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1027   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1028  IFX_INLINE uint32 IfxCan_Node_getDataLengthCode(Ifx_CAN_RXMSG *rxBufferElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1029  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1030  /** \brief Returns the identifier (ID) from the received frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1031   * \param rxBufferElement Rx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1032   * \return Identifier
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1033   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1034  IFX_INLINE uint32 IfxCan_Node_getMesssageId(Ifx_CAN_RXMSG *rxBufferElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1035  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1036  /** \brief Returns Rx FIFO 0 Fill Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1037   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1038   * \return Fill level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1039   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1040  IFX_INLINE uint8 IfxCan_Node_getRxFifo0FillLevel(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1041  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1042  /** \brief Returns Rx FIFO 0 get index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1043   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1044   * \return Rx Buffer Element Number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1045   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1046  IFX_INLINE IfxCan_RxBufferId IfxCan_Node_getRxFifo0GetIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1047  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1048  /** \brief Returns Rx FIFO 1 Fill Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1049   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1050   * \return Fill level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1051   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1052  IFX_INLINE uint8 IfxCan_Node_getRxFifo1FillLevel(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1053  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1054  /** \brief Returns Rx FIFO 1 get index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1055   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1056   * \return Rx Buffer Element Number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1057   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1058  IFX_INLINE IfxCan_RxBufferId IfxCan_Node_getRxFifo1GetIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1059  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1060  /** \brief Sets Rx Buffer Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1061   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1062   * \param size Rx Buffer Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1063   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1064   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1065  IFX_INLINE void IfxCan_Node_setRxBufferDataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1066  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1067  /** \brief Sets the start address of Rx Buffers section in the Message RAM (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1068   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1069   * \param address Start address of Rx Buffers in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1070   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1071   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1072  IFX_INLINE void IfxCan_Node_setRxBuffersStartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1073  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1074  /** \brief Sets Rx FIFO 0 Acknowledge Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1075   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1076   * \param RxBufferNumber Rx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1077   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1078   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1079  IFX_INLINE void IfxCan_Node_setRxFifo0AcknowledgeIndex(Ifx_CAN_N *node, IfxCan_RxBufferId RxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1080  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1081  /** \brief Sets Rx Buffer Fifo 0 Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1082   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1083   * \param size Rx FIFO 0 Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1084   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1085   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1086  IFX_INLINE void IfxCan_Node_setRxFifo0DataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1087  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1088  /** \brief Sets Rx Buffer Fifo 0 operating mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1089   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1090   * \param mode Rx FIFO 0 operating Mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1091   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1092   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1093  IFX_INLINE void IfxCan_Node_setRxFifo0OperatingMode(Ifx_CAN_N *node, IfxCan_RxFifoMode mode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1094  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1095  /** \brief Sets Rx FIFO 0 Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1096   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1097   * \param size Rx FIFO 0 Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1098   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1099   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1100  IFX_INLINE void IfxCan_Node_setRxFifo0Size(Ifx_CAN_N *node, uint8 size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1101  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1102  /** \brief Sets the start address of Rx FIFO 0 section in the Message RAM (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1103   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1104   * \param address Start address of Rx FIFO 0 in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1105   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1106   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1107  IFX_INLINE void IfxCan_Node_setRxFifo0StartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1108  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1109  /** \brief Sets Rx FIFO 0 Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1110   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1111   * \param level Rx FIFO 0 Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1112   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1113   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1114  IFX_INLINE void IfxCan_Node_setRxFifo0WatermarkLevel(Ifx_CAN_N *node, uint8 level);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1115  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1116  /** \brief Sets Rx FIFO 1 Acknowledge Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1117   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1118   * \param RxBufferNumber Rx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1119   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1120   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1121  IFX_INLINE void IfxCan_Node_setRxFifo1AcknowledgeIndex(Ifx_CAN_N *node, IfxCan_RxBufferId RxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1122  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1123  /** \brief Sets Rx Buffer Fifo 1 Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1124   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1125   * \param size Rx FIFO 1 Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1126   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1127   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1128  IFX_INLINE void IfxCan_Node_setRxFifo1DataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1129  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1130  /** \brief Sets Rx Buffer Fifo 1 operating mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1131   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1132   * \param mode Rx FIFO 1 operating Mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1133   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1134   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1135  IFX_INLINE void IfxCan_Node_setRxFifo1OperatingMode(Ifx_CAN_N *node, IfxCan_RxFifoMode mode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1136  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1137  /** \brief Sets Rx FIFO 1 Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1138   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1139   * \param size Rx FIFO 1 Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1140   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1141   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1142  IFX_INLINE void IfxCan_Node_setRxFifo1Size(Ifx_CAN_N *node, uint8 size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1143  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1144  /** \brief Sets the start address of Rx FIFO 1 section in the Message RAM (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1145   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1146   * \param address Start address of Rx FIFO 1 in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1147   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1148   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1149  IFX_INLINE void IfxCan_Node_setRxFifo1StartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1150  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1151  /** \brief Sets Rx FIFO 1 Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1152   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1153   * \param level Rx FIFO 1 Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1154   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1155   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1156  IFX_INLINE void IfxCan_Node_setRxFifo1WatermarkLevel(Ifx_CAN_N *node, uint8 level);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1157  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1158  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1159  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1160  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1161  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1162  /** \brief Clears the New Data flag of the selected Rx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1163   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1164   * \param rxBufferId Rx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1165   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1166   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1167  IFX_EXTERN void IfxCan_Node_clearRxBufferNewDataFlag(Ifx_CAN_N *node, IfxCan_RxBufferId rxBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1168  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1169  /** \brief Returns Rx Buffer Data Field Size in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1170   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1171   * \return Data field size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1172   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1173  IFX_EXTERN uint8 IfxCan_Node_getRxBufferDataFieldSize(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1174  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1175  /** \brief Returns the address of selected Rx buffer element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1176   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1177   * \param ramBaseAddress Message RAM base address of CAN Module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1178   * \param rxBuffersStartAddress Start address of Rx Buffers section in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1179   * \param rxBufferNumber Rx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1180   * \return Rx Buffer Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1181   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1182  IFX_EXTERN Ifx_CAN_RXMSG *IfxCan_Node_getRxBufferElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 rxBuffersStartAddress, IfxCan_RxBufferId rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1183  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1184  /** \brief Returns Rx FIFO 0 Data Field Size in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1185   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1186   * \return Data field size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1187   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1188  IFX_EXTERN uint8 IfxCan_Node_getRxFifo0DataFieldSize(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1189  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1190  /** \brief Returns the address of selected Rx FIFO 0 element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1191   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1192   * \param ramBaseAddress Message RAM base address of CAN Module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1193   * \param rxFifo0StartAddress Start address of Rx FIFO 0 section in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1194   * \param rxBufferNumber Rx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1195   * \return Rx FIFO 0 Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1196   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1197  IFX_EXTERN Ifx_CAN_RXMSG *IfxCan_Node_getRxFifo0ElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 rxFifo0StartAddress, IfxCan_RxBufferId rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1198  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1199  /** \brief Returns Rx FIFO 1 Data Field Size in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1200   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1201   * \return Data field size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1202   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1203  IFX_EXTERN uint8 IfxCan_Node_getRxFifo1DataFieldSize(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1204  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1205  /** \brief Returns the address of selected Rx FIFO 1 element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1206   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1207   * \param ramBaseAddress Message RAM base address of CAN Module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1208   * \param rxFifo1StartAddress Start address of Rx FIFO 1 section in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1209   * \param rxBufferNumber Rx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1210   * \return Rx FIFO 1 Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1211   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1212  IFX_EXTERN Ifx_CAN_RXMSG *IfxCan_Node_getRxFifo1ElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 rxFifo1StartAddress, IfxCan_RxBufferId rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1213  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1214  /** \brief Returns the status of whether the selcted Rx buffer has been updated from new data
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1215   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1216   * \param rxBufferId Rx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1217   * \return Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1218   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1219  IFX_EXTERN boolean IfxCan_Node_isRxBufferNewDataUpdated(Ifx_CAN_N *node, IfxCan_RxBufferId rxBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1220  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1221  /** \brief Reads data from Rx buffer element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1222   * \param rxBufferElement Rx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1223   * \param dataLengthCode DLC, Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1224   * \param data Pointer to data (in words)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1225   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1226   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1227  IFX_EXTERN void IfxCan_Node_readData(Ifx_CAN_RXMSG *rxBufferElement, IfxCan_DataLengthCode dataLengthCode, uint32 *data);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1228  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1229  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1230  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1231  /** \addtogroup IfxLld_Can_Std_Filter_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1232   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1233  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1234  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1235  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1236  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1237  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1238  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1239   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1242  IFX_INLINE void IfxCan_Node_acceptRemoteFramesWithStandardId(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1243  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1244  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1245   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1246   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1247   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1248  IFX_INLINE void IfxCan_Node_acceptRemoteFrameswithExtendedId(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1249  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1250  /** \brief Configure the filter for non matching frames with extended id.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1251   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1252   * \param filter action to be performed on non matching messages.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1253   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1254   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1255  IFX_INLINE void IfxCan_Node_configureExtendedFilterForNonMatchingFrames(Ifx_CAN_N *node, IfxCan_NonMatchingFrame filter);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1256  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1257  /** \brief Configure the filter for non matching frames with standard id.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1258   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1259   * \param filter action to be performed on non matching messages.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1260   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1261   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1262  IFX_INLINE void IfxCan_Node_configureStandardFilterForNonMatchingFrames(Ifx_CAN_N *node, IfxCan_NonMatchingFrame filter);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1263  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1264  /** \brief Reject the remote frames with extended id.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1265   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1266   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1267   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1268  IFX_INLINE void IfxCan_Node_rejectRemoteFramesWithExtendedId(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1269  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1270  /** \brief Reject the remote frames with standard id.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1271   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1272   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1273   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1274  IFX_INLINE void IfxCan_Node_rejectRemoteFramesWithStandardId(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1275  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1276  /** \brief Sets the Extended Filter Element Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1277   * \param extendedFilterElement Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1278   * \param filterElementConfiguration Filter Element Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1279   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1280   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1281  IFX_INLINE void IfxCan_Node_setExtendedFilterConfiguration(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_FilterElementConfiguration filterElementConfiguration);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1282  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1283  /** \brief Sets the Extended Filter ID 1 for Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1284   * \param extendedFilterElement Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1285   * \param id Filter ID 1
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1286   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1287   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1288  IFX_INLINE void IfxCan_Node_setExtendedFilterId1(Ifx_CAN_EXTMSG *extendedFilterElement, uint32 id);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1289  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1290  /** \brief Sets the Extended Filter ID 2 for Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1291   * \param extendedFilterElement Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1292   * \param id Filter ID 2
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1293   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1294   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1295  IFX_INLINE void IfxCan_Node_setExtendedFilterId2(Ifx_CAN_EXTMSG *extendedFilterElement, uint32 id);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1296  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1297  /** \brief Sets the Extended Message ID filter list size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1298   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1299   * \param size Number of Extended Message ID filter elements
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1300   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1301   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1302  IFX_INLINE void IfxCan_Node_setExtendedFilterListSize(Ifx_CAN_N *node, uint8 size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1303  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1304  /** \brief Sets the start address of Extended Message ID filter list (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1305   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1306   * \param address Start address of Extended Message ID filter list in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1307   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1308   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1309  IFX_INLINE void IfxCan_Node_setExtendedFilterListStartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1310  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1311  /** \brief Sets the Offset to the Rx Buffer Start Address RXBC.RBSA for storage of a matching message for Extended filter element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1312   * \param extendedFilterElement Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1313   * \param rxBufferNumber Offset to the Rx Buffer Start Address RXBC.RBSA for storage of a matching message (Rx buffer number)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1314   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1315   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1316  IFX_INLINE void IfxCan_Node_setExtendedFilterRxBufferOffset(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_RxBufferId rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1317  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1318  /** \brief Sets the Extended Filter Type for Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1319   * \param extendedFilterElement Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1320   * \param filterType Filter Type
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1321   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1322   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1323  IFX_INLINE void IfxCan_Node_setExtendedFilterType(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_FilterType filterType);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1324  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1325  /** \brief Sets the Standard Filter Element Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1326   * \param standardFilterElement Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1327   * \param filterElementConfiguration Filter Element Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1328   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1329   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1330  IFX_INLINE void IfxCan_Node_setStandardFilterConfiguration(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_FilterElementConfiguration filterElementConfiguration);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1331  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1332  /** \brief Sets the Standard Filter ID 1 for Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1333   * \param standardFilterElement Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1334   * \param id Filter ID 1
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1335   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1336   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1337  IFX_INLINE void IfxCan_Node_setStandardFilterId1(Ifx_CAN_STDMSG *standardFilterElement, uint32 id);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1338  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1339  /** \brief Sets the Standard Filter ID 2 for Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1340   * \param standardFilterElement Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1341   * \param id Filter ID 2
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1342   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1343   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1344  IFX_INLINE void IfxCan_Node_setStandardFilterId2(Ifx_CAN_STDMSG *standardFilterElement, uint32 id);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1345  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1346  /** \brief Sets the Standard  Message ID filter list size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1347   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1348   * \param size Number of Standard Message ID filter elements
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1349   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1350   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1351  IFX_INLINE void IfxCan_Node_setStandardFilterListSize(Ifx_CAN_N *node, uint8 size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1352  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1353  /** \brief Sets the start address of Standard Message ID filter list (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1354   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1355   * \param address Start address of Standard Message ID filter in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1356   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1357   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1358  IFX_INLINE void IfxCan_Node_setStandardFilterListStartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1359  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1360  /** \brief Sets the Offset to the Rx Buffer Start Address RXBC.RBSA for storage of a matching message for standard filter element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1361   * \param standardFilterElement Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1362   * \param rxBufferNumber Offset to the Rx Buffer Start Address RXBC.RBSA for storage of a matching message (Rx buffer number)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1363   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1365  IFX_INLINE void IfxCan_Node_setStandardFilterRxBufferOffset(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_RxBufferId rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1366  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1367  /** \brief Sets the Standard Filter Type for Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1368   * \param standardFilterElement Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1369   * \param filterType Filter Type
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1370   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1371   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1372  IFX_INLINE void IfxCan_Node_setStandardFilterType(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_FilterType filterType);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1373  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1374  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1375  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1376  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1377  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1378  /** \brief Returns the address of selected extended filter element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1379   * \param ramBaseAddress Message RAM base address of CAN Module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1380   * \param extendedFilterListStartAddress Start address of Extended Message ID filter list (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1381   * \param filterNumber extended filter element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1382   * \return Extended Filter Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1383   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1384  IFX_EXTERN Ifx_CAN_EXTMSG *IfxCan_Node_getExtendedFilterElementAddress(uint32 ramBaseAddress, uint16 extendedFilterListStartAddress, uint8 filterNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1385  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1386  /** \brief Returns the address of selected standard filter element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1387   * \param ramBaseAddress Message RAM base address of CAN Module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1388   * \param standardFilterListStartAddress Start address of Standard Message ID filter list (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1389   * \param filterNumber Standard filter element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1390   * \return Standard Filter Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1391   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1392  IFX_EXTERN Ifx_CAN_STDMSG *IfxCan_Node_getStandardFilterElementAddress(uint32 ramBaseAddress, uint16 standardFilterListStartAddress, uint8 filterNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1393  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1394  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1395  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1396  /** \addtogroup IfxLld_Can_Std_Interrupt_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1397   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1398  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1399  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1400  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1401  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1402  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1403  /** \brief Clears the selected interrupt Flag
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1404   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1405   * \param interrupt Type of Interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1406   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1407   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1408  IFX_INLINE void IfxCan_Node_clearInterruptFlag(Ifx_CAN_N *node, IfxCan_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1409  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1410  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1411   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1412   * \param interrupt Type of Interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1413   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1414   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1415  IFX_INLINE void IfxCan_Node_disableInterrupt(Ifx_CAN_N *node, IfxCan_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1416  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1417  /** \brief Disables the Cancellation Finished Interrupt of the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1418   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1419   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1420   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1421   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1422  IFX_INLINE void IfxCan_Node_disableTxBufferCancellationFinishedInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1423  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1424  /** \brief Disables the Transmission Interrupt of the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1425   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1426   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1427   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1428   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1429  IFX_INLINE void IfxCan_Node_disableTxBufferTransmissionInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1430  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1431  /** \brief Enables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1432   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1433   * \param interrupt Type of Interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1434   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1435   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1436  IFX_INLINE void IfxCan_Node_enableInterrupt(Ifx_CAN_N *node, IfxCan_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1437  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1438  /** \brief Enables the Cancellation Finished Interrupt of the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1439   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1440   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1441   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1442   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1443  IFX_INLINE void IfxCan_Node_enableTxBufferCancellationFinishedInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1444  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1445  /** \brief Enables the Transmission Interrupt of the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1446   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1447   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1448   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1449   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1450  IFX_INLINE void IfxCan_Node_enableTxBufferTransmissionInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1451  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1452  /** \brief Returns the status of selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1453   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1454   * \param interrupt Type of Interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1455   * \return Status TRUE / FALSE
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1456   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1457  IFX_INLINE boolean IfxCan_Node_getInterruptFlagStatus(Ifx_CAN_N *node, IfxCan_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1458  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1459  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1460  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1461  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1462  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1463  /** \brief Sets the slected interrupt to the selcted interrupt line
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1464   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1465   * \param interruptGroup Type of Interrupt group
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1466   * \param interruptLine Interrupt line number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1467   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1468   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1469  IFX_EXTERN void IfxCan_Node_setGroupInterruptLine(Ifx_CAN_N *node, IfxCan_InterruptGroup interruptGroup, IfxCan_InterruptLine interruptLine);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1470  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1471  /** \brief Sets the slected interrupt to the selcted interrupt line
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1472   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1473   * \param interrupt Type of Interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1474   * \param interruptLine Interrupt line number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1475   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1476   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1477  IFX_EXTERN void IfxCan_Node_setInterruptLine(Ifx_CAN_N *node, IfxCan_Interrupt interrupt, IfxCan_InterruptLine interruptLine);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1478  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1479  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1480  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1481  /** \addtogroup IfxLld_Can_Std_Module_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1482   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1483  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1484  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1485  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1486  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1487  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1488  /** \brief Returns the base adress of the selected Node of CAN module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1489   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1490   * \param nodeId Node number of the module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1491   * \return Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1492   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1493  IFX_INLINE Ifx_CAN_N *IfxCan_getNodePointer(Ifx_CAN *can, IfxCan_NodeId nodeId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1494  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1495  /** \brief Returns the status of module enabled or disabled
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1496   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1497   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1498   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1499  IFX_INLINE boolean IfxCan_isModuleEnabled(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1500  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1501  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1502   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1503   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1504   * \param can Pointer to CAN module registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1505   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1506   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1507  IFX_INLINE boolean IfxCan_isModuleSuspended(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1508  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1509  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1510   * \param can pointer to CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1511   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1512   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1513   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1514  IFX_INLINE void IfxCan_setSleepMode(Ifx_CAN *can, IfxCan_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1515  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1516  /** \brief Set the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1517   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1518   * \param can Pointer to CAN module registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1519   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1520   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1521   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1522  IFX_INLINE void IfxCan_setSuspendMode(Ifx_CAN *can, IfxCan_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1523  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1524  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1525  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1526  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1527  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1528  /** \brief Disables the module (sets the disable request)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1529   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1530   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1531   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1532  IFX_EXTERN void IfxCan_disableModule(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1533  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1534  /** \brief Enables the module (clears the disable request)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1535   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1536   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1537   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1538  IFX_EXTERN void IfxCan_enableModule(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1539  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1540  /**
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1541   * \param can Module index of the CAN
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1542   * \return CAN module register address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1543   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1544  IFX_EXTERN Ifx_CAN *IfxCan_getAddress(IfxCan_Index can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1545  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1546  /** \brief API to get the resource index of the CAN specified.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1547   * \return can resource index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1548   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1549  IFX_EXTERN IfxCan_Index IfxCan_getIndex(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1550  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1551  /** \brief Returns the operatinf frequency of the CAN module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1552   * \return Module Frequency
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1553   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1554  IFX_EXTERN float32 IfxCan_getModuleFrequency(void);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1555  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1556  /** \brief resets CAN kernel
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1557   * \param can pointer to CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1558   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1559   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1560  IFX_EXTERN void IfxCan_resetModule(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1561  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1562  /** \brief sets the clocksource selection
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1563   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1564   * \param clockSelect Clock selection option
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1565   * \param clockSource Type of Clock Source selection
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1566   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1567   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1568  IFX_EXTERN void IfxCan_setClockSource(Ifx_CAN *can, IfxCan_ClockSelect clockSelect, IfxCan_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1569  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1570  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1571  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1572  /** \addtogroup IfxLld_Can_Std_Tx_Event_FIFO_Element_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1573   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1574  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1575  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1576  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1577  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1578  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1579  /** \brief Returns the Bit Rate Switch (BRS) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1580   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1581   * \return Bit Rate Switch (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1582   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1583  IFX_INLINE boolean IfxCan_Node_getBRSFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1584  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1585  /** \brief Returns the Data Length Code from the Tx Event Fifo Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1586   * \param txEventFifoElement Tx Event Fifo Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1587   * \return Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1588   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1589  IFX_INLINE uint32 IfxCan_Node_getDLCFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1590  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1591  /** \brief Returns the Error State Indicator (ESI) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1592   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1593   * \return Error State Indicator
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1594   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1595  IFX_INLINE boolean IfxCan_Node_getESIFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1596  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1597  /** \brief Returns the FD Format (FDF) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1598   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1599   * \return FD format (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1600   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1601  IFX_INLINE boolean IfxCan_Node_getFDFFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1602  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1603  /** \brief Returns the Message Marker (MM) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1604   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1605   * \return Message Marker
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1606   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1607  IFX_INLINE uint8 IfxCan_Node_getMMFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1608  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1609  /** \brief Returns the identifier (ID) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1610   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1611   * \return Identifier
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1612   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1613  IFX_INLINE uint32 IfxCan_Node_getMesssageIdFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1614  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1615  /** \brief Returns the Remote Transmission Request Status (RTR) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1616   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1617   * \return Remote Transmission Request Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1618   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1619  IFX_INLINE boolean IfxCan_Node_getRTRFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1620  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1621  /** \brief Returns the Tx Time Stamp (TXTS) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1622   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1623   * \return Tx Time Stamp
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1624   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1625  IFX_INLINE uint16 IfxCan_Node_getTXTSFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1626  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1627  /** \brief Returns the Tx Event Fifo Acknowledge Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1628   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1629   * \return Returns Tx Event Fifo Acknowledge Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1630   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1631  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoAcknowledgeIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1632  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1633  /** \brief Returns the Tx Event Fifo Fill Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1634   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1635   * \return Returns Tx Event Fifo Fill Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1636   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1637  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoFillLevel(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1638  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1639  /** \brief Returns the Tx Event Fifo Get Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1640   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1641   * \return Returns Tx Event Fifo Get Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1642   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1643  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoGetIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1644  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1645  /** \brief Returns the Tx Event Fifo Put Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1646   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1647   * \return Returns Tx Event Fifo Put Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1648   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1649  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoPutIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1650  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1651  /** \brief Returns Tx Event Fifo Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1652   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1653   * \return Tx Event Fifo Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1654   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1655  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoSize(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1656  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1657  /** \brief Returns Tx Event Fifo Start Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1658   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1659   * \return Tx Event Fifo Start Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1660   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1661  IFX_INLINE uint16 IfxCan_Node_getTxEventFifoStartAddress(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1662  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1663  /** \brief Returns Tx Event Fifo Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1664   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1665   * \return Tx Event Fifo Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1666   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1667  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoWatermarkLevel(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1668  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1669  /** \brief Returns the status of Tx Event Fifo Element lost
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1670   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1671   * \return Returns status of Tx Event Fifo Element Lost\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1672   * True : elemnt lost\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1673   * False : element not lost
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1674   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1675  IFX_INLINE boolean IfxCan_Node_isTxEventFifoElementLost(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1676  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1677  /** \brief Returns the status of Tx Event Fifo Full
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1678   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1679   * \return Returns status of Tx Event Fifo Full\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1680   * True : Fifo full\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1681   * False : Fifo not full
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1682   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1683  IFX_INLINE boolean IfxCan_Node_isTxEventFifoFull(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1684  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1685  /** \brief Sets Tx Event Fifo Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1686   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1687   * \param size Tx Event Fifo Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1688   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1689   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1690  IFX_INLINE void IfxCan_Node_setTxEventFifoSize(Ifx_CAN_N *node, uint8 size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1691  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1692  /** \brief Sets Tx Event Fifo Start Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1693   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1694   * \param address Tx Event Fifo Start Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1695   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1696   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1697  IFX_INLINE void IfxCan_Node_setTxEventFifoStartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1698  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1699  /** \brief Sets Tx Event Fifo Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1700   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1701   * \param level Tx Event Fifo Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1702   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1703   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1704  IFX_INLINE void IfxCan_Node_setTxEventFifoWatermarkLevel(Ifx_CAN_N *node, uint8 level);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1705  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1706  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1707  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1708  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1709  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1710  /** \brief Returns CAN frame mode of operation for a Tx Event Fifo Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1711   * \param txEventFifoElement Tx Event Fifo Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1712   * \return CAN frame mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1713   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1714  IFX_EXTERN IfxCan_FrameMode IfxCan_Node_getFrameModeFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1715  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1716  /** \brief Returns the address of selected Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1717   * \param ramBaseAddress Message RAM base address of CAN module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1718   * \param txEventFifoStartAddress Start address of Tx Event Fifo section in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1719   * \param txEventFifoNumber Tx Event Fifo element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1720   * \return Tx Event Fifo Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1721   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1722  IFX_EXTERN Ifx_CAN_TXEVENT *IfxCan_Node_getTxEventFifoElementAddress(uint32 ramBaseAddress, uint16 txEventFifoStartAddress, uint8 txEventFifoNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1723  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1724  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1725  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1726  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1727  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1728  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1729  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1730  /** \brief CAN frame format of the last received message.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1731   * TRUE: CAN FD frame received
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1732   * FALSE: CAN FD frame not received
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1733   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1734   * \return CAN Frame format (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1735   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1736  IFX_INLINE boolean IfxCan_Node_isCanFDMsgReceived(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1737  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1738  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1739  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1740  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1741  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1742  /** \brief Returns the address of interrupt node source register
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1743   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1744   * \param interruptLine Interrupt line number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1745   * \return Address of interrupt node source register
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1746   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1747  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxCan_getSrcPointer(Ifx_CAN *can, IfxCan_InterruptLine interruptLine);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1748  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1749  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1750  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1751  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1752  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1753  IFX_INLINE void IfxCan_Node_acceptRemoteFramesWithStandardId(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1754  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1755      node->GFC.B.RRFS = 0U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1756  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1757  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1758  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1759  IFX_INLINE void IfxCan_Node_acceptRemoteFrameswithExtendedId(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1760  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1761      node->GFC.B.RRFE = 0U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1762  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1763  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1764  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1765  IFX_INLINE void IfxCan_Node_clearInterruptFlag(Ifx_CAN_N *node, IfxCan_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1766  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1767      uint32 value = (1U << interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1768      node->IR.U = value;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1770  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1771  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1772  IFX_INLINE void IfxCan_Node_configureExtendedFilterForNonMatchingFrames(Ifx_CAN_N *node, IfxCan_NonMatchingFrame filter)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1774      node->GFC.B.ANFE = filter;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1776  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1777  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1778  IFX_INLINE void IfxCan_Node_configureStandardFilterForNonMatchingFrames(Ifx_CAN_N *node, IfxCan_NonMatchingFrame filter)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1780      node->GFC.B.ANFS = filter;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1782  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1783  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1784  IFX_INLINE void IfxCan_Node_disableConfigurationChange(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1786      node->CCCR.B.CCE = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1787  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1788      while (node->CCCR.B.CCE != 0)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1789      {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1790  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1791      node->CCCR.B.INIT = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1792  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1793      while (node->CCCR.B.INIT != 0)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1794      {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1795  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1796  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1797  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1798  IFX_INLINE void IfxCan_Node_disableInterrupt(Ifx_CAN_N *node, IfxCan_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1799  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1800      uint32 mask = (1U << interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1801      node->IE.U = node->IE.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1802  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1803  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1804  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1805  IFX_INLINE void IfxCan_Node_disableTxBufferCancellationFinishedInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1806  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1807      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1808      node->TX.BCIE.U = node->TX.BCIE.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1809  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1810  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1811  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1812  IFX_INLINE void IfxCan_Node_disableTxBufferTransmissionInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1813  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1814      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1815      node->TX.BTIE.U = node->TX.BTIE.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1816  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1817  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1818  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1819  IFX_INLINE void IfxCan_Node_enableConfigurationChange(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1820  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1821      Ifx_CAN_N_CCCR cccr;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1822  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1823      /* If INIT already set, clear it before setting again. */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1824      /* The module needs some time if INIT was rewritten !*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1825      if (node->CCCR.B.INIT == 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1826      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1827          node->CCCR.B.CCE = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1828  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1829          while (node->CCCR.B.CCE != 0)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1830          {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1831  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1832          node->CCCR.B.INIT = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1833  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1834          while (node->CCCR.B.INIT != 0)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1835          {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1836      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1837  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1838      node->CCCR.B.INIT = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1839  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1840      while (node->CCCR.B.INIT != 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1841      {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1842  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1843      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1844          cccr.U       = node->CCCR.U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1845          cccr.B.INIT  = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1846          cccr.B.CCE   = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1847          node->CCCR.U = cccr.U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1848      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1849  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1850  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1851  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1852  IFX_INLINE void IfxCan_Node_enableInterrupt(Ifx_CAN_N *node, IfxCan_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1853  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1854      uint32 mask = (1U << interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1855      node->IE.U = node->IE.U | (mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1856  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1857  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1858  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1859  IFX_INLINE void IfxCan_Node_enableLoopbackMode(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1860  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1861      node->NPCR.B.LBM = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1862  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1863  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1864  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1865  IFX_INLINE void IfxCan_Node_enableTxBufferCancellationFinishedInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1866  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1867      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1868      node->TX.BCIE.U = node->TX.BCIE.U | (mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1869  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1870  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1871  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1872  IFX_INLINE void IfxCan_Node_enableTxBufferTransmissionInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1873  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1874      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1875      node->TX.BTIE.U = node->TX.BTIE.U | (mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1876  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1877  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1878  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1879  IFX_INLINE boolean IfxCan_Node_getBRSFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1880  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1881      return txEventFifoElement->E1.B.BRS;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1882  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1883  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1884  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1885  IFX_INLINE uint32 IfxCan_Node_getDLCFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1886  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1887      return (IfxCan_DataLengthCode)txEventFifoElement->E1.B.DLC;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1888  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1889  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1890  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1891  IFX_INLINE uint32 IfxCan_Node_getDataLengthCode(Ifx_CAN_RXMSG *rxBufferElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1892  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1893      return (IfxCan_DataLengthCode)rxBufferElement->R1.B.DLC;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1894  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1895  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1896  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1897  IFX_INLINE boolean IfxCan_Node_getESIFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1898  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1899      return txEventFifoElement->E0.B.ESI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1900  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1901  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1902  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1903  IFX_INLINE boolean IfxCan_Node_getFDFFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1904  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1905      return txEventFifoElement->E1.B.FDF;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1906  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1907  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1908  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1909  IFX_INLINE boolean IfxCan_Node_getInterruptFlagStatus(Ifx_CAN_N *node, IfxCan_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1910  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1911      uint32  mask   = (1U << interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1912      boolean status = (node->IR.U & mask) != 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1913      return status;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1914  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1915  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1916  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1917  IFX_INLINE uint8 IfxCan_Node_getMMFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1918  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1919      return (uint8)txEventFifoElement->E1.B.MM;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1920  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1921  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1922  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1923  IFX_INLINE uint32 IfxCan_Node_getMesssageId(Ifx_CAN_RXMSG *rxBufferElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1924  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1925      /* get identifier extention */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1926      IfxCan_MessageIdLength messageIdLength = (IfxCan_MessageIdLength)rxBufferElement->R0.B.XTD;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1927  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1928      /* get identifier */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1929      return rxBufferElement->R0.B.ID >> ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1930  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1931  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1932  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1933  IFX_INLINE uint32 IfxCan_Node_getMesssageIdFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1934  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1935      /* get identifier extention */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1936      IfxCan_MessageIdLength messageIdLength = (IfxCan_MessageIdLength)txEventFifoElement->E0.B.XTD;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1937  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1938      /* get identifier */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1939      return txEventFifoElement->E0.B.ID >> ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1940  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1941  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1942  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1943  IFX_INLINE boolean IfxCan_Node_getRTRFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1944  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1945      return txEventFifoElement->E0.B.RTR;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1946  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1947  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1948  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1949  IFX_INLINE uint8 IfxCan_Node_getRxFifo0FillLevel(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1950  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1951      return node->RX.F0S.B.F0FL;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1952  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1953  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1954  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1955  IFX_INLINE IfxCan_RxBufferId IfxCan_Node_getRxFifo0GetIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1956  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1957      return (IfxCan_RxBufferId)node->RX.F0S.B.F0GI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1958  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1959  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1960  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1961  IFX_INLINE uint8 IfxCan_Node_getRxFifo1FillLevel(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1962  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1963      return node->RX.F1S.B.F1FL;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1964  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1965  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1966  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1967  IFX_INLINE IfxCan_RxBufferId IfxCan_Node_getRxFifo1GetIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1968  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1969      return (IfxCan_RxBufferId)node->RX.F1S.B.F1GI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1970  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1971  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1972  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1973  IFX_INLINE uint16 IfxCan_Node_getTXTSFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1974  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1975      return (uint16)txEventFifoElement->E1.B.TXTS;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1976  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1977  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1978  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1979  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoAcknowledgeIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1980  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1981      return (uint8)node->TX.EFA.B.EFAI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1982  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1983  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1984  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1985  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoFillLevel(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1986  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1987      return (uint8)node->TX.EFS.B.EFFL;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1988  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1989  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1990  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1991  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoGetIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1992  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1993      return (uint8)node->TX.EFS.B.EFGI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1994  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1995  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1996  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1997  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoPutIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1998  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1999      return (uint8)node->TX.EFS.B.EFPI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2000  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2001  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2002  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2003  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoSize(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2004  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2005      return (uint8)node->TX.EFC.B.EFS;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2006  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2007  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2008  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2009  IFX_INLINE uint16 IfxCan_Node_getTxEventFifoStartAddress(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2010  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2011      return (uint16)node->TX.EFC.B.EFSA;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2012  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2013  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2014  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2015  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoWatermarkLevel(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2016  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2017      return (uint8)node->TX.EFC.B.EFWM;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2018  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2019  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2020  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2021  IFX_INLINE IfxCan_TxBufferId IfxCan_Node_getTxFifoQueuePutIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2022  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2023      return (IfxCan_TxBufferId)node->TX.FQS.B.TFQPI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2024  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2025  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2026  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2027  IFX_INLINE boolean IfxCan_Node_isNodeSynchronized(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2028  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2029      return (boolean)((node->PSR.B.ACT != 0) ? 1 : 0);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2030  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2031  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2032  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2033  IFX_INLINE boolean IfxCan_Node_isTxBufferCancellationFinished(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2034  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2035      uint32  mask    = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2036      boolean tempVar = (boolean)(node->TX.BTO.U & mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2037      return tempVar;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2038  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2039  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2040  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2041  IFX_INLINE boolean IfxCan_Node_isTxBufferRequestPending(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2042  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2043      uint32  mask    = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2044      boolean tempVar = (boolean)(node->TX.BRP.U & mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2045      return tempVar;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2046  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2047  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2048  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2049  IFX_INLINE boolean IfxCan_Node_isTxBufferTransmissionOccured(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2050  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2051      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2052      return (boolean)(node->TX.BTO.U & mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2053  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2054  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2055  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2056  IFX_INLINE boolean IfxCan_Node_isTxEventFifoElementLost(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2057  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2058      return node->TX.EFS.B.TEFL;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2059  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2060  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2061  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2062  IFX_INLINE boolean IfxCan_Node_isTxEventFifoFull(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2063  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2064      return node->TX.EFS.B.EFF;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2065  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2066  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2067  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2068  IFX_INLINE boolean IfxCan_Node_isTxFifoQueueFull(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2069  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2070      return node->TX.FQS.B.TFQF;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2071  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2072  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2073  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2074  IFX_INLINE void IfxCan_Node_pauseTransmission(Ifx_CAN_N *node, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2075  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2076      node->CCCR.B.TXP = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2077  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2078  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2079  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2080  IFX_INLINE void IfxCan_Node_rejectRemoteFramesWithExtendedId(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2081  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2082      node->GFC.B.RRFE = 1U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2083  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2084  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2085  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2086  IFX_INLINE void IfxCan_Node_rejectRemoteFramesWithStandardId(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2087  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2088      node->GFC.B.RRFS = 1U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2089  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2090  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2091  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2092  IFX_INLINE void IfxCan_Node_setDataLength(Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2093  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2094      txBufferElement->T1.B.DLC = dataLengthCode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2095  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2096  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2097  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2098  IFX_INLINE void IfxCan_Node_setDataLengthCode(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2099  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2100      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2101      txBufferElement->T1.B.DLC = dataLengthCode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2102  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2103  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2104  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2105  IFX_INLINE void IfxCan_Node_setDedicatedTxBuffersNumber(Ifx_CAN_N *node, uint8 number)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2106  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2107      node->TX.BC.B.NDTB = number;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2108  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2109  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2110  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2111  IFX_INLINE void IfxCan_Node_setErrStateIndicator(Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2112  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2113      txBufferElement->T0.B.ESI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2114  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2115  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2116  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2117  IFX_INLINE void IfxCan_Node_setErrorStateIndicator(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2118  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2119      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2120      txBufferElement->T0.B.ESI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2121  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2122  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2123  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2124  IFX_INLINE void IfxCan_Node_setExtendedFilterConfiguration(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_FilterElementConfiguration filterElementConfiguration)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2125  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2126      extendedFilterElement->F0.B.EFEC = filterElementConfiguration;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2127  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2128  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2129  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2130  IFX_INLINE void IfxCan_Node_setExtendedFilterId1(Ifx_CAN_EXTMSG *extendedFilterElement, uint32 id)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2131  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2132      extendedFilterElement->F0.B.EFID1 = id;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2133  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2134  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2135  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2136  IFX_INLINE void IfxCan_Node_setExtendedFilterId2(Ifx_CAN_EXTMSG *extendedFilterElement, uint32 id)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2137  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2138      extendedFilterElement->F1.B.EFID2 = id;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2139  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2140  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2141  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2142  IFX_INLINE void IfxCan_Node_setExtendedFilterListSize(Ifx_CAN_N *node, uint8 size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2143  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2144      node->XIDFC.B.LSE = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2145  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2146  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2147  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2148  IFX_INLINE void IfxCan_Node_setExtendedFilterListStartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2149  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2150      node->XIDFC.B.FLESA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2151  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2152  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2153  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2154  IFX_INLINE void IfxCan_Node_setExtendedFilterRxBufferOffset(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_RxBufferId rxBufferNumber)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2155  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2156      extendedFilterElement->F1.B.EFID2 = (uint8)rxBufferNumber;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2157  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2158  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2159  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2160  IFX_INLINE void IfxCan_Node_setExtendedFilterType(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_FilterType filterType)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2161  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2162      extendedFilterElement->F1.B.EFT = filterType;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2163  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2164  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2165  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2166  IFX_INLINE void IfxCan_Node_setInitialisation(Ifx_CAN_N *node, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2167  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2168      node->CCCR.B.INIT = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2169  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2170  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2171  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2172  IFX_INLINE void IfxCan_Node_setMessageMarker(Ifx_CAN_TXMSG *txBufferElement, IfxCan_TxBufferId bufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2173  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2174      txBufferElement->T1.B.MM = bufferId;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2175  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2176  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2177  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2178  IFX_INLINE void IfxCan_Node_setMsgId(Ifx_CAN_TXMSG *txBufferElement, uint32 messageId, IfxCan_MessageIdLength messageIdLength)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2179  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2180      /* set identifier extention */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2181      txBufferElement->T0.B.XTD = (messageIdLength != IfxCan_MessageIdLength_extended) ? 0 : 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2182      /* set identifier */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2183      txBufferElement->T0.B.ID  = messageId << ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2184  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2185  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2186  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2187  IFX_INLINE void IfxCan_Node_setMesssageId(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, uint32 messageId, IfxCan_MessageIdLength messageIdLength)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2188  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2189      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2190      /* set identifier extention */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2191      txBufferElement->T0.B.XTD = (messageIdLength != IfxCan_MessageIdLength_extended) ? 0 : 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2192      /* set identifier */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2193      txBufferElement->T0.B.ID  = messageId << ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2194  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2195  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2196  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2197  IFX_INLINE void IfxCan_Node_setRemoteTransmitReq(Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2198  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2199      txBufferElement->T0.B.RTR = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2200  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2201  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2202  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2203  IFX_INLINE void IfxCan_Node_setRemoteTransmitRequest(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2204  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2205      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2206      txBufferElement->T0.B.RTR = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2207  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2208  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2209  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2210  IFX_INLINE void IfxCan_Node_setRxBufferDataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2211  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2212      node->RX.ESC.B.RBDS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2213  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2214  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2215  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2216  IFX_INLINE void IfxCan_Node_setRxBuffersStartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2217  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2218      node->RX.BC.B.RBSA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2219  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2220  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2221  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2222  IFX_INLINE void IfxCan_Node_setRxFifo0AcknowledgeIndex(Ifx_CAN_N *node, IfxCan_RxBufferId RxBufferNumber)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2223  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2224      node->RX.F0A.B.F0AI = RxBufferNumber;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2225  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2226  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2227  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2228  IFX_INLINE void IfxCan_Node_setRxFifo0DataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2229  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2230      node->RX.ESC.B.F0DS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2231  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2232  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2233  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2234  IFX_INLINE void IfxCan_Node_setRxFifo0OperatingMode(Ifx_CAN_N *node, IfxCan_RxFifoMode mode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2235  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2236      node->RX.F0C.B.F0OM = mode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2237  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2238  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2239  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2240  IFX_INLINE void IfxCan_Node_setRxFifo0Size(Ifx_CAN_N *node, uint8 size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2241  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2242      node->RX.F0C.B.F0S = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2243  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2244  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2245  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2246  IFX_INLINE void IfxCan_Node_setRxFifo0StartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2247  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2248      node->RX.F0C.B.F0SA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2249  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2250  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2251  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2252  IFX_INLINE void IfxCan_Node_setRxFifo0WatermarkLevel(Ifx_CAN_N *node, uint8 level)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2253  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2254      node->RX.F0C.B.F0WM = level;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2255  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2256  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2257  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2258  IFX_INLINE void IfxCan_Node_setRxFifo1AcknowledgeIndex(Ifx_CAN_N *node, IfxCan_RxBufferId RxBufferNumber)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2259  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2260      node->RX.F1A.B.F1AI = RxBufferNumber;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2261  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2262  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2263  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2264  IFX_INLINE void IfxCan_Node_setRxFifo1DataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2265  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2266      node->RX.ESC.B.F1DS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2267  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2268  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2269  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2270  IFX_INLINE void IfxCan_Node_setRxFifo1OperatingMode(Ifx_CAN_N *node, IfxCan_RxFifoMode mode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2271  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2272      node->RX.F1C.B.F1OM = mode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2273  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2274  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2275  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2276  IFX_INLINE void IfxCan_Node_setRxFifo1Size(Ifx_CAN_N *node, uint8 size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2277  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2278      node->RX.F1C.B.F1S = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2279  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2280  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2281  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2282  IFX_INLINE void IfxCan_Node_setRxFifo1StartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2283  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2284      node->RX.F1C.B.F1SA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2285  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2286  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2287  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2288  IFX_INLINE void IfxCan_Node_setRxFifo1WatermarkLevel(Ifx_CAN_N *node, uint8 level)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2289  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2290      node->RX.F1C.B.F1WM = level;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2291  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2292  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2293  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2294  IFX_INLINE void IfxCan_Node_setStandardFilterConfiguration(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_FilterElementConfiguration filterElementConfiguration)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2295  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2296      standardFilterElement->S0.B.SFEC = filterElementConfiguration;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2297  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2298  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2299  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2300  IFX_INLINE void IfxCan_Node_setStandardFilterId1(Ifx_CAN_STDMSG *standardFilterElement, uint32 id)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2301  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2302      standardFilterElement->S0.B.SFID1 = id;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2303  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2304  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2305  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2306  IFX_INLINE void IfxCan_Node_setStandardFilterId2(Ifx_CAN_STDMSG *standardFilterElement, uint32 id)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2307  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2308      standardFilterElement->S0.B.SFID2 = id;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2309  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2310  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2311  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2312  IFX_INLINE void IfxCan_Node_setStandardFilterListSize(Ifx_CAN_N *node, uint8 size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2313  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2314      node->SIDFC.B.LSS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2315  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2316  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2317  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2318  IFX_INLINE void IfxCan_Node_setStandardFilterListStartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2319  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2320      node->SIDFC.B.FLSSA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2321  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2322  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2323  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2324  IFX_INLINE void IfxCan_Node_setStandardFilterRxBufferOffset(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_RxBufferId rxBufferNumber)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2325  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2326      standardFilterElement->S0.B.SFID2 = (uint8)rxBufferNumber;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2327  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2328  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2329  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2330  IFX_INLINE void IfxCan_Node_setStandardFilterType(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_FilterType filterType)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2331  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2332      standardFilterElement->S0.B.SFT = filterType;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2333  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2334  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2335  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2336  IFX_INLINE void IfxCan_Node_setTransceiverDelayCompensationOffset(Ifx_CAN_N *node, uint8 delay)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2337  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2338      /* enable Transceiver Delay Compensation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2339      node->DBTP.B.TDC  = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2340      /* set Transceiver Delay Compensation offset */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2341      node->TDCR.B.TDCO = delay;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2342  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2343  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2344  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2345  IFX_INLINE void IfxCan_Node_setTransmitFifoQueueMode(Ifx_CAN_N *node, IfxCan_TxMode mode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2346  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2347      if ((mode == IfxCan_TxMode_fifo) || (mode == IfxCan_TxMode_queue))
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2348      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2349          node->TX.BC.B.TFQM = mode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2350      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2351      else
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2352      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2353          IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE); /* wrong selection  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2354      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2355  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2356  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2357  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2358  IFX_INLINE void IfxCan_Node_setTransmitFifoQueueSize(Ifx_CAN_N *node, uint8 number)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2359  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2360      node->TX.BC.B.TFQS = number;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2361  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2362  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2363  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2364  IFX_INLINE void IfxCan_Node_setTxBufferAddRequest(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2365  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2366      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2367      node->TX.BAR.U = node->TX.BAR.U | (mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2368  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2369  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2370  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2371  IFX_INLINE void IfxCan_Node_setTxBufferCancellationRequest(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2372  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2373      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2374      node->TX.BCR.U = node->TX.BCR.U | (mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2375  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2376  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2377  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2378  IFX_INLINE void IfxCan_Node_setTxBufferDataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2379  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2380      node->TX.ESC.B.TBDS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2381  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2382  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2383  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2384  IFX_INLINE void IfxCan_Node_setTxBuffersStartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2385  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2386      node->TX.BC.B.TBSA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2387  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2388  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2389  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2390  IFX_INLINE void IfxCan_Node_setTxEventFifoCtrl(Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2391  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2392      txBufferElement->T1.B.EFC = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2393  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2394  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2395  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2396  IFX_INLINE void IfxCan_Node_setTxEventFifoControl(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2397  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2398      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2399      txBufferElement->T1.B.EFC = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2400  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2401  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2402  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2403  IFX_INLINE void IfxCan_Node_setTxEventFifoSize(Ifx_CAN_N *node, uint8 size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2404  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2405      node->TX.EFC.B.EFS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2406  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2407  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2408  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2409  IFX_INLINE void IfxCan_Node_setTxEventFifoStartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2410  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2411      node->TX.EFC.B.EFSA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2412  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2413  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2414  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2415  IFX_INLINE void IfxCan_Node_setTxEventFifoWatermarkLevel(Ifx_CAN_N *node, uint8 level)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2416  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2417      node->TX.EFC.B.EFWM = level;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2418  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2419  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2420  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2421  IFX_INLINE Ifx_CAN_N *IfxCan_getNodePointer(Ifx_CAN *can, IfxCan_NodeId nodeId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2422  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2423      return &(can->N[nodeId]);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2424  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2425  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2426  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2427  IFX_INLINE boolean IfxCan_isModuleEnabled(Ifx_CAN *can)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2428  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2429      return can->CLC.B.DISS == 0;
	movh.a	a3,#1
	add.a	a3,a15
.L1397:
	fret
.L526:
	; End of function
	.sdecl	'.text.IfxCan..cocofun_8',code,cluster('.cocofun_8')
	.sect	'.text.IfxCan..cocofun_8'
	.align	2
; Function .cocofun_8
.L254:
.cocofun_8:	.type	func
; Function body .cocofun_8, coco_iter:0
	fcall	.cocofun_15
.L925:
	lea	a3,[a3]-32768
.L1361:
	fret
.L491:
	; End of function
	.sdecl	'.text.IfxCan.IfxCan_enableModule',code,cluster('IfxCan_enableModule')
	.sect	'.text.IfxCan.IfxCan_enableModule'
	.align	2
	
	.global	IfxCan_enableModule

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   903  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   904  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   905  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   906  void IfxCan_enableModule(Ifx_CAN *can)
; Function IfxCan_enableModule
.L256:
IfxCan_enableModule:	.type	func
	mov.aa	a15,a4
.L929:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   907  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   908      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L928:
	mov	d15,d2
.L931:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   909      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d15
	call	IfxScuWdt_clearCpuEndinit
.L930:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   910  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   911      /*Enable module, disregard Sleep Mode request */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   912      can->CLC.B.DISR = 0U;
	fcall	.cocofun_8
.L932:
	ld.bu	d0,[a3]
.L1270:
	insert	d0,d0,#0,#0,#1
	fcall	.cocofun_8
	st.b	[a3],d0
.L1271:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     2   * \file IfxCan.h
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     3   * \brief CAN  basic functionality
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     4   * \ingroup IfxLld_Can
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     5   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     8   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     9   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    11   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    16   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    18   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    25   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    32   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    40   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    41   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    42   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    43   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    44   * \defgroup IfxLld_Can_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    45   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    46   * \defgroup IfxLld_Can_Std_Data_Structures Data Structures
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    47   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    48   * \defgroup IfxLld_Can_Std_Node_Functions Node Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    49   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    50   * \defgroup IfxLld_Can_Std_Tx_Element_Functions Tx Element Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    51   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    52   * \defgroup IfxLld_Can_Std_Rx_Element_Functions Rx Element Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    53   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    54   * \defgroup IfxLld_Can_Std_Filter_Functions Filter Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    55   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    56   * \defgroup IfxLld_Can_Std_Interrupt_Functions Interrupt Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    57   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    58   * \defgroup IfxLld_Can_Std_Module_Functions Module Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    59   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    60   * \defgroup IfxLld_Can_Std_Tx_Event_FIFO_Element_Functions Tx Event FIFO Element Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    61   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    62   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    63  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    64  #ifndef IFXCAN_H
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    65  #define IFXCAN_H 1
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    66  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    67  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    68  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    69  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    70  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    71  #include "_Impl/IfxCan_cfg.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    72  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    73  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    74  #include "_PinMap/IfxCan_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    75  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    76  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    77  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    78  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    79  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    80  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    81  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    82  /** \addtogroup IfxLld_Can_Std_Enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    83   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    84  /** \brief Status of warning limit for error counters in CAN node
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    85   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    86  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    87  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    88      IfxCan_CanNodeErrorWarningLimitStatus_notReached = 0,  /**< \brief Error counters are below the warning limit */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    89      IfxCan_CanNodeErrorWarningLimitStatus_reached    = 1   /**< \brief Error counter reached the warning limit */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    90  } IfxCan_CanNodeErrorWarningLimitStatus;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    91  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    92  /** \brief Clock selection option\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    93   * Description in Ifx_CAN.MCR.CLKSELx, (x = 0,1,2)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    94   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    95  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    96  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    97      IfxCan_ClockSelect_0,     /**< \brief clock selection 0  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    98      IfxCan_ClockSelect_1,     /**< \brief clock selection 1  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    99      IfxCan_ClockSelect_2,     /**< \brief clock selection 2  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   100      IfxCan_ClockSelect_3      /**< \brief clock selection 3  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   101  } IfxCan_ClockSelect;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   102  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   103  /** \brief Type of Clock Source selection\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   104   * Description in Ifx_CAN.MCR.CLKSELx, (x = 0,1,2)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   105   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   106  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   107  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   108      IfxCan_ClockSource_noClock      = 0,  /**< \brief No clock is switched on */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   109      IfxCan_ClockSource_asynchronous = 1,  /**< \brief The Asynchronous clock source is switched on */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   110      IfxCan_ClockSource_synchronous  = 2,  /**< \brief The Synchronous clock source is switched on */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   111      IfxCan_ClockSource_both         = 3   /**< \brief Both clock sources are switched on */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   112  } IfxCan_ClockSource;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   113  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   114  /** \brief Data Field Size\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   115   * Definition in Ifx_CAN.N[x]TX.ESC.B.TBDS, Ifx_CAN.N[x].RX.ESC.B.RBDS, Ifx_CAN.N[x].RX.ESC.B.FyDS (x= 0,1,2,3; y = 0, 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   116   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   117  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   118  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   119      IfxCan_DataFieldSize_8,      /**< \brief 8 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   120      IfxCan_DataFieldSize_12,     /**< \brief 12 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   121      IfxCan_DataFieldSize_16,     /**< \brief 16 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   122      IfxCan_DataFieldSize_20,     /**< \brief 20 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   123      IfxCan_DataFieldSize_24,     /**< \brief 24 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   124      IfxCan_DataFieldSize_32,     /**< \brief 32 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   125      IfxCan_DataFieldSize_48,     /**< \brief 48 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   126      IfxCan_DataFieldSize_64      /**< \brief 64 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   127  } IfxCan_DataFieldSize;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   128  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   129  /** \brief Data Length code of the Message
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   130   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   131  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   132  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   133      IfxCan_DataLengthCode_0,      /**< \brief 0 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   134      IfxCan_DataLengthCode_1,      /**< \brief 1 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   135      IfxCan_DataLengthCode_2,      /**< \brief 2 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   136      IfxCan_DataLengthCode_3,      /**< \brief 3 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   137      IfxCan_DataLengthCode_4,      /**< \brief 4 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   138      IfxCan_DataLengthCode_5,      /**< \brief 5 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   139      IfxCan_DataLengthCode_6,      /**< \brief 6 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   140      IfxCan_DataLengthCode_7,      /**< \brief 7 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   141      IfxCan_DataLengthCode_8,      /**< \brief 8 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   142      IfxCan_DataLengthCode_12,     /**< \brief 12 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   143      IfxCan_DataLengthCode_16,     /**< \brief 16 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   144      IfxCan_DataLengthCode_20,     /**< \brief 20 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   145      IfxCan_DataLengthCode_24,     /**< \brief 24 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   146      IfxCan_DataLengthCode_32,     /**< \brief 32 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   147      IfxCan_DataLengthCode_48,     /**< \brief 48 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   148      IfxCan_DataLengthCode_64      /**< \brief 64 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   149  } IfxCan_DataLengthCode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   150  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   151  /** \brief Filter Element Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   152   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   154  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   155      IfxCan_FilterElementConfiguration_disable,                     /**< \brief Disable filter element */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   156      IfxCan_FilterElementConfiguration_storeInRxFifo0,              /**< \brief Store in Rx FIFO 0 if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   157      IfxCan_FilterElementConfiguration_storeInRxFifo1,              /**< \brief Store in Rx FIFO 1 if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   158      IfxCan_FilterElementConfiguration_rejectId,                    /**< \brief Reject ID if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   159      IfxCan_FilterElementConfiguration_setPriority,                 /**< \brief Set priority if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   160      IfxCan_FilterElementConfiguration_setPriorityAndStoreInFifo0,  /**< \brief Set priority and store in FIFO 0 if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   161      IfxCan_FilterElementConfiguration_setPriorityAndStoreInFifo1,  /**< \brief Set priority and store in FIFO 1 if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   162      IfxCan_FilterElementConfiguration_storeInRxBuffer              /**< \brief Store into Rx Buffer */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   163  } IfxCan_FilterElementConfiguration;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   164  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   165  /** \brief Filter Type
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   166   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   167  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   168  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   169      IfxCan_FilterType_range,    /**< \brief Range filter from SF1ID to SF2ID (SF2ID is greater than SF1ID) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   170      IfxCan_FilterType_dualId,   /**< \brief Dual ID filter for SF1ID or SF2ID */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   171      IfxCan_FilterType_classic,  /**< \brief Classic filter: SF1ID = filter, SF2ID = mask */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   172      IfxCan_FilterType_none      /**< \brief Reserved */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   173  } IfxCan_FilterType;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   174  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   175  /** \brief CAN Frame mode\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   176   * Description in Ifx_CAN.N[x].CCCR.CME, (x= 0 to 3)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   177   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   178  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   179  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   180      IfxCan_FrameMode_standard,      /**< \brief Standard CAN frame (transmit and receive) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   181      IfxCan_FrameMode_fdLong,        /**< \brief CAN FD long frame in transmit and CAN FD long and fast frame in receive */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   182      IfxCan_FrameMode_fdLongAndFast  /**< \brief CAN FD long and fast frames (transmit and receive) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   183  } IfxCan_FrameMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   184  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   185  /** \brief CAN frame type
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   186   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   187  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   188  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   189      IfxCan_FrameType_receive,             /**< \brief Data frame is received */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   190      IfxCan_FrameType_transmit,            /**< \brief Data frame is generated */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   191      IfxCan_FrameType_transmitAndReceive,  /**< \brief for both transmit and receive frames */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   192      IfxCan_FrameType_remoteRequest,       /**< \brief Remote request frame is generated */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   193      IfxCan_FrameType_remoteAnswer         /**< \brief Answer frame is generated on reception of the corresponding remote request */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   194  } IfxCan_FrameType;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   195  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   196  /** \brief Type of interrupt\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   197   * Definition in Ifx_CAN.N[x].IE, Ifx_CAN.N[x].IR, Ifx_CAN.N[x].ILS, (x= 0 to 3)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   198   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   199  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   200  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   201      IfxCan_Interrupt_rxFifo0NewMessage,                 /**< \brief Rx FIFO 0 New Message Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   202      IfxCan_Interrupt_rxFifo0WatermarkReached,           /**< \brief Rx FIFO 0 Watermark Reached Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   203      IfxCan_Interrupt_rxFifo0Full,                       /**< \brief Rx FIFO 0 Full Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   204      IfxCan_Interrupt_rxFifo0MessageLost,                /**< \brief Rx FIFO 0 Message Lost Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   205      IfxCan_Interrupt_rxFifo1NewMessage,                 /**< \brief Rx FIFO 1 New Message Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   206      IfxCan_Interrupt_rxFifo1WatermarkReached,           /**< \brief Rx FIFO 1 Watermark Reached Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   207      IfxCan_Interrupt_rxFifo1Full,                       /**< \brief Rx FIFO 1 Full Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   208      IfxCan_Interrupt_rxFifo1MessageLost,                /**< \brief Rx FIFO 1 Message Lost Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   209      IfxCan_Interrupt_highPriorityMessage,               /**< \brief High Priority Message Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   210      IfxCan_Interrupt_transmissionCompleted,             /**< \brief Transmission Completed Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   211      IfxCan_Interrupt_transmissionCancellationFinished,  /**< \brief Transmission Cancellation Finished Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   212      IfxCan_Interrupt_txFifoEmpty,                       /**< \brief Tx FIFO Empty Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   213      IfxCan_Interrupt_txEventFifoNewEntry,               /**< \brief Tx Event FIFO New Entry Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   214      IfxCan_Interrupt_txEventFifoWatermarkReached,       /**< \brief Tx Event FIFO Watermark Reached Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   215      IfxCan_Interrupt_txEventFifoFull,                   /**< \brief Tx Event FIFO Full Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   216      IfxCan_Interrupt_txEventFifoEventLost,              /**< \brief Tx Event FIFO Event Lost Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   217      IfxCan_Interrupt_timestampWraparound,               /**< \brief Timestamp Wraparound Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   218      IfxCan_Interrupt_messageRAMAccessFailure,           /**< \brief Message RAM Access Failure Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   219      IfxCan_Interrupt_timeoutOccurred,                   /**< \brief Timeout Occurred Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   220      IfxCan_Interrupt_messageStoredToDedicatedRxBuffer,  /**< \brief Message stored to Dedicated Rx Buffer Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   221      IfxCan_Interrupt_bitErrorCorrected,                 /**< \brief Bit Error Corrected Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   222      IfxCan_Interrupt_bitErrorUncorrected,               /**< \brief Bit Error Uncorrected Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   223      IfxCan_Interrupt_errorLoggingOverflow,              /**< \brief Error Logging Overflow Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   224      IfxCan_Interrupt_errorPassive,                      /**< \brief Error Passive Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   225      IfxCan_Interrupt_warningStatus,                     /**< \brief Warning Status Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   226      IfxCan_Interrupt_busOffStatus,                      /**< \brief Bus_Off Status Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   227      IfxCan_Interrupt_watchdog,                          /**< \brief Watchdog Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   228      IfxCan_Interrupt_protocolErrorArbitration,          /**< \brief Protocol Error in Arbitration phase Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   229      IfxCan_Interrupt_protocolErrorData,                 /**< \brief Protocol Error in Data phase Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   230      IfxCan_Interrupt_AccessToReservedAddress            /**< \brief Access to Reserved Address Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   231  } IfxCan_Interrupt;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   232  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   233  /** \brief Type of interrupt\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   234   * Definition in Ifx_CAN.GRINT[x] (x= 0 , 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   235   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   236  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   237  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   238      IfxCan_InterruptGroup_tefifo,  /**< \brief Transmit Event FIFO Incidents */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   239      IfxCan_InterruptGroup_hpe,     /**< \brief High Priority Events */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   240      IfxCan_InterruptGroup_wati,    /**< \brief Watermark interrupts are mapped here. */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   241      IfxCan_InterruptGroup_alrt,    /**< \brief Alerts */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   242      IfxCan_InterruptGroup_moer,    /**< \brief Module errors */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   243      IfxCan_InterruptGroup_safe,    /**< \brief Safety counter overflow */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   244      IfxCan_InterruptGroup_boff,    /**< \brief Bus Off */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   245      IfxCan_InterruptGroup_loi,     /**< \brief Last Error Interrupts */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   246      IfxCan_InterruptGroup_reint,   /**< \brief Message stored in dedicated receive buffer interrupt (IR.DRX) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   247      IfxCan_InterruptGroup_rxf1f,   /**< \brief Receive FIFO1 full interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   248      IfxCan_InterruptGroup_rxf0f,   /**< \brief Receive FIFO0 full interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   249      IfxCan_InterruptGroup_rxf1n,   /**< \brief Receive FIFO1 new message Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   250      IfxCan_InterruptGroup_rxf0n,   /**< \brief Receive FIFO0 new message Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   251      IfxCan_InterruptGroup_reti,    /**< \brief Receive timeouts */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   252      IfxCan_InterruptGroup_traq,    /**< \brief Transmission Queue Events */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   253      IfxCan_InterruptGroup_traco    /**< \brief Interrupts of the transmission control */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   254  } IfxCan_InterruptGroup;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   255  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   256  /** \brief Interrupt line number INT_Ox (x= 0 - 15) \n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   257   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   258  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   259  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   260      IfxCan_InterruptLine_0,     /**< \brief Interrupt Line 0  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   261      IfxCan_InterruptLine_1,     /**< \brief Interrupt Line 1  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   262      IfxCan_InterruptLine_2,     /**< \brief Interrupt Line 2  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   263      IfxCan_InterruptLine_3,     /**< \brief Interrupt Line 3  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   264      IfxCan_InterruptLine_4,     /**< \brief Interrupt Line 4  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   265      IfxCan_InterruptLine_5,     /**< \brief Interrupt Line 5  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   266      IfxCan_InterruptLine_6,     /**< \brief Interrupt Line 6  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   267      IfxCan_InterruptLine_7,     /**< \brief Interrupt Line 7  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   268      IfxCan_InterruptLine_8,     /**< \brief Interrupt Line 8  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   269      IfxCan_InterruptLine_9,     /**< \brief Interrupt Line 9  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   270      IfxCan_InterruptLine_10,    /**< \brief Interrupt Line 10  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   271      IfxCan_InterruptLine_11,    /**< \brief Interrupt Line 11  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   272      IfxCan_InterruptLine_12,    /**< \brief Interrupt Line 12  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   273      IfxCan_InterruptLine_13,    /**< \brief Interrupt Line 13  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   274      IfxCan_InterruptLine_14,    /**< \brief Interrupt Line 14  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   275      IfxCan_InterruptLine_15     /**< \brief Interrupt Line 15  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   276  } IfxCan_InterruptLine;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   277  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   278  /** \brief Type of last error to occur on the CAN node
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   279   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   280  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   281  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   282      IfxCan_LastErrorCodeType_noError       = 0, /**< \brief No Error occured in the recent CAN message transmission or reception. */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   283      IfxCan_LastErrorCodeType_stuffError    = 1, /**< \brief More than 5 consecutive equal bits recieved in CAN message */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   284      IfxCan_LastErrorCodeType_formError     = 2, /**< \brief Fixed format part of recieved frame has wrong format */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   285      IfxCan_LastErrorCodeType_ackError      = 3, /**< \brief No ACK recieved from another node for transmitted CAN message */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   286      IfxCan_LastErrorCodeType_bit1Error     = 4, /**< \brief Transmitted recessive and read back dominant on the CAN bus. */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   287      IfxCan_LastErrorCodeType_bit0Error     = 5, /**< \brief Transmitted dominant and read back recessive on the CAN bus. */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   288      IfxCan_LastErrorCodeType_crcError      = 6, /**< \brief CRC Error */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   289      IfxCan_LastErrorCodeType_noCANBusEvent = 7  /**< \brief No CAN bus event occured */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   290  } IfxCan_LastErrorCodeType;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   291  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   292  /** \brief Message Id length (Standard / Extended)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   293   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   294  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   295  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   296      IfxCan_MessageIdLength_standard,  /**< \brief Standard Message ID */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   297      IfxCan_MessageIdLength_extended,  /**< \brief Extended Message ID */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   298      IfxCan_MessageIdLength_both       /**< \brief Both Standard and Extended message IDs */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   299  } IfxCan_MessageIdLength;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   300  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   301  /** \brief Indicate the action to be taken with the messages which do not match with any element of the filter.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   302   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   303  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   304  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   305      IfxCan_NonMatchingFrame_acceptToRxFifo0 = 0,  /**< \brief Accept the non matching messages into Rx FIFO 0 */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   306      IfxCan_NonMatchingFrame_acceptToRxFifo1 = 1,  /**< \brief Accepts the non matching messages into Rx FIFO 1 */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   307      IfxCan_NonMatchingFrame_reject          = 2   /**< \brief Reject the non-matching messages */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   308  } IfxCan_NonMatchingFrame;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   309  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   310  /** \brief Rx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   311   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   312  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   313  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   314      IfxCan_RxBufferId_0,     /**< \brief Rx buffer 0  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   315      IfxCan_RxBufferId_1,     /**< \brief Rx buffer 1  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   316      IfxCan_RxBufferId_2,     /**< \brief Rx buffer 2  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   317      IfxCan_RxBufferId_3,     /**< \brief Rx buffer 3  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   318      IfxCan_RxBufferId_4,     /**< \brief Rx buffer 4  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   319      IfxCan_RxBufferId_5,     /**< \brief Rx buffer 5  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   320      IfxCan_RxBufferId_6,     /**< \brief Rx buffer 6  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   321      IfxCan_RxBufferId_7,     /**< \brief Rx buffer 7  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   322      IfxCan_RxBufferId_8,     /**< \brief Rx buffer 8  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   323      IfxCan_RxBufferId_9,     /**< \brief Rx buffer 9  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   324      IfxCan_RxBufferId_10,    /**< \brief Rx buffer 10  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   325      IfxCan_RxBufferId_11,    /**< \brief Rx buffer 11  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   326      IfxCan_RxBufferId_12,    /**< \brief Rx buffer 12  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   327      IfxCan_RxBufferId_13,    /**< \brief Rx buffer 13  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   328      IfxCan_RxBufferId_14,    /**< \brief Rx buffer 14  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   329      IfxCan_RxBufferId_15,    /**< \brief Rx buffer 15  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   330      IfxCan_RxBufferId_16,    /**< \brief Rx buffer 16  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   331      IfxCan_RxBufferId_17,    /**< \brief Rx buffer 17  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   332      IfxCan_RxBufferId_18,    /**< \brief Rx buffer 18  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   333      IfxCan_RxBufferId_19,    /**< \brief Rx buffer 19  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   334      IfxCan_RxBufferId_20,    /**< \brief Rx buffer 20  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   335      IfxCan_RxBufferId_21,    /**< \brief Rx buffer 21  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   336      IfxCan_RxBufferId_22,    /**< \brief Rx buffer 22  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   337      IfxCan_RxBufferId_23,    /**< \brief Rx buffer 23  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   338      IfxCan_RxBufferId_24,    /**< \brief Rx buffer 24  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   339      IfxCan_RxBufferId_25,    /**< \brief Rx buffer 25  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   340      IfxCan_RxBufferId_26,    /**< \brief Rx buffer 26  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   341      IfxCan_RxBufferId_27,    /**< \brief Rx buffer 27  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   342      IfxCan_RxBufferId_28,    /**< \brief Rx buffer 28  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   343      IfxCan_RxBufferId_29,    /**< \brief Rx buffer 29  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   344      IfxCan_RxBufferId_30,    /**< \brief Rx buffer 30  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   345      IfxCan_RxBufferId_31,    /**< \brief Rx buffer 31  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   346      IfxCan_RxBufferId_32,    /**< \brief Rx buffer 32  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   347      IfxCan_RxBufferId_33,    /**< \brief Rx buffer 33  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   348      IfxCan_RxBufferId_34,    /**< \brief Rx buffer 34  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   349      IfxCan_RxBufferId_35,    /**< \brief Rx buffer 35  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   350      IfxCan_RxBufferId_36,    /**< \brief Rx buffer 36  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   351      IfxCan_RxBufferId_37,    /**< \brief Rx buffer 37  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   352      IfxCan_RxBufferId_38,    /**< \brief Rx buffer 38  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   353      IfxCan_RxBufferId_39,    /**< \brief Rx buffer 39  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   354      IfxCan_RxBufferId_40,    /**< \brief Rx buffer 40  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   355      IfxCan_RxBufferId_41,    /**< \brief Rx buffer 41  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   356      IfxCan_RxBufferId_42,    /**< \brief Rx buffer 42  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   357      IfxCan_RxBufferId_43,    /**< \brief Rx buffer 43  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   358      IfxCan_RxBufferId_44,    /**< \brief Rx buffer 44  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   359      IfxCan_RxBufferId_45,    /**< \brief Rx buffer 45  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   360      IfxCan_RxBufferId_46,    /**< \brief Rx buffer 46  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   361      IfxCan_RxBufferId_47,    /**< \brief Rx buffer 47  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   362      IfxCan_RxBufferId_48,    /**< \brief Rx buffer 48  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   363      IfxCan_RxBufferId_49,    /**< \brief Rx buffer 49  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   364      IfxCan_RxBufferId_50,    /**< \brief Rx buffer 50  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   365      IfxCan_RxBufferId_51,    /**< \brief Rx buffer 51  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   366      IfxCan_RxBufferId_52,    /**< \brief Rx buffer 52  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   367      IfxCan_RxBufferId_53,    /**< \brief Rx buffer 53  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   368      IfxCan_RxBufferId_54,    /**< \brief Rx buffer 54  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   369      IfxCan_RxBufferId_55,    /**< \brief Rx buffer 55  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   370      IfxCan_RxBufferId_56,    /**< \brief Rx buffer 56  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   371      IfxCan_RxBufferId_57,    /**< \brief Rx buffer 57  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   372      IfxCan_RxBufferId_58,    /**< \brief Rx buffer 58  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   373      IfxCan_RxBufferId_59,    /**< \brief Rx buffer 59  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   374      IfxCan_RxBufferId_60,    /**< \brief Rx buffer 60  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   375      IfxCan_RxBufferId_61,    /**< \brief Rx buffer 61  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   376      IfxCan_RxBufferId_62,    /**< \brief Rx buffer 62  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   377      IfxCan_RxBufferId_63     /**< \brief Rx buffer 63  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   378  } IfxCan_RxBufferId;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   379  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   380  /** \brief Rx FIFO 0/1 operating mode\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   381   * Description in Ifx_CAN.N[x].RXFyC.FyOM, (x= 0 to 3; y = 0, 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   382   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   383  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   384  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   385      IfxCan_RxFifoMode_blocking,  /**< \brief Blocking mode */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   386      IfxCan_RxFifoMode_overwrite  /**< \brief Overwrite mode */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   387  } IfxCan_RxFifoMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   388  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   389  /** \brief Rx Buffers or FIFO 0 or combination Mode of reception
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   390   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   391  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   392  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   393      IfxCan_RxMode_dedicatedBuffers,  /**< \brief Rx dedicated buffers operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   394      IfxCan_RxMode_fifo0,             /**< \brief Rx FIFO 0 operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   395      IfxCan_RxMode_fifo1,             /**< \brief Rx FIFO 1 operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   396      IfxCan_RxMode_sharedFifo0,       /**< \brief Rx shared dedicated buffers and Rx FIFO 0 operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   397      IfxCan_RxMode_sharedFifo1,       /**< \brief Rx shared dedicated buffers and Rx FIFO 1 operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   398      IfxCan_RxMode_sharedAll          /**< \brief Rx shared dedicated buffers and Rx FIFO 0 and Rx FIFO 1 operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   399  } IfxCan_RxMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   400  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   401  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   402   * Definition in Ifx_CAN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   403   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   404  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   405  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   406      IfxCan_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   407      IfxCan_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   408  } IfxCan_SleepMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   409  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   410  /** \brief CAN API status definition
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   411   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   412  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   413  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   414      IfxCan_Status_ok                = 0x00000000,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   415      IfxCan_Status_notInitialised    = 0x00000001,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   416      IfxCan_Status_busOff            = 0x00000010,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   417      IfxCan_Status_notSentBusy       = 0x00000020,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   418      IfxCan_Status_receiveEmpty      = 0x00000040,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   419      IfxCan_Status_messageLost       = 0x00000080,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   420      IfxCan_Status_newData           = 0x00000100,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   421      IfxCan_Status_newDataButOneLost = 0x00000180
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   422  } IfxCan_Status;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   423  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   424  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   425   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   426  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   427  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   428      IfxCan_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   429      IfxCan_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   430      IfxCan_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   431  } IfxCan_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   432  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   433  /** \brief Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   434   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   435  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   436  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   437      IfxCan_TxBufferId_0,     /**< \brief Tx buffer 0  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   438      IfxCan_TxBufferId_1,     /**< \brief Tx buffer 1  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   439      IfxCan_TxBufferId_2,     /**< \brief Tx buffer 2  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   440      IfxCan_TxBufferId_3,     /**< \brief Tx buffer 3  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   441      IfxCan_TxBufferId_4,     /**< \brief Tx buffer 4  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   442      IfxCan_TxBufferId_5,     /**< \brief Tx buffer 5  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   443      IfxCan_TxBufferId_6,     /**< \brief Tx buffer 6  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   444      IfxCan_TxBufferId_7,     /**< \brief Tx buffer 7  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   445      IfxCan_TxBufferId_8,     /**< \brief Tx buffer 8  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   446      IfxCan_TxBufferId_9,     /**< \brief Tx buffer 9  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   447      IfxCan_TxBufferId_10,    /**< \brief Tx buffer 10  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   448      IfxCan_TxBufferId_11,    /**< \brief Tx buffer 11  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   449      IfxCan_TxBufferId_12,    /**< \brief Tx buffer 12  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   450      IfxCan_TxBufferId_13,    /**< \brief Tx buffer 13  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   451      IfxCan_TxBufferId_14,    /**< \brief Tx buffer 14  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   452      IfxCan_TxBufferId_15,    /**< \brief Tx buffer 15  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   453      IfxCan_TxBufferId_16,    /**< \brief Tx buffer 16  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   454      IfxCan_TxBufferId_17,    /**< \brief Tx buffer 17  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   455      IfxCan_TxBufferId_18,    /**< \brief Tx buffer 18  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   456      IfxCan_TxBufferId_19,    /**< \brief Tx buffer 19  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   457      IfxCan_TxBufferId_20,    /**< \brief Tx buffer 20  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   458      IfxCan_TxBufferId_21,    /**< \brief Tx buffer 21  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   459      IfxCan_TxBufferId_22,    /**< \brief Tx buffer 22  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   460      IfxCan_TxBufferId_23,    /**< \brief Tx buffer 23  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   461      IfxCan_TxBufferId_24,    /**< \brief Tx buffer 24  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   462      IfxCan_TxBufferId_25,    /**< \brief Tx buffer 25  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   463      IfxCan_TxBufferId_26,    /**< \brief Tx buffer 26  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   464      IfxCan_TxBufferId_27,    /**< \brief Tx buffer 27  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   465      IfxCan_TxBufferId_28,    /**< \brief Tx buffer 28  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   466      IfxCan_TxBufferId_29,    /**< \brief Tx buffer 29  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   467      IfxCan_TxBufferId_30,    /**< \brief Tx buffer 30  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   468      IfxCan_TxBufferId_31     /**< \brief Tx buffer 31  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   469  } IfxCan_TxBufferId;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   470  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   471  /** \brief Tx FIFO/Queue Mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   472   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   473  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   474  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   475      IfxCan_TxMode_fifo,              /**< \brief Tx FIFO operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   476      IfxCan_TxMode_queue,             /**< \brief Tx Queue operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   477      IfxCan_TxMode_dedicatedBuffers,  /**< \brief Tx dedicated buffers operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   478      IfxCan_TxMode_sharedFifo,        /**< \brief Tx shared dedicated buffers and Tx FIFO operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   479      IfxCan_TxMode_sharedQueue        /**< \brief Tx shared dedicated buffers and Tx Queue operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   480  } IfxCan_TxMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   481  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   482  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   483  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   484  /** \brief CAN node Bus Off status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   485   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   486  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   487  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   488      IfxCan_CanNodeBusOffErrorStatus_NoErr     = 0, /**< \brief CAN node not in Bus Off state */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   489      IfxCan_CanNodeBusOffErrorStatus_BusOffErr = 1  /**< \brief CAN node in Bus Off state */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   490  } IfxCan_CanNodeBusOffErrorStatus;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   491  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   492  /** \brief CAN node communication state
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   493   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   494  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   495  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   496      IfxCan_CanNodeCommunicationState_synchronize = 0,  /**< \brief CAN node is synchronizing on CAN communication */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   497      IfxCan_CanNodeCommunicationState_idle        = 1,  /**< \brief Node is neither receiving nor transmitting */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   498      IfxCan_CanNodeCommunicationState_receive     = 2,  /**< \brief Node is operating as receiver */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   499      IfxCan_CanNodeCommunicationState_transmit    = 3   /**< \brief Node is operating as transmitter */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   500  } IfxCan_CanNodeCommunicationState;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   501  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   502  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   503  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   504  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   505  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   506  /** \addtogroup IfxLld_Can_Std_Data_Structures
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   507   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   508  /** \brief tructure for Filter configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   509   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   510  typedef struct
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   511  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   512      uint8                             number;                     /**< \brief Filter Number */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   513      IfxCan_FilterElementConfiguration elementConfiguration;       /**< \brief *FEC, Filter Element Configuration of (standard / extended ID) filter element */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   514      IfxCan_FilterType                 type;                       /**< \brief *FT, Filter Type of (standard / extended ID) filter element */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   515      uint32                            id1;                        /**< \brief *FID1 First ID of (standard / extended ID) filter element */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   516      uint32                            id2;                        /**< \brief *FID2 Second ID of (standard / extended ID) filter element */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   517      IfxCan_RxBufferId                 rxBufferOffset;             /**< \brief Rx Buffer number to set the offset to the Rx Buffer Start Address */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   518  } IfxCan_Filter;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   519  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   520  /** \brief Configuration for Interrupt groups
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   521   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   522  typedef struct
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   523  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   524      IfxCan_InterruptLine interruptLine;       /**< \brief Intterupt line to which this interruipt has to be connetced to */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   525      Ifx_Priority         priority;            /**< \brief Priority of the interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   526      IfxSrc_Tos           typeOfService;       /**< \brief Type of Service */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   527  } IfxCan_GroupInterruptConfig;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   528  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   529  /** \brief Structure for CAN Message configuration (transmit/receive)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   530   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   531  typedef struct
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   532  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   533      uint8                  bufferNumber;                /**< \brief (Tx / Rx) Buffer Element number */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   534      uint32                 messageId;                   /**< \brief ID, Identifier */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   535      boolean                remoteTransmitRequest;       /**< \brief RTR, Remote Transmit Request (enable / disable) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   536      IfxCan_MessageIdLength messageIdLength;             /**< \brief XTD, Message Id length (Standard / Extended) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   537      boolean                errorStateIndicator;         /**< \brief ESI, Error State Indicator (enable / disable) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   538      IfxCan_DataLengthCode  dataLengthCode;              /**< \brief DLC, Data Length Code */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   539      IfxCan_FrameMode       frameMode;                   /**< \brief CAN frame mode */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   540      boolean                txEventFifoControl;          /**< \brief EFC, Tx Event FIFO Control (enable / disable) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   541      boolean                storeInTxFifoQueue;          /**< \brief Write message in Tx FIFO/QUEUE */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   542      boolean                readFromRxFifo0;             /**< \brief Read message from Rx FIFO 0 */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   543      boolean                readFromRxFifo1;             /**< \brief Read message from Rx FIFO 1 */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   544  } IfxCan_Message;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   545  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   546  /** \brief Structure for Message RAM configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   547   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   548  typedef struct
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   549  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   550      uint32 baseAddress;                          /**< \brief Message RAM base address of the CAN */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   551      uint16 standardFilterListStartAddress;       /**< \brief Start address of Standard Message ID filter list (32-bit word address) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   552      uint16 extendedFilterListStartAddress;       /**< \brief Start address of Extended Message ID filter list (32-bit word address) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   553      uint16 rxFifo0StartAddress;                  /**< \brief Start address of Rx FIFO 0 in Message RAM (32-bit word address) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   554      uint16 rxFifo1StartAddress;                  /**< \brief Start address of Rx FIFO 1 in Message RAM (32-bit word address) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   555      uint16 rxBuffersStartAddress;                /**< \brief Start address of Rx Buffers section in the Message RAM (32-bit word address). */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   556      uint16 txEventFifoStartAddress;              /**< \brief Start address of Tx Event FIFO in Message RAM (32-bit w ord address) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   557      uint16 txBuffersStartAddress;                /**< \brief Start address of Tx Buffers section in the Message RAM (32-bit word address). */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   558  } IfxCan_MessageRAM;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   559  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   560  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   561  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   562  /** \addtogroup IfxLld_Can_Std_Node_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   563   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   564  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   565  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   566  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   567  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   568  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   569  /** \brief Disables the configuration change\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   570   * The CPU has no write access to the protected configuration registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   571   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   573   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   574  IFX_INLINE void IfxCan_Node_disableConfigurationChange(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   575  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   576  /** \brief Enables the configuration change\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   577   * The CPU has write access to the protected configuration registers (while CCCR.INIT = 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   578   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   579   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   580   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   581  IFX_INLINE void IfxCan_Node_enableConfigurationChange(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   582  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   583  /** \brief Enables the internal Virtual CAN bus loopback mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   584   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   585   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   586   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   587  IFX_INLINE void IfxCan_Node_enableLoopbackMode(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   588  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   589  /** \brief Returns the status of whether the CAN Node is synchronised or not
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   590   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   591   * \return Status TRUE: synchronized, FALSE : Sync in progress
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   592   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   593  IFX_INLINE boolean IfxCan_Node_isNodeSynchronized(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   594  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   595  /** \brief Initialises the node\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   596   * 0= Normal Operation\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   597   * 1= Initialization is started
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   598   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   599   * \param enable Enable / Disable choice
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   600   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   601   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   602  IFX_INLINE void IfxCan_Node_setInitialisation(Ifx_CAN_N *node, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   603  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   604  /** \brief Sets Transceiver Delay Compensation offset
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   605   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   606   * \param delay delay offset value
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   607   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   608   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   609  IFX_INLINE void IfxCan_Node_setTransceiverDelayCompensationOffset(Ifx_CAN_N *node, uint8 delay);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   610  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   611  /** \brief Get the LEC error status of the CAN node.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   612   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   613   * \return LEC error status in CAN node PSR register
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   614   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   615  IFX_INLINE IfxCan_LastErrorCodeType IfxCan_Node_getLastErroCodeStatus(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   616  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   617  /** \brief Error Passive status of the CAN node.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   618   * TRUE: CAN node in error passive.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   619   * FALSE: CAN node not in error passive.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   620   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   621   * \return Error Passive error status of CAN node (TRUE/FALSE).
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   622   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   623  IFX_INLINE boolean IfxCan_Node_isErrorPassive(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   624  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   625  /** \brief Get the warning status of the CAN node.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   626   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   627   * \return Warning status in CAN node
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   628   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   629  IFX_INLINE IfxCan_CanNodeErrorWarningLimitStatus IfxCan_Node_getWarningStatus(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   630  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   631  /** \brief Get the Bus Off status of the CAN node.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   632   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   633   * \return Bus Off Error status in CAN node
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   634   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   635  IFX_INLINE IfxCan_CanNodeBusOffErrorStatus IfxCan_Node_getBusOffStatus(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   636  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   637  /** \brief Get the Activity status of the CAN node.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   638   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   639   * \return Activity status of CAN node
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   640   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   641  IFX_INLINE IfxCan_CanNodeCommunicationState IfxCan_Node_getActivityStatus(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   642  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   643  /** \brief Get the Error status in data phase of the CAN node in the recent CANFD operation with bit rate switch.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   644   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   645   * \return Error status of the recent CAN FD with BRS flag set.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   646   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   647  IFX_INLINE IfxCan_LastErrorCodeType IfxCan_Node_getDataPhaseLastErrorCode(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   648  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   649  /** \brief Protocol Exception Event status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   650   * TRUE: Protocol Exception event occured.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   651   * FALSE: Protocol Exception event not occured.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   652   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   653   * \return Get the Protocol Exception event status (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   654   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   655  IFX_INLINE boolean IfxCan_Node_isProtocolExceptionEventOccured(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   656  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   657  /** \brief Returns the error status of the recent recieved CAN FD message.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   658   * TRUE : Error status indicator is enabled
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   659   * FALSE: Erro status indicator not enabled.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   660   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   661   * \return Error indicator for recent received CAN FD message (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   662   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   663  IFX_INLINE boolean IfxCan_Node_isErrorStatusIndicatorEnabled(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   664  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   665  /** \brief Bit Rate Switch status of the last recieved CAN FD message.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   666   * TRUE: Bit rate switch is enabled.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   667   * FALSE: Bit rate switch is disabled.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   668   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   669   * \return Bit Rate Switch flag status (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   670   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   671  IFX_INLINE boolean IfxCan_Node_isBitRateSwitchFlagEnabled(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   672  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   673  /** \brief Return the DLC code corresponding to the data length in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   674   * \param dataLength Data length in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   675   * \return Data length code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   676   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   677  IFX_INLINE IfxCan_DataLengthCode IfxCan_Node_getCodeFromDataLengthInBytes(uint32 dataLength);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   678  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   679  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   680  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   681  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   682  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   683  /** \brief Converts data length code (DLC) into number of words
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   684   * \param dataLengthCode DLC, Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   685   * \return Number of data words
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   686   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   687  IFX_EXTERN uint32 IfxCan_Node_getDataLength(IfxCan_DataLengthCode dataLengthCode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   688  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   689  /** \brief Converts data length code (DLC) into number of data words.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   690   * This function is deprecated. Use new function IfxCan_Node_getDataLength
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   691   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   692   * \param dataLengthCode DLC, Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   693   * \return Number of data words
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   694   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   695  IFX_EXTERN uint32 IfxCan_Node_getDataLengthFromCode(Ifx_CAN_N *node, IfxCan_DataLengthCode dataLengthCode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   696  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   697  /** \brief Returns CAN frame mode of operation for a received frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   698   * \param rxBufferElement Rx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   699   * \return CAN frame mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   700   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   701  IFX_EXTERN IfxCan_FrameMode IfxCan_Node_getFrameMode(Ifx_CAN_RXMSG *rxBufferElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   702  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   703  /** \brief Select and initialise the CAN node receive pin
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   704   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   705   * \param rxd Rx pin
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   706   * \param mode Input mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   707   * \param padDriver Pad Driver Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   708   * \return TRUE: Returns TRUE if the operation was successful\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   709   * FALSE: Returns FALSE if the operation was errorneous
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   710   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   711  IFX_EXTERN boolean IfxCan_Node_initRxPin(Ifx_CAN_N *node, IfxCan_Rxd_In *rxd, IfxPort_InputMode mode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   712  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   713  /** \brief Select and initialise the CAN node transmit pin
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   714   * \param txd Tx pin
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   715   * \param mode Output mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   716   * \param padDriver Pad driver Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   717   * \return TRUE: Returns TRUE if the operation was successful\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   718   * FALSE: Returns FALSE if the operation was errorneous
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   719   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   720  IFX_EXTERN boolean IfxCan_Node_initTxPin(IfxCan_Txd_Out *txd, IfxPort_OutputMode mode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   721  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   722  /** \brief Calculates and Sets the CAN baudrate for standard frames and arbitration phase of CAND FD frames
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   723   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   724   * \param moduleFreq Specifies the CAN module frequency
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   725   * \param baudrate Specifies the baud rate. Unit: baud
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   726   * \param samplePoint Specifies the sample point. Range = [0, 10000] resp. [0%, 100%] of the total bit time.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   727   * \param syncJumpWidth Specifies the re-synchronization jump width
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   728   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   729   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   730  IFX_EXTERN void IfxCan_Node_setBitTiming(Ifx_CAN_N *node, float32 moduleFreq, uint32 baudrate, uint16 samplePoint, uint16 syncJumpWidth);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   731  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   732  /** \brief Sets the values of CAN baudrate for standard frames
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   733   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   734   * \param syncJumpWidth Synchronization Jump Width
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   735   * \param timeSegment2 Time segment after sample point
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   736   * \param timeSegment1 Time segment before sample point
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   737   * \param prescaler Baud Rate Prescaler
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   738   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   739   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   740  IFX_EXTERN void IfxCan_Node_setBitTimingValues(Ifx_CAN_N *node, uint16 syncJumpWidth, uint8 timeSegment2, uint8 timeSegment1, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   741  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   742  /** \brief Calulates and Sets the CAN fast baudrate for CAN FD frames data phase
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   743   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   744   * \param moduleFreq Specifies the CAN module frequency
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   745   * \param baudrate Specifies the baud rate. Unit: baud
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   746   * \param samplePoint Specifies the sample point. Range = [0, 10000] resp. [0%, 100%] of the total bit time.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   747   * \param syncJumpWidth Specifies the re-synchronization jump width
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   748   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   749   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   750  IFX_EXTERN void IfxCan_Node_setFastBitTiming(Ifx_CAN_N *node, float32 moduleFreq, uint32 baudrate, uint16 samplePoint, uint16 syncJumpWidth);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   751  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   752  /** \brief Sets the values of CAN fast baudrate for CAN FD frames data phase
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   753   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   754   * \param syncJumpWidth Synchronization Jump Width
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   755   * \param timeSegment2 Time segment after sample point
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   756   * \param timeSegment1 Time segment before sample point
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   757   * \param prescaler Baud Rate Prescaler
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   759   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   760  IFX_EXTERN void IfxCan_Node_setFastBitTimingValues(Ifx_CAN_N *node, uint16 syncJumpWidth, uint8 timeSegment2, uint8 timeSegment1, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   761  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   762  /** \brief Enables the CAN frame mode for transmission
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   763   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   764   * \param frameMode CAN frame mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   766   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   767  IFX_EXTERN void IfxCan_Node_setFrameMode(Ifx_CAN_N *node, IfxCan_FrameMode frameMode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   768  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   769  /** \brief Sets CAN frame mode request for transmission
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   770   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   771   * \param frameMode CAN frame mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   773   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   774  IFX_EXTERN void IfxCan_Node_setFrameModeReq(Ifx_CAN_TXMSG *txBufferElement, IfxCan_FrameMode frameMode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   775  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   776  /** \brief Sets CAN frame mode request for transmission.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   777   * This function is deprecated. Use new function IfxCan_Node_setFrameModeReq
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   778   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   779   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   780   * \param frameMode CAN frame mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   781   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   782   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   783  IFX_EXTERN void IfxCan_Node_setFrameModeRequest(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, IfxCan_FrameMode frameMode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   784  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   785  /** \brief Converts data length code (DLC) into number of bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   786   * \param dataLengthCode Data length code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   787   * \return Data length in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   788   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   789  IFX_EXTERN uint32 IfxCan_Node_getDataLengthInBytes(IfxCan_DataLengthCode dataLengthCode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   790  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   791  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   792  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   793  /** \addtogroup IfxLld_Can_Std_Tx_Element_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   794   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   795  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   796  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   797  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   798  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   799  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   800  /** \brief Returns Tx FIFO/Queue Put Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   801   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   802   * \return Tx Buffer Element Number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   803   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   804  IFX_INLINE IfxCan_TxBufferId IfxCan_Node_getTxFifoQueuePutIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   805  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   806  /** \brief Returns the status of whether cancellation is finished on the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   807   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   808   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   809   * \return Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   810   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   811  IFX_INLINE boolean IfxCan_Node_isTxBufferCancellationFinished(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   812  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   813  /** \brief Returns the status of pending request of the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   814   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   815   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   816   * \return Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   817   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   818  IFX_INLINE boolean IfxCan_Node_isTxBufferRequestPending(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   819  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   820  /** \brief Returns the status of whether transmission occured on the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   821   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   822   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   823   * \return Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   824   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   825  IFX_INLINE boolean IfxCan_Node_isTxBufferTransmissionOccured(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   826  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   827  /** \brief Returns the status of Tx Fifo/Queue is full or not
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   828   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   829   * \return Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   830   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   831  IFX_INLINE boolean IfxCan_Node_isTxFifoQueueFull(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   832  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   833  /** \brief pauses the CAN Node for two CAN bit times before starting the next transmission
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   834   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   835   * \param enable Enable / Disable choice
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   836   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   837   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   838  IFX_INLINE void IfxCan_Node_pauseTransmission(Ifx_CAN_N *node, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   839  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   840  /** \brief Sets the Data Length Code (DLC) for transmit frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   841   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   842   * \param dataLengthCode DLC, data length code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   843   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   844   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   845  IFX_INLINE void IfxCan_Node_setDataLength(Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   846  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   847  /** \brief Sets the Data Length Code (DLC) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   848   * This function is deprecated. Use new function IfxCan_Node_setDataLength
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   849   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   850   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   851   * \param dataLengthCode DLC, data length code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   852   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   853   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   854  IFX_INLINE void IfxCan_Node_setDataLengthCode(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   855  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   856  /** \brief Sets the number of dedicated Tx Buffers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   857   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   858   * \param number Number of Tx Buffers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   859   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   860   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   861  IFX_INLINE void IfxCan_Node_setDedicatedTxBuffersNumber(Ifx_CAN_N *node, uint8 number);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   862  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   863  /** \brief Sets the Error State Indicator (ESI) for transmit frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   864   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   865   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   866   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   867   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   868  IFX_INLINE void IfxCan_Node_setErrStateIndicator(Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   869  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   870  /** \brief Sets the Error State Indicator (ESI) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   871   * This function is decprecated. Use new function IfxCan_Node_setErrStateIndicator
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   872   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   873   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   874   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   875   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   876   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   877  IFX_INLINE void IfxCan_Node_setErrorStateIndicator(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   878  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   879  /** \brief Sets the Message Marker (MM) for transmit frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   880   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   881   * \param bufferId MM, Message Marker , Buffer Id
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   882   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   883   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   884  IFX_INLINE void IfxCan_Node_setMessageMarker(Ifx_CAN_TXMSG *txBufferElement, IfxCan_TxBufferId bufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   885  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   886  /** \brief Sets the identifier (ID) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   887   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   888   * \param messageId Identifier
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   889   * \param messageIdLength Message Id length (Standard / Extended)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   890   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   891   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   892  IFX_INLINE void IfxCan_Node_setMsgId(Ifx_CAN_TXMSG *txBufferElement, uint32 messageId, IfxCan_MessageIdLength messageIdLength);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   893  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   894  /** \brief Sets the identifier (ID) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   895   * This function is deprecated. Use the new function IfxCan_Node_setMsgId
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   896   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   897   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   898   * \param messageId Identifier
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   899   * \param messageIdLength Message Id length (Standard / Extended)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   900   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   901   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   902  IFX_INLINE void IfxCan_Node_setMesssageId(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, uint32 messageId, IfxCan_MessageIdLength messageIdLength);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   903  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   904  /** \brief Sets the remote Transmit Request (RTR) for transmit frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   905   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   906   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   907   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   908   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   909  IFX_INLINE void IfxCan_Node_setRemoteTransmitReq(Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   910  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   911  /** \brief Sets the remote Transmit Request (RTR) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   912   * This function is deprecated. Use new function IfxCan_Node_setRemoteTransmitReq
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   913   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   914   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   915   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   916   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   917   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   918  IFX_INLINE void IfxCan_Node_setRemoteTransmitRequest(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   919  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   920  /** \brief Sets Transmit FIFO/Queue Mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   921   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   922   * \param mode Tx FIFO/Queue Mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   923   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   924   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   925  IFX_INLINE void IfxCan_Node_setTransmitFifoQueueMode(Ifx_CAN_N *node, IfxCan_TxMode mode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   926  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   927  /** \brief Sets Transmit FIFO/Queue Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   928   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   929   * \param number Number of Tx Buffers used for Tx FIFO/Queue
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   930   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   931   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   932  IFX_INLINE void IfxCan_Node_setTransmitFifoQueueSize(Ifx_CAN_N *node, uint8 number);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   933  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   934  /** \brief Sets the Add Request for the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   935   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   936   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   937   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   938   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   939  IFX_INLINE void IfxCan_Node_setTxBufferAddRequest(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   940  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   941  /** \brief Sets the Cancellation Request for the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   942   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   943   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   944   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   945   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   946  IFX_INLINE void IfxCan_Node_setTxBufferCancellationRequest(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   947  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   948  /** \brief Sets Tx Buffer Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   949   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   950   * \param size Tx Buffer Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   951   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   952   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   953  IFX_INLINE void IfxCan_Node_setTxBufferDataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   954  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   955  /** \brief Sets the start address of Tx Buffers section in the Message RAM (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   956   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   957   * \param address Start address of Tx Buffers in the message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   958   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   959   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   960  IFX_INLINE void IfxCan_Node_setTxBuffersStartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   961  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   962  /** \brief Sets the Tx Event Fifo Control (EFC) for transmit frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   963   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   964   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   965   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   966   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   967  IFX_INLINE void IfxCan_Node_setTxEventFifoCtrl(Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   968  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   969  /** \brief Sets the Tx Event Fifo Control (EFC) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   970   * This function is deprecated. Use new function IfxCan_Node_setTxEventFifoCtrl
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   971   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   972   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   973   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   974   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   975   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   976  IFX_INLINE void IfxCan_Node_setTxEventFifoControl(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   977  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   978  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   979  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   980  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   981  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   982  /** \brief Returns Tx Buffer Data Field Size in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   983   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   984   * \return Data field size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   985   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   986  IFX_EXTERN uint8 IfxCan_Node_getTxBufferDataFieldSize(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   987  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   988  /** \brief Returns the address of selected Tx buffer element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   989   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   990   * \param ramBaseAddress Message RAM base address of CAN module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   991   * \param txBuffersStartAddress Start address of Tx Buffers section in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   992   * \param txBufferNumber Tx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   993   * \return Tx Buffer Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   994   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   995  IFX_EXTERN Ifx_CAN_TXMSG *IfxCan_Node_getTxBufferElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 txBuffersStartAddress, IfxCan_TxBufferId txBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   996  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   997  /** \brief Writes Data into Tx buffer element Node_writeTxBufData
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   998   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   999   * \param dataLengthCode DLC, Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1000   * \param data Pointer to data (in words)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1001   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1002   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1003  IFX_EXTERN void IfxCan_Node_writeTxBufData(Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode, uint32 *data);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1004  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1005  /** \brief Writes Data into Tx buffer element.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1006   * This function is deprecated. Use new function IfxCan_Node_writeTxBufData
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1007   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1008   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1009   * \param dataLengthCode DLC, Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1010   * \param data Pointer to data (in words)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1011   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1012   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1013  IFX_EXTERN void IfxCan_Node_writeData(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode, uint32 *data);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1014  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1015  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1016  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1017  /** \addtogroup IfxLld_Can_Std_Rx_Element_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1018   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1019  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1020  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1021  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1022  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1023  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1024  /** \brief Returns the Data Length Code from the received frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1025   * \param rxBufferElement Rx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1026   * \return Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1027   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1028  IFX_INLINE uint32 IfxCan_Node_getDataLengthCode(Ifx_CAN_RXMSG *rxBufferElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1029  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1030  /** \brief Returns the identifier (ID) from the received frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1031   * \param rxBufferElement Rx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1032   * \return Identifier
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1033   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1034  IFX_INLINE uint32 IfxCan_Node_getMesssageId(Ifx_CAN_RXMSG *rxBufferElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1035  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1036  /** \brief Returns Rx FIFO 0 Fill Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1037   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1038   * \return Fill level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1039   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1040  IFX_INLINE uint8 IfxCan_Node_getRxFifo0FillLevel(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1041  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1042  /** \brief Returns Rx FIFO 0 get index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1043   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1044   * \return Rx Buffer Element Number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1045   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1046  IFX_INLINE IfxCan_RxBufferId IfxCan_Node_getRxFifo0GetIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1047  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1048  /** \brief Returns Rx FIFO 1 Fill Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1049   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1050   * \return Fill level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1051   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1052  IFX_INLINE uint8 IfxCan_Node_getRxFifo1FillLevel(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1053  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1054  /** \brief Returns Rx FIFO 1 get index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1055   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1056   * \return Rx Buffer Element Number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1057   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1058  IFX_INLINE IfxCan_RxBufferId IfxCan_Node_getRxFifo1GetIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1059  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1060  /** \brief Sets Rx Buffer Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1061   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1062   * \param size Rx Buffer Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1063   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1064   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1065  IFX_INLINE void IfxCan_Node_setRxBufferDataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1066  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1067  /** \brief Sets the start address of Rx Buffers section in the Message RAM (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1068   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1069   * \param address Start address of Rx Buffers in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1070   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1071   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1072  IFX_INLINE void IfxCan_Node_setRxBuffersStartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1073  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1074  /** \brief Sets Rx FIFO 0 Acknowledge Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1075   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1076   * \param RxBufferNumber Rx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1077   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1078   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1079  IFX_INLINE void IfxCan_Node_setRxFifo0AcknowledgeIndex(Ifx_CAN_N *node, IfxCan_RxBufferId RxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1080  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1081  /** \brief Sets Rx Buffer Fifo 0 Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1082   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1083   * \param size Rx FIFO 0 Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1084   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1085   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1086  IFX_INLINE void IfxCan_Node_setRxFifo0DataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1087  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1088  /** \brief Sets Rx Buffer Fifo 0 operating mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1089   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1090   * \param mode Rx FIFO 0 operating Mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1091   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1092   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1093  IFX_INLINE void IfxCan_Node_setRxFifo0OperatingMode(Ifx_CAN_N *node, IfxCan_RxFifoMode mode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1094  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1095  /** \brief Sets Rx FIFO 0 Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1096   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1097   * \param size Rx FIFO 0 Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1098   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1099   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1100  IFX_INLINE void IfxCan_Node_setRxFifo0Size(Ifx_CAN_N *node, uint8 size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1101  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1102  /** \brief Sets the start address of Rx FIFO 0 section in the Message RAM (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1103   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1104   * \param address Start address of Rx FIFO 0 in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1105   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1106   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1107  IFX_INLINE void IfxCan_Node_setRxFifo0StartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1108  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1109  /** \brief Sets Rx FIFO 0 Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1110   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1111   * \param level Rx FIFO 0 Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1112   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1113   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1114  IFX_INLINE void IfxCan_Node_setRxFifo0WatermarkLevel(Ifx_CAN_N *node, uint8 level);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1115  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1116  /** \brief Sets Rx FIFO 1 Acknowledge Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1117   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1118   * \param RxBufferNumber Rx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1119   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1120   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1121  IFX_INLINE void IfxCan_Node_setRxFifo1AcknowledgeIndex(Ifx_CAN_N *node, IfxCan_RxBufferId RxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1122  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1123  /** \brief Sets Rx Buffer Fifo 1 Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1124   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1125   * \param size Rx FIFO 1 Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1126   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1127   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1128  IFX_INLINE void IfxCan_Node_setRxFifo1DataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1129  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1130  /** \brief Sets Rx Buffer Fifo 1 operating mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1131   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1132   * \param mode Rx FIFO 1 operating Mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1133   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1134   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1135  IFX_INLINE void IfxCan_Node_setRxFifo1OperatingMode(Ifx_CAN_N *node, IfxCan_RxFifoMode mode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1136  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1137  /** \brief Sets Rx FIFO 1 Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1138   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1139   * \param size Rx FIFO 1 Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1140   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1141   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1142  IFX_INLINE void IfxCan_Node_setRxFifo1Size(Ifx_CAN_N *node, uint8 size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1143  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1144  /** \brief Sets the start address of Rx FIFO 1 section in the Message RAM (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1145   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1146   * \param address Start address of Rx FIFO 1 in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1147   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1148   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1149  IFX_INLINE void IfxCan_Node_setRxFifo1StartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1150  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1151  /** \brief Sets Rx FIFO 1 Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1152   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1153   * \param level Rx FIFO 1 Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1154   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1155   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1156  IFX_INLINE void IfxCan_Node_setRxFifo1WatermarkLevel(Ifx_CAN_N *node, uint8 level);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1157  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1158  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1159  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1160  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1161  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1162  /** \brief Clears the New Data flag of the selected Rx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1163   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1164   * \param rxBufferId Rx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1165   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1166   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1167  IFX_EXTERN void IfxCan_Node_clearRxBufferNewDataFlag(Ifx_CAN_N *node, IfxCan_RxBufferId rxBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1168  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1169  /** \brief Returns Rx Buffer Data Field Size in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1170   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1171   * \return Data field size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1172   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1173  IFX_EXTERN uint8 IfxCan_Node_getRxBufferDataFieldSize(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1174  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1175  /** \brief Returns the address of selected Rx buffer element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1176   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1177   * \param ramBaseAddress Message RAM base address of CAN Module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1178   * \param rxBuffersStartAddress Start address of Rx Buffers section in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1179   * \param rxBufferNumber Rx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1180   * \return Rx Buffer Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1181   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1182  IFX_EXTERN Ifx_CAN_RXMSG *IfxCan_Node_getRxBufferElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 rxBuffersStartAddress, IfxCan_RxBufferId rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1183  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1184  /** \brief Returns Rx FIFO 0 Data Field Size in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1185   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1186   * \return Data field size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1187   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1188  IFX_EXTERN uint8 IfxCan_Node_getRxFifo0DataFieldSize(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1189  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1190  /** \brief Returns the address of selected Rx FIFO 0 element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1191   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1192   * \param ramBaseAddress Message RAM base address of CAN Module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1193   * \param rxFifo0StartAddress Start address of Rx FIFO 0 section in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1194   * \param rxBufferNumber Rx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1195   * \return Rx FIFO 0 Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1196   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1197  IFX_EXTERN Ifx_CAN_RXMSG *IfxCan_Node_getRxFifo0ElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 rxFifo0StartAddress, IfxCan_RxBufferId rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1198  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1199  /** \brief Returns Rx FIFO 1 Data Field Size in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1200   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1201   * \return Data field size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1202   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1203  IFX_EXTERN uint8 IfxCan_Node_getRxFifo1DataFieldSize(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1204  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1205  /** \brief Returns the address of selected Rx FIFO 1 element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1206   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1207   * \param ramBaseAddress Message RAM base address of CAN Module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1208   * \param rxFifo1StartAddress Start address of Rx FIFO 1 section in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1209   * \param rxBufferNumber Rx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1210   * \return Rx FIFO 1 Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1211   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1212  IFX_EXTERN Ifx_CAN_RXMSG *IfxCan_Node_getRxFifo1ElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 rxFifo1StartAddress, IfxCan_RxBufferId rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1213  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1214  /** \brief Returns the status of whether the selcted Rx buffer has been updated from new data
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1215   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1216   * \param rxBufferId Rx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1217   * \return Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1218   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1219  IFX_EXTERN boolean IfxCan_Node_isRxBufferNewDataUpdated(Ifx_CAN_N *node, IfxCan_RxBufferId rxBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1220  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1221  /** \brief Reads data from Rx buffer element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1222   * \param rxBufferElement Rx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1223   * \param dataLengthCode DLC, Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1224   * \param data Pointer to data (in words)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1225   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1226   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1227  IFX_EXTERN void IfxCan_Node_readData(Ifx_CAN_RXMSG *rxBufferElement, IfxCan_DataLengthCode dataLengthCode, uint32 *data);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1228  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1229  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1230  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1231  /** \addtogroup IfxLld_Can_Std_Filter_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1232   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1233  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1234  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1235  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1236  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1237  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1238  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1239   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1242  IFX_INLINE void IfxCan_Node_acceptRemoteFramesWithStandardId(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1243  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1244  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1245   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1246   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1247   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1248  IFX_INLINE void IfxCan_Node_acceptRemoteFrameswithExtendedId(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1249  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1250  /** \brief Configure the filter for non matching frames with extended id.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1251   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1252   * \param filter action to be performed on non matching messages.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1253   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1254   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1255  IFX_INLINE void IfxCan_Node_configureExtendedFilterForNonMatchingFrames(Ifx_CAN_N *node, IfxCan_NonMatchingFrame filter);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1256  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1257  /** \brief Configure the filter for non matching frames with standard id.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1258   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1259   * \param filter action to be performed on non matching messages.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1260   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1261   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1262  IFX_INLINE void IfxCan_Node_configureStandardFilterForNonMatchingFrames(Ifx_CAN_N *node, IfxCan_NonMatchingFrame filter);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1263  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1264  /** \brief Reject the remote frames with extended id.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1265   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1266   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1267   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1268  IFX_INLINE void IfxCan_Node_rejectRemoteFramesWithExtendedId(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1269  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1270  /** \brief Reject the remote frames with standard id.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1271   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1272   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1273   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1274  IFX_INLINE void IfxCan_Node_rejectRemoteFramesWithStandardId(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1275  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1276  /** \brief Sets the Extended Filter Element Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1277   * \param extendedFilterElement Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1278   * \param filterElementConfiguration Filter Element Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1279   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1280   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1281  IFX_INLINE void IfxCan_Node_setExtendedFilterConfiguration(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_FilterElementConfiguration filterElementConfiguration);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1282  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1283  /** \brief Sets the Extended Filter ID 1 for Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1284   * \param extendedFilterElement Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1285   * \param id Filter ID 1
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1286   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1287   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1288  IFX_INLINE void IfxCan_Node_setExtendedFilterId1(Ifx_CAN_EXTMSG *extendedFilterElement, uint32 id);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1289  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1290  /** \brief Sets the Extended Filter ID 2 for Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1291   * \param extendedFilterElement Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1292   * \param id Filter ID 2
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1293   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1294   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1295  IFX_INLINE void IfxCan_Node_setExtendedFilterId2(Ifx_CAN_EXTMSG *extendedFilterElement, uint32 id);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1296  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1297  /** \brief Sets the Extended Message ID filter list size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1298   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1299   * \param size Number of Extended Message ID filter elements
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1300   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1301   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1302  IFX_INLINE void IfxCan_Node_setExtendedFilterListSize(Ifx_CAN_N *node, uint8 size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1303  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1304  /** \brief Sets the start address of Extended Message ID filter list (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1305   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1306   * \param address Start address of Extended Message ID filter list in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1307   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1308   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1309  IFX_INLINE void IfxCan_Node_setExtendedFilterListStartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1310  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1311  /** \brief Sets the Offset to the Rx Buffer Start Address RXBC.RBSA for storage of a matching message for Extended filter element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1312   * \param extendedFilterElement Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1313   * \param rxBufferNumber Offset to the Rx Buffer Start Address RXBC.RBSA for storage of a matching message (Rx buffer number)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1314   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1315   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1316  IFX_INLINE void IfxCan_Node_setExtendedFilterRxBufferOffset(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_RxBufferId rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1317  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1318  /** \brief Sets the Extended Filter Type for Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1319   * \param extendedFilterElement Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1320   * \param filterType Filter Type
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1321   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1322   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1323  IFX_INLINE void IfxCan_Node_setExtendedFilterType(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_FilterType filterType);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1324  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1325  /** \brief Sets the Standard Filter Element Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1326   * \param standardFilterElement Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1327   * \param filterElementConfiguration Filter Element Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1328   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1329   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1330  IFX_INLINE void IfxCan_Node_setStandardFilterConfiguration(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_FilterElementConfiguration filterElementConfiguration);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1331  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1332  /** \brief Sets the Standard Filter ID 1 for Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1333   * \param standardFilterElement Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1334   * \param id Filter ID 1
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1335   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1336   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1337  IFX_INLINE void IfxCan_Node_setStandardFilterId1(Ifx_CAN_STDMSG *standardFilterElement, uint32 id);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1338  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1339  /** \brief Sets the Standard Filter ID 2 for Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1340   * \param standardFilterElement Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1341   * \param id Filter ID 2
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1342   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1343   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1344  IFX_INLINE void IfxCan_Node_setStandardFilterId2(Ifx_CAN_STDMSG *standardFilterElement, uint32 id);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1345  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1346  /** \brief Sets the Standard  Message ID filter list size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1347   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1348   * \param size Number of Standard Message ID filter elements
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1349   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1350   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1351  IFX_INLINE void IfxCan_Node_setStandardFilterListSize(Ifx_CAN_N *node, uint8 size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1352  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1353  /** \brief Sets the start address of Standard Message ID filter list (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1354   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1355   * \param address Start address of Standard Message ID filter in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1356   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1357   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1358  IFX_INLINE void IfxCan_Node_setStandardFilterListStartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1359  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1360  /** \brief Sets the Offset to the Rx Buffer Start Address RXBC.RBSA for storage of a matching message for standard filter element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1361   * \param standardFilterElement Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1362   * \param rxBufferNumber Offset to the Rx Buffer Start Address RXBC.RBSA for storage of a matching message (Rx buffer number)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1363   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1365  IFX_INLINE void IfxCan_Node_setStandardFilterRxBufferOffset(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_RxBufferId rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1366  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1367  /** \brief Sets the Standard Filter Type for Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1368   * \param standardFilterElement Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1369   * \param filterType Filter Type
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1370   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1371   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1372  IFX_INLINE void IfxCan_Node_setStandardFilterType(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_FilterType filterType);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1373  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1374  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1375  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1376  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1377  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1378  /** \brief Returns the address of selected extended filter element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1379   * \param ramBaseAddress Message RAM base address of CAN Module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1380   * \param extendedFilterListStartAddress Start address of Extended Message ID filter list (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1381   * \param filterNumber extended filter element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1382   * \return Extended Filter Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1383   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1384  IFX_EXTERN Ifx_CAN_EXTMSG *IfxCan_Node_getExtendedFilterElementAddress(uint32 ramBaseAddress, uint16 extendedFilterListStartAddress, uint8 filterNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1385  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1386  /** \brief Returns the address of selected standard filter element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1387   * \param ramBaseAddress Message RAM base address of CAN Module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1388   * \param standardFilterListStartAddress Start address of Standard Message ID filter list (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1389   * \param filterNumber Standard filter element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1390   * \return Standard Filter Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1391   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1392  IFX_EXTERN Ifx_CAN_STDMSG *IfxCan_Node_getStandardFilterElementAddress(uint32 ramBaseAddress, uint16 standardFilterListStartAddress, uint8 filterNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1393  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1394  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1395  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1396  /** \addtogroup IfxLld_Can_Std_Interrupt_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1397   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1398  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1399  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1400  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1401  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1402  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1403  /** \brief Clears the selected interrupt Flag
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1404   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1405   * \param interrupt Type of Interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1406   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1407   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1408  IFX_INLINE void IfxCan_Node_clearInterruptFlag(Ifx_CAN_N *node, IfxCan_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1409  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1410  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1411   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1412   * \param interrupt Type of Interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1413   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1414   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1415  IFX_INLINE void IfxCan_Node_disableInterrupt(Ifx_CAN_N *node, IfxCan_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1416  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1417  /** \brief Disables the Cancellation Finished Interrupt of the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1418   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1419   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1420   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1421   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1422  IFX_INLINE void IfxCan_Node_disableTxBufferCancellationFinishedInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1423  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1424  /** \brief Disables the Transmission Interrupt of the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1425   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1426   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1427   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1428   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1429  IFX_INLINE void IfxCan_Node_disableTxBufferTransmissionInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1430  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1431  /** \brief Enables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1432   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1433   * \param interrupt Type of Interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1434   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1435   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1436  IFX_INLINE void IfxCan_Node_enableInterrupt(Ifx_CAN_N *node, IfxCan_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1437  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1438  /** \brief Enables the Cancellation Finished Interrupt of the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1439   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1440   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1441   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1442   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1443  IFX_INLINE void IfxCan_Node_enableTxBufferCancellationFinishedInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1444  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1445  /** \brief Enables the Transmission Interrupt of the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1446   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1447   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1448   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1449   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1450  IFX_INLINE void IfxCan_Node_enableTxBufferTransmissionInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1451  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1452  /** \brief Returns the status of selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1453   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1454   * \param interrupt Type of Interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1455   * \return Status TRUE / FALSE
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1456   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1457  IFX_INLINE boolean IfxCan_Node_getInterruptFlagStatus(Ifx_CAN_N *node, IfxCan_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1458  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1459  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1460  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1461  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1462  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1463  /** \brief Sets the slected interrupt to the selcted interrupt line
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1464   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1465   * \param interruptGroup Type of Interrupt group
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1466   * \param interruptLine Interrupt line number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1467   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1468   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1469  IFX_EXTERN void IfxCan_Node_setGroupInterruptLine(Ifx_CAN_N *node, IfxCan_InterruptGroup interruptGroup, IfxCan_InterruptLine interruptLine);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1470  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1471  /** \brief Sets the slected interrupt to the selcted interrupt line
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1472   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1473   * \param interrupt Type of Interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1474   * \param interruptLine Interrupt line number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1475   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1476   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1477  IFX_EXTERN void IfxCan_Node_setInterruptLine(Ifx_CAN_N *node, IfxCan_Interrupt interrupt, IfxCan_InterruptLine interruptLine);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1478  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1479  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1480  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1481  /** \addtogroup IfxLld_Can_Std_Module_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1482   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1483  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1484  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1485  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1486  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1487  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1488  /** \brief Returns the base adress of the selected Node of CAN module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1489   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1490   * \param nodeId Node number of the module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1491   * \return Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1492   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1493  IFX_INLINE Ifx_CAN_N *IfxCan_getNodePointer(Ifx_CAN *can, IfxCan_NodeId nodeId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1494  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1495  /** \brief Returns the status of module enabled or disabled
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1496   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1497   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1498   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1499  IFX_INLINE boolean IfxCan_isModuleEnabled(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1500  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1501  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1502   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1503   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1504   * \param can Pointer to CAN module registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1505   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1506   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1507  IFX_INLINE boolean IfxCan_isModuleSuspended(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1508  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1509  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1510   * \param can pointer to CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1511   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1512   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1513   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1514  IFX_INLINE void IfxCan_setSleepMode(Ifx_CAN *can, IfxCan_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1515  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1516  /** \brief Set the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1517   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1518   * \param can Pointer to CAN module registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1519   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1520   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1521   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1522  IFX_INLINE void IfxCan_setSuspendMode(Ifx_CAN *can, IfxCan_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1523  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1524  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1525  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1526  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1527  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1528  /** \brief Disables the module (sets the disable request)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1529   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1530   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1531   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1532  IFX_EXTERN void IfxCan_disableModule(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1533  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1534  /** \brief Enables the module (clears the disable request)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1535   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1536   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1537   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1538  IFX_EXTERN void IfxCan_enableModule(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1539  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1540  /**
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1541   * \param can Module index of the CAN
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1542   * \return CAN module register address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1543   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1544  IFX_EXTERN Ifx_CAN *IfxCan_getAddress(IfxCan_Index can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1545  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1546  /** \brief API to get the resource index of the CAN specified.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1547   * \return can resource index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1548   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1549  IFX_EXTERN IfxCan_Index IfxCan_getIndex(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1550  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1551  /** \brief Returns the operatinf frequency of the CAN module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1552   * \return Module Frequency
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1553   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1554  IFX_EXTERN float32 IfxCan_getModuleFrequency(void);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1555  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1556  /** \brief resets CAN kernel
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1557   * \param can pointer to CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1558   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1559   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1560  IFX_EXTERN void IfxCan_resetModule(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1561  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1562  /** \brief sets the clocksource selection
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1563   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1564   * \param clockSelect Clock selection option
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1565   * \param clockSource Type of Clock Source selection
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1566   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1567   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1568  IFX_EXTERN void IfxCan_setClockSource(Ifx_CAN *can, IfxCan_ClockSelect clockSelect, IfxCan_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1569  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1570  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1571  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1572  /** \addtogroup IfxLld_Can_Std_Tx_Event_FIFO_Element_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1573   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1574  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1575  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1576  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1577  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1578  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1579  /** \brief Returns the Bit Rate Switch (BRS) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1580   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1581   * \return Bit Rate Switch (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1582   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1583  IFX_INLINE boolean IfxCan_Node_getBRSFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1584  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1585  /** \brief Returns the Data Length Code from the Tx Event Fifo Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1586   * \param txEventFifoElement Tx Event Fifo Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1587   * \return Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1588   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1589  IFX_INLINE uint32 IfxCan_Node_getDLCFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1590  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1591  /** \brief Returns the Error State Indicator (ESI) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1592   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1593   * \return Error State Indicator
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1594   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1595  IFX_INLINE boolean IfxCan_Node_getESIFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1596  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1597  /** \brief Returns the FD Format (FDF) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1598   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1599   * \return FD format (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1600   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1601  IFX_INLINE boolean IfxCan_Node_getFDFFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1602  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1603  /** \brief Returns the Message Marker (MM) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1604   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1605   * \return Message Marker
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1606   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1607  IFX_INLINE uint8 IfxCan_Node_getMMFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1608  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1609  /** \brief Returns the identifier (ID) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1610   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1611   * \return Identifier
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1612   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1613  IFX_INLINE uint32 IfxCan_Node_getMesssageIdFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1614  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1615  /** \brief Returns the Remote Transmission Request Status (RTR) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1616   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1617   * \return Remote Transmission Request Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1618   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1619  IFX_INLINE boolean IfxCan_Node_getRTRFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1620  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1621  /** \brief Returns the Tx Time Stamp (TXTS) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1622   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1623   * \return Tx Time Stamp
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1624   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1625  IFX_INLINE uint16 IfxCan_Node_getTXTSFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1626  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1627  /** \brief Returns the Tx Event Fifo Acknowledge Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1628   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1629   * \return Returns Tx Event Fifo Acknowledge Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1630   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1631  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoAcknowledgeIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1632  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1633  /** \brief Returns the Tx Event Fifo Fill Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1634   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1635   * \return Returns Tx Event Fifo Fill Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1636   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1637  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoFillLevel(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1638  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1639  /** \brief Returns the Tx Event Fifo Get Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1640   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1641   * \return Returns Tx Event Fifo Get Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1642   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1643  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoGetIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1644  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1645  /** \brief Returns the Tx Event Fifo Put Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1646   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1647   * \return Returns Tx Event Fifo Put Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1648   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1649  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoPutIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1650  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1651  /** \brief Returns Tx Event Fifo Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1652   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1653   * \return Tx Event Fifo Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1654   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1655  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoSize(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1656  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1657  /** \brief Returns Tx Event Fifo Start Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1658   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1659   * \return Tx Event Fifo Start Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1660   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1661  IFX_INLINE uint16 IfxCan_Node_getTxEventFifoStartAddress(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1662  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1663  /** \brief Returns Tx Event Fifo Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1664   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1665   * \return Tx Event Fifo Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1666   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1667  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoWatermarkLevel(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1668  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1669  /** \brief Returns the status of Tx Event Fifo Element lost
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1670   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1671   * \return Returns status of Tx Event Fifo Element Lost\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1672   * True : elemnt lost\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1673   * False : element not lost
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1674   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1675  IFX_INLINE boolean IfxCan_Node_isTxEventFifoElementLost(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1676  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1677  /** \brief Returns the status of Tx Event Fifo Full
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1678   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1679   * \return Returns status of Tx Event Fifo Full\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1680   * True : Fifo full\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1681   * False : Fifo not full
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1682   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1683  IFX_INLINE boolean IfxCan_Node_isTxEventFifoFull(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1684  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1685  /** \brief Sets Tx Event Fifo Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1686   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1687   * \param size Tx Event Fifo Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1688   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1689   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1690  IFX_INLINE void IfxCan_Node_setTxEventFifoSize(Ifx_CAN_N *node, uint8 size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1691  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1692  /** \brief Sets Tx Event Fifo Start Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1693   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1694   * \param address Tx Event Fifo Start Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1695   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1696   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1697  IFX_INLINE void IfxCan_Node_setTxEventFifoStartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1698  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1699  /** \brief Sets Tx Event Fifo Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1700   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1701   * \param level Tx Event Fifo Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1702   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1703   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1704  IFX_INLINE void IfxCan_Node_setTxEventFifoWatermarkLevel(Ifx_CAN_N *node, uint8 level);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1705  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1706  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1707  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1708  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1709  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1710  /** \brief Returns CAN frame mode of operation for a Tx Event Fifo Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1711   * \param txEventFifoElement Tx Event Fifo Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1712   * \return CAN frame mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1713   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1714  IFX_EXTERN IfxCan_FrameMode IfxCan_Node_getFrameModeFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1715  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1716  /** \brief Returns the address of selected Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1717   * \param ramBaseAddress Message RAM base address of CAN module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1718   * \param txEventFifoStartAddress Start address of Tx Event Fifo section in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1719   * \param txEventFifoNumber Tx Event Fifo element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1720   * \return Tx Event Fifo Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1721   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1722  IFX_EXTERN Ifx_CAN_TXEVENT *IfxCan_Node_getTxEventFifoElementAddress(uint32 ramBaseAddress, uint16 txEventFifoStartAddress, uint8 txEventFifoNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1723  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1724  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1725  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1726  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1727  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1728  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1729  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1730  /** \brief CAN frame format of the last received message.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1731   * TRUE: CAN FD frame received
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1732   * FALSE: CAN FD frame not received
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1733   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1734   * \return CAN Frame format (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1735   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1736  IFX_INLINE boolean IfxCan_Node_isCanFDMsgReceived(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1737  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1738  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1739  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1740  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1741  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1742  /** \brief Returns the address of interrupt node source register
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1743   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1744   * \param interruptLine Interrupt line number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1745   * \return Address of interrupt node source register
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1746   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1747  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxCan_getSrcPointer(Ifx_CAN *can, IfxCan_InterruptLine interruptLine);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1748  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1749  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1750  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1751  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1752  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1753  IFX_INLINE void IfxCan_Node_acceptRemoteFramesWithStandardId(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1754  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1755      node->GFC.B.RRFS = 0U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1756  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1757  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1758  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1759  IFX_INLINE void IfxCan_Node_acceptRemoteFrameswithExtendedId(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1760  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1761      node->GFC.B.RRFE = 0U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1762  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1763  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1764  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1765  IFX_INLINE void IfxCan_Node_clearInterruptFlag(Ifx_CAN_N *node, IfxCan_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1766  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1767      uint32 value = (1U << interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1768      node->IR.U = value;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1770  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1771  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1772  IFX_INLINE void IfxCan_Node_configureExtendedFilterForNonMatchingFrames(Ifx_CAN_N *node, IfxCan_NonMatchingFrame filter)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1774      node->GFC.B.ANFE = filter;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1776  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1777  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1778  IFX_INLINE void IfxCan_Node_configureStandardFilterForNonMatchingFrames(Ifx_CAN_N *node, IfxCan_NonMatchingFrame filter)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1780      node->GFC.B.ANFS = filter;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1782  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1783  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1784  IFX_INLINE void IfxCan_Node_disableConfigurationChange(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1786      node->CCCR.B.CCE = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1787  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1788      while (node->CCCR.B.CCE != 0)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1789      {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1790  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1791      node->CCCR.B.INIT = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1792  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1793      while (node->CCCR.B.INIT != 0)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1794      {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1795  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1796  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1797  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1798  IFX_INLINE void IfxCan_Node_disableInterrupt(Ifx_CAN_N *node, IfxCan_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1799  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1800      uint32 mask = (1U << interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1801      node->IE.U = node->IE.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1802  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1803  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1804  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1805  IFX_INLINE void IfxCan_Node_disableTxBufferCancellationFinishedInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1806  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1807      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1808      node->TX.BCIE.U = node->TX.BCIE.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1809  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1810  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1811  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1812  IFX_INLINE void IfxCan_Node_disableTxBufferTransmissionInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1813  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1814      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1815      node->TX.BTIE.U = node->TX.BTIE.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1816  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1817  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1818  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1819  IFX_INLINE void IfxCan_Node_enableConfigurationChange(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1820  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1821      Ifx_CAN_N_CCCR cccr;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1822  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1823      /* If INIT already set, clear it before setting again. */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1824      /* The module needs some time if INIT was rewritten !*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1825      if (node->CCCR.B.INIT == 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1826      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1827          node->CCCR.B.CCE = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1828  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1829          while (node->CCCR.B.CCE != 0)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1830          {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1831  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1832          node->CCCR.B.INIT = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1833  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1834          while (node->CCCR.B.INIT != 0)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1835          {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1836      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1837  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1838      node->CCCR.B.INIT = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1839  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1840      while (node->CCCR.B.INIT != 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1841      {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1842  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1843      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1844          cccr.U       = node->CCCR.U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1845          cccr.B.INIT  = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1846          cccr.B.CCE   = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1847          node->CCCR.U = cccr.U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1848      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1849  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1850  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1851  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1852  IFX_INLINE void IfxCan_Node_enableInterrupt(Ifx_CAN_N *node, IfxCan_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1853  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1854      uint32 mask = (1U << interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1855      node->IE.U = node->IE.U | (mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1856  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1857  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1858  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1859  IFX_INLINE void IfxCan_Node_enableLoopbackMode(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1860  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1861      node->NPCR.B.LBM = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1862  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1863  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1864  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1865  IFX_INLINE void IfxCan_Node_enableTxBufferCancellationFinishedInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1866  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1867      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1868      node->TX.BCIE.U = node->TX.BCIE.U | (mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1869  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1870  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1871  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1872  IFX_INLINE void IfxCan_Node_enableTxBufferTransmissionInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1873  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1874      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1875      node->TX.BTIE.U = node->TX.BTIE.U | (mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1876  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1877  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1878  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1879  IFX_INLINE boolean IfxCan_Node_getBRSFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1880  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1881      return txEventFifoElement->E1.B.BRS;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1882  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1883  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1884  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1885  IFX_INLINE uint32 IfxCan_Node_getDLCFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1886  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1887      return (IfxCan_DataLengthCode)txEventFifoElement->E1.B.DLC;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1888  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1889  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1890  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1891  IFX_INLINE uint32 IfxCan_Node_getDataLengthCode(Ifx_CAN_RXMSG *rxBufferElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1892  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1893      return (IfxCan_DataLengthCode)rxBufferElement->R1.B.DLC;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1894  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1895  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1896  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1897  IFX_INLINE boolean IfxCan_Node_getESIFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1898  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1899      return txEventFifoElement->E0.B.ESI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1900  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1901  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1902  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1903  IFX_INLINE boolean IfxCan_Node_getFDFFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1904  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1905      return txEventFifoElement->E1.B.FDF;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1906  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1907  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1908  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1909  IFX_INLINE boolean IfxCan_Node_getInterruptFlagStatus(Ifx_CAN_N *node, IfxCan_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1910  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1911      uint32  mask   = (1U << interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1912      boolean status = (node->IR.U & mask) != 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1913      return status;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1914  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1915  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1916  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1917  IFX_INLINE uint8 IfxCan_Node_getMMFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1918  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1919      return (uint8)txEventFifoElement->E1.B.MM;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1920  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1921  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1922  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1923  IFX_INLINE uint32 IfxCan_Node_getMesssageId(Ifx_CAN_RXMSG *rxBufferElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1924  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1925      /* get identifier extention */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1926      IfxCan_MessageIdLength messageIdLength = (IfxCan_MessageIdLength)rxBufferElement->R0.B.XTD;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1927  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1928      /* get identifier */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1929      return rxBufferElement->R0.B.ID >> ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1930  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1931  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1932  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1933  IFX_INLINE uint32 IfxCan_Node_getMesssageIdFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1934  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1935      /* get identifier extention */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1936      IfxCan_MessageIdLength messageIdLength = (IfxCan_MessageIdLength)txEventFifoElement->E0.B.XTD;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1937  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1938      /* get identifier */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1939      return txEventFifoElement->E0.B.ID >> ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1940  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1941  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1942  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1943  IFX_INLINE boolean IfxCan_Node_getRTRFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1944  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1945      return txEventFifoElement->E0.B.RTR;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1946  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1947  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1948  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1949  IFX_INLINE uint8 IfxCan_Node_getRxFifo0FillLevel(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1950  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1951      return node->RX.F0S.B.F0FL;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1952  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1953  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1954  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1955  IFX_INLINE IfxCan_RxBufferId IfxCan_Node_getRxFifo0GetIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1956  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1957      return (IfxCan_RxBufferId)node->RX.F0S.B.F0GI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1958  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1959  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1960  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1961  IFX_INLINE uint8 IfxCan_Node_getRxFifo1FillLevel(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1962  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1963      return node->RX.F1S.B.F1FL;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1964  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1965  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1966  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1967  IFX_INLINE IfxCan_RxBufferId IfxCan_Node_getRxFifo1GetIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1968  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1969      return (IfxCan_RxBufferId)node->RX.F1S.B.F1GI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1970  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1971  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1972  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1973  IFX_INLINE uint16 IfxCan_Node_getTXTSFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1974  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1975      return (uint16)txEventFifoElement->E1.B.TXTS;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1976  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1977  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1978  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1979  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoAcknowledgeIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1980  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1981      return (uint8)node->TX.EFA.B.EFAI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1982  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1983  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1984  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1985  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoFillLevel(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1986  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1987      return (uint8)node->TX.EFS.B.EFFL;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1988  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1989  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1990  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1991  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoGetIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1992  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1993      return (uint8)node->TX.EFS.B.EFGI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1994  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1995  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1996  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1997  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoPutIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1998  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1999      return (uint8)node->TX.EFS.B.EFPI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2000  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2001  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2002  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2003  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoSize(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2004  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2005      return (uint8)node->TX.EFC.B.EFS;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2006  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2007  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2008  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2009  IFX_INLINE uint16 IfxCan_Node_getTxEventFifoStartAddress(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2010  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2011      return (uint16)node->TX.EFC.B.EFSA;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2012  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2013  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2014  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2015  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoWatermarkLevel(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2016  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2017      return (uint8)node->TX.EFC.B.EFWM;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2018  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2019  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2020  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2021  IFX_INLINE IfxCan_TxBufferId IfxCan_Node_getTxFifoQueuePutIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2022  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2023      return (IfxCan_TxBufferId)node->TX.FQS.B.TFQPI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2024  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2025  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2026  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2027  IFX_INLINE boolean IfxCan_Node_isNodeSynchronized(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2028  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2029      return (boolean)((node->PSR.B.ACT != 0) ? 1 : 0);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2030  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2031  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2032  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2033  IFX_INLINE boolean IfxCan_Node_isTxBufferCancellationFinished(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2034  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2035      uint32  mask    = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2036      boolean tempVar = (boolean)(node->TX.BTO.U & mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2037      return tempVar;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2038  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2039  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2040  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2041  IFX_INLINE boolean IfxCan_Node_isTxBufferRequestPending(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2042  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2043      uint32  mask    = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2044      boolean tempVar = (boolean)(node->TX.BRP.U & mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2045      return tempVar;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2046  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2047  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2048  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2049  IFX_INLINE boolean IfxCan_Node_isTxBufferTransmissionOccured(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2050  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2051      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2052      return (boolean)(node->TX.BTO.U & mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2053  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2054  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2055  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2056  IFX_INLINE boolean IfxCan_Node_isTxEventFifoElementLost(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2057  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2058      return node->TX.EFS.B.TEFL;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2059  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2060  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2061  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2062  IFX_INLINE boolean IfxCan_Node_isTxEventFifoFull(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2063  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2064      return node->TX.EFS.B.EFF;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2065  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2066  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2067  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2068  IFX_INLINE boolean IfxCan_Node_isTxFifoQueueFull(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2069  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2070      return node->TX.FQS.B.TFQF;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2071  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2072  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2073  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2074  IFX_INLINE void IfxCan_Node_pauseTransmission(Ifx_CAN_N *node, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2075  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2076      node->CCCR.B.TXP = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2077  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2078  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2079  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2080  IFX_INLINE void IfxCan_Node_rejectRemoteFramesWithExtendedId(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2081  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2082      node->GFC.B.RRFE = 1U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2083  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2084  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2085  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2086  IFX_INLINE void IfxCan_Node_rejectRemoteFramesWithStandardId(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2087  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2088      node->GFC.B.RRFS = 1U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2089  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2090  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2091  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2092  IFX_INLINE void IfxCan_Node_setDataLength(Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2093  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2094      txBufferElement->T1.B.DLC = dataLengthCode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2095  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2096  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2097  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2098  IFX_INLINE void IfxCan_Node_setDataLengthCode(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2099  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2100      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2101      txBufferElement->T1.B.DLC = dataLengthCode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2102  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2103  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2104  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2105  IFX_INLINE void IfxCan_Node_setDedicatedTxBuffersNumber(Ifx_CAN_N *node, uint8 number)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2106  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2107      node->TX.BC.B.NDTB = number;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2108  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2109  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2110  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2111  IFX_INLINE void IfxCan_Node_setErrStateIndicator(Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2112  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2113      txBufferElement->T0.B.ESI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2114  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2115  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2116  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2117  IFX_INLINE void IfxCan_Node_setErrorStateIndicator(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2118  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2119      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2120      txBufferElement->T0.B.ESI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2121  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2122  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2123  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2124  IFX_INLINE void IfxCan_Node_setExtendedFilterConfiguration(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_FilterElementConfiguration filterElementConfiguration)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2125  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2126      extendedFilterElement->F0.B.EFEC = filterElementConfiguration;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2127  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2128  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2129  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2130  IFX_INLINE void IfxCan_Node_setExtendedFilterId1(Ifx_CAN_EXTMSG *extendedFilterElement, uint32 id)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2131  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2132      extendedFilterElement->F0.B.EFID1 = id;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2133  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2134  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2135  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2136  IFX_INLINE void IfxCan_Node_setExtendedFilterId2(Ifx_CAN_EXTMSG *extendedFilterElement, uint32 id)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2137  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2138      extendedFilterElement->F1.B.EFID2 = id;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2139  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2140  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2141  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2142  IFX_INLINE void IfxCan_Node_setExtendedFilterListSize(Ifx_CAN_N *node, uint8 size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2143  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2144      node->XIDFC.B.LSE = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2145  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2146  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2147  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2148  IFX_INLINE void IfxCan_Node_setExtendedFilterListStartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2149  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2150      node->XIDFC.B.FLESA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2151  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2152  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2153  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2154  IFX_INLINE void IfxCan_Node_setExtendedFilterRxBufferOffset(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_RxBufferId rxBufferNumber)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2155  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2156      extendedFilterElement->F1.B.EFID2 = (uint8)rxBufferNumber;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2157  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2158  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2159  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2160  IFX_INLINE void IfxCan_Node_setExtendedFilterType(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_FilterType filterType)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2161  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2162      extendedFilterElement->F1.B.EFT = filterType;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2163  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2164  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2165  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2166  IFX_INLINE void IfxCan_Node_setInitialisation(Ifx_CAN_N *node, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2167  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2168      node->CCCR.B.INIT = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2169  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2170  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2171  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2172  IFX_INLINE void IfxCan_Node_setMessageMarker(Ifx_CAN_TXMSG *txBufferElement, IfxCan_TxBufferId bufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2173  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2174      txBufferElement->T1.B.MM = bufferId;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2175  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2176  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2177  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2178  IFX_INLINE void IfxCan_Node_setMsgId(Ifx_CAN_TXMSG *txBufferElement, uint32 messageId, IfxCan_MessageIdLength messageIdLength)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2179  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2180      /* set identifier extention */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2181      txBufferElement->T0.B.XTD = (messageIdLength != IfxCan_MessageIdLength_extended) ? 0 : 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2182      /* set identifier */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2183      txBufferElement->T0.B.ID  = messageId << ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2184  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2185  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2186  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2187  IFX_INLINE void IfxCan_Node_setMesssageId(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, uint32 messageId, IfxCan_MessageIdLength messageIdLength)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2188  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2189      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2190      /* set identifier extention */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2191      txBufferElement->T0.B.XTD = (messageIdLength != IfxCan_MessageIdLength_extended) ? 0 : 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2192      /* set identifier */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2193      txBufferElement->T0.B.ID  = messageId << ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2194  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2195  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2196  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2197  IFX_INLINE void IfxCan_Node_setRemoteTransmitReq(Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2198  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2199      txBufferElement->T0.B.RTR = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2200  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2201  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2202  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2203  IFX_INLINE void IfxCan_Node_setRemoteTransmitRequest(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2204  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2205      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2206      txBufferElement->T0.B.RTR = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2207  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2208  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2209  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2210  IFX_INLINE void IfxCan_Node_setRxBufferDataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2211  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2212      node->RX.ESC.B.RBDS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2213  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2214  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2215  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2216  IFX_INLINE void IfxCan_Node_setRxBuffersStartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2217  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2218      node->RX.BC.B.RBSA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2219  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2220  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2221  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2222  IFX_INLINE void IfxCan_Node_setRxFifo0AcknowledgeIndex(Ifx_CAN_N *node, IfxCan_RxBufferId RxBufferNumber)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2223  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2224      node->RX.F0A.B.F0AI = RxBufferNumber;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2225  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2226  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2227  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2228  IFX_INLINE void IfxCan_Node_setRxFifo0DataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2229  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2230      node->RX.ESC.B.F0DS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2231  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2232  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2233  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2234  IFX_INLINE void IfxCan_Node_setRxFifo0OperatingMode(Ifx_CAN_N *node, IfxCan_RxFifoMode mode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2235  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2236      node->RX.F0C.B.F0OM = mode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2237  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2238  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2239  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2240  IFX_INLINE void IfxCan_Node_setRxFifo0Size(Ifx_CAN_N *node, uint8 size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2241  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2242      node->RX.F0C.B.F0S = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2243  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2244  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2245  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2246  IFX_INLINE void IfxCan_Node_setRxFifo0StartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2247  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2248      node->RX.F0C.B.F0SA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2249  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2250  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2251  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2252  IFX_INLINE void IfxCan_Node_setRxFifo0WatermarkLevel(Ifx_CAN_N *node, uint8 level)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2253  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2254      node->RX.F0C.B.F0WM = level;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2255  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2256  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2257  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2258  IFX_INLINE void IfxCan_Node_setRxFifo1AcknowledgeIndex(Ifx_CAN_N *node, IfxCan_RxBufferId RxBufferNumber)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2259  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2260      node->RX.F1A.B.F1AI = RxBufferNumber;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2261  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2262  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2263  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2264  IFX_INLINE void IfxCan_Node_setRxFifo1DataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2265  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2266      node->RX.ESC.B.F1DS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2267  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2268  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2269  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2270  IFX_INLINE void IfxCan_Node_setRxFifo1OperatingMode(Ifx_CAN_N *node, IfxCan_RxFifoMode mode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2271  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2272      node->RX.F1C.B.F1OM = mode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2273  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2274  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2275  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2276  IFX_INLINE void IfxCan_Node_setRxFifo1Size(Ifx_CAN_N *node, uint8 size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2277  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2278      node->RX.F1C.B.F1S = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2279  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2280  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2281  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2282  IFX_INLINE void IfxCan_Node_setRxFifo1StartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2283  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2284      node->RX.F1C.B.F1SA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2285  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2286  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2287  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2288  IFX_INLINE void IfxCan_Node_setRxFifo1WatermarkLevel(Ifx_CAN_N *node, uint8 level)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2289  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2290      node->RX.F1C.B.F1WM = level;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2291  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2292  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2293  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2294  IFX_INLINE void IfxCan_Node_setStandardFilterConfiguration(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_FilterElementConfiguration filterElementConfiguration)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2295  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2296      standardFilterElement->S0.B.SFEC = filterElementConfiguration;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2297  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2298  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2299  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2300  IFX_INLINE void IfxCan_Node_setStandardFilterId1(Ifx_CAN_STDMSG *standardFilterElement, uint32 id)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2301  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2302      standardFilterElement->S0.B.SFID1 = id;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2303  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2304  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2305  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2306  IFX_INLINE void IfxCan_Node_setStandardFilterId2(Ifx_CAN_STDMSG *standardFilterElement, uint32 id)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2307  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2308      standardFilterElement->S0.B.SFID2 = id;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2309  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2310  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2311  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2312  IFX_INLINE void IfxCan_Node_setStandardFilterListSize(Ifx_CAN_N *node, uint8 size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2313  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2314      node->SIDFC.B.LSS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2315  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2316  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2317  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2318  IFX_INLINE void IfxCan_Node_setStandardFilterListStartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2319  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2320      node->SIDFC.B.FLSSA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2321  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2322  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2323  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2324  IFX_INLINE void IfxCan_Node_setStandardFilterRxBufferOffset(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_RxBufferId rxBufferNumber)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2325  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2326      standardFilterElement->S0.B.SFID2 = (uint8)rxBufferNumber;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2327  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2328  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2329  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2330  IFX_INLINE void IfxCan_Node_setStandardFilterType(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_FilterType filterType)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2331  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2332      standardFilterElement->S0.B.SFT = filterType;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2333  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2334  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2335  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2336  IFX_INLINE void IfxCan_Node_setTransceiverDelayCompensationOffset(Ifx_CAN_N *node, uint8 delay)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2337  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2338      /* enable Transceiver Delay Compensation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2339      node->DBTP.B.TDC  = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2340      /* set Transceiver Delay Compensation offset */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2341      node->TDCR.B.TDCO = delay;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2342  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2343  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2344  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2345  IFX_INLINE void IfxCan_Node_setTransmitFifoQueueMode(Ifx_CAN_N *node, IfxCan_TxMode mode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2346  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2347      if ((mode == IfxCan_TxMode_fifo) || (mode == IfxCan_TxMode_queue))
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2348      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2349          node->TX.BC.B.TFQM = mode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2350      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2351      else
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2352      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2353          IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE); /* wrong selection  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2354      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2355  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2356  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2357  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2358  IFX_INLINE void IfxCan_Node_setTransmitFifoQueueSize(Ifx_CAN_N *node, uint8 number)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2359  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2360      node->TX.BC.B.TFQS = number;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2361  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2362  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2363  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2364  IFX_INLINE void IfxCan_Node_setTxBufferAddRequest(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2365  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2366      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2367      node->TX.BAR.U = node->TX.BAR.U | (mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2368  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2369  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2370  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2371  IFX_INLINE void IfxCan_Node_setTxBufferCancellationRequest(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2372  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2373      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2374      node->TX.BCR.U = node->TX.BCR.U | (mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2375  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2376  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2377  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2378  IFX_INLINE void IfxCan_Node_setTxBufferDataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2379  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2380      node->TX.ESC.B.TBDS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2381  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2382  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2383  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2384  IFX_INLINE void IfxCan_Node_setTxBuffersStartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2385  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2386      node->TX.BC.B.TBSA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2387  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2388  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2389  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2390  IFX_INLINE void IfxCan_Node_setTxEventFifoCtrl(Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2391  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2392      txBufferElement->T1.B.EFC = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2393  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2394  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2395  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2396  IFX_INLINE void IfxCan_Node_setTxEventFifoControl(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2397  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2398      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2399      txBufferElement->T1.B.EFC = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2400  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2401  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2402  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2403  IFX_INLINE void IfxCan_Node_setTxEventFifoSize(Ifx_CAN_N *node, uint8 size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2404  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2405      node->TX.EFC.B.EFS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2406  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2407  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2408  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2409  IFX_INLINE void IfxCan_Node_setTxEventFifoStartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2410  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2411      node->TX.EFC.B.EFSA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2412  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2413  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2414  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2415  IFX_INLINE void IfxCan_Node_setTxEventFifoWatermarkLevel(Ifx_CAN_N *node, uint8 level)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2416  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2417      node->TX.EFC.B.EFWM = level;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2418  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2419  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2420  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2421  IFX_INLINE Ifx_CAN_N *IfxCan_getNodePointer(Ifx_CAN *can, IfxCan_NodeId nodeId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2422  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2423      return &(can->N[nodeId]);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2424  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2425  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2426  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2427  IFX_INLINE boolean IfxCan_isModuleEnabled(Ifx_CAN *can)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2428  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2429      return can->CLC.B.DISS == 0;
	fcall	.cocofun_15
	lea	a15,[a3]-32768

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   913  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   914      /*Wait until module is enabled*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   915      while (IfxCan_isModuleEnabled(can) == FALSE)
.L148:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     2   * \file IfxCan.h
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     3   * \brief CAN  basic functionality
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     4   * \ingroup IfxLld_Can
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     5   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     8   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	     9   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    11   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    16   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    18   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    25   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    32   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    40   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    41   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    42   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    43   *
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    44   * \defgroup IfxLld_Can_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    45   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    46   * \defgroup IfxLld_Can_Std_Data_Structures Data Structures
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    47   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    48   * \defgroup IfxLld_Can_Std_Node_Functions Node Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    49   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    50   * \defgroup IfxLld_Can_Std_Tx_Element_Functions Tx Element Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    51   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    52   * \defgroup IfxLld_Can_Std_Rx_Element_Functions Rx Element Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    53   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    54   * \defgroup IfxLld_Can_Std_Filter_Functions Filter Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    55   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    56   * \defgroup IfxLld_Can_Std_Interrupt_Functions Interrupt Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    57   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    58   * \defgroup IfxLld_Can_Std_Module_Functions Module Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    59   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    60   * \defgroup IfxLld_Can_Std_Tx_Event_FIFO_Element_Functions Tx Event FIFO Element Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    61   * \ingroup IfxLld_Can_Std
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    62   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    63  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    64  #ifndef IFXCAN_H
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    65  #define IFXCAN_H 1
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    66  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    67  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    68  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    69  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    70  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    71  #include "_Impl/IfxCan_cfg.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    72  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    73  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    74  #include "_PinMap/IfxCan_PinMap.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    75  #include "Scu/Std/IfxScuCcu.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    76  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    77  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    78  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    79  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    80  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    81  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    82  /** \addtogroup IfxLld_Can_Std_Enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    83   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    84  /** \brief Status of warning limit for error counters in CAN node
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    85   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    86  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    87  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    88      IfxCan_CanNodeErrorWarningLimitStatus_notReached = 0,  /**< \brief Error counters are below the warning limit */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    89      IfxCan_CanNodeErrorWarningLimitStatus_reached    = 1   /**< \brief Error counter reached the warning limit */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    90  } IfxCan_CanNodeErrorWarningLimitStatus;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    91  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    92  /** \brief Clock selection option\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    93   * Description in Ifx_CAN.MCR.CLKSELx, (x = 0,1,2)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    94   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    95  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    96  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    97      IfxCan_ClockSelect_0,     /**< \brief clock selection 0  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    98      IfxCan_ClockSelect_1,     /**< \brief clock selection 1  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	    99      IfxCan_ClockSelect_2,     /**< \brief clock selection 2  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   100      IfxCan_ClockSelect_3      /**< \brief clock selection 3  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   101  } IfxCan_ClockSelect;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   102  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   103  /** \brief Type of Clock Source selection\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   104   * Description in Ifx_CAN.MCR.CLKSELx, (x = 0,1,2)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   105   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   106  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   107  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   108      IfxCan_ClockSource_noClock      = 0,  /**< \brief No clock is switched on */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   109      IfxCan_ClockSource_asynchronous = 1,  /**< \brief The Asynchronous clock source is switched on */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   110      IfxCan_ClockSource_synchronous  = 2,  /**< \brief The Synchronous clock source is switched on */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   111      IfxCan_ClockSource_both         = 3   /**< \brief Both clock sources are switched on */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   112  } IfxCan_ClockSource;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   113  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   114  /** \brief Data Field Size\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   115   * Definition in Ifx_CAN.N[x]TX.ESC.B.TBDS, Ifx_CAN.N[x].RX.ESC.B.RBDS, Ifx_CAN.N[x].RX.ESC.B.FyDS (x= 0,1,2,3; y = 0, 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   116   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   117  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   118  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   119      IfxCan_DataFieldSize_8,      /**< \brief 8 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   120      IfxCan_DataFieldSize_12,     /**< \brief 12 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   121      IfxCan_DataFieldSize_16,     /**< \brief 16 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   122      IfxCan_DataFieldSize_20,     /**< \brief 20 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   123      IfxCan_DataFieldSize_24,     /**< \brief 24 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   124      IfxCan_DataFieldSize_32,     /**< \brief 32 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   125      IfxCan_DataFieldSize_48,     /**< \brief 48 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   126      IfxCan_DataFieldSize_64      /**< \brief 64 byte data field  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   127  } IfxCan_DataFieldSize;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   128  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   129  /** \brief Data Length code of the Message
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   130   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   131  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   132  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   133      IfxCan_DataLengthCode_0,      /**< \brief 0 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   134      IfxCan_DataLengthCode_1,      /**< \brief 1 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   135      IfxCan_DataLengthCode_2,      /**< \brief 2 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   136      IfxCan_DataLengthCode_3,      /**< \brief 3 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   137      IfxCan_DataLengthCode_4,      /**< \brief 4 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   138      IfxCan_DataLengthCode_5,      /**< \brief 5 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   139      IfxCan_DataLengthCode_6,      /**< \brief 6 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   140      IfxCan_DataLengthCode_7,      /**< \brief 7 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   141      IfxCan_DataLengthCode_8,      /**< \brief 8 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   142      IfxCan_DataLengthCode_12,     /**< \brief 12 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   143      IfxCan_DataLengthCode_16,     /**< \brief 16 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   144      IfxCan_DataLengthCode_20,     /**< \brief 20 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   145      IfxCan_DataLengthCode_24,     /**< \brief 24 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   146      IfxCan_DataLengthCode_32,     /**< \brief 32 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   147      IfxCan_DataLengthCode_48,     /**< \brief 48 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   148      IfxCan_DataLengthCode_64      /**< \brief 64 data bytes  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   149  } IfxCan_DataLengthCode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   150  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   151  /** \brief Filter Element Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   152   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   153  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   154  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   155      IfxCan_FilterElementConfiguration_disable,                     /**< \brief Disable filter element */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   156      IfxCan_FilterElementConfiguration_storeInRxFifo0,              /**< \brief Store in Rx FIFO 0 if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   157      IfxCan_FilterElementConfiguration_storeInRxFifo1,              /**< \brief Store in Rx FIFO 1 if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   158      IfxCan_FilterElementConfiguration_rejectId,                    /**< \brief Reject ID if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   159      IfxCan_FilterElementConfiguration_setPriority,                 /**< \brief Set priority if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   160      IfxCan_FilterElementConfiguration_setPriorityAndStoreInFifo0,  /**< \brief Set priority and store in FIFO 0 if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   161      IfxCan_FilterElementConfiguration_setPriorityAndStoreInFifo1,  /**< \brief Set priority and store in FIFO 1 if filter matches */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   162      IfxCan_FilterElementConfiguration_storeInRxBuffer              /**< \brief Store into Rx Buffer */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   163  } IfxCan_FilterElementConfiguration;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   164  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   165  /** \brief Filter Type
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   166   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   167  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   168  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   169      IfxCan_FilterType_range,    /**< \brief Range filter from SF1ID to SF2ID (SF2ID is greater than SF1ID) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   170      IfxCan_FilterType_dualId,   /**< \brief Dual ID filter for SF1ID or SF2ID */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   171      IfxCan_FilterType_classic,  /**< \brief Classic filter: SF1ID = filter, SF2ID = mask */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   172      IfxCan_FilterType_none      /**< \brief Reserved */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   173  } IfxCan_FilterType;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   174  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   175  /** \brief CAN Frame mode\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   176   * Description in Ifx_CAN.N[x].CCCR.CME, (x= 0 to 3)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   177   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   178  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   179  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   180      IfxCan_FrameMode_standard,      /**< \brief Standard CAN frame (transmit and receive) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   181      IfxCan_FrameMode_fdLong,        /**< \brief CAN FD long frame in transmit and CAN FD long and fast frame in receive */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   182      IfxCan_FrameMode_fdLongAndFast  /**< \brief CAN FD long and fast frames (transmit and receive) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   183  } IfxCan_FrameMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   184  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   185  /** \brief CAN frame type
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   186   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   187  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   188  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   189      IfxCan_FrameType_receive,             /**< \brief Data frame is received */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   190      IfxCan_FrameType_transmit,            /**< \brief Data frame is generated */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   191      IfxCan_FrameType_transmitAndReceive,  /**< \brief for both transmit and receive frames */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   192      IfxCan_FrameType_remoteRequest,       /**< \brief Remote request frame is generated */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   193      IfxCan_FrameType_remoteAnswer         /**< \brief Answer frame is generated on reception of the corresponding remote request */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   194  } IfxCan_FrameType;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   195  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   196  /** \brief Type of interrupt\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   197   * Definition in Ifx_CAN.N[x].IE, Ifx_CAN.N[x].IR, Ifx_CAN.N[x].ILS, (x= 0 to 3)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   198   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   199  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   200  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   201      IfxCan_Interrupt_rxFifo0NewMessage,                 /**< \brief Rx FIFO 0 New Message Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   202      IfxCan_Interrupt_rxFifo0WatermarkReached,           /**< \brief Rx FIFO 0 Watermark Reached Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   203      IfxCan_Interrupt_rxFifo0Full,                       /**< \brief Rx FIFO 0 Full Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   204      IfxCan_Interrupt_rxFifo0MessageLost,                /**< \brief Rx FIFO 0 Message Lost Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   205      IfxCan_Interrupt_rxFifo1NewMessage,                 /**< \brief Rx FIFO 1 New Message Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   206      IfxCan_Interrupt_rxFifo1WatermarkReached,           /**< \brief Rx FIFO 1 Watermark Reached Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   207      IfxCan_Interrupt_rxFifo1Full,                       /**< \brief Rx FIFO 1 Full Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   208      IfxCan_Interrupt_rxFifo1MessageLost,                /**< \brief Rx FIFO 1 Message Lost Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   209      IfxCan_Interrupt_highPriorityMessage,               /**< \brief High Priority Message Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   210      IfxCan_Interrupt_transmissionCompleted,             /**< \brief Transmission Completed Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   211      IfxCan_Interrupt_transmissionCancellationFinished,  /**< \brief Transmission Cancellation Finished Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   212      IfxCan_Interrupt_txFifoEmpty,                       /**< \brief Tx FIFO Empty Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   213      IfxCan_Interrupt_txEventFifoNewEntry,               /**< \brief Tx Event FIFO New Entry Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   214      IfxCan_Interrupt_txEventFifoWatermarkReached,       /**< \brief Tx Event FIFO Watermark Reached Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   215      IfxCan_Interrupt_txEventFifoFull,                   /**< \brief Tx Event FIFO Full Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   216      IfxCan_Interrupt_txEventFifoEventLost,              /**< \brief Tx Event FIFO Event Lost Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   217      IfxCan_Interrupt_timestampWraparound,               /**< \brief Timestamp Wraparound Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   218      IfxCan_Interrupt_messageRAMAccessFailure,           /**< \brief Message RAM Access Failure Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   219      IfxCan_Interrupt_timeoutOccurred,                   /**< \brief Timeout Occurred Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   220      IfxCan_Interrupt_messageStoredToDedicatedRxBuffer,  /**< \brief Message stored to Dedicated Rx Buffer Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   221      IfxCan_Interrupt_bitErrorCorrected,                 /**< \brief Bit Error Corrected Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   222      IfxCan_Interrupt_bitErrorUncorrected,               /**< \brief Bit Error Uncorrected Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   223      IfxCan_Interrupt_errorLoggingOverflow,              /**< \brief Error Logging Overflow Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   224      IfxCan_Interrupt_errorPassive,                      /**< \brief Error Passive Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   225      IfxCan_Interrupt_warningStatus,                     /**< \brief Warning Status Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   226      IfxCan_Interrupt_busOffStatus,                      /**< \brief Bus_Off Status Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   227      IfxCan_Interrupt_watchdog,                          /**< \brief Watchdog Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   228      IfxCan_Interrupt_protocolErrorArbitration,          /**< \brief Protocol Error in Arbitration phase Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   229      IfxCan_Interrupt_protocolErrorData,                 /**< \brief Protocol Error in Data phase Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   230      IfxCan_Interrupt_AccessToReservedAddress            /**< \brief Access to Reserved Address Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   231  } IfxCan_Interrupt;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   232  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   233  /** \brief Type of interrupt\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   234   * Definition in Ifx_CAN.GRINT[x] (x= 0 , 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   235   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   236  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   237  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   238      IfxCan_InterruptGroup_tefifo,  /**< \brief Transmit Event FIFO Incidents */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   239      IfxCan_InterruptGroup_hpe,     /**< \brief High Priority Events */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   240      IfxCan_InterruptGroup_wati,    /**< \brief Watermark interrupts are mapped here. */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   241      IfxCan_InterruptGroup_alrt,    /**< \brief Alerts */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   242      IfxCan_InterruptGroup_moer,    /**< \brief Module errors */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   243      IfxCan_InterruptGroup_safe,    /**< \brief Safety counter overflow */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   244      IfxCan_InterruptGroup_boff,    /**< \brief Bus Off */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   245      IfxCan_InterruptGroup_loi,     /**< \brief Last Error Interrupts */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   246      IfxCan_InterruptGroup_reint,   /**< \brief Message stored in dedicated receive buffer interrupt (IR.DRX) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   247      IfxCan_InterruptGroup_rxf1f,   /**< \brief Receive FIFO1 full interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   248      IfxCan_InterruptGroup_rxf0f,   /**< \brief Receive FIFO0 full interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   249      IfxCan_InterruptGroup_rxf1n,   /**< \brief Receive FIFO1 new message Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   250      IfxCan_InterruptGroup_rxf0n,   /**< \brief Receive FIFO0 new message Interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   251      IfxCan_InterruptGroup_reti,    /**< \brief Receive timeouts */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   252      IfxCan_InterruptGroup_traq,    /**< \brief Transmission Queue Events */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   253      IfxCan_InterruptGroup_traco    /**< \brief Interrupts of the transmission control */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   254  } IfxCan_InterruptGroup;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   255  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   256  /** \brief Interrupt line number INT_Ox (x= 0 - 15) \n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   257   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   258  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   259  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   260      IfxCan_InterruptLine_0,     /**< \brief Interrupt Line 0  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   261      IfxCan_InterruptLine_1,     /**< \brief Interrupt Line 1  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   262      IfxCan_InterruptLine_2,     /**< \brief Interrupt Line 2  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   263      IfxCan_InterruptLine_3,     /**< \brief Interrupt Line 3  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   264      IfxCan_InterruptLine_4,     /**< \brief Interrupt Line 4  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   265      IfxCan_InterruptLine_5,     /**< \brief Interrupt Line 5  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   266      IfxCan_InterruptLine_6,     /**< \brief Interrupt Line 6  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   267      IfxCan_InterruptLine_7,     /**< \brief Interrupt Line 7  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   268      IfxCan_InterruptLine_8,     /**< \brief Interrupt Line 8  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   269      IfxCan_InterruptLine_9,     /**< \brief Interrupt Line 9  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   270      IfxCan_InterruptLine_10,    /**< \brief Interrupt Line 10  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   271      IfxCan_InterruptLine_11,    /**< \brief Interrupt Line 11  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   272      IfxCan_InterruptLine_12,    /**< \brief Interrupt Line 12  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   273      IfxCan_InterruptLine_13,    /**< \brief Interrupt Line 13  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   274      IfxCan_InterruptLine_14,    /**< \brief Interrupt Line 14  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   275      IfxCan_InterruptLine_15     /**< \brief Interrupt Line 15  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   276  } IfxCan_InterruptLine;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   277  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   278  /** \brief Type of last error to occur on the CAN node
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   279   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   280  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   281  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   282      IfxCan_LastErrorCodeType_noError       = 0, /**< \brief No Error occured in the recent CAN message transmission or reception. */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   283      IfxCan_LastErrorCodeType_stuffError    = 1, /**< \brief More than 5 consecutive equal bits recieved in CAN message */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   284      IfxCan_LastErrorCodeType_formError     = 2, /**< \brief Fixed format part of recieved frame has wrong format */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   285      IfxCan_LastErrorCodeType_ackError      = 3, /**< \brief No ACK recieved from another node for transmitted CAN message */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   286      IfxCan_LastErrorCodeType_bit1Error     = 4, /**< \brief Transmitted recessive and read back dominant on the CAN bus. */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   287      IfxCan_LastErrorCodeType_bit0Error     = 5, /**< \brief Transmitted dominant and read back recessive on the CAN bus. */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   288      IfxCan_LastErrorCodeType_crcError      = 6, /**< \brief CRC Error */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   289      IfxCan_LastErrorCodeType_noCANBusEvent = 7  /**< \brief No CAN bus event occured */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   290  } IfxCan_LastErrorCodeType;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   291  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   292  /** \brief Message Id length (Standard / Extended)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   293   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   294  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   295  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   296      IfxCan_MessageIdLength_standard,  /**< \brief Standard Message ID */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   297      IfxCan_MessageIdLength_extended,  /**< \brief Extended Message ID */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   298      IfxCan_MessageIdLength_both       /**< \brief Both Standard and Extended message IDs */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   299  } IfxCan_MessageIdLength;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   300  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   301  /** \brief Indicate the action to be taken with the messages which do not match with any element of the filter.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   302   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   303  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   304  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   305      IfxCan_NonMatchingFrame_acceptToRxFifo0 = 0,  /**< \brief Accept the non matching messages into Rx FIFO 0 */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   306      IfxCan_NonMatchingFrame_acceptToRxFifo1 = 1,  /**< \brief Accepts the non matching messages into Rx FIFO 1 */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   307      IfxCan_NonMatchingFrame_reject          = 2   /**< \brief Reject the non-matching messages */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   308  } IfxCan_NonMatchingFrame;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   309  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   310  /** \brief Rx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   311   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   312  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   313  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   314      IfxCan_RxBufferId_0,     /**< \brief Rx buffer 0  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   315      IfxCan_RxBufferId_1,     /**< \brief Rx buffer 1  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   316      IfxCan_RxBufferId_2,     /**< \brief Rx buffer 2  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   317      IfxCan_RxBufferId_3,     /**< \brief Rx buffer 3  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   318      IfxCan_RxBufferId_4,     /**< \brief Rx buffer 4  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   319      IfxCan_RxBufferId_5,     /**< \brief Rx buffer 5  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   320      IfxCan_RxBufferId_6,     /**< \brief Rx buffer 6  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   321      IfxCan_RxBufferId_7,     /**< \brief Rx buffer 7  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   322      IfxCan_RxBufferId_8,     /**< \brief Rx buffer 8  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   323      IfxCan_RxBufferId_9,     /**< \brief Rx buffer 9  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   324      IfxCan_RxBufferId_10,    /**< \brief Rx buffer 10  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   325      IfxCan_RxBufferId_11,    /**< \brief Rx buffer 11  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   326      IfxCan_RxBufferId_12,    /**< \brief Rx buffer 12  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   327      IfxCan_RxBufferId_13,    /**< \brief Rx buffer 13  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   328      IfxCan_RxBufferId_14,    /**< \brief Rx buffer 14  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   329      IfxCan_RxBufferId_15,    /**< \brief Rx buffer 15  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   330      IfxCan_RxBufferId_16,    /**< \brief Rx buffer 16  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   331      IfxCan_RxBufferId_17,    /**< \brief Rx buffer 17  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   332      IfxCan_RxBufferId_18,    /**< \brief Rx buffer 18  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   333      IfxCan_RxBufferId_19,    /**< \brief Rx buffer 19  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   334      IfxCan_RxBufferId_20,    /**< \brief Rx buffer 20  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   335      IfxCan_RxBufferId_21,    /**< \brief Rx buffer 21  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   336      IfxCan_RxBufferId_22,    /**< \brief Rx buffer 22  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   337      IfxCan_RxBufferId_23,    /**< \brief Rx buffer 23  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   338      IfxCan_RxBufferId_24,    /**< \brief Rx buffer 24  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   339      IfxCan_RxBufferId_25,    /**< \brief Rx buffer 25  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   340      IfxCan_RxBufferId_26,    /**< \brief Rx buffer 26  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   341      IfxCan_RxBufferId_27,    /**< \brief Rx buffer 27  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   342      IfxCan_RxBufferId_28,    /**< \brief Rx buffer 28  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   343      IfxCan_RxBufferId_29,    /**< \brief Rx buffer 29  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   344      IfxCan_RxBufferId_30,    /**< \brief Rx buffer 30  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   345      IfxCan_RxBufferId_31,    /**< \brief Rx buffer 31  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   346      IfxCan_RxBufferId_32,    /**< \brief Rx buffer 32  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   347      IfxCan_RxBufferId_33,    /**< \brief Rx buffer 33  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   348      IfxCan_RxBufferId_34,    /**< \brief Rx buffer 34  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   349      IfxCan_RxBufferId_35,    /**< \brief Rx buffer 35  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   350      IfxCan_RxBufferId_36,    /**< \brief Rx buffer 36  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   351      IfxCan_RxBufferId_37,    /**< \brief Rx buffer 37  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   352      IfxCan_RxBufferId_38,    /**< \brief Rx buffer 38  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   353      IfxCan_RxBufferId_39,    /**< \brief Rx buffer 39  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   354      IfxCan_RxBufferId_40,    /**< \brief Rx buffer 40  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   355      IfxCan_RxBufferId_41,    /**< \brief Rx buffer 41  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   356      IfxCan_RxBufferId_42,    /**< \brief Rx buffer 42  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   357      IfxCan_RxBufferId_43,    /**< \brief Rx buffer 43  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   358      IfxCan_RxBufferId_44,    /**< \brief Rx buffer 44  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   359      IfxCan_RxBufferId_45,    /**< \brief Rx buffer 45  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   360      IfxCan_RxBufferId_46,    /**< \brief Rx buffer 46  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   361      IfxCan_RxBufferId_47,    /**< \brief Rx buffer 47  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   362      IfxCan_RxBufferId_48,    /**< \brief Rx buffer 48  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   363      IfxCan_RxBufferId_49,    /**< \brief Rx buffer 49  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   364      IfxCan_RxBufferId_50,    /**< \brief Rx buffer 50  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   365      IfxCan_RxBufferId_51,    /**< \brief Rx buffer 51  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   366      IfxCan_RxBufferId_52,    /**< \brief Rx buffer 52  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   367      IfxCan_RxBufferId_53,    /**< \brief Rx buffer 53  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   368      IfxCan_RxBufferId_54,    /**< \brief Rx buffer 54  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   369      IfxCan_RxBufferId_55,    /**< \brief Rx buffer 55  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   370      IfxCan_RxBufferId_56,    /**< \brief Rx buffer 56  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   371      IfxCan_RxBufferId_57,    /**< \brief Rx buffer 57  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   372      IfxCan_RxBufferId_58,    /**< \brief Rx buffer 58  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   373      IfxCan_RxBufferId_59,    /**< \brief Rx buffer 59  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   374      IfxCan_RxBufferId_60,    /**< \brief Rx buffer 60  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   375      IfxCan_RxBufferId_61,    /**< \brief Rx buffer 61  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   376      IfxCan_RxBufferId_62,    /**< \brief Rx buffer 62  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   377      IfxCan_RxBufferId_63     /**< \brief Rx buffer 63  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   378  } IfxCan_RxBufferId;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   379  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   380  /** \brief Rx FIFO 0/1 operating mode\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   381   * Description in Ifx_CAN.N[x].RXFyC.FyOM, (x= 0 to 3; y = 0, 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   382   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   383  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   384  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   385      IfxCan_RxFifoMode_blocking,  /**< \brief Blocking mode */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   386      IfxCan_RxFifoMode_overwrite  /**< \brief Overwrite mode */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   387  } IfxCan_RxFifoMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   388  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   389  /** \brief Rx Buffers or FIFO 0 or combination Mode of reception
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   390   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   391  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   392  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   393      IfxCan_RxMode_dedicatedBuffers,  /**< \brief Rx dedicated buffers operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   394      IfxCan_RxMode_fifo0,             /**< \brief Rx FIFO 0 operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   395      IfxCan_RxMode_fifo1,             /**< \brief Rx FIFO 1 operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   396      IfxCan_RxMode_sharedFifo0,       /**< \brief Rx shared dedicated buffers and Rx FIFO 0 operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   397      IfxCan_RxMode_sharedFifo1,       /**< \brief Rx shared dedicated buffers and Rx FIFO 1 operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   398      IfxCan_RxMode_sharedAll          /**< \brief Rx shared dedicated buffers and Rx FIFO 0 and Rx FIFO 1 operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   399  } IfxCan_RxMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   400  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   401  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   402   * Definition in Ifx_CAN.CLC.B.EDIS
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   403   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   404  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   405  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   406      IfxCan_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   407      IfxCan_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   408  } IfxCan_SleepMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   409  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   410  /** \brief CAN API status definition
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   411   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   412  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   413  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   414      IfxCan_Status_ok                = 0x00000000,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   415      IfxCan_Status_notInitialised    = 0x00000001,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   416      IfxCan_Status_busOff            = 0x00000010,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   417      IfxCan_Status_notSentBusy       = 0x00000020,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   418      IfxCan_Status_receiveEmpty      = 0x00000040,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   419      IfxCan_Status_messageLost       = 0x00000080,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   420      IfxCan_Status_newData           = 0x00000100,
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   421      IfxCan_Status_newDataButOneLost = 0x00000180
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   422  } IfxCan_Status;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   423  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   424  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   425   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   426  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   427  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   428      IfxCan_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   429      IfxCan_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   430      IfxCan_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   431  } IfxCan_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   432  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   433  /** \brief Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   434   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   435  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   436  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   437      IfxCan_TxBufferId_0,     /**< \brief Tx buffer 0  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   438      IfxCan_TxBufferId_1,     /**< \brief Tx buffer 1  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   439      IfxCan_TxBufferId_2,     /**< \brief Tx buffer 2  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   440      IfxCan_TxBufferId_3,     /**< \brief Tx buffer 3  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   441      IfxCan_TxBufferId_4,     /**< \brief Tx buffer 4  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   442      IfxCan_TxBufferId_5,     /**< \brief Tx buffer 5  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   443      IfxCan_TxBufferId_6,     /**< \brief Tx buffer 6  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   444      IfxCan_TxBufferId_7,     /**< \brief Tx buffer 7  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   445      IfxCan_TxBufferId_8,     /**< \brief Tx buffer 8  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   446      IfxCan_TxBufferId_9,     /**< \brief Tx buffer 9  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   447      IfxCan_TxBufferId_10,    /**< \brief Tx buffer 10  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   448      IfxCan_TxBufferId_11,    /**< \brief Tx buffer 11  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   449      IfxCan_TxBufferId_12,    /**< \brief Tx buffer 12  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   450      IfxCan_TxBufferId_13,    /**< \brief Tx buffer 13  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   451      IfxCan_TxBufferId_14,    /**< \brief Tx buffer 14  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   452      IfxCan_TxBufferId_15,    /**< \brief Tx buffer 15  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   453      IfxCan_TxBufferId_16,    /**< \brief Tx buffer 16  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   454      IfxCan_TxBufferId_17,    /**< \brief Tx buffer 17  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   455      IfxCan_TxBufferId_18,    /**< \brief Tx buffer 18  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   456      IfxCan_TxBufferId_19,    /**< \brief Tx buffer 19  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   457      IfxCan_TxBufferId_20,    /**< \brief Tx buffer 20  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   458      IfxCan_TxBufferId_21,    /**< \brief Tx buffer 21  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   459      IfxCan_TxBufferId_22,    /**< \brief Tx buffer 22  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   460      IfxCan_TxBufferId_23,    /**< \brief Tx buffer 23  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   461      IfxCan_TxBufferId_24,    /**< \brief Tx buffer 24  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   462      IfxCan_TxBufferId_25,    /**< \brief Tx buffer 25  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   463      IfxCan_TxBufferId_26,    /**< \brief Tx buffer 26  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   464      IfxCan_TxBufferId_27,    /**< \brief Tx buffer 27  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   465      IfxCan_TxBufferId_28,    /**< \brief Tx buffer 28  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   466      IfxCan_TxBufferId_29,    /**< \brief Tx buffer 29  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   467      IfxCan_TxBufferId_30,    /**< \brief Tx buffer 30  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   468      IfxCan_TxBufferId_31     /**< \brief Tx buffer 31  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   469  } IfxCan_TxBufferId;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   470  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   471  /** \brief Tx FIFO/Queue Mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   472   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   473  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   474  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   475      IfxCan_TxMode_fifo,              /**< \brief Tx FIFO operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   476      IfxCan_TxMode_queue,             /**< \brief Tx Queue operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   477      IfxCan_TxMode_dedicatedBuffers,  /**< \brief Tx dedicated buffers operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   478      IfxCan_TxMode_sharedFifo,        /**< \brief Tx shared dedicated buffers and Tx FIFO operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   479      IfxCan_TxMode_sharedQueue        /**< \brief Tx shared dedicated buffers and Tx Queue operation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   480  } IfxCan_TxMode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   481  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   482  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   483  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   484  /** \brief CAN node Bus Off status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   485   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   486  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   487  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   488      IfxCan_CanNodeBusOffErrorStatus_NoErr     = 0, /**< \brief CAN node not in Bus Off state */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   489      IfxCan_CanNodeBusOffErrorStatus_BusOffErr = 1  /**< \brief CAN node in Bus Off state */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   490  } IfxCan_CanNodeBusOffErrorStatus;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   491  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   492  /** \brief CAN node communication state
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   493   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   494  typedef enum
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   495  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   496      IfxCan_CanNodeCommunicationState_synchronize = 0,  /**< \brief CAN node is synchronizing on CAN communication */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   497      IfxCan_CanNodeCommunicationState_idle        = 1,  /**< \brief Node is neither receiving nor transmitting */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   498      IfxCan_CanNodeCommunicationState_receive     = 2,  /**< \brief Node is operating as receiver */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   499      IfxCan_CanNodeCommunicationState_transmit    = 3   /**< \brief Node is operating as transmitter */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   500  } IfxCan_CanNodeCommunicationState;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   501  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   502  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   503  /*-----------------------------Data Structures--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   504  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   505  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   506  /** \addtogroup IfxLld_Can_Std_Data_Structures
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   507   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   508  /** \brief tructure for Filter configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   509   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   510  typedef struct
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   511  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   512      uint8                             number;                     /**< \brief Filter Number */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   513      IfxCan_FilterElementConfiguration elementConfiguration;       /**< \brief *FEC, Filter Element Configuration of (standard / extended ID) filter element */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   514      IfxCan_FilterType                 type;                       /**< \brief *FT, Filter Type of (standard / extended ID) filter element */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   515      uint32                            id1;                        /**< \brief *FID1 First ID of (standard / extended ID) filter element */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   516      uint32                            id2;                        /**< \brief *FID2 Second ID of (standard / extended ID) filter element */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   517      IfxCan_RxBufferId                 rxBufferOffset;             /**< \brief Rx Buffer number to set the offset to the Rx Buffer Start Address */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   518  } IfxCan_Filter;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   519  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   520  /** \brief Configuration for Interrupt groups
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   521   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   522  typedef struct
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   523  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   524      IfxCan_InterruptLine interruptLine;       /**< \brief Intterupt line to which this interruipt has to be connetced to */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   525      Ifx_Priority         priority;            /**< \brief Priority of the interrupt */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   526      IfxSrc_Tos           typeOfService;       /**< \brief Type of Service */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   527  } IfxCan_GroupInterruptConfig;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   528  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   529  /** \brief Structure for CAN Message configuration (transmit/receive)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   530   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   531  typedef struct
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   532  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   533      uint8                  bufferNumber;                /**< \brief (Tx / Rx) Buffer Element number */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   534      uint32                 messageId;                   /**< \brief ID, Identifier */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   535      boolean                remoteTransmitRequest;       /**< \brief RTR, Remote Transmit Request (enable / disable) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   536      IfxCan_MessageIdLength messageIdLength;             /**< \brief XTD, Message Id length (Standard / Extended) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   537      boolean                errorStateIndicator;         /**< \brief ESI, Error State Indicator (enable / disable) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   538      IfxCan_DataLengthCode  dataLengthCode;              /**< \brief DLC, Data Length Code */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   539      IfxCan_FrameMode       frameMode;                   /**< \brief CAN frame mode */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   540      boolean                txEventFifoControl;          /**< \brief EFC, Tx Event FIFO Control (enable / disable) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   541      boolean                storeInTxFifoQueue;          /**< \brief Write message in Tx FIFO/QUEUE */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   542      boolean                readFromRxFifo0;             /**< \brief Read message from Rx FIFO 0 */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   543      boolean                readFromRxFifo1;             /**< \brief Read message from Rx FIFO 1 */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   544  } IfxCan_Message;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   545  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   546  /** \brief Structure for Message RAM configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   547   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   548  typedef struct
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   549  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   550      uint32 baseAddress;                          /**< \brief Message RAM base address of the CAN */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   551      uint16 standardFilterListStartAddress;       /**< \brief Start address of Standard Message ID filter list (32-bit word address) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   552      uint16 extendedFilterListStartAddress;       /**< \brief Start address of Extended Message ID filter list (32-bit word address) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   553      uint16 rxFifo0StartAddress;                  /**< \brief Start address of Rx FIFO 0 in Message RAM (32-bit word address) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   554      uint16 rxFifo1StartAddress;                  /**< \brief Start address of Rx FIFO 1 in Message RAM (32-bit word address) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   555      uint16 rxBuffersStartAddress;                /**< \brief Start address of Rx Buffers section in the Message RAM (32-bit word address). */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   556      uint16 txEventFifoStartAddress;              /**< \brief Start address of Tx Event FIFO in Message RAM (32-bit w ord address) */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   557      uint16 txBuffersStartAddress;                /**< \brief Start address of Tx Buffers section in the Message RAM (32-bit word address). */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   558  } IfxCan_MessageRAM;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   559  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   560  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   561  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   562  /** \addtogroup IfxLld_Can_Std_Node_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   563   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   564  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   565  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   566  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   567  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   568  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   569  /** \brief Disables the configuration change\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   570   * The CPU has no write access to the protected configuration registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   571   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   572   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   573   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   574  IFX_INLINE void IfxCan_Node_disableConfigurationChange(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   575  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   576  /** \brief Enables the configuration change\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   577   * The CPU has write access to the protected configuration registers (while CCCR.INIT = 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   578   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   579   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   580   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   581  IFX_INLINE void IfxCan_Node_enableConfigurationChange(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   582  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   583  /** \brief Enables the internal Virtual CAN bus loopback mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   584   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   585   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   586   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   587  IFX_INLINE void IfxCan_Node_enableLoopbackMode(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   588  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   589  /** \brief Returns the status of whether the CAN Node is synchronised or not
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   590   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   591   * \return Status TRUE: synchronized, FALSE : Sync in progress
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   592   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   593  IFX_INLINE boolean IfxCan_Node_isNodeSynchronized(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   594  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   595  /** \brief Initialises the node\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   596   * 0= Normal Operation\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   597   * 1= Initialization is started
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   598   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   599   * \param enable Enable / Disable choice
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   600   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   601   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   602  IFX_INLINE void IfxCan_Node_setInitialisation(Ifx_CAN_N *node, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   603  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   604  /** \brief Sets Transceiver Delay Compensation offset
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   605   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   606   * \param delay delay offset value
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   607   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   608   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   609  IFX_INLINE void IfxCan_Node_setTransceiverDelayCompensationOffset(Ifx_CAN_N *node, uint8 delay);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   610  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   611  /** \brief Get the LEC error status of the CAN node.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   612   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   613   * \return LEC error status in CAN node PSR register
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   614   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   615  IFX_INLINE IfxCan_LastErrorCodeType IfxCan_Node_getLastErroCodeStatus(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   616  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   617  /** \brief Error Passive status of the CAN node.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   618   * TRUE: CAN node in error passive.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   619   * FALSE: CAN node not in error passive.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   620   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   621   * \return Error Passive error status of CAN node (TRUE/FALSE).
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   622   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   623  IFX_INLINE boolean IfxCan_Node_isErrorPassive(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   624  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   625  /** \brief Get the warning status of the CAN node.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   626   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   627   * \return Warning status in CAN node
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   628   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   629  IFX_INLINE IfxCan_CanNodeErrorWarningLimitStatus IfxCan_Node_getWarningStatus(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   630  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   631  /** \brief Get the Bus Off status of the CAN node.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   632   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   633   * \return Bus Off Error status in CAN node
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   634   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   635  IFX_INLINE IfxCan_CanNodeBusOffErrorStatus IfxCan_Node_getBusOffStatus(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   636  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   637  /** \brief Get the Activity status of the CAN node.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   638   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   639   * \return Activity status of CAN node
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   640   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   641  IFX_INLINE IfxCan_CanNodeCommunicationState IfxCan_Node_getActivityStatus(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   642  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   643  /** \brief Get the Error status in data phase of the CAN node in the recent CANFD operation with bit rate switch.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   644   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   645   * \return Error status of the recent CAN FD with BRS flag set.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   646   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   647  IFX_INLINE IfxCan_LastErrorCodeType IfxCan_Node_getDataPhaseLastErrorCode(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   648  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   649  /** \brief Protocol Exception Event status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   650   * TRUE: Protocol Exception event occured.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   651   * FALSE: Protocol Exception event not occured.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   652   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   653   * \return Get the Protocol Exception event status (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   654   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   655  IFX_INLINE boolean IfxCan_Node_isProtocolExceptionEventOccured(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   656  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   657  /** \brief Returns the error status of the recent recieved CAN FD message.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   658   * TRUE : Error status indicator is enabled
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   659   * FALSE: Erro status indicator not enabled.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   660   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   661   * \return Error indicator for recent received CAN FD message (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   662   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   663  IFX_INLINE boolean IfxCan_Node_isErrorStatusIndicatorEnabled(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   664  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   665  /** \brief Bit Rate Switch status of the last recieved CAN FD message.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   666   * TRUE: Bit rate switch is enabled.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   667   * FALSE: Bit rate switch is disabled.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   668   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   669   * \return Bit Rate Switch flag status (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   670   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   671  IFX_INLINE boolean IfxCan_Node_isBitRateSwitchFlagEnabled(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   672  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   673  /** \brief Return the DLC code corresponding to the data length in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   674   * \param dataLength Data length in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   675   * \return Data length code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   676   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   677  IFX_INLINE IfxCan_DataLengthCode IfxCan_Node_getCodeFromDataLengthInBytes(uint32 dataLength);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   678  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   679  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   680  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   681  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   682  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   683  /** \brief Converts data length code (DLC) into number of words
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   684   * \param dataLengthCode DLC, Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   685   * \return Number of data words
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   686   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   687  IFX_EXTERN uint32 IfxCan_Node_getDataLength(IfxCan_DataLengthCode dataLengthCode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   688  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   689  /** \brief Converts data length code (DLC) into number of data words.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   690   * This function is deprecated. Use new function IfxCan_Node_getDataLength
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   691   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   692   * \param dataLengthCode DLC, Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   693   * \return Number of data words
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   694   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   695  IFX_EXTERN uint32 IfxCan_Node_getDataLengthFromCode(Ifx_CAN_N *node, IfxCan_DataLengthCode dataLengthCode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   696  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   697  /** \brief Returns CAN frame mode of operation for a received frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   698   * \param rxBufferElement Rx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   699   * \return CAN frame mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   700   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   701  IFX_EXTERN IfxCan_FrameMode IfxCan_Node_getFrameMode(Ifx_CAN_RXMSG *rxBufferElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   702  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   703  /** \brief Select and initialise the CAN node receive pin
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   704   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   705   * \param rxd Rx pin
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   706   * \param mode Input mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   707   * \param padDriver Pad Driver Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   708   * \return TRUE: Returns TRUE if the operation was successful\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   709   * FALSE: Returns FALSE if the operation was errorneous
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   710   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   711  IFX_EXTERN boolean IfxCan_Node_initRxPin(Ifx_CAN_N *node, IfxCan_Rxd_In *rxd, IfxPort_InputMode mode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   712  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   713  /** \brief Select and initialise the CAN node transmit pin
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   714   * \param txd Tx pin
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   715   * \param mode Output mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   716   * \param padDriver Pad driver Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   717   * \return TRUE: Returns TRUE if the operation was successful\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   718   * FALSE: Returns FALSE if the operation was errorneous
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   719   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   720  IFX_EXTERN boolean IfxCan_Node_initTxPin(IfxCan_Txd_Out *txd, IfxPort_OutputMode mode, IfxPort_PadDriver padDriver);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   721  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   722  /** \brief Calculates and Sets the CAN baudrate for standard frames and arbitration phase of CAND FD frames
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   723   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   724   * \param moduleFreq Specifies the CAN module frequency
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   725   * \param baudrate Specifies the baud rate. Unit: baud
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   726   * \param samplePoint Specifies the sample point. Range = [0, 10000] resp. [0%, 100%] of the total bit time.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   727   * \param syncJumpWidth Specifies the re-synchronization jump width
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   728   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   729   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   730  IFX_EXTERN void IfxCan_Node_setBitTiming(Ifx_CAN_N *node, float32 moduleFreq, uint32 baudrate, uint16 samplePoint, uint16 syncJumpWidth);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   731  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   732  /** \brief Sets the values of CAN baudrate for standard frames
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   733   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   734   * \param syncJumpWidth Synchronization Jump Width
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   735   * \param timeSegment2 Time segment after sample point
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   736   * \param timeSegment1 Time segment before sample point
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   737   * \param prescaler Baud Rate Prescaler
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   738   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   739   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   740  IFX_EXTERN void IfxCan_Node_setBitTimingValues(Ifx_CAN_N *node, uint16 syncJumpWidth, uint8 timeSegment2, uint8 timeSegment1, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   741  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   742  /** \brief Calulates and Sets the CAN fast baudrate for CAN FD frames data phase
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   743   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   744   * \param moduleFreq Specifies the CAN module frequency
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   745   * \param baudrate Specifies the baud rate. Unit: baud
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   746   * \param samplePoint Specifies the sample point. Range = [0, 10000] resp. [0%, 100%] of the total bit time.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   747   * \param syncJumpWidth Specifies the re-synchronization jump width
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   748   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   749   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   750  IFX_EXTERN void IfxCan_Node_setFastBitTiming(Ifx_CAN_N *node, float32 moduleFreq, uint32 baudrate, uint16 samplePoint, uint16 syncJumpWidth);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   751  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   752  /** \brief Sets the values of CAN fast baudrate for CAN FD frames data phase
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   753   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   754   * \param syncJumpWidth Synchronization Jump Width
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   755   * \param timeSegment2 Time segment after sample point
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   756   * \param timeSegment1 Time segment before sample point
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   757   * \param prescaler Baud Rate Prescaler
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   758   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   759   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   760  IFX_EXTERN void IfxCan_Node_setFastBitTimingValues(Ifx_CAN_N *node, uint16 syncJumpWidth, uint8 timeSegment2, uint8 timeSegment1, uint16 prescaler);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   761  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   762  /** \brief Enables the CAN frame mode for transmission
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   763   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   764   * \param frameMode CAN frame mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   765   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   766   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   767  IFX_EXTERN void IfxCan_Node_setFrameMode(Ifx_CAN_N *node, IfxCan_FrameMode frameMode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   768  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   769  /** \brief Sets CAN frame mode request for transmission
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   770   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   771   * \param frameMode CAN frame mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   772   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   773   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   774  IFX_EXTERN void IfxCan_Node_setFrameModeReq(Ifx_CAN_TXMSG *txBufferElement, IfxCan_FrameMode frameMode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   775  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   776  /** \brief Sets CAN frame mode request for transmission.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   777   * This function is deprecated. Use new function IfxCan_Node_setFrameModeReq
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   778   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   779   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   780   * \param frameMode CAN frame mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   781   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   782   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   783  IFX_EXTERN void IfxCan_Node_setFrameModeRequest(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, IfxCan_FrameMode frameMode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   784  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   785  /** \brief Converts data length code (DLC) into number of bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   786   * \param dataLengthCode Data length code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   787   * \return Data length in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   788   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   789  IFX_EXTERN uint32 IfxCan_Node_getDataLengthInBytes(IfxCan_DataLengthCode dataLengthCode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   790  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   791  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   792  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   793  /** \addtogroup IfxLld_Can_Std_Tx_Element_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   794   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   795  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   796  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   797  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   798  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   799  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   800  /** \brief Returns Tx FIFO/Queue Put Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   801   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   802   * \return Tx Buffer Element Number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   803   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   804  IFX_INLINE IfxCan_TxBufferId IfxCan_Node_getTxFifoQueuePutIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   805  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   806  /** \brief Returns the status of whether cancellation is finished on the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   807   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   808   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   809   * \return Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   810   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   811  IFX_INLINE boolean IfxCan_Node_isTxBufferCancellationFinished(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   812  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   813  /** \brief Returns the status of pending request of the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   814   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   815   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   816   * \return Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   817   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   818  IFX_INLINE boolean IfxCan_Node_isTxBufferRequestPending(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   819  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   820  /** \brief Returns the status of whether transmission occured on the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   821   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   822   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   823   * \return Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   824   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   825  IFX_INLINE boolean IfxCan_Node_isTxBufferTransmissionOccured(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   826  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   827  /** \brief Returns the status of Tx Fifo/Queue is full or not
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   828   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   829   * \return Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   830   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   831  IFX_INLINE boolean IfxCan_Node_isTxFifoQueueFull(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   832  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   833  /** \brief pauses the CAN Node for two CAN bit times before starting the next transmission
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   834   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   835   * \param enable Enable / Disable choice
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   836   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   837   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   838  IFX_INLINE void IfxCan_Node_pauseTransmission(Ifx_CAN_N *node, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   839  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   840  /** \brief Sets the Data Length Code (DLC) for transmit frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   841   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   842   * \param dataLengthCode DLC, data length code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   843   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   844   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   845  IFX_INLINE void IfxCan_Node_setDataLength(Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   846  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   847  /** \brief Sets the Data Length Code (DLC) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   848   * This function is deprecated. Use new function IfxCan_Node_setDataLength
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   849   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   850   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   851   * \param dataLengthCode DLC, data length code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   852   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   853   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   854  IFX_INLINE void IfxCan_Node_setDataLengthCode(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   855  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   856  /** \brief Sets the number of dedicated Tx Buffers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   857   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   858   * \param number Number of Tx Buffers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   859   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   860   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   861  IFX_INLINE void IfxCan_Node_setDedicatedTxBuffersNumber(Ifx_CAN_N *node, uint8 number);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   862  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   863  /** \brief Sets the Error State Indicator (ESI) for transmit frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   864   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   865   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   866   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   867   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   868  IFX_INLINE void IfxCan_Node_setErrStateIndicator(Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   869  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   870  /** \brief Sets the Error State Indicator (ESI) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   871   * This function is decprecated. Use new function IfxCan_Node_setErrStateIndicator
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   872   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   873   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   874   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   875   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   876   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   877  IFX_INLINE void IfxCan_Node_setErrorStateIndicator(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   878  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   879  /** \brief Sets the Message Marker (MM) for transmit frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   880   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   881   * \param bufferId MM, Message Marker , Buffer Id
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   882   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   883   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   884  IFX_INLINE void IfxCan_Node_setMessageMarker(Ifx_CAN_TXMSG *txBufferElement, IfxCan_TxBufferId bufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   885  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   886  /** \brief Sets the identifier (ID) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   887   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   888   * \param messageId Identifier
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   889   * \param messageIdLength Message Id length (Standard / Extended)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   890   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   891   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   892  IFX_INLINE void IfxCan_Node_setMsgId(Ifx_CAN_TXMSG *txBufferElement, uint32 messageId, IfxCan_MessageIdLength messageIdLength);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   893  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   894  /** \brief Sets the identifier (ID) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   895   * This function is deprecated. Use the new function IfxCan_Node_setMsgId
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   896   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   897   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   898   * \param messageId Identifier
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   899   * \param messageIdLength Message Id length (Standard / Extended)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   900   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   901   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   902  IFX_INLINE void IfxCan_Node_setMesssageId(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, uint32 messageId, IfxCan_MessageIdLength messageIdLength);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   903  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   904  /** \brief Sets the remote Transmit Request (RTR) for transmit frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   905   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   906   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   907   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   908   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   909  IFX_INLINE void IfxCan_Node_setRemoteTransmitReq(Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   910  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   911  /** \brief Sets the remote Transmit Request (RTR) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   912   * This function is deprecated. Use new function IfxCan_Node_setRemoteTransmitReq
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   913   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   914   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   915   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   916   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   917   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   918  IFX_INLINE void IfxCan_Node_setRemoteTransmitRequest(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   919  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   920  /** \brief Sets Transmit FIFO/Queue Mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   921   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   922   * \param mode Tx FIFO/Queue Mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   923   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   924   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   925  IFX_INLINE void IfxCan_Node_setTransmitFifoQueueMode(Ifx_CAN_N *node, IfxCan_TxMode mode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   926  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   927  /** \brief Sets Transmit FIFO/Queue Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   928   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   929   * \param number Number of Tx Buffers used for Tx FIFO/Queue
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   930   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   931   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   932  IFX_INLINE void IfxCan_Node_setTransmitFifoQueueSize(Ifx_CAN_N *node, uint8 number);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   933  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   934  /** \brief Sets the Add Request for the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   935   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   936   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   937   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   938   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   939  IFX_INLINE void IfxCan_Node_setTxBufferAddRequest(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   940  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   941  /** \brief Sets the Cancellation Request for the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   942   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   943   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   944   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   945   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   946  IFX_INLINE void IfxCan_Node_setTxBufferCancellationRequest(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   947  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   948  /** \brief Sets Tx Buffer Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   949   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   950   * \param size Tx Buffer Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   951   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   952   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   953  IFX_INLINE void IfxCan_Node_setTxBufferDataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   954  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   955  /** \brief Sets the start address of Tx Buffers section in the Message RAM (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   956   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   957   * \param address Start address of Tx Buffers in the message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   958   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   959   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   960  IFX_INLINE void IfxCan_Node_setTxBuffersStartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   961  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   962  /** \brief Sets the Tx Event Fifo Control (EFC) for transmit frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   963   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   964   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   965   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   966   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   967  IFX_INLINE void IfxCan_Node_setTxEventFifoCtrl(Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   968  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   969  /** \brief Sets the Tx Event Fifo Control (EFC) for transmit frame.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   970   * This function is deprecated. Use new function IfxCan_Node_setTxEventFifoCtrl
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   971   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   972   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   973   * \param enable Choice (True/ False)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   974   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   975   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   976  IFX_INLINE void IfxCan_Node_setTxEventFifoControl(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   977  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   978  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   979  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   980  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   981  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   982  /** \brief Returns Tx Buffer Data Field Size in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   983   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   984   * \return Data field size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   985   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   986  IFX_EXTERN uint8 IfxCan_Node_getTxBufferDataFieldSize(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   987  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   988  /** \brief Returns the address of selected Tx buffer element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   989   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   990   * \param ramBaseAddress Message RAM base address of CAN module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   991   * \param txBuffersStartAddress Start address of Tx Buffers section in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   992   * \param txBufferNumber Tx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   993   * \return Tx Buffer Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   994   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   995  IFX_EXTERN Ifx_CAN_TXMSG *IfxCan_Node_getTxBufferElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 txBuffersStartAddress, IfxCan_TxBufferId txBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   996  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   997  /** \brief Writes Data into Tx buffer element Node_writeTxBufData
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   998   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	   999   * \param dataLengthCode DLC, Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1000   * \param data Pointer to data (in words)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1001   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1002   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1003  IFX_EXTERN void IfxCan_Node_writeTxBufData(Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode, uint32 *data);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1004  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1005  /** \brief Writes Data into Tx buffer element.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1006   * This function is deprecated. Use new function IfxCan_Node_writeTxBufData
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1007   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1008   * \param txBufferElement Tx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1009   * \param dataLengthCode DLC, Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1010   * \param data Pointer to data (in words)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1011   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1012   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1013  IFX_EXTERN void IfxCan_Node_writeData(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode, uint32 *data);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1014  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1015  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1016  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1017  /** \addtogroup IfxLld_Can_Std_Rx_Element_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1018   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1019  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1020  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1021  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1022  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1023  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1024  /** \brief Returns the Data Length Code from the received frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1025   * \param rxBufferElement Rx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1026   * \return Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1027   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1028  IFX_INLINE uint32 IfxCan_Node_getDataLengthCode(Ifx_CAN_RXMSG *rxBufferElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1029  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1030  /** \brief Returns the identifier (ID) from the received frame
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1031   * \param rxBufferElement Rx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1032   * \return Identifier
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1033   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1034  IFX_INLINE uint32 IfxCan_Node_getMesssageId(Ifx_CAN_RXMSG *rxBufferElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1035  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1036  /** \brief Returns Rx FIFO 0 Fill Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1037   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1038   * \return Fill level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1039   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1040  IFX_INLINE uint8 IfxCan_Node_getRxFifo0FillLevel(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1041  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1042  /** \brief Returns Rx FIFO 0 get index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1043   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1044   * \return Rx Buffer Element Number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1045   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1046  IFX_INLINE IfxCan_RxBufferId IfxCan_Node_getRxFifo0GetIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1047  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1048  /** \brief Returns Rx FIFO 1 Fill Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1049   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1050   * \return Fill level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1051   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1052  IFX_INLINE uint8 IfxCan_Node_getRxFifo1FillLevel(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1053  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1054  /** \brief Returns Rx FIFO 1 get index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1055   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1056   * \return Rx Buffer Element Number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1057   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1058  IFX_INLINE IfxCan_RxBufferId IfxCan_Node_getRxFifo1GetIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1059  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1060  /** \brief Sets Rx Buffer Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1061   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1062   * \param size Rx Buffer Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1063   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1064   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1065  IFX_INLINE void IfxCan_Node_setRxBufferDataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1066  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1067  /** \brief Sets the start address of Rx Buffers section in the Message RAM (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1068   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1069   * \param address Start address of Rx Buffers in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1070   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1071   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1072  IFX_INLINE void IfxCan_Node_setRxBuffersStartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1073  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1074  /** \brief Sets Rx FIFO 0 Acknowledge Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1075   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1076   * \param RxBufferNumber Rx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1077   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1078   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1079  IFX_INLINE void IfxCan_Node_setRxFifo0AcknowledgeIndex(Ifx_CAN_N *node, IfxCan_RxBufferId RxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1080  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1081  /** \brief Sets Rx Buffer Fifo 0 Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1082   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1083   * \param size Rx FIFO 0 Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1084   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1085   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1086  IFX_INLINE void IfxCan_Node_setRxFifo0DataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1087  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1088  /** \brief Sets Rx Buffer Fifo 0 operating mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1089   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1090   * \param mode Rx FIFO 0 operating Mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1091   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1092   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1093  IFX_INLINE void IfxCan_Node_setRxFifo0OperatingMode(Ifx_CAN_N *node, IfxCan_RxFifoMode mode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1094  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1095  /** \brief Sets Rx FIFO 0 Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1096   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1097   * \param size Rx FIFO 0 Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1098   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1099   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1100  IFX_INLINE void IfxCan_Node_setRxFifo0Size(Ifx_CAN_N *node, uint8 size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1101  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1102  /** \brief Sets the start address of Rx FIFO 0 section in the Message RAM (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1103   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1104   * \param address Start address of Rx FIFO 0 in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1105   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1106   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1107  IFX_INLINE void IfxCan_Node_setRxFifo0StartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1108  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1109  /** \brief Sets Rx FIFO 0 Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1110   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1111   * \param level Rx FIFO 0 Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1112   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1113   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1114  IFX_INLINE void IfxCan_Node_setRxFifo0WatermarkLevel(Ifx_CAN_N *node, uint8 level);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1115  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1116  /** \brief Sets Rx FIFO 1 Acknowledge Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1117   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1118   * \param RxBufferNumber Rx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1119   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1120   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1121  IFX_INLINE void IfxCan_Node_setRxFifo1AcknowledgeIndex(Ifx_CAN_N *node, IfxCan_RxBufferId RxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1122  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1123  /** \brief Sets Rx Buffer Fifo 1 Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1124   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1125   * \param size Rx FIFO 1 Data Field Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1126   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1127   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1128  IFX_INLINE void IfxCan_Node_setRxFifo1DataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1129  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1130  /** \brief Sets Rx Buffer Fifo 1 operating mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1131   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1132   * \param mode Rx FIFO 1 operating Mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1133   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1134   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1135  IFX_INLINE void IfxCan_Node_setRxFifo1OperatingMode(Ifx_CAN_N *node, IfxCan_RxFifoMode mode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1136  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1137  /** \brief Sets Rx FIFO 1 Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1138   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1139   * \param size Rx FIFO 1 Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1140   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1141   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1142  IFX_INLINE void IfxCan_Node_setRxFifo1Size(Ifx_CAN_N *node, uint8 size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1143  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1144  /** \brief Sets the start address of Rx FIFO 1 section in the Message RAM (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1145   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1146   * \param address Start address of Rx FIFO 1 in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1147   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1148   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1149  IFX_INLINE void IfxCan_Node_setRxFifo1StartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1150  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1151  /** \brief Sets Rx FIFO 1 Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1152   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1153   * \param level Rx FIFO 1 Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1154   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1155   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1156  IFX_INLINE void IfxCan_Node_setRxFifo1WatermarkLevel(Ifx_CAN_N *node, uint8 level);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1157  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1158  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1159  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1160  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1161  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1162  /** \brief Clears the New Data flag of the selected Rx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1163   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1164   * \param rxBufferId Rx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1165   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1166   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1167  IFX_EXTERN void IfxCan_Node_clearRxBufferNewDataFlag(Ifx_CAN_N *node, IfxCan_RxBufferId rxBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1168  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1169  /** \brief Returns Rx Buffer Data Field Size in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1170   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1171   * \return Data field size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1172   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1173  IFX_EXTERN uint8 IfxCan_Node_getRxBufferDataFieldSize(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1174  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1175  /** \brief Returns the address of selected Rx buffer element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1176   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1177   * \param ramBaseAddress Message RAM base address of CAN Module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1178   * \param rxBuffersStartAddress Start address of Rx Buffers section in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1179   * \param rxBufferNumber Rx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1180   * \return Rx Buffer Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1181   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1182  IFX_EXTERN Ifx_CAN_RXMSG *IfxCan_Node_getRxBufferElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 rxBuffersStartAddress, IfxCan_RxBufferId rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1183  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1184  /** \brief Returns Rx FIFO 0 Data Field Size in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1185   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1186   * \return Data field size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1187   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1188  IFX_EXTERN uint8 IfxCan_Node_getRxFifo0DataFieldSize(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1189  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1190  /** \brief Returns the address of selected Rx FIFO 0 element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1191   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1192   * \param ramBaseAddress Message RAM base address of CAN Module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1193   * \param rxFifo0StartAddress Start address of Rx FIFO 0 section in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1194   * \param rxBufferNumber Rx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1195   * \return Rx FIFO 0 Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1196   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1197  IFX_EXTERN Ifx_CAN_RXMSG *IfxCan_Node_getRxFifo0ElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 rxFifo0StartAddress, IfxCan_RxBufferId rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1198  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1199  /** \brief Returns Rx FIFO 1 Data Field Size in bytes
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1200   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1201   * \return Data field size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1202   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1203  IFX_EXTERN uint8 IfxCan_Node_getRxFifo1DataFieldSize(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1204  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1205  /** \brief Returns the address of selected Rx FIFO 1 element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1206   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1207   * \param ramBaseAddress Message RAM base address of CAN Module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1208   * \param rxFifo1StartAddress Start address of Rx FIFO 1 section in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1209   * \param rxBufferNumber Rx buffer element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1210   * \return Rx FIFO 1 Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1211   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1212  IFX_EXTERN Ifx_CAN_RXMSG *IfxCan_Node_getRxFifo1ElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 rxFifo1StartAddress, IfxCan_RxBufferId rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1213  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1214  /** \brief Returns the status of whether the selcted Rx buffer has been updated from new data
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1215   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1216   * \param rxBufferId Rx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1217   * \return Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1218   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1219  IFX_EXTERN boolean IfxCan_Node_isRxBufferNewDataUpdated(Ifx_CAN_N *node, IfxCan_RxBufferId rxBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1220  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1221  /** \brief Reads data from Rx buffer element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1222   * \param rxBufferElement Rx Buffer Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1223   * \param dataLengthCode DLC, Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1224   * \param data Pointer to data (in words)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1225   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1226   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1227  IFX_EXTERN void IfxCan_Node_readData(Ifx_CAN_RXMSG *rxBufferElement, IfxCan_DataLengthCode dataLengthCode, uint32 *data);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1228  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1229  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1230  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1231  /** \addtogroup IfxLld_Can_Std_Filter_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1232   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1233  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1234  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1235  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1236  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1237  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1238  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1239   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1240   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1241   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1242  IFX_INLINE void IfxCan_Node_acceptRemoteFramesWithStandardId(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1243  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1244  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1245   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1246   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1247   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1248  IFX_INLINE void IfxCan_Node_acceptRemoteFrameswithExtendedId(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1249  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1250  /** \brief Configure the filter for non matching frames with extended id.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1251   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1252   * \param filter action to be performed on non matching messages.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1253   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1254   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1255  IFX_INLINE void IfxCan_Node_configureExtendedFilterForNonMatchingFrames(Ifx_CAN_N *node, IfxCan_NonMatchingFrame filter);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1256  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1257  /** \brief Configure the filter for non matching frames with standard id.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1258   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1259   * \param filter action to be performed on non matching messages.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1260   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1261   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1262  IFX_INLINE void IfxCan_Node_configureStandardFilterForNonMatchingFrames(Ifx_CAN_N *node, IfxCan_NonMatchingFrame filter);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1263  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1264  /** \brief Reject the remote frames with extended id.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1265   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1266   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1267   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1268  IFX_INLINE void IfxCan_Node_rejectRemoteFramesWithExtendedId(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1269  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1270  /** \brief Reject the remote frames with standard id.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1271   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1272   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1273   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1274  IFX_INLINE void IfxCan_Node_rejectRemoteFramesWithStandardId(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1275  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1276  /** \brief Sets the Extended Filter Element Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1277   * \param extendedFilterElement Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1278   * \param filterElementConfiguration Filter Element Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1279   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1280   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1281  IFX_INLINE void IfxCan_Node_setExtendedFilterConfiguration(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_FilterElementConfiguration filterElementConfiguration);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1282  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1283  /** \brief Sets the Extended Filter ID 1 for Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1284   * \param extendedFilterElement Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1285   * \param id Filter ID 1
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1286   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1287   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1288  IFX_INLINE void IfxCan_Node_setExtendedFilterId1(Ifx_CAN_EXTMSG *extendedFilterElement, uint32 id);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1289  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1290  /** \brief Sets the Extended Filter ID 2 for Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1291   * \param extendedFilterElement Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1292   * \param id Filter ID 2
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1293   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1294   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1295  IFX_INLINE void IfxCan_Node_setExtendedFilterId2(Ifx_CAN_EXTMSG *extendedFilterElement, uint32 id);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1296  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1297  /** \brief Sets the Extended Message ID filter list size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1298   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1299   * \param size Number of Extended Message ID filter elements
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1300   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1301   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1302  IFX_INLINE void IfxCan_Node_setExtendedFilterListSize(Ifx_CAN_N *node, uint8 size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1303  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1304  /** \brief Sets the start address of Extended Message ID filter list (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1305   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1306   * \param address Start address of Extended Message ID filter list in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1307   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1308   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1309  IFX_INLINE void IfxCan_Node_setExtendedFilterListStartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1310  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1311  /** \brief Sets the Offset to the Rx Buffer Start Address RXBC.RBSA for storage of a matching message for Extended filter element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1312   * \param extendedFilterElement Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1313   * \param rxBufferNumber Offset to the Rx Buffer Start Address RXBC.RBSA for storage of a matching message (Rx buffer number)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1314   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1315   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1316  IFX_INLINE void IfxCan_Node_setExtendedFilterRxBufferOffset(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_RxBufferId rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1317  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1318  /** \brief Sets the Extended Filter Type for Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1319   * \param extendedFilterElement Extended Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1320   * \param filterType Filter Type
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1321   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1322   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1323  IFX_INLINE void IfxCan_Node_setExtendedFilterType(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_FilterType filterType);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1324  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1325  /** \brief Sets the Standard Filter Element Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1326   * \param standardFilterElement Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1327   * \param filterElementConfiguration Filter Element Configuration
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1328   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1329   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1330  IFX_INLINE void IfxCan_Node_setStandardFilterConfiguration(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_FilterElementConfiguration filterElementConfiguration);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1331  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1332  /** \brief Sets the Standard Filter ID 1 for Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1333   * \param standardFilterElement Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1334   * \param id Filter ID 1
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1335   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1336   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1337  IFX_INLINE void IfxCan_Node_setStandardFilterId1(Ifx_CAN_STDMSG *standardFilterElement, uint32 id);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1338  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1339  /** \brief Sets the Standard Filter ID 2 for Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1340   * \param standardFilterElement Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1341   * \param id Filter ID 2
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1342   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1343   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1344  IFX_INLINE void IfxCan_Node_setStandardFilterId2(Ifx_CAN_STDMSG *standardFilterElement, uint32 id);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1345  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1346  /** \brief Sets the Standard  Message ID filter list size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1347   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1348   * \param size Number of Standard Message ID filter elements
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1349   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1350   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1351  IFX_INLINE void IfxCan_Node_setStandardFilterListSize(Ifx_CAN_N *node, uint8 size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1352  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1353  /** \brief Sets the start address of Standard Message ID filter list (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1354   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1355   * \param address Start address of Standard Message ID filter in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1356   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1357   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1358  IFX_INLINE void IfxCan_Node_setStandardFilterListStartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1359  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1360  /** \brief Sets the Offset to the Rx Buffer Start Address RXBC.RBSA for storage of a matching message for standard filter element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1361   * \param standardFilterElement Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1362   * \param rxBufferNumber Offset to the Rx Buffer Start Address RXBC.RBSA for storage of a matching message (Rx buffer number)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1363   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1364   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1365  IFX_INLINE void IfxCan_Node_setStandardFilterRxBufferOffset(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_RxBufferId rxBufferNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1366  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1367  /** \brief Sets the Standard Filter Type for Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1368   * \param standardFilterElement Standard Filter Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1369   * \param filterType Filter Type
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1370   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1371   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1372  IFX_INLINE void IfxCan_Node_setStandardFilterType(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_FilterType filterType);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1373  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1374  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1375  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1376  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1377  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1378  /** \brief Returns the address of selected extended filter element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1379   * \param ramBaseAddress Message RAM base address of CAN Module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1380   * \param extendedFilterListStartAddress Start address of Extended Message ID filter list (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1381   * \param filterNumber extended filter element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1382   * \return Extended Filter Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1383   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1384  IFX_EXTERN Ifx_CAN_EXTMSG *IfxCan_Node_getExtendedFilterElementAddress(uint32 ramBaseAddress, uint16 extendedFilterListStartAddress, uint8 filterNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1385  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1386  /** \brief Returns the address of selected standard filter element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1387   * \param ramBaseAddress Message RAM base address of CAN Module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1388   * \param standardFilterListStartAddress Start address of Standard Message ID filter list (32-bit word address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1389   * \param filterNumber Standard filter element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1390   * \return Standard Filter Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1391   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1392  IFX_EXTERN Ifx_CAN_STDMSG *IfxCan_Node_getStandardFilterElementAddress(uint32 ramBaseAddress, uint16 standardFilterListStartAddress, uint8 filterNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1393  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1394  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1395  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1396  /** \addtogroup IfxLld_Can_Std_Interrupt_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1397   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1398  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1399  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1400  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1401  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1402  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1403  /** \brief Clears the selected interrupt Flag
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1404   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1405   * \param interrupt Type of Interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1406   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1407   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1408  IFX_INLINE void IfxCan_Node_clearInterruptFlag(Ifx_CAN_N *node, IfxCan_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1409  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1410  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1411   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1412   * \param interrupt Type of Interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1413   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1414   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1415  IFX_INLINE void IfxCan_Node_disableInterrupt(Ifx_CAN_N *node, IfxCan_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1416  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1417  /** \brief Disables the Cancellation Finished Interrupt of the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1418   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1419   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1420   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1421   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1422  IFX_INLINE void IfxCan_Node_disableTxBufferCancellationFinishedInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1423  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1424  /** \brief Disables the Transmission Interrupt of the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1425   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1426   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1427   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1428   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1429  IFX_INLINE void IfxCan_Node_disableTxBufferTransmissionInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1430  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1431  /** \brief Enables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1432   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1433   * \param interrupt Type of Interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1434   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1435   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1436  IFX_INLINE void IfxCan_Node_enableInterrupt(Ifx_CAN_N *node, IfxCan_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1437  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1438  /** \brief Enables the Cancellation Finished Interrupt of the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1439   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1440   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1441   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1442   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1443  IFX_INLINE void IfxCan_Node_enableTxBufferCancellationFinishedInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1444  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1445  /** \brief Enables the Transmission Interrupt of the selected Tx buffer
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1446   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1447   * \param txBufferId Tx Buffer number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1448   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1449   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1450  IFX_INLINE void IfxCan_Node_enableTxBufferTransmissionInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1451  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1452  /** \brief Returns the status of selected interrupt flag
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1453   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1454   * \param interrupt Type of Interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1455   * \return Status TRUE / FALSE
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1456   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1457  IFX_INLINE boolean IfxCan_Node_getInterruptFlagStatus(Ifx_CAN_N *node, IfxCan_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1458  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1459  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1460  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1461  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1462  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1463  /** \brief Sets the slected interrupt to the selcted interrupt line
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1464   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1465   * \param interruptGroup Type of Interrupt group
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1466   * \param interruptLine Interrupt line number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1467   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1468   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1469  IFX_EXTERN void IfxCan_Node_setGroupInterruptLine(Ifx_CAN_N *node, IfxCan_InterruptGroup interruptGroup, IfxCan_InterruptLine interruptLine);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1470  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1471  /** \brief Sets the slected interrupt to the selcted interrupt line
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1472   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1473   * \param interrupt Type of Interrupt
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1474   * \param interruptLine Interrupt line number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1475   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1476   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1477  IFX_EXTERN void IfxCan_Node_setInterruptLine(Ifx_CAN_N *node, IfxCan_Interrupt interrupt, IfxCan_InterruptLine interruptLine);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1478  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1479  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1480  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1481  /** \addtogroup IfxLld_Can_Std_Module_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1482   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1483  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1484  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1485  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1486  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1487  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1488  /** \brief Returns the base adress of the selected Node of CAN module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1489   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1490   * \param nodeId Node number of the module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1491   * \return Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1492   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1493  IFX_INLINE Ifx_CAN_N *IfxCan_getNodePointer(Ifx_CAN *can, IfxCan_NodeId nodeId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1494  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1495  /** \brief Returns the status of module enabled or disabled
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1496   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1497   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1498   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1499  IFX_INLINE boolean IfxCan_isModuleEnabled(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1500  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1501  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1502   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1503   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1504   * \param can Pointer to CAN module registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1505   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1506   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1507  IFX_INLINE boolean IfxCan_isModuleSuspended(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1508  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1509  /** \brief Sets the sensitivity of the module to sleep signal
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1510   * \param can pointer to CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1511   * \param mode mode selection (enable/disable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1512   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1513   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1514  IFX_INLINE void IfxCan_setSleepMode(Ifx_CAN *can, IfxCan_SleepMode mode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1515  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1516  /** \brief Set the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1517   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1518   * \param can Pointer to CAN module registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1519   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1520   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1521   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1522  IFX_INLINE void IfxCan_setSuspendMode(Ifx_CAN *can, IfxCan_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1523  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1524  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1525  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1526  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1527  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1528  /** \brief Disables the module (sets the disable request)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1529   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1530   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1531   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1532  IFX_EXTERN void IfxCan_disableModule(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1533  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1534  /** \brief Enables the module (clears the disable request)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1535   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1536   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1537   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1538  IFX_EXTERN void IfxCan_enableModule(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1539  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1540  /**
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1541   * \param can Module index of the CAN
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1542   * \return CAN module register address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1543   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1544  IFX_EXTERN Ifx_CAN *IfxCan_getAddress(IfxCan_Index can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1545  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1546  /** \brief API to get the resource index of the CAN specified.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1547   * \return can resource index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1548   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1549  IFX_EXTERN IfxCan_Index IfxCan_getIndex(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1550  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1551  /** \brief Returns the operatinf frequency of the CAN module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1552   * \return Module Frequency
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1553   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1554  IFX_EXTERN float32 IfxCan_getModuleFrequency(void);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1555  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1556  /** \brief resets CAN kernel
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1557   * \param can pointer to CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1558   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1559   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1560  IFX_EXTERN void IfxCan_resetModule(Ifx_CAN *can);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1561  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1562  /** \brief sets the clocksource selection
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1563   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1564   * \param clockSelect Clock selection option
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1565   * \param clockSource Type of Clock Source selection
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1566   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1567   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1568  IFX_EXTERN void IfxCan_setClockSource(Ifx_CAN *can, IfxCan_ClockSelect clockSelect, IfxCan_ClockSource clockSource);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1569  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1570  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1571  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1572  /** \addtogroup IfxLld_Can_Std_Tx_Event_FIFO_Element_Functions
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1573   * \{ */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1574  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1575  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1576  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1577  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1578  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1579  /** \brief Returns the Bit Rate Switch (BRS) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1580   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1581   * \return Bit Rate Switch (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1582   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1583  IFX_INLINE boolean IfxCan_Node_getBRSFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1584  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1585  /** \brief Returns the Data Length Code from the Tx Event Fifo Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1586   * \param txEventFifoElement Tx Event Fifo Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1587   * \return Data Length Code
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1588   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1589  IFX_INLINE uint32 IfxCan_Node_getDLCFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1590  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1591  /** \brief Returns the Error State Indicator (ESI) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1592   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1593   * \return Error State Indicator
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1594   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1595  IFX_INLINE boolean IfxCan_Node_getESIFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1596  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1597  /** \brief Returns the FD Format (FDF) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1598   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1599   * \return FD format (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1600   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1601  IFX_INLINE boolean IfxCan_Node_getFDFFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1602  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1603  /** \brief Returns the Message Marker (MM) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1604   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1605   * \return Message Marker
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1606   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1607  IFX_INLINE uint8 IfxCan_Node_getMMFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1608  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1609  /** \brief Returns the identifier (ID) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1610   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1611   * \return Identifier
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1612   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1613  IFX_INLINE uint32 IfxCan_Node_getMesssageIdFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1614  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1615  /** \brief Returns the Remote Transmission Request Status (RTR) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1616   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1617   * \return Remote Transmission Request Status
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1618   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1619  IFX_INLINE boolean IfxCan_Node_getRTRFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1620  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1621  /** \brief Returns the Tx Time Stamp (TXTS) from the Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1622   * \param txEventFifoElement Tx Event FIFO Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1623   * \return Tx Time Stamp
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1624   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1625  IFX_INLINE uint16 IfxCan_Node_getTXTSFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1626  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1627  /** \brief Returns the Tx Event Fifo Acknowledge Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1628   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1629   * \return Returns Tx Event Fifo Acknowledge Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1630   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1631  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoAcknowledgeIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1632  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1633  /** \brief Returns the Tx Event Fifo Fill Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1634   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1635   * \return Returns Tx Event Fifo Fill Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1636   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1637  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoFillLevel(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1638  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1639  /** \brief Returns the Tx Event Fifo Get Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1640   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1641   * \return Returns Tx Event Fifo Get Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1642   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1643  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoGetIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1644  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1645  /** \brief Returns the Tx Event Fifo Put Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1646   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1647   * \return Returns Tx Event Fifo Put Index
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1648   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1649  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoPutIndex(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1650  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1651  /** \brief Returns Tx Event Fifo Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1652   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1653   * \return Tx Event Fifo Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1654   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1655  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoSize(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1656  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1657  /** \brief Returns Tx Event Fifo Start Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1658   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1659   * \return Tx Event Fifo Start Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1660   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1661  IFX_INLINE uint16 IfxCan_Node_getTxEventFifoStartAddress(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1662  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1663  /** \brief Returns Tx Event Fifo Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1664   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1665   * \return Tx Event Fifo Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1666   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1667  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoWatermarkLevel(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1668  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1669  /** \brief Returns the status of Tx Event Fifo Element lost
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1670   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1671   * \return Returns status of Tx Event Fifo Element Lost\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1672   * True : elemnt lost\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1673   * False : element not lost
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1674   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1675  IFX_INLINE boolean IfxCan_Node_isTxEventFifoElementLost(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1676  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1677  /** \brief Returns the status of Tx Event Fifo Full
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1678   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1679   * \return Returns status of Tx Event Fifo Full\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1680   * True : Fifo full\n
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1681   * False : Fifo not full
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1682   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1683  IFX_INLINE boolean IfxCan_Node_isTxEventFifoFull(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1684  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1685  /** \brief Sets Tx Event Fifo Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1686   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1687   * \param size Tx Event Fifo Size
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1688   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1689   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1690  IFX_INLINE void IfxCan_Node_setTxEventFifoSize(Ifx_CAN_N *node, uint8 size);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1691  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1692  /** \brief Sets Tx Event Fifo Start Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1693   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1694   * \param address Tx Event Fifo Start Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1695   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1696   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1697  IFX_INLINE void IfxCan_Node_setTxEventFifoStartAddress(Ifx_CAN_N *node, uint16 address);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1698  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1699  /** \brief Sets Tx Event Fifo Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1700   * \param node Specifies the pointer to the CAN Node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1701   * \param level Tx Event Fifo Watermark Level
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1702   * \return None
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1703   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1704  IFX_INLINE void IfxCan_Node_setTxEventFifoWatermarkLevel(Ifx_CAN_N *node, uint8 level);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1705  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1706  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1707  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1708  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1709  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1710  /** \brief Returns CAN frame mode of operation for a Tx Event Fifo Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1711   * \param txEventFifoElement Tx Event Fifo Element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1712   * \return CAN frame mode
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1713   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1714  IFX_EXTERN IfxCan_FrameMode IfxCan_Node_getFrameModeFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1715  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1716  /** \brief Returns the address of selected Tx Event Fifo element
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1717   * \param ramBaseAddress Message RAM base address of CAN module
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1718   * \param txEventFifoStartAddress Start address of Tx Event Fifo section in the Message RAM
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1719   * \param txEventFifoNumber Tx Event Fifo element number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1720   * \return Tx Event Fifo Element Address
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1721   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1722  IFX_EXTERN Ifx_CAN_TXEVENT *IfxCan_Node_getTxEventFifoElementAddress(uint32 ramBaseAddress, uint16 txEventFifoStartAddress, uint8 txEventFifoNumber);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1723  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1724  /** \} */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1725  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1726  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1727  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1728  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1729  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1730  /** \brief CAN frame format of the last received message.
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1731   * TRUE: CAN FD frame received
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1732   * FALSE: CAN FD frame not received
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1733   * \param node Specifies the pointer to CAN node registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1734   * \return CAN Frame format (TRUE/FALSE)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1735   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1736  IFX_INLINE boolean IfxCan_Node_isCanFDMsgReceived(Ifx_CAN_N *node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1737  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1738  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1739  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1740  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1741  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1742  /** \brief Returns the address of interrupt node source register
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1743   * \param can Specifies the pointer to the CAN registers
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1744   * \param interruptLine Interrupt line number
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1745   * \return Address of interrupt node source register
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1746   */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1747  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxCan_getSrcPointer(Ifx_CAN *can, IfxCan_InterruptLine interruptLine);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1748  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1749  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1750  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1751  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1752  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1753  IFX_INLINE void IfxCan_Node_acceptRemoteFramesWithStandardId(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1754  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1755      node->GFC.B.RRFS = 0U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1756  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1757  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1758  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1759  IFX_INLINE void IfxCan_Node_acceptRemoteFrameswithExtendedId(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1760  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1761      node->GFC.B.RRFE = 0U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1762  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1763  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1764  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1765  IFX_INLINE void IfxCan_Node_clearInterruptFlag(Ifx_CAN_N *node, IfxCan_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1766  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1767      uint32 value = (1U << interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1768      node->IR.U = value;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1769  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1770  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1771  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1772  IFX_INLINE void IfxCan_Node_configureExtendedFilterForNonMatchingFrames(Ifx_CAN_N *node, IfxCan_NonMatchingFrame filter)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1773  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1774      node->GFC.B.ANFE = filter;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1775  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1776  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1777  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1778  IFX_INLINE void IfxCan_Node_configureStandardFilterForNonMatchingFrames(Ifx_CAN_N *node, IfxCan_NonMatchingFrame filter)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1779  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1780      node->GFC.B.ANFS = filter;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1781  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1782  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1783  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1784  IFX_INLINE void IfxCan_Node_disableConfigurationChange(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1785  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1786      node->CCCR.B.CCE = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1787  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1788      while (node->CCCR.B.CCE != 0)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1789      {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1790  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1791      node->CCCR.B.INIT = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1792  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1793      while (node->CCCR.B.INIT != 0)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1794      {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1795  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1796  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1797  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1798  IFX_INLINE void IfxCan_Node_disableInterrupt(Ifx_CAN_N *node, IfxCan_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1799  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1800      uint32 mask = (1U << interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1801      node->IE.U = node->IE.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1802  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1803  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1804  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1805  IFX_INLINE void IfxCan_Node_disableTxBufferCancellationFinishedInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1806  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1807      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1808      node->TX.BCIE.U = node->TX.BCIE.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1809  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1810  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1811  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1812  IFX_INLINE void IfxCan_Node_disableTxBufferTransmissionInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1813  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1814      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1815      node->TX.BTIE.U = node->TX.BTIE.U & ~(mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1816  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1817  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1818  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1819  IFX_INLINE void IfxCan_Node_enableConfigurationChange(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1820  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1821      Ifx_CAN_N_CCCR cccr;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1822  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1823      /* If INIT already set, clear it before setting again. */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1824      /* The module needs some time if INIT was rewritten !*/
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1825      if (node->CCCR.B.INIT == 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1826      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1827          node->CCCR.B.CCE = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1828  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1829          while (node->CCCR.B.CCE != 0)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1830          {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1831  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1832          node->CCCR.B.INIT = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1833  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1834          while (node->CCCR.B.INIT != 0)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1835          {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1836      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1837  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1838      node->CCCR.B.INIT = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1839  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1840      while (node->CCCR.B.INIT != 1)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1841      {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1842  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1843      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1844          cccr.U       = node->CCCR.U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1845          cccr.B.INIT  = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1846          cccr.B.CCE   = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1847          node->CCCR.U = cccr.U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1848      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1849  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1850  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1851  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1852  IFX_INLINE void IfxCan_Node_enableInterrupt(Ifx_CAN_N *node, IfxCan_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1853  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1854      uint32 mask = (1U << interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1855      node->IE.U = node->IE.U | (mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1856  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1857  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1858  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1859  IFX_INLINE void IfxCan_Node_enableLoopbackMode(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1860  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1861      node->NPCR.B.LBM = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1862  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1863  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1864  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1865  IFX_INLINE void IfxCan_Node_enableTxBufferCancellationFinishedInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1866  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1867      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1868      node->TX.BCIE.U = node->TX.BCIE.U | (mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1869  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1870  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1871  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1872  IFX_INLINE void IfxCan_Node_enableTxBufferTransmissionInterrupt(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1873  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1874      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1875      node->TX.BTIE.U = node->TX.BTIE.U | (mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1876  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1877  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1878  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1879  IFX_INLINE boolean IfxCan_Node_getBRSFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1880  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1881      return txEventFifoElement->E1.B.BRS;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1882  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1883  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1884  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1885  IFX_INLINE uint32 IfxCan_Node_getDLCFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1886  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1887      return (IfxCan_DataLengthCode)txEventFifoElement->E1.B.DLC;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1888  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1889  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1890  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1891  IFX_INLINE uint32 IfxCan_Node_getDataLengthCode(Ifx_CAN_RXMSG *rxBufferElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1892  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1893      return (IfxCan_DataLengthCode)rxBufferElement->R1.B.DLC;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1894  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1895  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1896  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1897  IFX_INLINE boolean IfxCan_Node_getESIFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1898  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1899      return txEventFifoElement->E0.B.ESI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1900  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1901  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1902  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1903  IFX_INLINE boolean IfxCan_Node_getFDFFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1904  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1905      return txEventFifoElement->E1.B.FDF;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1906  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1907  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1908  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1909  IFX_INLINE boolean IfxCan_Node_getInterruptFlagStatus(Ifx_CAN_N *node, IfxCan_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1910  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1911      uint32  mask   = (1U << interrupt);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1912      boolean status = (node->IR.U & mask) != 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1913      return status;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1914  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1915  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1916  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1917  IFX_INLINE uint8 IfxCan_Node_getMMFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1918  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1919      return (uint8)txEventFifoElement->E1.B.MM;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1920  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1921  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1922  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1923  IFX_INLINE uint32 IfxCan_Node_getMesssageId(Ifx_CAN_RXMSG *rxBufferElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1924  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1925      /* get identifier extention */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1926      IfxCan_MessageIdLength messageIdLength = (IfxCan_MessageIdLength)rxBufferElement->R0.B.XTD;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1927  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1928      /* get identifier */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1929      return rxBufferElement->R0.B.ID >> ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1930  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1931  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1932  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1933  IFX_INLINE uint32 IfxCan_Node_getMesssageIdFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1934  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1935      /* get identifier extention */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1936      IfxCan_MessageIdLength messageIdLength = (IfxCan_MessageIdLength)txEventFifoElement->E0.B.XTD;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1937  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1938      /* get identifier */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1939      return txEventFifoElement->E0.B.ID >> ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1940  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1941  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1942  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1943  IFX_INLINE boolean IfxCan_Node_getRTRFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1944  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1945      return txEventFifoElement->E0.B.RTR;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1946  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1947  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1948  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1949  IFX_INLINE uint8 IfxCan_Node_getRxFifo0FillLevel(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1950  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1951      return node->RX.F0S.B.F0FL;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1952  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1953  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1954  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1955  IFX_INLINE IfxCan_RxBufferId IfxCan_Node_getRxFifo0GetIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1956  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1957      return (IfxCan_RxBufferId)node->RX.F0S.B.F0GI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1958  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1959  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1960  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1961  IFX_INLINE uint8 IfxCan_Node_getRxFifo1FillLevel(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1962  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1963      return node->RX.F1S.B.F1FL;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1964  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1965  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1966  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1967  IFX_INLINE IfxCan_RxBufferId IfxCan_Node_getRxFifo1GetIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1968  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1969      return (IfxCan_RxBufferId)node->RX.F1S.B.F1GI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1970  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1971  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1972  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1973  IFX_INLINE uint16 IfxCan_Node_getTXTSFromTxEventFifo(Ifx_CAN_TXEVENT *txEventFifoElement)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1974  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1975      return (uint16)txEventFifoElement->E1.B.TXTS;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1976  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1977  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1978  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1979  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoAcknowledgeIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1980  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1981      return (uint8)node->TX.EFA.B.EFAI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1982  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1983  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1984  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1985  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoFillLevel(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1986  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1987      return (uint8)node->TX.EFS.B.EFFL;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1988  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1989  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1990  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1991  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoGetIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1992  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1993      return (uint8)node->TX.EFS.B.EFGI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1994  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1995  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1996  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1997  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoPutIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1998  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  1999      return (uint8)node->TX.EFS.B.EFPI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2000  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2001  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2002  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2003  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoSize(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2004  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2005      return (uint8)node->TX.EFC.B.EFS;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2006  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2007  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2008  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2009  IFX_INLINE uint16 IfxCan_Node_getTxEventFifoStartAddress(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2010  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2011      return (uint16)node->TX.EFC.B.EFSA;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2012  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2013  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2014  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2015  IFX_INLINE uint8 IfxCan_Node_getTxEventFifoWatermarkLevel(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2016  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2017      return (uint8)node->TX.EFC.B.EFWM;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2018  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2019  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2020  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2021  IFX_INLINE IfxCan_TxBufferId IfxCan_Node_getTxFifoQueuePutIndex(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2022  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2023      return (IfxCan_TxBufferId)node->TX.FQS.B.TFQPI;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2024  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2025  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2026  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2027  IFX_INLINE boolean IfxCan_Node_isNodeSynchronized(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2028  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2029      return (boolean)((node->PSR.B.ACT != 0) ? 1 : 0);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2030  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2031  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2032  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2033  IFX_INLINE boolean IfxCan_Node_isTxBufferCancellationFinished(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2034  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2035      uint32  mask    = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2036      boolean tempVar = (boolean)(node->TX.BTO.U & mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2037      return tempVar;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2038  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2039  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2040  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2041  IFX_INLINE boolean IfxCan_Node_isTxBufferRequestPending(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2042  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2043      uint32  mask    = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2044      boolean tempVar = (boolean)(node->TX.BRP.U & mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2045      return tempVar;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2046  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2047  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2048  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2049  IFX_INLINE boolean IfxCan_Node_isTxBufferTransmissionOccured(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2050  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2051      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2052      return (boolean)(node->TX.BTO.U & mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2053  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2054  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2055  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2056  IFX_INLINE boolean IfxCan_Node_isTxEventFifoElementLost(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2057  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2058      return node->TX.EFS.B.TEFL;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2059  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2060  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2061  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2062  IFX_INLINE boolean IfxCan_Node_isTxEventFifoFull(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2063  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2064      return node->TX.EFS.B.EFF;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2065  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2066  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2067  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2068  IFX_INLINE boolean IfxCan_Node_isTxFifoQueueFull(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2069  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2070      return node->TX.FQS.B.TFQF;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2071  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2072  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2073  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2074  IFX_INLINE void IfxCan_Node_pauseTransmission(Ifx_CAN_N *node, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2075  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2076      node->CCCR.B.TXP = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2077  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2078  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2079  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2080  IFX_INLINE void IfxCan_Node_rejectRemoteFramesWithExtendedId(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2081  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2082      node->GFC.B.RRFE = 1U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2083  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2084  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2085  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2086  IFX_INLINE void IfxCan_Node_rejectRemoteFramesWithStandardId(Ifx_CAN_N *node)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2087  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2088      node->GFC.B.RRFS = 1U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2089  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2090  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2091  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2092  IFX_INLINE void IfxCan_Node_setDataLength(Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2093  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2094      txBufferElement->T1.B.DLC = dataLengthCode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2095  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2096  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2097  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2098  IFX_INLINE void IfxCan_Node_setDataLengthCode(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2099  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2100      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2101      txBufferElement->T1.B.DLC = dataLengthCode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2102  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2103  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2104  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2105  IFX_INLINE void IfxCan_Node_setDedicatedTxBuffersNumber(Ifx_CAN_N *node, uint8 number)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2106  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2107      node->TX.BC.B.NDTB = number;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2108  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2109  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2110  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2111  IFX_INLINE void IfxCan_Node_setErrStateIndicator(Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2112  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2113      txBufferElement->T0.B.ESI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2114  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2115  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2116  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2117  IFX_INLINE void IfxCan_Node_setErrorStateIndicator(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2118  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2119      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2120      txBufferElement->T0.B.ESI = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2121  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2122  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2123  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2124  IFX_INLINE void IfxCan_Node_setExtendedFilterConfiguration(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_FilterElementConfiguration filterElementConfiguration)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2125  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2126      extendedFilterElement->F0.B.EFEC = filterElementConfiguration;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2127  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2128  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2129  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2130  IFX_INLINE void IfxCan_Node_setExtendedFilterId1(Ifx_CAN_EXTMSG *extendedFilterElement, uint32 id)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2131  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2132      extendedFilterElement->F0.B.EFID1 = id;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2133  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2134  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2135  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2136  IFX_INLINE void IfxCan_Node_setExtendedFilterId2(Ifx_CAN_EXTMSG *extendedFilterElement, uint32 id)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2137  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2138      extendedFilterElement->F1.B.EFID2 = id;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2139  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2140  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2141  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2142  IFX_INLINE void IfxCan_Node_setExtendedFilterListSize(Ifx_CAN_N *node, uint8 size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2143  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2144      node->XIDFC.B.LSE = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2145  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2146  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2147  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2148  IFX_INLINE void IfxCan_Node_setExtendedFilterListStartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2149  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2150      node->XIDFC.B.FLESA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2151  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2152  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2153  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2154  IFX_INLINE void IfxCan_Node_setExtendedFilterRxBufferOffset(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_RxBufferId rxBufferNumber)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2155  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2156      extendedFilterElement->F1.B.EFID2 = (uint8)rxBufferNumber;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2157  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2158  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2159  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2160  IFX_INLINE void IfxCan_Node_setExtendedFilterType(Ifx_CAN_EXTMSG *extendedFilterElement, IfxCan_FilterType filterType)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2161  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2162      extendedFilterElement->F1.B.EFT = filterType;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2163  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2164  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2165  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2166  IFX_INLINE void IfxCan_Node_setInitialisation(Ifx_CAN_N *node, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2167  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2168      node->CCCR.B.INIT = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2169  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2170  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2171  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2172  IFX_INLINE void IfxCan_Node_setMessageMarker(Ifx_CAN_TXMSG *txBufferElement, IfxCan_TxBufferId bufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2173  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2174      txBufferElement->T1.B.MM = bufferId;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2175  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2176  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2177  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2178  IFX_INLINE void IfxCan_Node_setMsgId(Ifx_CAN_TXMSG *txBufferElement, uint32 messageId, IfxCan_MessageIdLength messageIdLength)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2179  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2180      /* set identifier extention */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2181      txBufferElement->T0.B.XTD = (messageIdLength != IfxCan_MessageIdLength_extended) ? 0 : 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2182      /* set identifier */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2183      txBufferElement->T0.B.ID  = messageId << ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2184  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2185  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2186  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2187  IFX_INLINE void IfxCan_Node_setMesssageId(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, uint32 messageId, IfxCan_MessageIdLength messageIdLength)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2188  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2189      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2190      /* set identifier extention */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2191      txBufferElement->T0.B.XTD = (messageIdLength != IfxCan_MessageIdLength_extended) ? 0 : 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2192      /* set identifier */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2193      txBufferElement->T0.B.ID  = messageId << ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2194  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2195  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2196  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2197  IFX_INLINE void IfxCan_Node_setRemoteTransmitReq(Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2198  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2199      txBufferElement->T0.B.RTR = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2200  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2201  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2202  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2203  IFX_INLINE void IfxCan_Node_setRemoteTransmitRequest(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2204  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2205      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2206      txBufferElement->T0.B.RTR = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2207  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2208  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2209  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2210  IFX_INLINE void IfxCan_Node_setRxBufferDataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2211  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2212      node->RX.ESC.B.RBDS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2213  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2214  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2215  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2216  IFX_INLINE void IfxCan_Node_setRxBuffersStartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2217  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2218      node->RX.BC.B.RBSA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2219  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2220  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2221  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2222  IFX_INLINE void IfxCan_Node_setRxFifo0AcknowledgeIndex(Ifx_CAN_N *node, IfxCan_RxBufferId RxBufferNumber)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2223  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2224      node->RX.F0A.B.F0AI = RxBufferNumber;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2225  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2226  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2227  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2228  IFX_INLINE void IfxCan_Node_setRxFifo0DataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2229  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2230      node->RX.ESC.B.F0DS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2231  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2232  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2233  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2234  IFX_INLINE void IfxCan_Node_setRxFifo0OperatingMode(Ifx_CAN_N *node, IfxCan_RxFifoMode mode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2235  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2236      node->RX.F0C.B.F0OM = mode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2237  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2238  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2239  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2240  IFX_INLINE void IfxCan_Node_setRxFifo0Size(Ifx_CAN_N *node, uint8 size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2241  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2242      node->RX.F0C.B.F0S = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2243  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2244  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2245  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2246  IFX_INLINE void IfxCan_Node_setRxFifo0StartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2247  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2248      node->RX.F0C.B.F0SA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2249  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2250  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2251  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2252  IFX_INLINE void IfxCan_Node_setRxFifo0WatermarkLevel(Ifx_CAN_N *node, uint8 level)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2253  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2254      node->RX.F0C.B.F0WM = level;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2255  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2256  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2257  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2258  IFX_INLINE void IfxCan_Node_setRxFifo1AcknowledgeIndex(Ifx_CAN_N *node, IfxCan_RxBufferId RxBufferNumber)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2259  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2260      node->RX.F1A.B.F1AI = RxBufferNumber;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2261  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2262  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2263  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2264  IFX_INLINE void IfxCan_Node_setRxFifo1DataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2265  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2266      node->RX.ESC.B.F1DS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2267  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2268  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2269  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2270  IFX_INLINE void IfxCan_Node_setRxFifo1OperatingMode(Ifx_CAN_N *node, IfxCan_RxFifoMode mode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2271  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2272      node->RX.F1C.B.F1OM = mode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2273  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2274  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2275  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2276  IFX_INLINE void IfxCan_Node_setRxFifo1Size(Ifx_CAN_N *node, uint8 size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2277  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2278      node->RX.F1C.B.F1S = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2279  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2280  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2281  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2282  IFX_INLINE void IfxCan_Node_setRxFifo1StartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2283  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2284      node->RX.F1C.B.F1SA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2285  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2286  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2287  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2288  IFX_INLINE void IfxCan_Node_setRxFifo1WatermarkLevel(Ifx_CAN_N *node, uint8 level)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2289  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2290      node->RX.F1C.B.F1WM = level;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2291  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2292  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2293  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2294  IFX_INLINE void IfxCan_Node_setStandardFilterConfiguration(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_FilterElementConfiguration filterElementConfiguration)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2295  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2296      standardFilterElement->S0.B.SFEC = filterElementConfiguration;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2297  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2298  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2299  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2300  IFX_INLINE void IfxCan_Node_setStandardFilterId1(Ifx_CAN_STDMSG *standardFilterElement, uint32 id)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2301  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2302      standardFilterElement->S0.B.SFID1 = id;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2303  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2304  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2305  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2306  IFX_INLINE void IfxCan_Node_setStandardFilterId2(Ifx_CAN_STDMSG *standardFilterElement, uint32 id)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2307  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2308      standardFilterElement->S0.B.SFID2 = id;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2309  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2310  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2311  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2312  IFX_INLINE void IfxCan_Node_setStandardFilterListSize(Ifx_CAN_N *node, uint8 size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2313  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2314      node->SIDFC.B.LSS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2315  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2316  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2317  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2318  IFX_INLINE void IfxCan_Node_setStandardFilterListStartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2319  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2320      node->SIDFC.B.FLSSA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2321  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2322  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2323  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2324  IFX_INLINE void IfxCan_Node_setStandardFilterRxBufferOffset(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_RxBufferId rxBufferNumber)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2325  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2326      standardFilterElement->S0.B.SFID2 = (uint8)rxBufferNumber;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2327  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2328  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2329  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2330  IFX_INLINE void IfxCan_Node_setStandardFilterType(Ifx_CAN_STDMSG *standardFilterElement, IfxCan_FilterType filterType)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2331  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2332      standardFilterElement->S0.B.SFT = filterType;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2333  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2334  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2335  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2336  IFX_INLINE void IfxCan_Node_setTransceiverDelayCompensationOffset(Ifx_CAN_N *node, uint8 delay)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2337  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2338      /* enable Transceiver Delay Compensation */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2339      node->DBTP.B.TDC  = 1;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2340      /* set Transceiver Delay Compensation offset */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2341      node->TDCR.B.TDCO = delay;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2342  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2343  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2344  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2345  IFX_INLINE void IfxCan_Node_setTransmitFifoQueueMode(Ifx_CAN_N *node, IfxCan_TxMode mode)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2346  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2347      if ((mode == IfxCan_TxMode_fifo) || (mode == IfxCan_TxMode_queue))
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2348      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2349          node->TX.BC.B.TFQM = mode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2350      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2351      else
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2352      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2353          IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE); /* wrong selection  */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2354      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2355  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2356  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2357  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2358  IFX_INLINE void IfxCan_Node_setTransmitFifoQueueSize(Ifx_CAN_N *node, uint8 number)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2359  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2360      node->TX.BC.B.TFQS = number;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2361  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2362  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2363  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2364  IFX_INLINE void IfxCan_Node_setTxBufferAddRequest(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2365  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2366      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2367      node->TX.BAR.U = node->TX.BAR.U | (mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2368  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2369  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2370  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2371  IFX_INLINE void IfxCan_Node_setTxBufferCancellationRequest(Ifx_CAN_N *node, IfxCan_TxBufferId txBufferId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2372  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2373      uint32 mask = (1U << txBufferId);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2374      node->TX.BCR.U = node->TX.BCR.U | (mask);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2375  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2376  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2377  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2378  IFX_INLINE void IfxCan_Node_setTxBufferDataFieldSize(Ifx_CAN_N *node, IfxCan_DataFieldSize size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2379  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2380      node->TX.ESC.B.TBDS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2381  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2382  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2383  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2384  IFX_INLINE void IfxCan_Node_setTxBuffersStartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2385  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2386      node->TX.BC.B.TBSA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2387  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2388  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2389  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2390  IFX_INLINE void IfxCan_Node_setTxEventFifoCtrl(Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2391  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2392      txBufferElement->T1.B.EFC = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2393  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2394  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2395  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2396  IFX_INLINE void IfxCan_Node_setTxEventFifoControl(Ifx_CAN_N *node, Ifx_CAN_TXMSG *txBufferElement, boolean enable)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2397  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2398      IFX_UNUSED_PARAMETER(node);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2399      txBufferElement->T1.B.EFC = enable ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2400  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2401  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2402  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2403  IFX_INLINE void IfxCan_Node_setTxEventFifoSize(Ifx_CAN_N *node, uint8 size)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2404  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2405      node->TX.EFC.B.EFS = size;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2406  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2407  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2408  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2409  IFX_INLINE void IfxCan_Node_setTxEventFifoStartAddress(Ifx_CAN_N *node, uint16 address)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2410  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2411      node->TX.EFC.B.EFSA = address >> 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2412  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2413  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2414  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2415  IFX_INLINE void IfxCan_Node_setTxEventFifoWatermarkLevel(Ifx_CAN_N *node, uint8 level)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2416  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2417      node->TX.EFC.B.EFWM = level;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2418  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2419  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2420  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2421  IFX_INLINE Ifx_CAN_N *IfxCan_getNodePointer(Ifx_CAN *can, IfxCan_NodeId nodeId)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2422  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2423      return &(can->N[nodeId]);
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2424  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2425  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2426  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2427  IFX_INLINE boolean IfxCan_isModuleEnabled(Ifx_CAN *can)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2428  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.h	  2429      return can->CLC.B.DISS == 0;
	ld.bu	d0,[a15]
.L782:
	jnz.t	d0:1,.L148
.L1272:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   916      {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   917  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   918      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d15
.L933:
	j	IfxScuWdt_setCpuEndinit
.L779:
	
__IfxCan_enableModule_function_end:
	.size	IfxCan_enableModule,__IfxCan_enableModule_function_end-IfxCan_enableModule
.L436:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_getAddress',code,cluster('IfxCan_getAddress')
	.sect	'.text.IfxCan.IfxCan_getAddress'
	.align	2
	
	.global	IfxCan_getAddress

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   919  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   920  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   921  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   922  Ifx_CAN *IfxCan_getAddress(IfxCan_Index can)
; Function IfxCan_getAddress
.L258:
IfxCan_getAddress:	.type	func

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   923  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   924      Ifx_CAN *module;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   925  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   926      if (can < IFXCAN_NUM_MODULES)
	jge	d4,#3,.L149
.L1277:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   927      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   928          module = (Ifx_CAN *)IfxCan_cfg_indexMap[can].module;
	movh.a	a15,#@his(IfxCan_cfg_indexMap)
	lea	a15,[a15]@los(IfxCan_cfg_indexMap)
.L1278:
	addsc.a	a15,a15,d4,#3
.L1279:
	ld.a	a2,[a15]
.L934:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   929      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   930      else
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   931      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   932          module = NULL_PTR;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   933      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   934  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   935      return module;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   936  }
	ret
.L149:
	mov.a	a2,#0
.L935:
	ret
.L784:
	
__IfxCan_getAddress_function_end:
	.size	IfxCan_getAddress,__IfxCan_getAddress_function_end-IfxCan_getAddress
.L441:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_getIndex',code,cluster('IfxCan_getIndex')
	.sect	'.text.IfxCan.IfxCan_getIndex'
	.align	2
	
	.global	IfxCan_getIndex

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   937  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   938  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   939  IfxCan_Index IfxCan_getIndex(Ifx_CAN *can)
; Function IfxCan_getIndex
.L260:
IfxCan_getIndex:	.type	func

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   940  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   941      uint32       index;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   942      IfxCan_Index result;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   943  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   944      result = IfxCan_Index_none;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   945  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   946      for (index = 0; index < IFXCAN_NUM_MODULES; index++)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   947      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   948          if (IfxCan_cfg_indexMap[index].module == can)
	mov	d2,#-1
	movh.a	a15,#@his(IfxCan_cfg_indexMap)
.L936:
	lea	a15,[a15]@los(IfxCan_cfg_indexMap)
.L1284:
	mov.a	a2,#2
.L152:
	ld.a	a5,[a15]
.L1285:
	jne.a	a5,a4,.L153
.L1286:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   949          {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   950              result = (IfxCan_Index)IfxCan_cfg_indexMap[index].index;
	ld.w	d15,[a15]4
.L1287:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   951              break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   952          }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   953      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   954  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   955      return result;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   956  }
	extr	d2,d15,#0,#8
	ret
.L153:
	lea	a15,[a15]8
	loop	a2,.L152
.L1288:
	ret
.L788:
	
__IfxCan_getIndex_function_end:
	.size	IfxCan_getIndex,__IfxCan_getIndex_function_end-IfxCan_getIndex
.L446:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_getModuleFrequency',code,cluster('IfxCan_getModuleFrequency')
	.sect	'.text.IfxCan.IfxCan_getModuleFrequency'
	.align	2
	
	.global	IfxCan_getModuleFrequency

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   957  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   958  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   959  float32 IfxCan_getModuleFrequency(void)
; Function IfxCan_getModuleFrequency
.L262:
IfxCan_getModuleFrequency:	.type	func

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   960  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   961      float32 moduleFreq = 0;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   962  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   963      moduleFreq = IfxScuCcu_getMcanFrequency();
	j	IfxScuCcu_getMcanFrequency
.L792:
	
__IfxCan_getModuleFrequency_function_end:
	.size	IfxCan_getModuleFrequency,__IfxCan_getModuleFrequency_function_end-IfxCan_getModuleFrequency
.L451:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_getSrcPointer',code,cluster('IfxCan_getSrcPointer')
	.sect	'.text.IfxCan.IfxCan_getSrcPointer'
	.align	2
	
	.global	IfxCan_getSrcPointer

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   964  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   965      return moduleFreq;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   966  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   967  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   968  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   969  volatile Ifx_SRC_SRCR *IfxCan_getSrcPointer(Ifx_CAN *can, IfxCan_InterruptLine interruptLine)
; Function IfxCan_getSrcPointer
.L264:
IfxCan_getSrcPointer:	.type	func
	sub.a	a10,#16
.L937:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   970  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   971      IfxCan_Index           canIndex                              = IfxCan_getIndex(can);
	mov	d15,d4
	call	IfxCan_getIndex
.L938:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   972      Ifx_SRC_CAN_CAN *const srcCanBaseAddress[IFXCAN_NUM_MODULES] = {
	movh.a	a15,#@his(.2.ini)
	lea	a15,[a15]@los(.2.ini)
.L1340:
	mov.aa	a2,a10
	mov.a	a4,#2
.L157:
	ld.w	d0,[a15+]
	st.w	[a2+],d0
	loop	a4,.L157
.L1341:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   973          &MODULE_SRC.CAN.CAN[0],
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   974          &MODULE_SRC.CAN.CAN[1],
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   975          &MODULE_SRC.CAN.CAN[2],
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   976      };
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   977      return &(srcCanBaseAddress[canIndex]->INT[interruptLine]);
	addsc.a	a15,a10,d2,#2
	ld.a	a15,[a15]
.L1342:
	addsc.a	a2,a15,d15,#2
.L1343:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   978  }
	ret
.L815:
	
__IfxCan_getSrcPointer_function_end:
	.size	IfxCan_getSrcPointer,__IfxCan_getSrcPointer_function_end-IfxCan_getSrcPointer
.L476:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_resetModule',code,cluster('IfxCan_resetModule')
	.sect	'.text.IfxCan.IfxCan_resetModule'
	.align	2
	
	.global	IfxCan_resetModule

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   979  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   980  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   981  void IfxCan_resetModule(Ifx_CAN *can)
; Function IfxCan_resetModule
.L266:
IfxCan_resetModule:	.type	func
	mov.aa	a15,a4
.L940:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   982  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   983      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L939:
	mov	d8,d2
.L942:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   984  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   985      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L941:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   986      can->KRST0.B.RST = 1;           /* Only if both Kernel reset bits are set a reset is executed */
	fcall	.cocofun_15
.L943:
	lea	a3,[a3]-32524
	ld.bu	d15,[a3]
.L1297:
	or	d15,#1
	fcall	.cocofun_15
	lea	a3,[a3]-32524
	st.b	[a3],d15
.L1298:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   987      can->KRST1.B.RST = 1;
	fcall	.cocofun_15
	lea	a3,[a3]-32528
	ld.bu	d15,[a3]
.L1299:
	or	d15,#1
	fcall	.cocofun_15
	lea	a3,[a3]-32528
	st.b	[a3],d15
.L1300:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   988      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d8
	call	IfxScuWdt_setCpuEndinit
.L944:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   989  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   990      while (0 == can->KRST0.B.RSTSTAT)   /* Wait until reset is executed */
	fcall	.cocofun_15
.L945:
	lea	a2,[a3]-32524
.L159:
	ld.bu	d15,[a2]
.L1301:
	jz.t	d15:1,.L159
.L1302:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   991  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   992      {}
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   993  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   994      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L946:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   995      can->KRSTCLR.B.CLR = 1;         /* Clear Kernel reset status bit */
	fcall	.cocofun_15
.L947:
	lea	a3,[a3]-32532
	ld.bu	d15,[a3]
.L1303:
	or	d15,#1
	fcall	.cocofun_15
.L1304:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   996      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d8
	lea	a3,[a3]-32532
.L948:
	st.b	[a3],d15
.L1305:
	j	IfxScuWdt_setCpuEndinit
.L794:
	
__IfxCan_resetModule_function_end:
	.size	IfxCan_resetModule,__IfxCan_resetModule_function_end-IfxCan_resetModule
.L456:
	; End of function
	
	.sdecl	'.text.IfxCan.IfxCan_setClockSource',code,cluster('IfxCan_setClockSource')
	.sect	'.text.IfxCan.IfxCan_setClockSource'
	.align	2
	
	.global	IfxCan_setClockSource

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   997  }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   998  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	   999  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1000  void IfxCan_setClockSource(Ifx_CAN *can, IfxCan_ClockSelect clockSelect, IfxCan_ClockSource clockSource)
; Function IfxCan_setClockSource
.L268:
IfxCan_setClockSource:	.type	func

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1001  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1002      Ifx_CAN_MCR mcr;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1003  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1004      /* enable CCCE and CI */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1005      mcr.U      = can->MCR.U;
	movh.a	a3,#1
	add.a	a3,a4
	lea	a3,[a3]-32720
	ld.w	d0,[a3]
.L949:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1006      mcr.B.CCCE = 1;
	extr.u	d15,d0,#24,#8
.L1310:
	or	d15,#128
.L1311:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1007      mcr.B.CI   = 1;
	or	d15,#64
	fcall	.cocofun_13
.L1312:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1008      can->MCR.U = mcr.U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1009  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1010      /* select clock */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1011      switch (clockSelect)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1012      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1013      case IfxCan_ClockSelect_0:
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1014          mcr.B.CLKSEL0 = clockSource;
	extr.u	d15,d0,#0,#8
.L1313:
	jeq	d4,#0,.L160
.L1314:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1015          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1016      case IfxCan_ClockSelect_1:
	jeq	d4,#1,.L161
.L1315:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1017          mcr.B.CLKSEL1 = clockSource;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1018          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1019      case IfxCan_ClockSelect_2:
	jeq	d4,#2,.L162
.L1316:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1020          mcr.B.CLKSEL2 = clockSource;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1021          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1022      case IfxCan_ClockSelect_3:
	jeq	d4,#3,.L163
.L1317:
	j	.L164
.L160:
	insert	d15,d15,d5,#0,#2
	j	.L165
.L161:
	insert	d15,d15,d5,#2,#2
	j	.L166
.L162:
	insert	d15,d15,d5,#4,#2
	j	.L167
.L163:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1023          mcr.B.CLKSEL3 = clockSource;
	insert	d15,d15,d5,#6,#2

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1024          break;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1025      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1026  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1027      can->MCR.U = mcr.U;
.L167:
.L166:
.L165:
.L164:
	insert	d0,d0,d15,#0,#8
	movh.a	a3,#1
	add.a	a3,a4
	lea	a3,[a3]-32720
.L1318:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1028  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1029      /* disable CCCE and CI */
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1030      mcr.B.CCCE = 0;
	extr.u	d15,d0,#24,#8
	st.w	[a3],d0
.L1319:
	insert	d15,d15,#0,#7,#1
.L1320:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1031      mcr.B.CI   = 0;
	insert	d15,d15,#0,#6,#1
	fcall	.cocofun_13
.L1321:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1032      can->MCR.U = mcr.U;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1033  }
	ret
.L797:
	
__IfxCan_setClockSource_function_end:
	.size	IfxCan_setClockSource,__IfxCan_setClockSource_function_end-IfxCan_setClockSource
.L461:
	; End of function
	
	.sdecl	'.text.IfxCan..cocofun_13',code,cluster('.cocofun_13')
	.sect	'.text.IfxCan..cocofun_13'
	.align	2
; Function .cocofun_13
.L270:
.cocofun_13:	.type	func
; Function body .cocofun_13, coco_iter:0
	insert	d0,d0,d15,#24,#8
	movh.a	a3,#1
	add.a	a3,a4
	st.w	[a3]-32720,d0
.L1387:
	fret
.L516:
	; End of function
	.sdecl	'.text.IfxCan.IfxCan_Node_getDataLengthInBytes',code,cluster('IfxCan_Node_getDataLengthInBytes')
	.sect	'.text.IfxCan.IfxCan_Node_getDataLengthInBytes'
	.align	2
	
	.global	IfxCan_Node_getDataLengthInBytes

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1034  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1035  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1036  uint32 IfxCan_Node_getDataLengthInBytes(IfxCan_DataLengthCode dataLengthCode)
; Function IfxCan_Node_getDataLengthInBytes
.L272:
IfxCan_Node_getDataLengthInBytes:	.type	func

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1037  {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1038      uint32 numBytes;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1039  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1040      if (dataLengthCode <= IfxCan_DataLengthCode_8)
	fcall	.cocofun_7
.L950:

; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1041      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1042          numBytes = (uint32)dataLengthCode;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1043      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1044      else if (dataLengthCode <= IfxCan_DataLengthCode_24)
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1045      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1046          numBytes = ((uint32)dataLengthCode - 6) << 2;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1047      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1048      else
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1049      {
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1050          numBytes = ((uint32)dataLengthCode - 11) << 4;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1051      }
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1052  
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1053      return numBytes;
; ..\0_Src\4_McHal\Tricore\Can\Std\IfxCan.c	  1054  }
	mov	d2,d4
	ret
.L666:
	
__IfxCan_Node_getDataLengthInBytes_function_end:
	.size	IfxCan_Node_getDataLengthInBytes,__IfxCan_Node_getDataLengthInBytes_function_end-IfxCan_Node_getDataLengthInBytes
.L341:
	; End of function
	
	.sdecl	'.rodata.IfxCan..2.ini',data,rom
	.sect	'.rodata.IfxCan..2.ini'
	.align	4
.2.ini:	.type	object
	.size	.2.ini,12
	.word	-268204624,-268204560,-268204496
	.calls	'IfxCan_Node_getRxBufferElementAddress','IfxCan_Node_getRxBufferDataFieldSize'
	.calls	'IfxCan_Node_getRxFifo0ElementAddress','IfxCan_Node_getRxFifo0DataFieldSize'
	.calls	'IfxCan_Node_getRxFifo1ElementAddress','IfxCan_Node_getRxFifo1DataFieldSize'
	.calls	'IfxCan_Node_getTxBufferElementAddress','IfxCan_Node_getTxBufferDataFieldSize'
	.calls	'IfxCan_Node_initRxPin','IfxPort_setPinMode'
	.calls	'IfxCan_Node_initRxPin','IfxPort_setPinPadDriver'
	.calls	'IfxCan_Node_initTxPin','IfxPort_setPinMode'
	.calls	'IfxCan_Node_initTxPin','IfxPort_setPinPadDriver'
	.calls	'IfxCan_Node_readData','IfxCan_Node_getDataLength'
	.calls	'IfxCan_Node_writeTxBufData','IfxCan_Node_getDataLength'
	.calls	'IfxCan_Node_writeData','IfxCan_Node_getDataLength'
	.calls	'IfxCan_disableModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxCan_disableModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxCan_disableModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxCan_enableModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxCan_enableModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxCan_enableModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxCan_getModuleFrequency','IfxScuCcu_getMcanFrequency'
	.calls	'IfxCan_getSrcPointer','IfxCan_getIndex'
	.calls	'IfxCan_resetModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxCan_resetModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxCan_resetModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxCan_Node_getDataLength','.cocofun_7'
	.calls	'IfxCan_Node_getRxBufferElementAddress','.cocofun_6'
	.calls	'IfxCan_Node_getRxFifo0ElementAddress','.cocofun_6'
	.calls	'IfxCan_Node_getRxFifo1ElementAddress','.cocofun_6'
	.calls	'IfxCan_Node_getTxBufferElementAddress','.cocofun_6'
	.calls	'IfxCan_Node_setBitTiming','.cocofun_9'
	.calls	'IfxCan_Node_setBitTiming','.cocofun_12'
	.calls	'IfxCan_Node_setBitTiming','.cocofun_14'
	.calls	'IfxCan_Node_setBitTiming','.cocofun_11'
	.calls	'IfxCan_Node_setFastBitTiming','.cocofun_9'
	.calls	'IfxCan_Node_setFastBitTiming','.cocofun_12'
	.calls	'IfxCan_Node_setFastBitTiming','.cocofun_14'
	.calls	'IfxCan_Node_setFastBitTiming','.cocofun_11'
	.calls	'IfxCan_Node_writeTxBufData','.cocofun_10'
	.calls	'IfxCan_Node_writeData','.cocofun_10'
	.calls	'IfxCan_disableModule','.cocofun_8'
	.calls	'IfxCan_disableModule','.cocofun_15'
	.calls	'.cocofun_8','.cocofun_15'
	.calls	'IfxCan_enableModule','.cocofun_8'
	.calls	'IfxCan_enableModule','.cocofun_15'
	.calls	'IfxCan_resetModule','.cocofun_15'
	.calls	'IfxCan_setClockSource','.cocofun_13'
	.calls	'IfxCan_Node_getDataLengthInBytes','.cocofun_7'
	.calls	'IfxCan_Node_clearRxBufferNewDataFlag','',0
	.calls	'IfxCan_Node_getDataLength','',0
	.calls	'.cocofun_7','',0
	.calls	'IfxCan_Node_getDataLengthFromCode','',0
	.calls	'IfxCan_Node_getExtendedFilterElementAddress','',0
	.calls	'IfxCan_Node_getFrameMode','',0
	.calls	'IfxCan_Node_getFrameModeFromTxEventFifo','',0
	.calls	'IfxCan_Node_getRxBufferDataFieldSize','',0
	.calls	'IfxCan_Node_getRxBufferElementAddress','',0
	.calls	'.cocofun_6','',0
	.calls	'IfxCan_Node_getRxFifo0DataFieldSize','',0
	.calls	'IfxCan_Node_getRxFifo0ElementAddress','',0
	.calls	'IfxCan_Node_getRxFifo1DataFieldSize','',0
	.calls	'IfxCan_Node_getRxFifo1ElementAddress','',0
	.calls	'IfxCan_Node_getStandardFilterElementAddress','',0
	.calls	'IfxCan_Node_getTxBufferDataFieldSize','',0
	.calls	'IfxCan_Node_getTxBufferElementAddress','',0
	.calls	'IfxCan_Node_getTxEventFifoElementAddress','',0
	.calls	'IfxCan_Node_initRxPin','',0
	.calls	'IfxCan_Node_initTxPin','',0
	.calls	'IfxCan_Node_isRxBufferNewDataUpdated','',0
	.calls	'IfxCan_Node_readData','',0
	.calls	'IfxCan_Node_setBitTiming','',0
	.calls	'.cocofun_14','',0
	.calls	'.cocofun_12','',0
	.calls	'.cocofun_11','',0
	.calls	'.cocofun_9','',0
	.calls	'IfxCan_Node_setBitTimingValues','',0
	.calls	'IfxCan_Node_setFastBitTiming','',0
	.calls	'IfxCan_Node_setFastBitTimingValues','',0
	.calls	'IfxCan_Node_setFrameMode','',0
	.calls	'IfxCan_Node_setFrameModeReq','',0
	.calls	'IfxCan_Node_setFrameModeRequest','',0
	.calls	'IfxCan_Node_setGroupInterruptLine','',0
	.calls	'IfxCan_Node_setInterruptLine','',0
	.calls	'IfxCan_Node_writeTxBufData','',0
	.calls	'.cocofun_10','',0
	.calls	'IfxCan_Node_writeData','',0
	.calls	'IfxCan_disableModule','',0
	.calls	'.cocofun_15','',0
	.calls	'.cocofun_8','',0
	.calls	'IfxCan_enableModule','',0
	.calls	'IfxCan_getAddress','',0
	.calls	'IfxCan_getIndex','',0
	.calls	'IfxCan_getModuleFrequency','',0
	.calls	'IfxCan_getSrcPointer','',16
	.calls	'IfxCan_resetModule','',0
	.calls	'IfxCan_setClockSource','',0
	.calls	'.cocofun_13','',0
	.extern	IfxCan_cfg_indexMap
	.extern	IfxScuWdt_clearCpuEndinit
	.extern	IfxScuWdt_setCpuEndinit
	.extern	IfxScuWdt_getCpuWatchdogPassword
	.extern	IfxPort_setPinMode
	.extern	IfxPort_setPinPadDriver
	.extern	IfxScuCcu_getMcanFrequency
	.calls	'IfxCan_Node_getDataLengthInBytes','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L274:
	.word	136988
	.half	3
	.word	.L275
	.byte	4
.L273:
	.byte	1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L276
	.byte	2,1,1,3
	.word	164
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,58,17,1,1,5
	.byte	'fun',0,1,58,43
	.word	167
	.byte	6,0,7
	.byte	'__fract',0,4,128,1
.L582:
	.byte	7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,149,2,18
	.word	212
	.byte	1,1,5
	.byte	'a',0,1,149,2,44
	.word	224
	.byte	6,0,4
	.byte	'Ifx__stopPerfCounters',0,3,1,169,2,17,1,1,6,0,7
	.byte	'unsigned long long int',0,8,7,9
	.byte	'void',0,3
	.word	336
	.byte	8
	.byte	'__ld64',0,3,2,132,1,19
	.word	310
	.byte	1,1,5
	.byte	'addr',0,2,132,1,32
	.word	342
	.byte	6,0,4
	.byte	'__st64',0,3,2,140,1,17,1,1,5
	.byte	'addr',0,2,140,1,30
	.word	342
	.byte	5
	.byte	'value',0,2,140,1,43
	.word	310
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,7
	.byte	'int',0,4,5,7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,4,238,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	451
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	451
	.byte	16,0,2,35,0,0,12,4,189,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	467
	.byte	4,2,35,0,0
.L543:
	.byte	7
	.byte	'unsigned char',0,1,8
.L585:
	.byte	7
	.byte	'unsigned short int',0,2,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,4,247,9,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	603
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,4,197,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	642
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,4,135,10,16,4,11
	.byte	'AE',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	603
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,4,205,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	908
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU',0,4,136,17,25,12,13
	.byte	'CON0',0
	.word	563
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	868
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	1099
	.byte	4,2,35,8,0,14
	.word	1139
	.byte	3
	.word	1202
	.byte	4
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,3,164,4,17,1,1,5
	.byte	'watchdog',0,3,164,4,65
	.word	1207
	.byte	5
	.byte	'password',0,3,164,4,82
	.word	620
	.byte	6,0,4
	.byte	'IfxScuWdt_clearSafetyEndinitInline',0,3,3,197,4,17,1,1,5
	.byte	'password',0,3,197,4,59
	.word	620
	.byte	6,0,4
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,3,144,5,17,1,1,5
	.byte	'watchdog',0,3,144,5,63
	.word	1207
	.byte	5
	.byte	'password',0,3,144,5,80
	.word	620
	.byte	6,0,4
	.byte	'IfxScuWdt_setSafetyEndinitInline',0,3,3,177,5,17,1,1,5
	.byte	'password',0,3,177,5,57
	.word	620
	.byte	6,0,8
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,3,220,4,19
	.word	620
	.byte	1,1,5
	.byte	'watchdog',0,3,220,4,74
	.word	1207
	.byte	6,0,8
	.byte	'IfxScuWdt_getSafetyWatchdogPasswordInline',0,3,3,129,5,19
	.word	620
	.byte	1,1,6,0,10
	.byte	'_Ifx_P_OUT_Bits',0,6,145,3,16,4,11
	.byte	'P0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,6,171,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1617
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMR_Bits',0,6,171,2,16,4,11
	.byte	'PS0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'PCL0',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,6,251,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1933
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ID_Bits',0,6,133,1,16,4,11
	.byte	'MODREV',0,1
	.word	603
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	603
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,6,155,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2504
	.byte	4,2,35,0,0,15,4
	.word	603
	.byte	16,3,0,10
	.byte	'_Ifx_P_IOCR0_Bits',0,6,163,1,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	3,5,2,35,0,11
	.byte	'PC0',0,1
	.word	603
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	603
	.byte	3,5,2,35,1,11
	.byte	'PC1',0,1
	.word	603
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	603
	.byte	3,5,2,35,2,11
	.byte	'PC2',0,1
	.word	603
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	603
	.byte	3,5,2,35,3,11
	.byte	'PC3',0,1
	.word	603
	.byte	5,0,2,35,3,0,12,6,171,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2633
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR4_Bits',0,6,189,1,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	3,5,2,35,0,11
	.byte	'PC4',0,1
	.word	603
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	603
	.byte	3,5,2,35,1,11
	.byte	'PC5',0,1
	.word	603
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	603
	.byte	3,5,2,35,2,11
	.byte	'PC6',0,1
	.word	603
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	603
	.byte	3,5,2,35,3,11
	.byte	'PC7',0,1
	.word	603
	.byte	5,0,2,35,3,0,12,6,187,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2848
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR8_Bits',0,6,202,1,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	3,5,2,35,0,11
	.byte	'PC8',0,1
	.word	603
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	603
	.byte	3,5,2,35,1,11
	.byte	'PC9',0,1
	.word	603
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	603
	.byte	3,5,2,35,2,11
	.byte	'PC10',0,1
	.word	603
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	603
	.byte	3,5,2,35,3,11
	.byte	'PC11',0,1
	.word	603
	.byte	5,0,2,35,3,0,12,6,195,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3063
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR12_Bits',0,6,176,1,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	3,5,2,35,0,11
	.byte	'PC12',0,1
	.word	603
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	603
	.byte	3,5,2,35,1,11
	.byte	'PC13',0,1
	.word	603
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	603
	.byte	3,5,2,35,2,11
	.byte	'PC14',0,1
	.word	603
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	603
	.byte	3,5,2,35,3,11
	.byte	'PC15',0,1
	.word	603
	.byte	5,0,2,35,3,0,12,6,179,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3280
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IN_Bits',0,6,141,1,16,4,11
	.byte	'P0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,6,163,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3500
	.byte	4,2,35,0,0,15,24
	.word	603
	.byte	16,23,0,10
	.byte	'_Ifx_P_PDR0_Bits',0,6,212,3,16,4,11
	.byte	'PD0',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	603
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	603
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	603
	.byte	2,0,2,35,0,11
	.byte	'PD2',0,1
	.word	603
	.byte	2,6,2,35,1,11
	.byte	'PL2',0,1
	.word	603
	.byte	2,4,2,35,1,11
	.byte	'PD3',0,1
	.word	603
	.byte	2,2,2,35,1,11
	.byte	'PL3',0,1
	.word	603
	.byte	2,0,2,35,1,11
	.byte	'PD4',0,1
	.word	603
	.byte	2,6,2,35,2,11
	.byte	'PL4',0,1
	.word	603
	.byte	2,4,2,35,2,11
	.byte	'PD5',0,1
	.word	603
	.byte	2,2,2,35,2,11
	.byte	'PL5',0,1
	.word	603
	.byte	2,0,2,35,2,11
	.byte	'PD6',0,1
	.word	603
	.byte	2,6,2,35,3,11
	.byte	'PL6',0,1
	.word	603
	.byte	2,4,2,35,3,11
	.byte	'PD7',0,1
	.word	603
	.byte	2,2,2,35,3,11
	.byte	'PL7',0,1
	.word	603
	.byte	2,0,2,35,3,0,12,6,195,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3824
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDR1_Bits',0,6,233,3,16,4,11
	.byte	'PD8',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'PL8',0,1
	.word	603
	.byte	2,4,2,35,0,11
	.byte	'PD9',0,1
	.word	603
	.byte	2,2,2,35,0,11
	.byte	'PL9',0,1
	.word	603
	.byte	2,0,2,35,0,11
	.byte	'PD10',0,1
	.word	603
	.byte	2,6,2,35,1,11
	.byte	'PL10',0,1
	.word	603
	.byte	2,4,2,35,1,11
	.byte	'PD11',0,1
	.word	603
	.byte	2,2,2,35,1,11
	.byte	'PL11',0,1
	.word	603
	.byte	2,0,2,35,1,11
	.byte	'PD12',0,1
	.word	603
	.byte	2,6,2,35,2,11
	.byte	'PL12',0,1
	.word	603
	.byte	2,4,2,35,2,11
	.byte	'PD13',0,1
	.word	603
	.byte	2,2,2,35,2,11
	.byte	'PL13',0,1
	.word	603
	.byte	2,0,2,35,2,11
	.byte	'PD14',0,1
	.word	603
	.byte	2,6,2,35,3,11
	.byte	'PL14',0,1
	.word	603
	.byte	2,4,2,35,3,11
	.byte	'PD15',0,1
	.word	603
	.byte	2,2,2,35,3,11
	.byte	'PL15',0,1
	.word	603
	.byte	2,0,2,35,3,0,12,6,203,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4128
	.byte	4,2,35,0,0,15,8
	.word	603
	.byte	16,7,0,10
	.byte	'_Ifx_P_ESR_Bits',0,6,111,16,4,11
	.byte	'EN0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,6,147,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4453
	.byte	4,2,35,0,0,15,12
	.word	603
	.byte	16,11,0,10
	.byte	'_Ifx_P_PDISC_Bits',0,6,190,3,16,4,11
	.byte	'PDIS0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'PDIS2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'PDIS3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'PDIS4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'PDIS5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'PDIS6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'PDIS7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'PDIS8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'PDIS9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'PDIS10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'PDIS11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'PDIS12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'PDIS13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'PDIS14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'PDIS15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,6,187,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4793
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PCSR_Bits',0,6,167,3,16,4,11
	.byte	'SEL0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'SEL1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'SEL2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'SEL3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'SEL4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'SEL5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'SEL6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'SEL7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'SEL8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'SEL9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'SEL10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'SEL11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'SEL12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'SEL13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'SEL14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'SEL15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,6,179,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5159
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR0_Bits',0,6,230,2,16,4,11
	.byte	'PS0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	428
	.byte	28,0,2,35,0,0,12,6,139,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5523
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR4_Bits',0,6,251,2,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	4,4,2,35,0,11
	.byte	'PS4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	428
	.byte	24,0,2,35,0,0,12,6,155,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5670
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR8_Bits',0,6,134,3,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	8,0,2,35,0,11
	.byte	'PS8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	428
	.byte	20,0,2,35,0,0,12,6,163,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5839
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR12_Bits',0,6,240,2,16,4,11
	.byte	'reserved_0',0,2
	.word	620
	.byte	12,4,2,35,0,11
	.byte	'PS12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,6,147,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6011
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR0_Bits',0,6,128,2,16,4,11
	.byte	'reserved_0',0,2
	.word	620
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	620
	.byte	12,0,2,35,2,0,12,6,219,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6186
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR4_Bits',0,6,149,2,16,4,11
	.byte	'reserved_0',0,4
	.word	428
	.byte	20,12,2,35,0,11
	.byte	'PCL4',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	603
	.byte	8,0,2,35,3,0,12,6,235,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6360
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR8_Bits',0,6,160,2,16,4,11
	.byte	'reserved_0',0,4
	.word	428
	.byte	24,8,2,35,0,11
	.byte	'PCL8',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	603
	.byte	4,0,2,35,3,0,12,6,243,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6534
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR12_Bits',0,6,139,2,16,4,11
	.byte	'reserved_0',0,4
	.word	428
	.byte	28,4,2,35,0,11
	.byte	'PCL12',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,6,227,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6710
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR_Bits',0,6,208,2,16,4,11
	.byte	'PS0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,6,131,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6866
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR_Bits',0,6,234,1,16,4,11
	.byte	'reserved_0',0,2
	.word	620
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,6,211,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7199
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR_Bits',0,6,215,1,16,4,11
	.byte	'REN_CTRL',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'RX_EN',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'TERM',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'LRXTERM',0,1
	.word	603
	.byte	3,2,2,35,0,11
	.byte	'LVDSM',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'PS',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'TEN_CTRL',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'TX_EN',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'VDIFFADJ',0,1
	.word	603
	.byte	2,4,2,35,1,11
	.byte	'VOSDYN',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'VOSEXT',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'TX_PD',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'TX_PWDPD',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,6,203,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7547
	.byte	4,2,35,0,0,15,32
	.word	7827
	.byte	16,7,0,15,56
	.word	603
	.byte	16,55,0,10
	.byte	'_Ifx_P_ACCEN1_Bits',0,6,105,16,4,11
	.byte	'reserved_0',0,4
	.word	428
	.byte	32,0,2,35,0,0,12,6,139,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7885
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ACCEN0_Bits',0,6,68,16,4,11
	.byte	'EN0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,6,131,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7972
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P',0,6,220,5,25,128,2,13
	.byte	'OUT',0
	.word	1893
	.byte	4,2,35,0,13
	.byte	'OMR',0
	.word	2464
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	2584
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2624
	.byte	4,2,35,12,13
	.byte	'IOCR0',0
	.word	2808
	.byte	4,2,35,16,13
	.byte	'IOCR4',0
	.word	3023
	.byte	4,2,35,20,13
	.byte	'IOCR8',0
	.word	3240
	.byte	4,2,35,24,13
	.byte	'IOCR12',0
	.word	3460
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	2624
	.byte	4,2,35,32,13
	.byte	'IN',0
	.word	3775
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	3815
	.byte	24,2,35,40,13
	.byte	'PDR0',0
	.word	4088
	.byte	4,2,35,64,13
	.byte	'PDR1',0
	.word	4404
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	4444
	.byte	8,2,35,72,13
	.byte	'ESR',0
	.word	4744
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	4784
	.byte	12,2,35,84,13
	.byte	'PDISC',0
	.word	5119
	.byte	4,2,35,96,13
	.byte	'PCSR',0
	.word	5483
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	4444
	.byte	8,2,35,104,13
	.byte	'OMSR0',0
	.word	5630
	.byte	4,2,35,112,13
	.byte	'OMSR4',0
	.word	5799
	.byte	4,2,35,116,13
	.byte	'OMSR8',0
	.word	5971
	.byte	4,2,35,120,13
	.byte	'OMSR12',0
	.word	6146
	.byte	4,2,35,124,13
	.byte	'OMCR0',0
	.word	6320
	.byte	4,3,35,128,1,13
	.byte	'OMCR4',0
	.word	6494
	.byte	4,3,35,132,1,13
	.byte	'OMCR8',0
	.word	6670
	.byte	4,3,35,136,1,13
	.byte	'OMCR12',0
	.word	6826
	.byte	4,3,35,140,1,13
	.byte	'OMSR',0
	.word	7159
	.byte	4,3,35,144,1,13
	.byte	'OMCR',0
	.word	7507
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	4444
	.byte	8,3,35,152,1,13
	.byte	'LPCR',0
	.word	7867
	.byte	32,3,35,160,1,13
	.byte	'reserved_C0',0
	.word	7876
	.byte	56,3,35,192,1,13
	.byte	'ACCEN1',0
	.word	7932
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	8499
	.byte	4,3,35,252,1,0,14
	.word	8539
	.byte	3
	.word	9109
.L548:
	.byte	17,5,81,9,1,18
	.byte	'IfxPort_InputMode_undefined',0,127,18
	.byte	'IfxPort_InputMode_noPullDevice',0,0,18
	.byte	'IfxPort_InputMode_pullDown',0,8,18
	.byte	'IfxPort_InputMode_pullUp',0,16,0
.L552:
	.byte	4
	.byte	'IfxPort_setPinModeInput',0,3,5,157,5,17,1,1
.L555:
	.byte	5
	.byte	'port',0,5,157,5,48
	.word	9114
.L557:
	.byte	5
	.byte	'pinIndex',0,5,157,5,60
	.word	603
.L559:
	.byte	5
	.byte	'mode',0,5,157,5,88
	.word	9119
.L561:
	.byte	6,0
.L565:
	.byte	17,5,140,1,9,1,18
	.byte	'IfxPort_OutputMode_none',0,0,18
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,18
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,17,5,126,9,1,18
	.byte	'IfxPort_OutputIdx_general',0,128,1,18
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,18
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,18
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,18
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,18
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,18
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,18
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0
.L568:
	.byte	4
	.byte	'IfxPort_setPinModeOutput',0,3,5,163,5,17,1,1
.L571:
	.byte	5
	.byte	'port',0,5,163,5,49
	.word	9114
.L573:
	.byte	5
	.byte	'pinIndex',0,5,163,5,61
	.word	603
.L575:
	.byte	5
	.byte	'mode',0,5,163,5,90
	.word	9324
.L577:
	.byte	5
	.byte	'index',0,5,163,5,114
	.word	9420
.L579:
	.byte	6,0,17,5,187,1,9,4,18
	.byte	'IfxPort_State_notChanged',0,0,18
	.byte	'IfxPort_State_high',0,1,18
	.byte	'IfxPort_State_low',0,128,128,4,18
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,5,169,5,17,1,1,5
	.byte	'port',0,5,169,5,44
	.word	9114
	.byte	5
	.byte	'pinIndex',0,5,169,5,56
	.word	603
	.byte	5
	.byte	'action',0,5,169,5,80
	.word	9733
	.byte	6,0,17,8,161,1,9,1,18
	.byte	'IfxCpu_ResourceCpu_0',0,0,18
	.byte	'IfxCpu_ResourceCpu_1',0,1,18
	.byte	'IfxCpu_ResourceCpu_2',0,2,18
	.byte	'IfxCpu_ResourceCpu_3',0,3,18
	.byte	'IfxCpu_ResourceCpu_4',0,4,18
	.byte	'IfxCpu_ResourceCpu_5',0,5,18
	.byte	'IfxCpu_ResourceCpu_none',0,6,0,8
	.byte	'IfxCpu_getCoreIndex',0,3,7,235,6,31
	.word	9914
	.byte	1,1,6,0,8
	.byte	'IfxCpu_areInterruptsEnabled',0,3,7,233,5,20
	.word	603
	.byte	1,1,6,0
.L527:
	.byte	7
	.byte	'unsigned long int',0,4,7,8
	.byte	'IfxCpu_getPerformanceCounter',0,3,7,255,6,19
	.word	10161
	.byte	1,1,5
	.byte	'address',0,7,255,6,55
	.word	620
	.byte	6,0,8
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,7,156,7,20
	.word	603
	.byte	1,1,5
	.byte	'address',0,7,156,7,70
	.word	620
	.byte	6,0,4
	.byte	'IfxCpu_updatePerformanceCounter',0,3,7,138,9,17,1,1,5
	.byte	'address',0,7,138,9,56
	.word	10161
	.byte	5
	.byte	'count',0,7,138,9,72
	.word	10161
	.byte	19,6,0,0,4
	.byte	'IfxScuCcu_wait',0,3,9,157,14,17,1,1,5
	.byte	'timeSec',0,9,157,14,40
	.word	224
	.byte	19,6,0,0,8
	.byte	'IfxScuCcu_getStmFrequency',0,3,9,188,13,20
	.word	224
	.byte	1,1,6,0,10
	.byte	'_Ifx_SRC_SRCR_Bits',0,11,68,16,4,11
	.byte	'SRPN',0,1
	.word	603
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	603
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	603
	.byte	3,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	603
	.byte	2,0,2,35,1,11
	.byte	'ECC',0,1
	.word	603
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	603
	.byte	3,0,2,35,2,11
	.byte	'SRR',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,11,93,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10476
	.byte	4,2,35,0,0,14
	.word	10766
.L814:
	.byte	3
	.word	10805
	.byte	4
	.byte	'IfxSrc_clearRequest',0,3,10,247,1,17,1,1,5
	.byte	'src',0,10,247,1,60
	.word	10810
	.byte	6,0,15,128,128,2
	.word	428
	.byte	16,255,63,0,10
	.byte	'_Ifx_CAN_CLC_Bits',0,13,151,1,16,4,11
	.byte	'DISR',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	428
	.byte	28,0,2,35,0,0,12,13,233,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10870
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_ID_Bits',0,13,182,1,16,4,11
	.byte	'MOD_REV',0,1
	.word	603
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	603
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,13,137,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11027
	.byte	4,2,35,0,0,15,36
	.word	603
	.byte	16,35,0,10
	.byte	'_Ifx_CAN_MCR_Bits',0,13,212,1,16,4,11
	.byte	'CLKSEL0',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'CLKSEL1',0,1
	.word	603
	.byte	2,4,2,35,0,11
	.byte	'CLKSEL2',0,1
	.word	603
	.byte	2,2,2,35,0,11
	.byte	'CLKSEL3',0,1
	.word	603
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	428
	.byte	16,8,2,35,0,11
	.byte	'NODE',0,1
	.word	603
	.byte	3,5,2,35,3,11
	.byte	'DXCM',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'RBUSY',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'RINIT',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'CI',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'CCCE',0,1
	.word	603
	.byte	1,0,2,35,3,0
.L804:
	.byte	12,13,169,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11161
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_BUFADR_Bits',0,13,142,1,16,4,11
	.byte	'TXBUF',0,2
	.word	620
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	603
	.byte	2,0,2,35,1,11
	.byte	'RXBUF',0,2
	.word	620
	.byte	14,2,2,35,2,11
	.byte	'reserved_30',0,1
	.word	603
	.byte	2,0,2,35,3,0,12,13,225,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11420
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_MECR_Bits',0,13,228,1,16,4,11
	.byte	'TH',0,2
	.word	620
	.byte	16,0,2,35,0,11
	.byte	'INP',0,1
	.word	603
	.byte	4,4,2,35,2,11
	.byte	'NODE',0,1
	.word	603
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'ANYED',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'CAPEIE',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'DEPTH',0,1
	.word	603
	.byte	3,2,2,35,3,11
	.byte	'SOF',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,13,177,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11568
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_MESTAT_Bits',0,13,243,1,16,4,11
	.byte	'CAPT',0,2
	.word	620
	.byte	16,0,2,35,0,11
	.byte	'CAPRED',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'CAPE',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	620
	.byte	14,0,2,35,2,0,12,13,185,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11815
	.byte	4,2,35,0,0,15,148,1
	.word	603
	.byte	16,147,1,0,10
	.byte	'_Ifx_CAN_ACCENCTR0_Bits',0,13,105,16,4,11
	.byte	'EN0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,13,217,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11967
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_OCS_Bits',0,13,219,10,16,4,11
	.byte	'TGS',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'TGB',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'TG_P',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	428
	.byte	20,8,2,35,0,11
	.byte	'SUS',0,1
	.word	603
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	603
	.byte	2,0,2,35,3,0,12,13,137,17,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12539
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_KRSTCLR_Bits',0,13,205,1,16,4,11
	.byte	'CLR',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	428
	.byte	31,0,2,35,0,0,12,13,161,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12745
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_KRST1_Bits',0,13,198,1,16,4,11
	.byte	'RST',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	428
	.byte	31,0,2,35,0,0,12,13,153,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12851
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_KRST0_Bits',0,13,190,1,16,4,11
	.byte	'RST',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	428
	.byte	30,0,2,35,0,0,12,13,145,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12955
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_ACCEN0_Bits',0,13,68,16,4,11
	.byte	'EN0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,13,209,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13078
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_ACCENNODE0_Bits',0,13,252,1,16,4,11
	.byte	'EN0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,13,193,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13647
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_STARTADR_Bits',0,13,250,5,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'START',0,2
	.word	620
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,13,209,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14223
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_ENDADR_Bits',0,13,216,2,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'END',0,2
	.word	620
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,13,233,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14357
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_ISREG_Bits',0,13,220,3,16,4,11
	.byte	'REINT',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'RXF1F',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'RXF0F',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'RXF1N',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'RXF0N',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'RETI',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'TRAQ',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'TRACO',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'TEFIFO',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'HPE',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'WATI',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'ALRT',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'MOER',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'SAFE',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'BOFF',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'LOI',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,13,169,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14487
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_GRINT1_Bits',0,13,240,2,16,4,11
	.byte	'TEFIFO',0,1
	.word	603
	.byte	4,4,2,35,0,11
	.byte	'HPE',0,1
	.word	603
	.byte	4,0,2,35,0,11
	.byte	'WATI',0,1
	.word	603
	.byte	4,4,2,35,1,11
	.byte	'ALRT',0,1
	.word	603
	.byte	4,0,2,35,1,11
	.byte	'MOER',0,1
	.word	603
	.byte	4,4,2,35,2,11
	.byte	'SAFE',0,1
	.word	603
	.byte	4,0,2,35,2,11
	.byte	'BOFF',0,1
	.word	603
	.byte	4,4,2,35,3,11
	.byte	'LOI',0,1
	.word	603
	.byte	4,0,2,35,3,0,12,13,129,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14841
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_GRINT2_Bits',0,13,253,2,16,4,11
	.byte	'REINT',0,1
	.word	603
	.byte	4,4,2,35,0,11
	.byte	'RXF1F',0,1
	.word	603
	.byte	4,0,2,35,0,11
	.byte	'RXF0F',0,1
	.word	603
	.byte	4,4,2,35,1,11
	.byte	'RXF1N',0,1
	.word	603
	.byte	4,0,2,35,1,11
	.byte	'RXF0N',0,1
	.word	603
	.byte	4,4,2,35,2,11
	.byte	'RETI',0,1
	.word	603
	.byte	4,0,2,35,2,11
	.byte	'TRAQ',0,1
	.word	603
	.byte	4,4,2,35,3,11
	.byte	'TRACO',0,1
	.word	603
	.byte	4,0,2,35,3,0,12,13,137,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15039
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_NT_CCR_Bits',0,13,227,4,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	8,0,2,35,0,11
	.byte	'TPSC',0,1
	.word	603
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	603
	.byte	2,2,2,35,1,11
	.byte	'STRESET',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'STSTART',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	603
	.byte	2,6,2,35,2,11
	.byte	'TRIGSRC',0,1
	.word	603
	.byte	3,3,2,35,2,11
	.byte	'reserved_21',0,2
	.word	620
	.byte	11,0,2,35,2,0,12,13,225,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15243
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_NT_ATTR_Bits',0,13,209,4,16,4,11
	.byte	'RELOAD',0,2
	.word	620
	.byte	16,0,2,35,0,11
	.byte	'TXMO',0,1
	.word	603
	.byte	8,0,2,35,2,11
	.byte	'STRT',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	603
	.byte	7,0,2,35,3,0,12,13,209,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15477
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_NT_BTTR_Bits',0,13,218,4,16,4,11
	.byte	'RELOAD',0,2
	.word	620
	.byte	16,0,2,35,0,11
	.byte	'TXMO',0,1
	.word	603
	.byte	8,0,2,35,2,11
	.byte	'STRT',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	603
	.byte	7,0,2,35,3,0,12,13,217,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15621
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_NT_CTTR_Bits',0,13,240,4,16,4,11
	.byte	'RELOAD',0,2
	.word	620
	.byte	16,0,2,35,0,11
	.byte	'TXMO',0,1
	.word	603
	.byte	8,0,2,35,2,11
	.byte	'STRT',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	603
	.byte	7,0,2,35,3,0,12,13,233,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15765
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_NT_RTR_Bits',0,13,249,4,16,4,11
	.byte	'RELOAD',0,2
	.word	620
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,1
	.word	603
	.byte	6,2,2,35,2,11
	.byte	'TEIE',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'TE',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	603
	.byte	8,0,2,35,3,0,12,13,241,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15909
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_NT',0,13,234,17,25,20,13
	.byte	'CCR',0
	.word	15437
	.byte	4,2,35,0,13
	.byte	'ATTR',0
	.word	15581
	.byte	4,2,35,4,13
	.byte	'BTTR',0
	.word	15725
	.byte	4,2,35,8,13
	.byte	'CTTR',0
	.word	15869
	.byte	4,2,35,12,13
	.byte	'RTR',0
	.word	16033
	.byte	4,2,35,16,0,14
	.word	16073
	.byte	10
	.byte	'_Ifx_CAN_N_NPCR_Bits',0,13,198,4,16,4,11
	.byte	'RXSEL',0,1
	.word	603
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	603
	.byte	5,0,2,35,0,11
	.byte	'LBM',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'LOUT',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'DELE',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	428
	.byte	21,0,2,35,0,0,12,13,201,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16167
	.byte	4,2,35,0,0,15,172,1
	.word	603
	.byte	16,171,1,0,10
	.byte	'_Ifx_CAN_N_TTCR_Bits',0,13,184,6,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'ETESEL',0,1
	.word	603
	.byte	2,4,2,35,0,11
	.byte	'ETSSEL',0,1
	.word	603
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	620
	.byte	2,7,2,35,0,11
	.byte	'TTCTSS',0,1
	.word	603
	.byte	3,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	428
	.byte	20,0,2,35,0,0,12,13,137,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16355
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_CREL_Bits',0,13,182,2,16,4,11
	.byte	'DAY',0,1
	.word	603
	.byte	8,0,2,35,0,11
	.byte	'MON',0,1
	.word	603
	.byte	8,0,2,35,1,11
	.byte	'YEAR',0,1
	.word	603
	.byte	4,4,2,35,2,11
	.byte	'SUBSTEP',0,1
	.word	603
	.byte	4,0,2,35,2,11
	.byte	'STEP',0,1
	.word	603
	.byte	4,4,2,35,3,11
	.byte	'REL',0,1
	.word	603
	.byte	4,0,2,35,3,0,12,13,209,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16544
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_ENDN_Bits',0,13,224,2,16,4,11
	.byte	'ETV',0,4
	.word	428
	.byte	32,0,2,35,0,0,12,13,241,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16708
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_DBTP_Bits',0,13,193,2,16,4,11
	.byte	'DSJW',0,1
	.word	603
	.byte	4,4,2,35,0,11
	.byte	'DTSEG2',0,1
	.word	603
	.byte	4,0,2,35,0,11
	.byte	'DTSEG1',0,1
	.word	603
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	603
	.byte	3,0,2,35,1,11
	.byte	'DBRP',0,1
	.word	603
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	603
	.byte	2,1,2,35,2,11
	.byte	'TDC',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	603
	.byte	8,0,2,35,3,0
.L653:
	.byte	12,13,217,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16791
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TEST_Bits',0,13,139,6,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'LBCK',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'TX',0,1
	.word	603
	.byte	2,1,2,35,0,11
	.byte	'RX',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	428
	.byte	24,0,2,35,0,0,12,13,225,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17011
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_RWD_Bits',0,13,149,5,16,4,11
	.byte	'WDC',0,1
	.word	603
	.byte	8,0,2,35,0,11
	.byte	'WDV',0,1
	.word	603
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,13,129,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17233
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_CCCR_Bits',0,13,161,2,16,4,11
	.byte	'INIT',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'CCE',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'ASM',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'CSA',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'CSR',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'MON',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'DAR',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'TEST',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'FDOE',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'BRSE',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	603
	.byte	2,4,2,35,1,11
	.byte	'PXHD',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'EFBI',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'TXP',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'NISO',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,13,201,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17353
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_NBTP_Bits',0,13,242,3,16,4,11
	.byte	'NTSEG2',0,1
	.word	603
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'NTSEG1',0,1
	.word	603
	.byte	8,0,2,35,1,11
	.byte	'NBRP',0,2
	.word	620
	.byte	9,7,2,35,2,11
	.byte	'NSJW',0,1
	.word	603
	.byte	7,0,2,35,3,0
.L619:
	.byte	12,13,177,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17684
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TSCC_Bits',0,13,168,6,16,4,11
	.byte	'TSS',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	620
	.byte	14,0,2,35,0,11
	.byte	'TCP',0,1
	.word	603
	.byte	4,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	620
	.byte	12,0,2,35,2,0,12,13,249,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17842
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TSCV_Bits',0,13,177,6,16,4,11
	.byte	'TSC',0,2
	.word	620
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,13,129,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17985
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TOCC_Bits',0,13,152,6,16,4,11
	.byte	'ETOC',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'TOS',0,1
	.word	603
	.byte	2,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	620
	.byte	13,0,2,35,0,11
	.byte	'TOP',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,13,233,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18091
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TOCV_Bits',0,13,161,6,16,4,11
	.byte	'TOC',0,2
	.word	620
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,13,241,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18227
	.byte	4,2,35,0,0,15,16
	.word	603
	.byte	16,15,0,10
	.byte	'_Ifx_CAN_N_ECR_Bits',0,13,206,2,16,4,11
	.byte	'TEC',0,1
	.word	603
	.byte	8,0,2,35,0,11
	.byte	'REC',0,1
	.word	603
	.byte	7,1,2,35,1,11
	.byte	'RP',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'CEL',0,1
	.word	603
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	603
	.byte	8,0,2,35,3,0,12,13,225,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18342
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_PSR_Bits',0,13,131,5,16,4,11
	.byte	'LEC',0,1
	.word	603
	.byte	3,5,2,35,0,11
	.byte	'ACT',0,1
	.word	603
	.byte	2,3,2,35,0,11
	.byte	'EP',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'EW',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'BO',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'DLEC',0,1
	.word	603
	.byte	3,5,2,35,1,11
	.byte	'RESI',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'RBRS',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'RFDF',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'PXE',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'TDCV',0,1
	.word	603
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	620
	.byte	9,0,2,35,2,0,12,13,249,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18491
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TDCR_Bits',0,13,130,6,16,4,11
	.byte	'TDCF',0,1
	.word	603
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'TDCO',0,1
	.word	603
	.byte	7,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	428
	.byte	17,0,2,35,0,0,12,13,217,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18771
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_IR_Bits',0,13,184,3,16,4,11
	.byte	'RF0N',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'RF0W',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'RF0F',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'RF0L',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'RF1N',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'RF1W',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'RF1F',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'RF1L',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'HPM',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'TC',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'TCF',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'TFE',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'TEFN',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'TEFW',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'TEFF',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'TEFL',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'TSW',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'MRAF',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'TOO',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'DRX',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'ELO',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'EP',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'EW',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'BO',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'WDI',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'PEA',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'PED',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	603
	.byte	2,0,2,35,3,0,12,13,161,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18916
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_IE_Bits',0,13,148,3,16,4,11
	.byte	'RF0NE',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'RF0WE',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'RF0FE',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'RF0LE',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'RF1NE',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'RF1WE',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'RF1FE',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'RF1LE',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'HPME',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'TCE',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'TCFE',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'TFEE',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'TEFNE',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'TEFWE',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'TEFFE',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'TEFLE',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'TSWE',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'MRAFE',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'TOOE',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'DRXE',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'ELOE',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'EPE',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'EWE',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'BOE',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'WDIE',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'PEAE',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'PEDE',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	603
	.byte	2,0,2,35,3,0,12,13,153,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19488
	.byte	4,2,35,0,0,15,40
	.word	603
	.byte	16,39,0,10
	.byte	'_Ifx_CAN_N_GFC_Bits',0,13,230,2,16,4,11
	.byte	'RRFE',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'RRFS',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'ANFE',0,1
	.word	603
	.byte	2,4,2,35,0,11
	.byte	'ANFS',0,1
	.word	603
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	428
	.byte	26,0,2,35,0,0,12,13,249,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20096
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_SIDFC_Bits',0,13,241,5,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'FLSSA',0,2
	.word	620
	.byte	14,0,2,35,0,11
	.byte	'LSS',0,1
	.word	603
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	603
	.byte	8,0,2,35,3,0,12,13,201,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20249
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_XIDFC_Bits',0,13,210,10,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'FLESA',0,2
	.word	620
	.byte	14,0,2,35,0,11
	.byte	'LSE',0,1
	.word	603
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	620
	.byte	9,0,2,35,2,0,12,13,129,17,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20395
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_XIDAM_Bits',0,13,203,10,16,4,11
	.byte	'EIDM',0,4
	.word	428
	.byte	29,3,2,35,0,11
	.byte	'reserved_29',0,1
	.word	603
	.byte	3,0,2,35,3,0,12,13,249,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20541
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_HPMS_Bits',0,13,138,3,16,4,11
	.byte	'BIDX',0,1
	.word	603
	.byte	6,2,2,35,0,11
	.byte	'MSI',0,1
	.word	603
	.byte	2,0,2,35,0,11
	.byte	'FIDX',0,1
	.word	603
	.byte	7,1,2,35,1,11
	.byte	'FLST',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,13,145,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20649
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_NDAT1_Bits',0,13,252,3,16,4,11
	.byte	'ND0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'ND1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'ND2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'ND3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'ND4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'ND5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'ND6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'ND7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'ND8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'ND9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'ND10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'ND11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'ND12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'ND13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'ND14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'ND15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'ND16',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'ND17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'ND18',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'ND19',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'ND20',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'ND21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'ND22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'ND23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'ND24',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'ND25',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'ND26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'ND27',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'ND28',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'ND29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'ND30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'ND31',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,13,185,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20803
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_NDAT2_Bits',0,13,161,4,16,4,11
	.byte	'ND32',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'ND33',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'ND34',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'ND35',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'ND36',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'ND37',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'ND38',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'ND39',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'ND40',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'ND41',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'ND42',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'ND43',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'ND44',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'ND45',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'ND46',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'ND47',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'ND48',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'ND49',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'ND50',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'ND51',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'ND52',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'ND53',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'ND54',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'ND55',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'ND56',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'ND57',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'ND58',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'ND59',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'ND60',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'ND61',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'ND62',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'ND63',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,13,193,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21374
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_RX_F0C_Bits',0,13,183,5,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'F0SA',0,2
	.word	620
	.byte	14,0,2,35,0,11
	.byte	'F0S',0,1
	.word	603
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'F0WM',0,1
	.word	603
	.byte	7,1,2,35,3,11
	.byte	'F0OM',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,13,161,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21955
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_RX_F0S_Bits',0,13,194,5,16,4,11
	.byte	'F0FL',0,1
	.word	603
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'F0GI',0,1
	.word	603
	.byte	6,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	603
	.byte	2,0,2,35,1,11
	.byte	'F0PI',0,1
	.word	603
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	603
	.byte	2,0,2,35,2,11
	.byte	'F0F',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'RF0L',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	603
	.byte	6,0,2,35,3,0,12,13,169,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22133
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_RX_F0A_Bits',0,13,176,5,16,4,11
	.byte	'F0AI',0,1
	.word	603
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	428
	.byte	26,0,2,35,0,0,12,13,153,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22373
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_RX_BC_Bits',0,13,157,5,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'RBSA',0,2
	.word	620
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,13,137,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22481
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_RX_F1C_Bits',0,13,215,5,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'F1SA',0,2
	.word	620
	.byte	14,0,2,35,0,11
	.byte	'F1S',0,1
	.word	603
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'F1WM',0,1
	.word	603
	.byte	7,1,2,35,3,11
	.byte	'F1OM',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,13,185,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22611
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_RX_F1S_Bits',0,13,226,5,16,4,11
	.byte	'F1FL',0,1
	.word	603
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'F1GI',0,1
	.word	603
	.byte	6,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	603
	.byte	2,0,2,35,1,11
	.byte	'F1PI',0,1
	.word	603
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	603
	.byte	2,0,2,35,2,11
	.byte	'F1F',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'RF1L',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	603
	.byte	4,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	603
	.byte	2,0,2,35,3,0,12,13,193,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22789
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_RX_F1A_Bits',0,13,208,5,16,4,11
	.byte	'F1AI',0,1
	.word	603
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	428
	.byte	26,0,2,35,0,0,12,13,177,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23052
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_RX_ESC_Bits',0,13,165,5,16,4,11
	.byte	'F0DS',0,1
	.word	603
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'F1DS',0,1
	.word	603
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'RBDS',0,1
	.word	603
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	428
	.byte	21,0,2,35,0,0,12,13,145,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23160
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_RX',0,13,128,18,25,32,13
	.byte	'F0C',0
	.word	22093
	.byte	4,2,35,0,13
	.byte	'F0S',0
	.word	22333
	.byte	4,2,35,4,13
	.byte	'F0A',0
	.word	22441
	.byte	4,2,35,8,13
	.byte	'BC',0
	.word	22571
	.byte	4,2,35,12,13
	.byte	'F1C',0
	.word	22749
	.byte	4,2,35,16,13
	.byte	'F1S',0
	.word	23012
	.byte	4,2,35,20,13
	.byte	'F1A',0
	.word	23120
	.byte	4,2,35,24,13
	.byte	'ESC',0
	.word	23305
	.byte	4,2,35,28,0,14
	.word	23345
	.byte	10
	.byte	'_Ifx_CAN_N_TX_BC_Bits',0,13,174,8,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'TBSA',0,2
	.word	620
	.byte	14,0,2,35,0,11
	.byte	'NDTB',0,1
	.word	603
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	603
	.byte	2,0,2,35,2,11
	.byte	'TFQS',0,1
	.word	603
	.byte	6,2,2,35,3,11
	.byte	'TFQM',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,13,153,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23474
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TX_FQS_Bits',0,13,191,10,16,4,11
	.byte	'TFFL',0,1
	.word	603
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	603
	.byte	2,0,2,35,0,11
	.byte	'TFGI',0,1
	.word	603
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	603
	.byte	3,0,2,35,1,11
	.byte	'TFQPI',0,1
	.word	603
	.byte	5,3,2,35,2,11
	.byte	'TFQF',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	620
	.byte	10,0,2,35,2,0,12,13,241,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23675
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TX_ESC_Bits',0,13,184,10,16,4,11
	.byte	'TBDS',0,1
	.word	603
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	428
	.byte	29,0,2,35,0,0,12,13,233,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23878
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TX_BRP_Bits',0,13,169,9,16,4,11
	.byte	'TRP0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'TRP1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'TRP2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'TRP3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'TRP4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'TRP5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'TRP6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'TRP7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'TRP8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'TRP9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'TRP10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'TRP11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'TRP12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'TRP13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'TRP14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'TRP15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'TRP16',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'TRP17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'TRP18',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'TRP19',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'TRP20',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'TRP21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'TRP22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'TRP23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'TRP24',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'TRP25',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'TRP26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'TRP27',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'TRP28',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'TRP29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'TRP30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'TRP31',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,13,185,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23986
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TX_BAR_Bits',0,13,137,8,16,4,11
	.byte	'AR0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'AR1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'AR2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'AR3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'AR4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'AR5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'AR6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'AR7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'AR8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'AR9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'AR10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'AR11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'AR12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'AR13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'AR14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'AR15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'AR16',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'AR17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'AR18',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'AR19',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'AR20',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'AR21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'AR22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'AR23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'AR24',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'AR25',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'AR26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'AR27',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'AR28',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'AR29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'AR30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'AR31',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,13,145,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24590
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TX_BCR_Bits',0,13,132,9,16,4,11
	.byte	'CR0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'CR1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'CR2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'CR3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'CR4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'CR5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'CR6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'CR7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'CR8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'CR9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'CR10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'CR11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'CR12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'CR13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'CR14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'CR15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'CR16',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'CR17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'CR18',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'CR19',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'CR20',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'CR21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'CR22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'CR23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'CR24',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'CR25',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'CR26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'CR27',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'CR28',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'CR29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'CR30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'CR31',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,13,177,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25162
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TX_BTO_Bits',0,13,243,9,16,4,11
	.byte	'TO0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'TO1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'TO2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'TO3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'TO4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'TO5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'TO6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'TO7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'TO8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'TO9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'TO10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'TO11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'TO12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'TO13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'TO14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'TO15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'TO16',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'TO17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'TO18',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'TO19',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'TO20',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'TO21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'TO22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'TO23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'TO24',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'TO25',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'TO26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'TO27',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'TO28',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'TO29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'TO30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'TO31',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,13,201,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25734
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TX_BCF_Bits',0,13,186,8,16,4,11
	.byte	'CF0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'CF1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'CF2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'CF3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'CF4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'CF5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'CF6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'CF7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'CF8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'CF9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'CF10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'CF11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'CF12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'CF13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'CF14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'CF15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'CF16',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'CF17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'CF18',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'CF19',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'CF20',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'CF21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'CF22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'CF23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'CF24',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'CF25',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'CF26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'CF27',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'CF28',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'CF29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'CF30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'CF31',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,13,161,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26306
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TX_BTIE_Bits',0,13,206,9,16,4,11
	.byte	'TIE0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'TIE1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'TIE2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'TIE3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'TIE4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'TIE5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'TIE6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'TIE7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'TIE8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'TIE9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'TIE10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'TIE11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'TIE12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'TIE13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'TIE14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'TIE15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'TIE16',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'TIE17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'TIE18',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'TIE19',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'TIE20',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'TIE21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'TIE22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'TIE23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'TIE24',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'TIE25',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'TIE26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'TIE27',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'TIE28',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'TIE29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'TIE30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'TIE31',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,13,193,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26878
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TX_BCIE_Bits',0,13,223,8,16,4,11
	.byte	'CFIE0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'CFIE1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'CFIE2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'CFIE3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'CFIE4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'CFIE5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'CFIE6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'CFIE7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'CFIE8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'CFIE9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'CFIE10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'CFIE11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'CFIE12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'CFIE13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'CFIE14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'CFIE15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'CFIE16',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'CFIE17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'CFIE18',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'CFIE19',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'CFIE20',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'CFIE21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'CFIE22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'CFIE23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'CFIE24',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'CFIE25',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'CFIE26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'CFIE27',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'CFIE28',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'CFIE29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'CFIE30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'CFIE31',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,13,169,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27483
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TX_EFC_Bits',0,13,159,10,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'EFSA',0,2
	.word	620
	.byte	14,0,2,35,0,11
	.byte	'EFS',0,1
	.word	603
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	603
	.byte	2,0,2,35,2,11
	.byte	'EFWM',0,1
	.word	603
	.byte	6,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	603
	.byte	2,0,2,35,3,0,12,13,217,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28120
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TX_EFS_Bits',0,13,170,10,16,4,11
	.byte	'EFFL',0,1
	.word	603
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	603
	.byte	2,0,2,35,0,11
	.byte	'EFGI',0,1
	.word	603
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	603
	.byte	3,0,2,35,1,11
	.byte	'EFPI',0,1
	.word	603
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	603
	.byte	3,0,2,35,2,11
	.byte	'EFF',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'TEFL',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	603
	.byte	6,0,2,35,3,0,12,13,225,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28305
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TX_EFA_Bits',0,13,152,10,16,4,11
	.byte	'EFAI',0,1
	.word	603
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,4
	.word	428
	.byte	27,0,2,35,0,0,12,13,209,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28545
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TX',0,13,153,18,25,60,13
	.byte	'BC',0
	.word	23635
	.byte	4,2,35,0,13
	.byte	'FQS',0
	.word	23838
	.byte	4,2,35,4,13
	.byte	'ESC',0
	.word	23946
	.byte	4,2,35,8,13
	.byte	'BRP',0
	.word	24550
	.byte	4,2,35,12,13
	.byte	'BAR',0
	.word	25122
	.byte	4,2,35,16,13
	.byte	'BCR',0
	.word	25694
	.byte	4,2,35,20,13
	.byte	'BTO',0
	.word	26266
	.byte	4,2,35,24,13
	.byte	'BCF',0
	.word	26838
	.byte	4,2,35,28,13
	.byte	'BTIE',0
	.word	27443
	.byte	4,2,35,32,13
	.byte	'BCIE',0
	.word	28080
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	4444
	.byte	8,2,35,40,13
	.byte	'EFC',0
	.word	28265
	.byte	4,2,35,48,13
	.byte	'EFS',0
	.word	28505
	.byte	4,2,35,52,13
	.byte	'EFA',0
	.word	28613
	.byte	4,2,35,56,0,14
	.word	28653
	.byte	10
	.byte	'_Ifx_CAN_N_TT_TMC_Bits',0,13,231,7,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'TMSA',0,2
	.word	620
	.byte	14,0,2,35,0,11
	.byte	'TME',0,1
	.word	603
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	620
	.byte	9,0,2,35,2,0,12,13,241,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28870
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TT_RMC_Bits',0,13,222,7,16,4,11
	.byte	'RID',0,4
	.word	428
	.byte	29,3,2,35,0,11
	.byte	'reserved_29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'XTD',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'RMPS',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,13,233,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29016
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TT_OCF_Bits',0,13,165,7,16,4,11
	.byte	'OM',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'GEN',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'TM',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'LDSDL',0,1
	.word	603
	.byte	3,0,2,35,0,11
	.byte	'IRTO',0,1
	.word	603
	.byte	7,1,2,35,1,11
	.byte	'EECS',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'AWL',0,1
	.word	603
	.byte	8,0,2,35,2,11
	.byte	'EGTF',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'ECC',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'EVTP',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	603
	.byte	5,0,2,35,3,0,12,13,209,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29155
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TT_MLM_Bits',0,13,154,7,16,4,11
	.byte	'CCM',0,1
	.word	603
	.byte	6,2,2,35,0,11
	.byte	'CSS',0,1
	.word	603
	.byte	2,0,2,35,0,11
	.byte	'TXEW',0,1
	.word	603
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	603
	.byte	4,0,2,35,1,11
	.byte	'ENTT',0,2
	.word	620
	.byte	12,4,2,35,2,11
	.byte	'reserved_28',0,1
	.word	603
	.byte	4,0,2,35,3,0,12,13,201,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29424
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TT_TURCF_Bits',0,13,249,7,16,4,11
	.byte	'NCL',0,2
	.word	620
	.byte	16,0,2,35,0,11
	.byte	'DC',0,2
	.word	620
	.byte	14,2,2,35,2,11
	.byte	'reserved_30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'ELT',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,13,129,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29602
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TT_OCN_Bits',0,13,182,7,16,4,11
	.byte	'SGT',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'ECS',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'SWP',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'SWS',0,1
	.word	603
	.byte	2,3,2,35,0,11
	.byte	'RTIE',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'TMC',0,1
	.word	603
	.byte	2,0,2,35,0,11
	.byte	'TTIE',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'GCS',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'FGP',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'TMG',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'NIG',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'ESCN',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'LCKC',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,13,217,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29741
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TT_GTP_Bits',0,13,218,6,16,4,11
	.byte	'TP',0,2
	.word	620
	.byte	16,0,2,35,0,11
	.byte	'CTP',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,13,169,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30056
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TT_TMK_Bits',0,13,240,7,16,4,11
	.byte	'TM',0,2
	.word	620
	.byte	16,0,2,35,0,11
	.byte	'TICC',0,1
	.word	603
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	620
	.byte	8,1,2,35,2,11
	.byte	'LCKM',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,13,249,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30155
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TT_IR_Bits',0,13,250,6,16,4,11
	.byte	'SBC',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'SMC',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'CSM',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'SOG',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'RTMI',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'TTMI',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'SWE',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'GTW',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'GTD',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'GTE',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'TXU',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'TXO',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'SE1',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'SE2',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'ELC',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'IWT',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'WT',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'AW',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'CER',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,2
	.word	620
	.byte	13,0,2,35,2,0,12,13,185,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30294
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TT_IE_Bits',0,13,225,6,16,4,11
	.byte	'SBCE',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'SMCE',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'CSME',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'SOGE',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'RTMIE',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'TTMIE',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'SWEE',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'GTWE',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'GTDE',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'GTEE',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'TXUE',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'TXOE',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'SE1E',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'SE2E',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'ELCE',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'IWTE',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'WTE',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'AWE',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'CERE',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,2
	.word	620
	.byte	13,0,2,35,2,0,12,13,177,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30671
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TT_OST_Bits',0,13,202,7,16,4,11
	.byte	'EL',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'MS',0,1
	.word	603
	.byte	2,4,2,35,0,11
	.byte	'SYS',0,1
	.word	603
	.byte	2,2,2,35,0,11
	.byte	'QGTP',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'QCS',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'RTO',0,1
	.word	603
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	603
	.byte	6,2,2,35,2,11
	.byte	'WGTD',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'GFI',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'TMP',0,1
	.word	603
	.byte	3,5,2,35,3,11
	.byte	'GSI',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'WFE',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'AWE',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'WECS',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'SPL',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,13,225,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31067
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TT_TURNA_Bits',0,13,130,8,16,4,11
	.byte	'NAV',0,4
	.word	428
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,2
	.word	620
	.byte	14,0,2,35,2,0,12,13,137,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31371
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TT_LGT_Bits',0,13,147,7,16,4,11
	.byte	'LT',0,2
	.word	620
	.byte	16,0,2,35,0,11
	.byte	'GT',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,13,193,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31481
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TT_CTC_Bits',0,13,210,6,16,4,11
	.byte	'CT',0,2
	.word	620
	.byte	16,0,2,35,0,11
	.byte	'CC',0,1
	.word	603
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	620
	.byte	10,0,2,35,2,0,12,13,161,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31579
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TT_CPT_Bits',0,13,195,6,16,4,11
	.byte	'CCV',0,1
	.word	603
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	620
	.byte	10,0,2,35,0,11
	.byte	'SWV',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,13,145,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31700
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TT_CSM_Bits',0,13,203,6,16,4,11
	.byte	'CSM',0,2
	.word	620
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,12,13,153,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31822
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_N_TT',0,13,184,18,25,68,13
	.byte	'TMC',0
	.word	28976
	.byte	4,2,35,0,13
	.byte	'RMC',0
	.word	29115
	.byte	4,2,35,4,13
	.byte	'OCF',0
	.word	29384
	.byte	4,2,35,8,13
	.byte	'MLM',0
	.word	29562
	.byte	4,2,35,12,13
	.byte	'TURCF',0
	.word	29701
	.byte	4,2,35,16,13
	.byte	'OCN',0
	.word	30016
	.byte	4,2,35,20,13
	.byte	'GTP',0
	.word	30115
	.byte	4,2,35,24,13
	.byte	'TMK',0
	.word	30254
	.byte	4,2,35,28,13
	.byte	'IR',0
	.word	30631
	.byte	4,2,35,32,13
	.byte	'IE',0
	.word	31027
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	2624
	.byte	4,2,35,40,13
	.byte	'OST',0
	.word	31331
	.byte	4,2,35,44,13
	.byte	'TURNA',0
	.word	31441
	.byte	4,2,35,48,13
	.byte	'LGT',0
	.word	31539
	.byte	4,2,35,52,13
	.byte	'CTC',0
	.word	31660
	.byte	4,2,35,56,13
	.byte	'CPT',0
	.word	31782
	.byte	4,2,35,60,13
	.byte	'CSM',0
	.word	31890
	.byte	4,2,35,64,0,14
	.word	31930
	.byte	15,188,3
	.word	603
	.byte	16,187,3,0,10
	.byte	'_Ifx_CAN_N',0,13,218,18,25,128,8,13
	.byte	'ACCENNODE0',0
	.word	14183
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	2624
	.byte	4,2,35,4,13
	.byte	'STARTADR',0
	.word	14317
	.byte	4,2,35,8,13
	.byte	'ENDADR',0
	.word	14447
	.byte	4,2,35,12,13
	.byte	'ISREG',0
	.word	14801
	.byte	4,2,35,16,13
	.byte	'GRINT1',0
	.word	14999
	.byte	4,2,35,20,13
	.byte	'GRINT2',0
	.word	15203
	.byte	4,2,35,24,13
	.byte	'reserved_1C',0
	.word	2624
	.byte	4,2,35,28,13
	.byte	'NT',0
	.word	16162
	.byte	20,2,35,32,13
	.byte	'reserved_34',0
	.word	4784
	.byte	12,2,35,52,13
	.byte	'NPCR',0
	.word	16304
	.byte	4,2,35,64,13
	.byte	'reserved_44',0
	.word	16344
	.byte	172,1,2,35,68,13
	.byte	'TTCR',0
	.word	16504
	.byte	4,3,35,240,1,13
	.byte	'reserved_F4',0
	.word	4784
	.byte	12,3,35,244,1,13
	.byte	'CREL',0
	.word	16668
	.byte	4,3,35,128,2,13
	.byte	'ENDN',0
	.word	16751
	.byte	4,3,35,132,2,13
	.byte	'reserved_108',0
	.word	2624
	.byte	4,3,35,136,2,13
	.byte	'DBTP',0
	.word	16971
	.byte	4,3,35,140,2,13
	.byte	'TEST',0
	.word	17193
	.byte	4,3,35,144,2,13
	.byte	'RWD',0
	.word	17313
	.byte	4,3,35,148,2,13
	.byte	'CCCR',0
	.word	17644
	.byte	4,3,35,152,2,13
	.byte	'NBTP',0
	.word	17802
	.byte	4,3,35,156,2,13
	.byte	'TSCC',0
	.word	17945
	.byte	4,3,35,160,2,13
	.byte	'TSCV',0
	.word	18051
	.byte	4,3,35,164,2,13
	.byte	'TOCC',0
	.word	18187
	.byte	4,3,35,168,2,13
	.byte	'TOCV',0
	.word	18293
	.byte	4,3,35,172,2,13
	.byte	'reserved_130',0
	.word	18333
	.byte	16,3,35,176,2,13
	.byte	'ECR',0
	.word	18451
	.byte	4,3,35,192,2,13
	.byte	'PSR',0
	.word	18731
	.byte	4,3,35,196,2,13
	.byte	'TDCR',0
	.word	18876
	.byte	4,3,35,200,2,13
	.byte	'reserved_14C',0
	.word	2624
	.byte	4,3,35,204,2,13
	.byte	'IR',0
	.word	19448
	.byte	4,3,35,208,2,13
	.byte	'IE',0
	.word	20047
	.byte	4,3,35,212,2,13
	.byte	'reserved_158',0
	.word	20087
	.byte	40,3,35,216,2,13
	.byte	'GFC',0
	.word	20209
	.byte	4,3,35,128,3,13
	.byte	'SIDFC',0
	.word	20355
	.byte	4,3,35,132,3,13
	.byte	'XIDFC',0
	.word	20501
	.byte	4,3,35,136,3,13
	.byte	'reserved_18C',0
	.word	2624
	.byte	4,3,35,140,3,13
	.byte	'XIDAM',0
	.word	20609
	.byte	4,3,35,144,3,13
	.byte	'HPMS',0
	.word	20763
	.byte	4,3,35,148,3,13
	.byte	'NDAT1',0
	.word	21334
	.byte	4,3,35,152,3,13
	.byte	'NDAT2',0
	.word	21915
	.byte	4,3,35,156,3,13
	.byte	'RX',0
	.word	23469
	.byte	32,3,35,160,3,13
	.byte	'TX',0
	.word	28865
	.byte	60,3,35,192,3,13
	.byte	'reserved_1FC',0
	.word	2624
	.byte	4,3,35,252,3,13
	.byte	'TT',0
	.word	32182
	.byte	68,3,35,128,4,13
	.byte	'reserved_244',0
	.word	32187
	.byte	188,3,3,35,196,4,0,15,128,32
	.word	32198
	.byte	16,3,0,14
	.word	33008
	.byte	10
	.byte	'_Ifx_CAN',0,13,141,20,25,128,162,2,13
	.byte	'RAM',0
	.word	10858
	.byte	128,128,2,2,35,0,13
	.byte	'CLC',0
	.word	10987
	.byte	4,4,35,128,128,2,13
	.byte	'reserved_8004',0
	.word	2624
	.byte	4,4,35,132,128,2,13
	.byte	'ID',0
	.word	11112
	.byte	4,4,35,136,128,2,13
	.byte	'reserved_800C',0
	.word	11152
	.byte	36,4,35,140,128,2,13
	.byte	'MCR',0
	.word	11380
	.byte	4,4,35,176,128,2,13
	.byte	'BUFADR',0
	.word	11528
	.byte	4,4,35,180,128,2,13
	.byte	'reserved_8038',0
	.word	4444
	.byte	8,4,35,184,128,2,13
	.byte	'MECR',0
	.word	11775
	.byte	4,4,35,192,128,2,13
	.byte	'MESTAT',0
	.word	11916
	.byte	4,4,35,196,128,2,13
	.byte	'reserved_8048',0
	.word	11956
	.byte	148,1,4,35,200,128,2,13
	.byte	'ACCENCTR0',0
	.word	12499
	.byte	4,4,35,220,129,2,13
	.byte	'reserved_80E0',0
	.word	4444
	.byte	8,4,35,224,129,2,13
	.byte	'OCS',0
	.word	12705
	.byte	4,4,35,232,129,2,13
	.byte	'KRSTCLR',0
	.word	12811
	.byte	4,4,35,236,129,2,13
	.byte	'KRST1',0
	.word	12915
	.byte	4,4,35,240,129,2,13
	.byte	'KRST0',0
	.word	13038
	.byte	4,4,35,244,129,2,13
	.byte	'reserved_80F8',0
	.word	2624
	.byte	4,4,35,248,129,2,13
	.byte	'ACCEN0',0
	.word	13607
	.byte	4,4,35,252,129,2,13
	.byte	'N',0
	.word	33018
	.byte	128,32,4,35,128,130,2,0,14
	.word	33023
.L770:
	.byte	3
	.word	33424
.L774:
	.byte	8
	.byte	'IfxCan_isModuleEnabled',0,3,12,251,18,20
	.word	603
	.byte	1,1
.L776:
	.byte	5
	.byte	'can',0,12,251,18,52
	.word	33429
.L778:
	.byte	6,0,20
	.word	444
	.byte	21
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,22
	.word	33484
	.byte	0,14
	.word	428
	.byte	3
	.word	428
	.byte	23
	.byte	'__cmpswapw',0
	.word	33526
	.byte	1,1,1,1,24
	.byte	'p',0
	.word	33531
	.byte	24
	.byte	'value',0
	.word	428
	.byte	24
	.byte	'compare',0
	.word	428
	.byte	0,23
	.byte	'__abs',0
	.word	444
	.byte	1,1,1,1,22
	.word	444
	.byte	0,25
	.word	172
	.byte	26
	.word	198
	.byte	6,0,25
	.word	233
	.byte	26
	.word	265
	.byte	6,0,25
	.word	278
	.byte	6,0,25
	.word	347
	.byte	26
	.word	366
	.byte	6,0,25
	.word	382
	.byte	26
	.word	397
	.byte	26
	.word	411
	.byte	6,0,25
	.word	1212
	.byte	26
	.word	1252
	.byte	26
	.word	1270
	.byte	6,0,25
	.word	1290
	.byte	26
	.word	1333
	.byte	6,0,25
	.word	1353
	.byte	26
	.word	1391
	.byte	26
	.word	1409
	.byte	6,0,25
	.word	1429
	.byte	26
	.word	1470
	.byte	6,0,27
	.byte	'IfxScuWdt_clearCpuEndinit',0,3,237,1,17,1,1,1,1,5
	.byte	'password',0,3,237,1,50
	.word	620
	.byte	0,27
	.byte	'IfxScuWdt_setCpuEndinit',0,3,157,2,17,1,1,1,1,5
	.byte	'password',0,3,157,2,48
	.word	620
	.byte	0,25
	.word	1490
	.byte	26
	.word	1541
	.byte	6,0,25
	.word	1561
	.byte	6,0,28
	.byte	'IfxScuWdt_getCpuWatchdogPassword',0,3,215,3,19
	.word	620
	.byte	1,1,1,1,25
	.word	9244
	.byte	26
	.word	9276
	.byte	26
	.word	9290
	.byte	26
	.word	9308
	.byte	6,0,25
	.word	9637
	.byte	26
	.word	9670
	.byte	26
	.word	9684
	.byte	26
	.word	9702
	.byte	26
	.word	9716
	.byte	6,0,25
	.word	9836
	.byte	26
	.word	9864
	.byte	26
	.word	9878
	.byte	26
	.word	9896
	.byte	6,0,17,5,101,9,1,18
	.byte	'IfxPort_Mode_inputNoPullDevice',0,0,18
	.byte	'IfxPort_Mode_inputPullDown',0,8,18
	.byte	'IfxPort_Mode_inputPullUp',0,16,18
	.byte	'IfxPort_Mode_outputPushPullGeneral',0,128,1,18
	.byte	'IfxPort_Mode_outputPushPullAlt1',0,136,1,18
	.byte	'IfxPort_Mode_outputPushPullAlt2',0,144,1,18
	.byte	'IfxPort_Mode_outputPushPullAlt3',0,152,1,18
	.byte	'IfxPort_Mode_outputPushPullAlt4',0,160,1,18
	.byte	'IfxPort_Mode_outputPushPullAlt5',0,168,1,18
	.byte	'IfxPort_Mode_outputPushPullAlt6',0,176,1,18
	.byte	'IfxPort_Mode_outputPushPullAlt7',0,184,1,18
	.byte	'IfxPort_Mode_outputOpenDrainGeneral',0,192,1,18
	.byte	'IfxPort_Mode_outputOpenDrainAlt1',0,200,1,18
	.byte	'IfxPort_Mode_outputOpenDrainAlt2',0,208,1,18
	.byte	'IfxPort_Mode_outputOpenDrainAlt3',0,216,1,18
	.byte	'IfxPort_Mode_outputOpenDrainAlt4',0,224,1,18
	.byte	'IfxPort_Mode_outputOpenDrainAlt5',0,232,1,18
	.byte	'IfxPort_Mode_outputOpenDrainAlt6',0,240,1,18
	.byte	'IfxPort_Mode_outputOpenDrainAlt7',0,248,1,0,27
	.byte	'IfxPort_setPinMode',0,5,183,3,17,1,1,1,1,5
	.byte	'port',0,5,183,3,43
	.word	9114
	.byte	5
	.byte	'pinIndex',0,5,183,3,55
	.word	603
	.byte	5
	.byte	'mode',0,5,183,3,78
	.word	33969
	.byte	0
.L550:
	.byte	17,5,151,1,9,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,18
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,18
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,18
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,18
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed1',0,12,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed2',0,13,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed3',0,14,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed4',0,15,0,27
	.byte	'IfxPort_setPinPadDriver',0,5,207,3,17,1,1,1,1,5
	.byte	'port',0,5,207,3,48
	.word	9114
	.byte	5
	.byte	'pinIndex',0,5,207,3,60
	.word	603
	.byte	5
	.byte	'padDriver',0,5,207,3,88
	.word	34713
	.byte	0,25
	.word	10085
	.byte	6,0,25
	.word	10119
	.byte	6,0,25
	.word	10182
	.byte	26
	.word	10223
	.byte	6,0,25
	.word	10242
	.byte	26
	.word	10297
	.byte	6,0,25
	.word	10316
	.byte	26
	.word	10356
	.byte	26
	.word	10373
	.byte	19,6,0,0,25
	.word	10392
	.byte	26
	.word	10415
	.byte	19,29
	.word	10436
	.byte	30
	.word	10474
	.byte	0,6,0,0,25
	.word	10436
	.byte	6,0,28
	.byte	'IfxScuCcu_getMcanFrequency',0,9,220,6,20
	.word	224
	.byte	1,1,1,1,25
	.word	10815
	.byte	26
	.word	10843
	.byte	6,0
.L529:
	.byte	17,12,131,1,9,1,18
	.byte	'IfxCan_DataLengthCode_0',0,0,18
	.byte	'IfxCan_DataLengthCode_1',0,1,18
	.byte	'IfxCan_DataLengthCode_2',0,2,18
	.byte	'IfxCan_DataLengthCode_3',0,3,18
	.byte	'IfxCan_DataLengthCode_4',0,4,18
	.byte	'IfxCan_DataLengthCode_5',0,5,18
	.byte	'IfxCan_DataLengthCode_6',0,6,18
	.byte	'IfxCan_DataLengthCode_7',0,7,18
	.byte	'IfxCan_DataLengthCode_8',0,8,18
	.byte	'IfxCan_DataLengthCode_12',0,9,18
	.byte	'IfxCan_DataLengthCode_16',0,10,18
	.byte	'IfxCan_DataLengthCode_20',0,11,18
	.byte	'IfxCan_DataLengthCode_24',0,12,18
	.byte	'IfxCan_DataLengthCode_32',0,13,18
	.byte	'IfxCan_DataLengthCode_48',0,14,18
	.byte	'IfxCan_DataLengthCode_64',0,15,0,14
	.word	32198
.L534:
	.byte	3
	.word	35792
.L538:
	.byte	17,12,178,1,9,1,18
	.byte	'IfxCan_FrameMode_standard',0,0,18
	.byte	'IfxCan_FrameMode_fdLong',0,1,18
	.byte	'IfxCan_FrameMode_fdLongAndFast',0,2,0,10
	.byte	'_Ifx_CAN_R0_Bits',0,13,232,10,16,4,11
	.byte	'ID',0,4
	.word	428
	.byte	29,3,2,35,0,11
	.byte	'RTR',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'XTD',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'ESI',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,13,145,17,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35896
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_R1_Bits',0,13,241,10,16,4,11
	.byte	'RXTS',0,2
	.word	620
	.byte	16,0,2,35,0,11
	.byte	'DLC',0,1
	.word	603
	.byte	4,4,2,35,2,11
	.byte	'BRS',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'FDF',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	603
	.byte	2,0,2,35,2,11
	.byte	'FIDX',0,1
	.word	603
	.byte	7,1,2,35,3,11
	.byte	'ANMF',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,13,153,17,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36019
	.byte	4,2,35,0,0,7
	.byte	'char',0,1,6,10
	.byte	'_Ifx_CAN_DB_Bits',0,13,161,1,16,1,11
	.byte	'DB',0,1
	.word	603
	.byte	8,0,2,35,0,0,12,13,241,11,9,1,13
	.byte	'U',0
	.word	603
	.byte	1,2,35,0,13
	.byte	'I',0
	.word	36199
	.byte	1,2,35,0,13
	.byte	'B',0
	.word	36207
	.byte	1,2,35,0,0,15,64
	.word	36245
	.byte	16,63,0,10
	.byte	'_Ifx_CAN_RXMSG',0,13,191,19,25,72,13
	.byte	'R0',0
	.word	35979
	.byte	4,2,35,0,13
	.byte	'R1',0
	.word	36159
	.byte	4,2,35,4,13
	.byte	'DB',0
	.word	36285
	.byte	64,2,35,8,0,14
	.word	36294
.L540:
	.byte	3
	.word	36352
	.byte	17,15,93,9,1,18
	.byte	'IfxCan_NodeId_none',0,127,18
	.byte	'IfxCan_NodeId_0',0,0,18
	.byte	'IfxCan_NodeId_1',0,1,18
	.byte	'IfxCan_NodeId_2',0,2,18
	.byte	'IfxCan_NodeId_3',0,3,0,31,5,246,1,9,8,13
	.byte	'port',0
	.word	9114
	.byte	4,2,35,0,13
	.byte	'pinIndex',0
	.word	603
	.byte	1,2,35,4,0,17,16,127,9,1,18
	.byte	'Ifx_RxSel_a',0,0,18
	.byte	'Ifx_RxSel_b',0,1,18
	.byte	'Ifx_RxSel_c',0,2,18
	.byte	'Ifx_RxSel_d',0,3,18
	.byte	'Ifx_RxSel_e',0,4,18
	.byte	'Ifx_RxSel_f',0,5,18
	.byte	'Ifx_RxSel_g',0,6,18
	.byte	'Ifx_RxSel_h',0,7,0,31,14,56,15,20,13
	.byte	'module',0
	.word	33429
	.byte	4,2,35,0,13
	.byte	'nodeId',0
	.word	36362
	.byte	1,2,35,4,13
	.byte	'pin',0
	.word	36461
	.byte	8,2,35,8,13
	.byte	'select',0
	.word	36500
	.byte	1,2,35,16,0,20
	.word	36618
.L546:
	.byte	3
	.word	36685
	.byte	31,14,65,15,20,13
	.byte	'module',0
	.word	33429
	.byte	4,2,35,0,13
	.byte	'nodeId',0
	.word	36362
	.byte	1,2,35,4,13
	.byte	'pin',0
	.word	36461
	.byte	8,2,35,8,13
	.byte	'select',0
	.word	9420
	.byte	1,2,35,16,0,20
	.word	36695
.L563:
	.byte	3
	.word	36762
.L589:
	.byte	7
	.byte	'long int',0,4,5,10
	.byte	'_Ifx_CAN_TXMSG_T0_Bits',0,13,183,11,16,4,11
	.byte	'ID',0,4
	.word	428
	.byte	29,3,2,35,0,11
	.byte	'RTR',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'XTD',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'ESI',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,13,209,17,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36784
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_TXMSG_T1_Bits',0,13,192,11,16,4,11
	.byte	'reserved_0',0,2
	.word	620
	.byte	16,0,2,35,0,11
	.byte	'DLC',0,1
	.word	603
	.byte	4,4,2,35,2,11
	.byte	'BRS',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'FDF',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'EFC',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'MM',0,1
	.word	603
	.byte	8,0,2,35,3,0,12,13,217,17,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36913
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_TXMSG_DB_Bits',0,13,177,11,16,1,11
	.byte	'DB',0,1
	.word	603
	.byte	8,0,2,35,0,0,12,13,201,17,9,1,13
	.byte	'U',0
	.word	603
	.byte	1,2,35,0,13
	.byte	'I',0
	.word	36199
	.byte	1,2,35,0,13
	.byte	'B',0
	.word	37102
	.byte	1,2,35,0,0,15,64
	.word	37146
	.byte	16,63,0,10
	.byte	'_Ifx_CAN_TXMSG',0,13,230,19,25,72,13
	.byte	'T0',0
	.word	36873
	.byte	4,2,35,0,13
	.byte	'T1',0
	.word	37062
	.byte	4,2,35,4,13
	.byte	'DB',0
	.word	37186
	.byte	64,2,35,8,0,14
	.word	37195
.L659:
	.byte	3
	.word	37253
.L671:
	.byte	17,12,117,9,1,18
	.byte	'IfxCan_DataFieldSize_8',0,0,18
	.byte	'IfxCan_DataFieldSize_12',0,1,18
	.byte	'IfxCan_DataFieldSize_16',0,2,18
	.byte	'IfxCan_DataFieldSize_20',0,3,18
	.byte	'IfxCan_DataFieldSize_24',0,4,18
	.byte	'IfxCan_DataFieldSize_32',0,5,18
	.byte	'IfxCan_DataFieldSize_48',0,6,18
	.byte	'IfxCan_DataFieldSize_64',0,7,0
.L678:
	.byte	17,12,179,3,9,1,18
	.byte	'IfxCan_TxBufferId_0',0,0,18
	.byte	'IfxCan_TxBufferId_1',0,1,18
	.byte	'IfxCan_TxBufferId_2',0,2,18
	.byte	'IfxCan_TxBufferId_3',0,3,18
	.byte	'IfxCan_TxBufferId_4',0,4,18
	.byte	'IfxCan_TxBufferId_5',0,5,18
	.byte	'IfxCan_TxBufferId_6',0,6,18
	.byte	'IfxCan_TxBufferId_7',0,7,18
	.byte	'IfxCan_TxBufferId_8',0,8,18
	.byte	'IfxCan_TxBufferId_9',0,9,18
	.byte	'IfxCan_TxBufferId_10',0,10,18
	.byte	'IfxCan_TxBufferId_11',0,11,18
	.byte	'IfxCan_TxBufferId_12',0,12,18
	.byte	'IfxCan_TxBufferId_13',0,13,18
	.byte	'IfxCan_TxBufferId_14',0,14,18
	.byte	'IfxCan_TxBufferId_15',0,15,18
	.byte	'IfxCan_TxBufferId_16',0,16,18
	.byte	'IfxCan_TxBufferId_17',0,17,18
	.byte	'IfxCan_TxBufferId_18',0,18,18
	.byte	'IfxCan_TxBufferId_19',0,19,18
	.byte	'IfxCan_TxBufferId_20',0,20,18
	.byte	'IfxCan_TxBufferId_21',0,21,18
	.byte	'IfxCan_TxBufferId_22',0,22,18
	.byte	'IfxCan_TxBufferId_23',0,23,18
	.byte	'IfxCan_TxBufferId_24',0,24,18
	.byte	'IfxCan_TxBufferId_25',0,25,18
	.byte	'IfxCan_TxBufferId_26',0,26,18
	.byte	'IfxCan_TxBufferId_27',0,27,18
	.byte	'IfxCan_TxBufferId_28',0,28,18
	.byte	'IfxCan_TxBufferId_29',0,29,18
	.byte	'IfxCan_TxBufferId_30',0,30,18
	.byte	'IfxCan_TxBufferId_31',0,31,0
.L685:
	.byte	3
	.word	10161
.L700:
	.byte	17,12,184,2,9,1,18
	.byte	'IfxCan_RxBufferId_0',0,0,18
	.byte	'IfxCan_RxBufferId_1',0,1,18
	.byte	'IfxCan_RxBufferId_2',0,2,18
	.byte	'IfxCan_RxBufferId_3',0,3,18
	.byte	'IfxCan_RxBufferId_4',0,4,18
	.byte	'IfxCan_RxBufferId_5',0,5,18
	.byte	'IfxCan_RxBufferId_6',0,6,18
	.byte	'IfxCan_RxBufferId_7',0,7,18
	.byte	'IfxCan_RxBufferId_8',0,8,18
	.byte	'IfxCan_RxBufferId_9',0,9,18
	.byte	'IfxCan_RxBufferId_10',0,10,18
	.byte	'IfxCan_RxBufferId_11',0,11,18
	.byte	'IfxCan_RxBufferId_12',0,12,18
	.byte	'IfxCan_RxBufferId_13',0,13,18
	.byte	'IfxCan_RxBufferId_14',0,14,18
	.byte	'IfxCan_RxBufferId_15',0,15,18
	.byte	'IfxCan_RxBufferId_16',0,16,18
	.byte	'IfxCan_RxBufferId_17',0,17,18
	.byte	'IfxCan_RxBufferId_18',0,18,18
	.byte	'IfxCan_RxBufferId_19',0,19,18
	.byte	'IfxCan_RxBufferId_20',0,20,18
	.byte	'IfxCan_RxBufferId_21',0,21,18
	.byte	'IfxCan_RxBufferId_22',0,22,18
	.byte	'IfxCan_RxBufferId_23',0,23,18
	.byte	'IfxCan_RxBufferId_24',0,24,18
	.byte	'IfxCan_RxBufferId_25',0,25,18
	.byte	'IfxCan_RxBufferId_26',0,26,18
	.byte	'IfxCan_RxBufferId_27',0,27,18
	.byte	'IfxCan_RxBufferId_28',0,28,18
	.byte	'IfxCan_RxBufferId_29',0,29,18
	.byte	'IfxCan_RxBufferId_30',0,30,18
	.byte	'IfxCan_RxBufferId_31',0,31,18
	.byte	'IfxCan_RxBufferId_32',0,32,18
	.byte	'IfxCan_RxBufferId_33',0,33,18
	.byte	'IfxCan_RxBufferId_34',0,34,18
	.byte	'IfxCan_RxBufferId_35',0,35,18
	.byte	'IfxCan_RxBufferId_36',0,36,18
	.byte	'IfxCan_RxBufferId_37',0,37,18
	.byte	'IfxCan_RxBufferId_38',0,38,18
	.byte	'IfxCan_RxBufferId_39',0,39,18
	.byte	'IfxCan_RxBufferId_40',0,40,18
	.byte	'IfxCan_RxBufferId_41',0,41,18
	.byte	'IfxCan_RxBufferId_42',0,42,18
	.byte	'IfxCan_RxBufferId_43',0,43,18
	.byte	'IfxCan_RxBufferId_44',0,44,18
	.byte	'IfxCan_RxBufferId_45',0,45,18
	.byte	'IfxCan_RxBufferId_46',0,46,18
	.byte	'IfxCan_RxBufferId_47',0,47,18
	.byte	'IfxCan_RxBufferId_48',0,48,18
	.byte	'IfxCan_RxBufferId_49',0,49,18
	.byte	'IfxCan_RxBufferId_50',0,50,18
	.byte	'IfxCan_RxBufferId_51',0,51,18
	.byte	'IfxCan_RxBufferId_52',0,52,18
	.byte	'IfxCan_RxBufferId_53',0,53,18
	.byte	'IfxCan_RxBufferId_54',0,54,18
	.byte	'IfxCan_RxBufferId_55',0,55,18
	.byte	'IfxCan_RxBufferId_56',0,56,18
	.byte	'IfxCan_RxBufferId_57',0,57,18
	.byte	'IfxCan_RxBufferId_58',0,58,18
	.byte	'IfxCan_RxBufferId_59',0,59,18
	.byte	'IfxCan_RxBufferId_60',0,60,18
	.byte	'IfxCan_RxBufferId_61',0,61,18
	.byte	'IfxCan_RxBufferId_62',0,62,18
	.byte	'IfxCan_RxBufferId_63',0,63,0,10
	.byte	'_Ifx_CAN_EXTMSG_F0_Bits',0,13,167,1,16,4,11
	.byte	'EFID1',0,4
	.word	428
	.byte	29,3,2,35,0,11
	.byte	'EFEC',0,1
	.word	603
	.byte	3,0,2,35,3,0,12,13,249,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39683
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_EXTMSG_F1_Bits',0,13,174,1,16,4,11
	.byte	'EFID2',0,4
	.word	428
	.byte	29,3,2,35,0,11
	.byte	'reserved_29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'EFT',0,1
	.word	603
	.byte	2,0,2,35,3,0,12,13,129,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39787
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_EXTMSG',0,13,172,19,25,8,13
	.byte	'F0',0
	.word	39747
	.byte	4,2,35,0,13
	.byte	'F1',0
	.word	39873
	.byte	4,2,35,4,0,14
	.word	39913
.L748:
	.byte	3
	.word	39960
	.byte	10
	.byte	'_Ifx_CAN_STDMSG_S0_Bits',0,13,253,10,16,4,11
	.byte	'SFID2',0,2
	.word	620
	.byte	11,5,2,35,0,11
	.byte	'reserved_11',0,1
	.word	603
	.byte	5,0,2,35,1,11
	.byte	'SFID1',0,2
	.word	620
	.byte	11,5,2,35,2,11
	.byte	'SFEC',0,1
	.word	603
	.byte	3,2,2,35,3,11
	.byte	'SFT',0,1
	.word	603
	.byte	2,0,2,35,3,0,12,13,161,17,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39970
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_STDMSG',0,13,154,19,25,4,13
	.byte	'S0',0
	.word	40089
	.byte	4,2,35,0,0,14
	.word	40129
.L753:
	.byte	3
	.word	40164
.L760:
	.byte	17,12,236,1,9,1,18
	.byte	'IfxCan_InterruptGroup_tefifo',0,0,18
	.byte	'IfxCan_InterruptGroup_hpe',0,1,18
	.byte	'IfxCan_InterruptGroup_wati',0,2,18
	.byte	'IfxCan_InterruptGroup_alrt',0,3,18
	.byte	'IfxCan_InterruptGroup_moer',0,4,18
	.byte	'IfxCan_InterruptGroup_safe',0,5,18
	.byte	'IfxCan_InterruptGroup_boff',0,6,18
	.byte	'IfxCan_InterruptGroup_loi',0,7,18
	.byte	'IfxCan_InterruptGroup_reint',0,8,18
	.byte	'IfxCan_InterruptGroup_rxf1f',0,9,18
	.byte	'IfxCan_InterruptGroup_rxf0f',0,10,18
	.byte	'IfxCan_InterruptGroup_rxf1n',0,11,18
	.byte	'IfxCan_InterruptGroup_rxf0n',0,12,18
	.byte	'IfxCan_InterruptGroup_reti',0,13,18
	.byte	'IfxCan_InterruptGroup_traq',0,14,18
	.byte	'IfxCan_InterruptGroup_traco',0,15,0
.L762:
	.byte	17,12,130,2,9,1,18
	.byte	'IfxCan_InterruptLine_0',0,0,18
	.byte	'IfxCan_InterruptLine_1',0,1,18
	.byte	'IfxCan_InterruptLine_2',0,2,18
	.byte	'IfxCan_InterruptLine_3',0,3,18
	.byte	'IfxCan_InterruptLine_4',0,4,18
	.byte	'IfxCan_InterruptLine_5',0,5,18
	.byte	'IfxCan_InterruptLine_6',0,6,18
	.byte	'IfxCan_InterruptLine_7',0,7,18
	.byte	'IfxCan_InterruptLine_8',0,8,18
	.byte	'IfxCan_InterruptLine_9',0,9,18
	.byte	'IfxCan_InterruptLine_10',0,10,18
	.byte	'IfxCan_InterruptLine_11',0,11,18
	.byte	'IfxCan_InterruptLine_12',0,12,18
	.byte	'IfxCan_InterruptLine_13',0,13,18
	.byte	'IfxCan_InterruptLine_14',0,14,18
	.byte	'IfxCan_InterruptLine_15',0,15,0
.L766:
	.byte	17,12,199,1,9,1,18
	.byte	'IfxCan_Interrupt_rxFifo0NewMessage',0,0,18
	.byte	'IfxCan_Interrupt_rxFifo0WatermarkReached',0,1,18
	.byte	'IfxCan_Interrupt_rxFifo0Full',0,2,18
	.byte	'IfxCan_Interrupt_rxFifo0MessageLost',0,3,18
	.byte	'IfxCan_Interrupt_rxFifo1NewMessage',0,4,18
	.byte	'IfxCan_Interrupt_rxFifo1WatermarkReached',0,5,18
	.byte	'IfxCan_Interrupt_rxFifo1Full',0,6,18
	.byte	'IfxCan_Interrupt_rxFifo1MessageLost',0,7,18
	.byte	'IfxCan_Interrupt_highPriorityMessage',0,8,18
	.byte	'IfxCan_Interrupt_transmissionCompleted',0,9,18
	.byte	'IfxCan_Interrupt_transmissionCancellationFinished',0,10,18
	.byte	'IfxCan_Interrupt_txFifoEmpty',0,11,18
	.byte	'IfxCan_Interrupt_txEventFifoNewEntry',0,12,18
	.byte	'IfxCan_Interrupt_txEventFifoWatermarkReached',0,13,18
	.byte	'IfxCan_Interrupt_txEventFifoFull',0,14,18
	.byte	'IfxCan_Interrupt_txEventFifoEventLost',0,15,18
	.byte	'IfxCan_Interrupt_timestampWraparound',0,16,18
	.byte	'IfxCan_Interrupt_messageRAMAccessFailure',0,17,18
	.byte	'IfxCan_Interrupt_timeoutOccurred',0,18,18
	.byte	'IfxCan_Interrupt_messageStoredToDedicatedRxBuffer',0,19,18
	.byte	'IfxCan_Interrupt_bitErrorCorrected',0,20,18
	.byte	'IfxCan_Interrupt_bitErrorUncorrected',0,21,18
	.byte	'IfxCan_Interrupt_errorLoggingOverflow',0,22,18
	.byte	'IfxCan_Interrupt_errorPassive',0,23,18
	.byte	'IfxCan_Interrupt_warningStatus',0,24,18
	.byte	'IfxCan_Interrupt_busOffStatus',0,25,18
	.byte	'IfxCan_Interrupt_watchdog',0,26,18
	.byte	'IfxCan_Interrupt_protocolErrorArbitration',0,27,18
	.byte	'IfxCan_Interrupt_protocolErrorData',0,28,18
	.byte	'IfxCan_Interrupt_AccessToReservedAddress',0,29,0,25
	.word	33434
	.byte	26
	.word	33469
	.byte	6,0
.L785:
	.byte	17,15,83,9,1,18
	.byte	'IfxCan_Index_none',0,127,18
	.byte	'IfxCan_Index_0',0,0,18
	.byte	'IfxCan_Index_1',0,1,18
	.byte	'IfxCan_Index_2',0,2,0
.L799:
	.byte	17,12,95,9,1,18
	.byte	'IfxCan_ClockSelect_0',0,0,18
	.byte	'IfxCan_ClockSelect_1',0,1,18
	.byte	'IfxCan_ClockSelect_2',0,2,18
	.byte	'IfxCan_ClockSelect_3',0,3,0
.L801:
	.byte	17,12,106,9,1,18
	.byte	'IfxCan_ClockSource_noClock',0,0,18
	.byte	'IfxCan_ClockSource_asynchronous',0,1,18
	.byte	'IfxCan_ClockSource_synchronous',0,2,18
	.byte	'IfxCan_ClockSource_both',0,3,0,10
	.byte	'_Ifx_CAN_TXEVENT_E0_Bits',0,13,157,11,16,4,11
	.byte	'ID',0,4
	.word	428
	.byte	29,3,2,35,0,11
	.byte	'RTR',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'XTD',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'ESI',0,1
	.word	603
	.byte	1,0,2,35,3,0,12,13,185,17,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42542
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_TXEVENT_E1_Bits',0,13,166,11,16,4,11
	.byte	'TXTS',0,2
	.word	620
	.byte	16,0,2,35,0,11
	.byte	'DLC',0,1
	.word	603
	.byte	4,4,2,35,2,11
	.byte	'BRS',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'FDF',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'ET',0,1
	.word	603
	.byte	2,0,2,35,2,11
	.byte	'MM',0,1
	.word	603
	.byte	8,0,2,35,3,0,12,13,193,17,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42673
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_CAN_TXEVENT',0,13,211,19,25,8,13
	.byte	'E0',0
	.word	42633
	.byte	4,2,35,0,13
	.byte	'E1',0
	.word	42794
	.byte	4,2,35,4,0,14
	.word	42834
.L807:
	.byte	3
	.word	42882
	.byte	15,64
	.word	10766
	.byte	16,15,0,10
	.byte	'_Ifx_SRC_CAN_CAN',0,11,157,6,25,64,13
	.byte	'INT',0
	.word	42892
	.byte	64,2,35,0,0,14
	.word	42901
	.byte	3
	.word	42938
	.byte	15,12
	.word	42943
	.byte	16,2,0
.L819:
	.byte	20
	.word	42948
	.byte	7
	.byte	'short int',0,2,5,32
	.byte	'__wchar_t',0,17,1,1
	.word	42962
	.byte	32
	.byte	'__size_t',0,17,1,1
	.word	428
	.byte	32
	.byte	'__ptrdiff_t',0,17,1,1
	.word	444
	.byte	33,1,3
	.word	43030
	.byte	32
	.byte	'__codeptr',0,17,1,1
	.word	43032
	.byte	32
	.byte	'boolean',0,18,104,29
	.word	603
	.byte	32
	.byte	'uint8',0,18,108,29
	.word	603
	.byte	32
	.byte	'uint16',0,18,112,29
	.word	620
	.byte	32
	.byte	'uint32',0,18,116,29
	.word	10161
	.byte	32
	.byte	'uint64',0,18,121,29
	.word	310
	.byte	32
	.byte	'sint16',0,18,129,1,29
	.word	42962
	.byte	32
	.byte	'sint32',0,18,134,1,29
	.word	36772
	.byte	7
	.byte	'long long int',0,8,5,32
	.byte	'sint64',0,18,141,1,29
	.word	43162
	.byte	32
	.byte	'float32',0,18,170,1,29
	.word	224
	.byte	32
	.byte	'pvoid',0,16,54,28
	.word	342
	.byte	32
	.byte	'Ifx_TickTime',0,16,76,28
	.word	43162
	.byte	32
	.byte	'Ifx_Priority',0,16,100,16
	.word	620
	.byte	32
	.byte	'Ifx_RxSel',0,16,137,1,3
	.word	36500
	.byte	14
	.word	336
	.byte	3
	.word	43287
	.byte	31,16,140,1,9,8,13
	.byte	'module',0
	.word	43292
	.byte	4,2,35,0,13
	.byte	'index',0
	.word	36772
	.byte	4,2,35,4,0,32
	.byte	'IfxModule_IndexMap',0,16,144,1,3
	.word	43297
	.byte	32
	.byte	'Ifx_UReg_8Bit',0,19,96,24
	.word	603
	.byte	32
	.byte	'Ifx_UReg_32Bit',0,19,98,24
	.word	428
	.byte	32
	.byte	'Ifx_SReg_8Bit',0,19,99,24
	.word	36199
	.byte	32
	.byte	'Ifx_SReg_32Bit',0,19,101,24
	.word	444
	.byte	32
	.byte	'Ifx_CAN_ACCEN0_Bits',0,13,102,3
	.word	13078
	.byte	32
	.byte	'Ifx_CAN_ACCENCTR0_Bits',0,13,139,1,3
	.word	11967
	.byte	32
	.byte	'Ifx_CAN_BUFADR_Bits',0,13,148,1,3
	.word	11420
	.byte	32
	.byte	'Ifx_CAN_CLC_Bits',0,13,158,1,3
	.word	10870
	.byte	32
	.byte	'Ifx_CAN_DB_Bits',0,13,164,1,3
	.word	36207
	.byte	32
	.byte	'Ifx_CAN_EXTMSG_F0_Bits',0,13,171,1,3
	.word	39683
	.byte	32
	.byte	'Ifx_CAN_EXTMSG_F1_Bits',0,13,179,1,3
	.word	39787
	.byte	32
	.byte	'Ifx_CAN_ID_Bits',0,13,187,1,3
	.word	11027
	.byte	32
	.byte	'Ifx_CAN_KRST0_Bits',0,13,195,1,3
	.word	12955
	.byte	32
	.byte	'Ifx_CAN_KRST1_Bits',0,13,202,1,3
	.word	12851
	.byte	32
	.byte	'Ifx_CAN_KRSTCLR_Bits',0,13,209,1,3
	.word	12745
	.byte	32
	.byte	'Ifx_CAN_MCR_Bits',0,13,225,1,3
	.word	11161
	.byte	32
	.byte	'Ifx_CAN_MECR_Bits',0,13,240,1,3
	.word	11568
	.byte	32
	.byte	'Ifx_CAN_MESTAT_Bits',0,13,249,1,3
	.word	11815
	.byte	32
	.byte	'Ifx_CAN_N_ACCENNODE0_Bits',0,13,158,2,3
	.word	13647
	.byte	32
	.byte	'Ifx_CAN_N_CCCR_Bits',0,13,179,2,3
	.word	17353
	.byte	32
	.byte	'Ifx_CAN_N_CREL_Bits',0,13,190,2,3
	.word	16544
	.byte	32
	.byte	'Ifx_CAN_N_DBTP_Bits',0,13,203,2,3
	.word	16791
	.byte	32
	.byte	'Ifx_CAN_N_ECR_Bits',0,13,213,2,3
	.word	18342
	.byte	32
	.byte	'Ifx_CAN_N_ENDADR_Bits',0,13,221,2,3
	.word	14357
	.byte	32
	.byte	'Ifx_CAN_N_ENDN_Bits',0,13,227,2,3
	.word	16708
	.byte	32
	.byte	'Ifx_CAN_N_GFC_Bits',0,13,237,2,3
	.word	20096
	.byte	32
	.byte	'Ifx_CAN_N_GRINT1_Bits',0,13,250,2,3
	.word	14841
	.byte	32
	.byte	'Ifx_CAN_N_GRINT2_Bits',0,13,135,3,3
	.word	15039
	.byte	32
	.byte	'Ifx_CAN_N_HPMS_Bits',0,13,145,3,3
	.word	20649
	.byte	32
	.byte	'Ifx_CAN_N_IE_Bits',0,13,181,3,3
	.word	19488
	.byte	32
	.byte	'Ifx_CAN_N_IR_Bits',0,13,217,3,3
	.word	18916
	.byte	32
	.byte	'Ifx_CAN_N_ISREG_Bits',0,13,239,3,3
	.word	14487
	.byte	32
	.byte	'Ifx_CAN_N_NBTP_Bits',0,13,249,3,3
	.word	17684
	.byte	32
	.byte	'Ifx_CAN_N_NDAT1_Bits',0,13,158,4,3
	.word	20803
	.byte	32
	.byte	'Ifx_CAN_N_NDAT2_Bits',0,13,195,4,3
	.word	21374
	.byte	32
	.byte	'Ifx_CAN_N_NPCR_Bits',0,13,206,4,3
	.word	16167
	.byte	32
	.byte	'Ifx_CAN_N_NT_ATTR_Bits',0,13,215,4,3
	.word	15477
	.byte	32
	.byte	'Ifx_CAN_N_NT_BTTR_Bits',0,13,224,4,3
	.word	15621
	.byte	32
	.byte	'Ifx_CAN_N_NT_CCR_Bits',0,13,237,4,3
	.word	15243
	.byte	32
	.byte	'Ifx_CAN_N_NT_CTTR_Bits',0,13,246,4,3
	.word	15765
	.byte	32
	.byte	'Ifx_CAN_N_NT_RTR_Bits',0,13,128,5,3
	.word	15909
	.byte	32
	.byte	'Ifx_CAN_N_PSR_Bits',0,13,146,5,3
	.word	18491
	.byte	32
	.byte	'Ifx_CAN_N_RWD_Bits',0,13,154,5,3
	.word	17233
	.byte	32
	.byte	'Ifx_CAN_N_RX_BC_Bits',0,13,162,5,3
	.word	22481
	.byte	32
	.byte	'Ifx_CAN_N_RX_ESC_Bits',0,13,173,5,3
	.word	23160
	.byte	32
	.byte	'Ifx_CAN_N_RX_F0A_Bits',0,13,180,5,3
	.word	22373
	.byte	32
	.byte	'Ifx_CAN_N_RX_F0C_Bits',0,13,191,5,3
	.word	21955
	.byte	32
	.byte	'Ifx_CAN_N_RX_F0S_Bits',0,13,205,5,3
	.word	22133
	.byte	32
	.byte	'Ifx_CAN_N_RX_F1A_Bits',0,13,212,5,3
	.word	23052
	.byte	32
	.byte	'Ifx_CAN_N_RX_F1C_Bits',0,13,223,5,3
	.word	22611
	.byte	32
	.byte	'Ifx_CAN_N_RX_F1S_Bits',0,13,238,5,3
	.word	22789
	.byte	32
	.byte	'Ifx_CAN_N_SIDFC_Bits',0,13,247,5,3
	.word	20249
	.byte	32
	.byte	'Ifx_CAN_N_STARTADR_Bits',0,13,255,5,3
	.word	14223
	.byte	32
	.byte	'Ifx_CAN_N_TDCR_Bits',0,13,136,6,3
	.word	18771
	.byte	32
	.byte	'Ifx_CAN_N_TEST_Bits',0,13,149,6,3
	.word	17011
	.byte	32
	.byte	'Ifx_CAN_N_TOCC_Bits',0,13,158,6,3
	.word	18091
	.byte	32
	.byte	'Ifx_CAN_N_TOCV_Bits',0,13,165,6,3
	.word	18227
	.byte	32
	.byte	'Ifx_CAN_N_TSCC_Bits',0,13,174,6,3
	.word	17842
	.byte	32
	.byte	'Ifx_CAN_N_TSCV_Bits',0,13,181,6,3
	.word	17985
	.byte	32
	.byte	'Ifx_CAN_N_TTCR_Bits',0,13,192,6,3
	.word	16355
	.byte	32
	.byte	'Ifx_CAN_N_TT_CPT_Bits',0,13,200,6,3
	.word	31700
	.byte	32
	.byte	'Ifx_CAN_N_TT_CSM_Bits',0,13,207,6,3
	.word	31822
	.byte	32
	.byte	'Ifx_CAN_N_TT_CTC_Bits',0,13,215,6,3
	.word	31579
	.byte	32
	.byte	'Ifx_CAN_N_TT_GTP_Bits',0,13,222,6,3
	.word	30056
	.byte	32
	.byte	'Ifx_CAN_N_TT_IE_Bits',0,13,247,6,3
	.word	30671
	.byte	32
	.byte	'Ifx_CAN_N_TT_IR_Bits',0,13,144,7,3
	.word	30294
	.byte	32
	.byte	'Ifx_CAN_N_TT_LGT_Bits',0,13,151,7,3
	.word	31481
	.byte	32
	.byte	'Ifx_CAN_N_TT_MLM_Bits',0,13,162,7,3
	.word	29424
	.byte	32
	.byte	'Ifx_CAN_N_TT_OCF_Bits',0,13,179,7,3
	.word	29155
	.byte	32
	.byte	'Ifx_CAN_N_TT_OCN_Bits',0,13,199,7,3
	.word	29741
	.byte	32
	.byte	'Ifx_CAN_N_TT_OST_Bits',0,13,219,7,3
	.word	31067
	.byte	32
	.byte	'Ifx_CAN_N_TT_RMC_Bits',0,13,228,7,3
	.word	29016
	.byte	32
	.byte	'Ifx_CAN_N_TT_TMC_Bits',0,13,237,7,3
	.word	28870
	.byte	32
	.byte	'Ifx_CAN_N_TT_TMK_Bits',0,13,246,7,3
	.word	30155
	.byte	32
	.byte	'Ifx_CAN_N_TT_TURCF_Bits',0,13,255,7,3
	.word	29602
	.byte	32
	.byte	'Ifx_CAN_N_TT_TURNA_Bits',0,13,134,8,3
	.word	31371
	.byte	32
	.byte	'Ifx_CAN_N_TX_BAR_Bits',0,13,171,8,3
	.word	24590
	.byte	32
	.byte	'Ifx_CAN_N_TX_BC_Bits',0,13,183,8,3
	.word	23474
	.byte	32
	.byte	'Ifx_CAN_N_TX_BCF_Bits',0,13,220,8,3
	.word	26306
	.byte	32
	.byte	'Ifx_CAN_N_TX_BCIE_Bits',0,13,129,9,3
	.word	27483
	.byte	32
	.byte	'Ifx_CAN_N_TX_BCR_Bits',0,13,166,9,3
	.word	25162
	.byte	32
	.byte	'Ifx_CAN_N_TX_BRP_Bits',0,13,203,9,3
	.word	23986
	.byte	32
	.byte	'Ifx_CAN_N_TX_BTIE_Bits',0,13,240,9,3
	.word	26878
	.byte	32
	.byte	'Ifx_CAN_N_TX_BTO_Bits',0,13,149,10,3
	.word	25734
	.byte	32
	.byte	'Ifx_CAN_N_TX_EFA_Bits',0,13,156,10,3
	.word	28545
	.byte	32
	.byte	'Ifx_CAN_N_TX_EFC_Bits',0,13,167,10,3
	.word	28120
	.byte	32
	.byte	'Ifx_CAN_N_TX_EFS_Bits',0,13,181,10,3
	.word	28305
	.byte	32
	.byte	'Ifx_CAN_N_TX_ESC_Bits',0,13,188,10,3
	.word	23878
	.byte	32
	.byte	'Ifx_CAN_N_TX_FQS_Bits',0,13,200,10,3
	.word	23675
	.byte	32
	.byte	'Ifx_CAN_N_XIDAM_Bits',0,13,207,10,3
	.word	20541
	.byte	32
	.byte	'Ifx_CAN_N_XIDFC_Bits',0,13,216,10,3
	.word	20395
	.byte	32
	.byte	'Ifx_CAN_OCS_Bits',0,13,229,10,3
	.word	12539
	.byte	32
	.byte	'Ifx_CAN_R0_Bits',0,13,238,10,3
	.word	35896
	.byte	32
	.byte	'Ifx_CAN_R1_Bits',0,13,250,10,3
	.word	36019
	.byte	32
	.byte	'Ifx_CAN_STDMSG_S0_Bits',0,13,132,11,3
	.word	39970
	.byte	10
	.byte	'_Ifx_CAN_TRIGMSG_TM0_Bits',0,13,135,11,16,4,11
	.byte	'TYPE',0,1
	.word	603
	.byte	4,4,2,35,0,11
	.byte	'TMEX',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'TMIN',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	603
	.byte	2,0,2,35,0,11
	.byte	'CC',0,1
	.word	603
	.byte	7,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'TM',0,2
	.word	620
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_CAN_TRIGMSG_TM0_Bits',0,13,144,11,3
	.word	46178
	.byte	10
	.byte	'_Ifx_CAN_TRIGMSG_TM1_Bits',0,13,147,11,16,4,11
	.byte	'MSC',0,1
	.word	603
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	620
	.byte	13,0,2,35,0,11
	.byte	'MMR',0,1
	.word	603
	.byte	7,1,2,35,2,11
	.byte	'FTYPE',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	603
	.byte	8,0,2,35,3,0,32
	.byte	'Ifx_CAN_TRIGMSG_TM1_Bits',0,13,154,11,3
	.word	46366
	.byte	32
	.byte	'Ifx_CAN_TXEVENT_E0_Bits',0,13,163,11,3
	.word	42542
	.byte	32
	.byte	'Ifx_CAN_TXEVENT_E1_Bits',0,13,174,11,3
	.word	42673
	.byte	32
	.byte	'Ifx_CAN_TXMSG_DB_Bits',0,13,180,11,3
	.word	37102
	.byte	32
	.byte	'Ifx_CAN_TXMSG_T0_Bits',0,13,189,11,3
	.word	36784
	.byte	32
	.byte	'Ifx_CAN_TXMSG_T1_Bits',0,13,201,11,3
	.word	36913
	.byte	32
	.byte	'Ifx_CAN_ACCEN0',0,13,214,11,3
	.word	13607
	.byte	32
	.byte	'Ifx_CAN_ACCENCTR0',0,13,222,11,3
	.word	12499
	.byte	32
	.byte	'Ifx_CAN_BUFADR',0,13,230,11,3
	.word	11528
	.byte	32
	.byte	'Ifx_CAN_CLC',0,13,238,11,3
	.word	10987
	.byte	32
	.byte	'Ifx_CAN_DB',0,13,246,11,3
	.word	36245
	.byte	32
	.byte	'Ifx_CAN_EXTMSG_F0',0,13,254,11,3
	.word	39747
	.byte	32
	.byte	'Ifx_CAN_EXTMSG_F1',0,13,134,12,3
	.word	39873
	.byte	32
	.byte	'Ifx_CAN_ID',0,13,142,12,3
	.word	11112
	.byte	32
	.byte	'Ifx_CAN_KRST0',0,13,150,12,3
	.word	13038
	.byte	32
	.byte	'Ifx_CAN_KRST1',0,13,158,12,3
	.word	12915
	.byte	32
	.byte	'Ifx_CAN_KRSTCLR',0,13,166,12,3
	.word	12811
	.byte	32
	.byte	'Ifx_CAN_MCR',0,13,174,12,3
	.word	11380
	.byte	32
	.byte	'Ifx_CAN_MECR',0,13,182,12,3
	.word	11775
	.byte	32
	.byte	'Ifx_CAN_MESTAT',0,13,190,12,3
	.word	11916
	.byte	32
	.byte	'Ifx_CAN_N_ACCENNODE0',0,13,198,12,3
	.word	14183
	.byte	32
	.byte	'Ifx_CAN_N_CCCR',0,13,206,12,3
	.word	17644
	.byte	32
	.byte	'Ifx_CAN_N_CREL',0,13,214,12,3
	.word	16668
	.byte	32
	.byte	'Ifx_CAN_N_DBTP',0,13,222,12,3
	.word	16971
	.byte	32
	.byte	'Ifx_CAN_N_ECR',0,13,230,12,3
	.word	18451
	.byte	32
	.byte	'Ifx_CAN_N_ENDADR',0,13,238,12,3
	.word	14447
	.byte	32
	.byte	'Ifx_CAN_N_ENDN',0,13,246,12,3
	.word	16751
	.byte	32
	.byte	'Ifx_CAN_N_GFC',0,13,254,12,3
	.word	20209
	.byte	32
	.byte	'Ifx_CAN_N_GRINT1',0,13,134,13,3
	.word	14999
	.byte	32
	.byte	'Ifx_CAN_N_GRINT2',0,13,142,13,3
	.word	15203
	.byte	32
	.byte	'Ifx_CAN_N_HPMS',0,13,150,13,3
	.word	20763
	.byte	32
	.byte	'Ifx_CAN_N_IE',0,13,158,13,3
	.word	20047
	.byte	32
	.byte	'Ifx_CAN_N_IR',0,13,166,13,3
	.word	19448
	.byte	32
	.byte	'Ifx_CAN_N_ISREG',0,13,174,13,3
	.word	14801
	.byte	32
	.byte	'Ifx_CAN_N_NBTP',0,13,182,13,3
	.word	17802
	.byte	32
	.byte	'Ifx_CAN_N_NDAT1',0,13,190,13,3
	.word	21334
	.byte	32
	.byte	'Ifx_CAN_N_NDAT2',0,13,198,13,3
	.word	21915
	.byte	32
	.byte	'Ifx_CAN_N_NPCR',0,13,206,13,3
	.word	16304
	.byte	32
	.byte	'Ifx_CAN_N_NT_ATTR',0,13,214,13,3
	.word	15581
	.byte	32
	.byte	'Ifx_CAN_N_NT_BTTR',0,13,222,13,3
	.word	15725
	.byte	32
	.byte	'Ifx_CAN_N_NT_CCR',0,13,230,13,3
	.word	15437
	.byte	32
	.byte	'Ifx_CAN_N_NT_CTTR',0,13,238,13,3
	.word	15869
	.byte	32
	.byte	'Ifx_CAN_N_NT_RTR',0,13,246,13,3
	.word	16033
	.byte	32
	.byte	'Ifx_CAN_N_PSR',0,13,254,13,3
	.word	18731
	.byte	32
	.byte	'Ifx_CAN_N_RWD',0,13,134,14,3
	.word	17313
	.byte	32
	.byte	'Ifx_CAN_N_RX_BC',0,13,142,14,3
	.word	22571
	.byte	32
	.byte	'Ifx_CAN_N_RX_ESC',0,13,150,14,3
	.word	23305
	.byte	32
	.byte	'Ifx_CAN_N_RX_F0A',0,13,158,14,3
	.word	22441
	.byte	32
	.byte	'Ifx_CAN_N_RX_F0C',0,13,166,14,3
	.word	22093
	.byte	32
	.byte	'Ifx_CAN_N_RX_F0S',0,13,174,14,3
	.word	22333
	.byte	32
	.byte	'Ifx_CAN_N_RX_F1A',0,13,182,14,3
	.word	23120
	.byte	32
	.byte	'Ifx_CAN_N_RX_F1C',0,13,190,14,3
	.word	22749
	.byte	32
	.byte	'Ifx_CAN_N_RX_F1S',0,13,198,14,3
	.word	23012
	.byte	32
	.byte	'Ifx_CAN_N_SIDFC',0,13,206,14,3
	.word	20355
	.byte	32
	.byte	'Ifx_CAN_N_STARTADR',0,13,214,14,3
	.word	14317
	.byte	32
	.byte	'Ifx_CAN_N_TDCR',0,13,222,14,3
	.word	18876
	.byte	32
	.byte	'Ifx_CAN_N_TEST',0,13,230,14,3
	.word	17193
	.byte	32
	.byte	'Ifx_CAN_N_TOCC',0,13,238,14,3
	.word	18187
	.byte	32
	.byte	'Ifx_CAN_N_TOCV',0,13,246,14,3
	.word	18293
	.byte	32
	.byte	'Ifx_CAN_N_TSCC',0,13,254,14,3
	.word	17945
	.byte	32
	.byte	'Ifx_CAN_N_TSCV',0,13,134,15,3
	.word	18051
	.byte	32
	.byte	'Ifx_CAN_N_TTCR',0,13,142,15,3
	.word	16504
	.byte	32
	.byte	'Ifx_CAN_N_TT_CPT',0,13,150,15,3
	.word	31782
	.byte	32
	.byte	'Ifx_CAN_N_TT_CSM',0,13,158,15,3
	.word	31890
	.byte	32
	.byte	'Ifx_CAN_N_TT_CTC',0,13,166,15,3
	.word	31660
	.byte	32
	.byte	'Ifx_CAN_N_TT_GTP',0,13,174,15,3
	.word	30115
	.byte	32
	.byte	'Ifx_CAN_N_TT_IE',0,13,182,15,3
	.word	31027
	.byte	32
	.byte	'Ifx_CAN_N_TT_IR',0,13,190,15,3
	.word	30631
	.byte	32
	.byte	'Ifx_CAN_N_TT_LGT',0,13,198,15,3
	.word	31539
	.byte	32
	.byte	'Ifx_CAN_N_TT_MLM',0,13,206,15,3
	.word	29562
	.byte	32
	.byte	'Ifx_CAN_N_TT_OCF',0,13,214,15,3
	.word	29384
	.byte	32
	.byte	'Ifx_CAN_N_TT_OCN',0,13,222,15,3
	.word	30016
	.byte	32
	.byte	'Ifx_CAN_N_TT_OST',0,13,230,15,3
	.word	31331
	.byte	32
	.byte	'Ifx_CAN_N_TT_RMC',0,13,238,15,3
	.word	29115
	.byte	32
	.byte	'Ifx_CAN_N_TT_TMC',0,13,246,15,3
	.word	28976
	.byte	32
	.byte	'Ifx_CAN_N_TT_TMK',0,13,254,15,3
	.word	30254
	.byte	32
	.byte	'Ifx_CAN_N_TT_TURCF',0,13,134,16,3
	.word	29701
	.byte	32
	.byte	'Ifx_CAN_N_TT_TURNA',0,13,142,16,3
	.word	31441
	.byte	32
	.byte	'Ifx_CAN_N_TX_BAR',0,13,150,16,3
	.word	25122
	.byte	32
	.byte	'Ifx_CAN_N_TX_BC',0,13,158,16,3
	.word	23635
	.byte	32
	.byte	'Ifx_CAN_N_TX_BCF',0,13,166,16,3
	.word	26838
	.byte	32
	.byte	'Ifx_CAN_N_TX_BCIE',0,13,174,16,3
	.word	28080
	.byte	32
	.byte	'Ifx_CAN_N_TX_BCR',0,13,182,16,3
	.word	25694
	.byte	32
	.byte	'Ifx_CAN_N_TX_BRP',0,13,190,16,3
	.word	24550
	.byte	32
	.byte	'Ifx_CAN_N_TX_BTIE',0,13,198,16,3
	.word	27443
	.byte	32
	.byte	'Ifx_CAN_N_TX_BTO',0,13,206,16,3
	.word	26266
	.byte	32
	.byte	'Ifx_CAN_N_TX_EFA',0,13,214,16,3
	.word	28613
	.byte	32
	.byte	'Ifx_CAN_N_TX_EFC',0,13,222,16,3
	.word	28265
	.byte	32
	.byte	'Ifx_CAN_N_TX_EFS',0,13,230,16,3
	.word	28505
	.byte	32
	.byte	'Ifx_CAN_N_TX_ESC',0,13,238,16,3
	.word	23946
	.byte	32
	.byte	'Ifx_CAN_N_TX_FQS',0,13,246,16,3
	.word	23838
	.byte	32
	.byte	'Ifx_CAN_N_XIDAM',0,13,254,16,3
	.word	20609
	.byte	32
	.byte	'Ifx_CAN_N_XIDFC',0,13,134,17,3
	.word	20501
	.byte	32
	.byte	'Ifx_CAN_OCS',0,13,142,17,3
	.word	12705
	.byte	32
	.byte	'Ifx_CAN_R0',0,13,150,17,3
	.word	35979
	.byte	32
	.byte	'Ifx_CAN_R1',0,13,158,17,3
	.word	36159
	.byte	32
	.byte	'Ifx_CAN_STDMSG_S0',0,13,166,17,3
	.word	40089
	.byte	12,13,169,17,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46178
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CAN_TRIGMSG_TM0',0,13,174,17,3
	.word	48955
	.byte	12,13,177,17,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46366
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CAN_TRIGMSG_TM1',0,13,182,17,3
	.word	49024
	.byte	32
	.byte	'Ifx_CAN_TXEVENT_E0',0,13,190,17,3
	.word	42633
	.byte	32
	.byte	'Ifx_CAN_TXEVENT_E1',0,13,198,17,3
	.word	42794
	.byte	32
	.byte	'Ifx_CAN_TXMSG_DB',0,13,206,17,3
	.word	37146
	.byte	32
	.byte	'Ifx_CAN_TXMSG_T0',0,13,214,17,3
	.word	36873
	.byte	32
	.byte	'Ifx_CAN_TXMSG_T1',0,13,222,17,3
	.word	37062
	.byte	14
	.word	16073
	.byte	32
	.byte	'Ifx_CAN_N_NT',0,13,241,17,3
	.word	49227
	.byte	14
	.word	23345
	.byte	32
	.byte	'Ifx_CAN_N_RX',0,13,138,18,3
	.word	49254
	.byte	14
	.word	28653
	.byte	32
	.byte	'Ifx_CAN_N_TX',0,13,169,18,3
	.word	49281
	.byte	14
	.word	31930
	.byte	32
	.byte	'Ifx_CAN_N_TT',0,13,203,18,3
	.word	49308
	.byte	14
	.word	32198
	.byte	32
	.byte	'Ifx_CAN_N',0,13,139,19,3
	.word	49335
	.byte	14
	.word	40129
	.byte	32
	.byte	'Ifx_CAN_STDMSG',0,13,157,19,3
	.word	49359
	.byte	14
	.word	39913
	.byte	32
	.byte	'Ifx_CAN_EXTMSG',0,13,176,19,3
	.word	49388
	.byte	14
	.word	36294
	.byte	32
	.byte	'Ifx_CAN_RXMSG',0,13,196,19,3
	.word	49417
	.byte	14
	.word	42834
	.byte	32
	.byte	'Ifx_CAN_TXEVENT',0,13,215,19,3
	.word	49445
	.byte	14
	.word	37195
	.byte	32
	.byte	'Ifx_CAN_TXMSG',0,13,235,19,3
	.word	49475
	.byte	14
	.word	33023
	.byte	32
	.byte	'Ifx_CAN',0,13,163,20,3
	.word	49503
	.byte	32
	.byte	'IfxCan_Index',0,15,89,3
	.word	42239
	.byte	32
	.byte	'IfxCan_NodeId',0,15,100,3
	.word	36362
	.byte	15,24
	.word	43297
	.byte	16,2,0,20
	.word	49568
	.byte	34
	.byte	'IfxCan_cfg_indexMap',0,15,108,41
	.word	49577
	.byte	1,1,32
	.byte	'Ifx_P_ACCEN0_Bits',0,6,102,3
	.word	7972
	.byte	32
	.byte	'Ifx_P_ACCEN1_Bits',0,6,108,3
	.word	7885
	.byte	32
	.byte	'Ifx_P_ESR_Bits',0,6,130,1,3
	.word	4453
	.byte	32
	.byte	'Ifx_P_ID_Bits',0,6,138,1,3
	.word	2504
	.byte	32
	.byte	'Ifx_P_IN_Bits',0,6,160,1,3
	.word	3500
	.byte	32
	.byte	'Ifx_P_IOCR0_Bits',0,6,173,1,3
	.word	2633
	.byte	32
	.byte	'Ifx_P_IOCR12_Bits',0,6,186,1,3
	.word	3280
	.byte	32
	.byte	'Ifx_P_IOCR4_Bits',0,6,199,1,3
	.word	2848
	.byte	32
	.byte	'Ifx_P_IOCR8_Bits',0,6,212,1,3
	.word	3063
	.byte	32
	.byte	'Ifx_P_LPCR_Bits',0,6,231,1,3
	.word	7547
	.byte	32
	.byte	'Ifx_P_OMCR_Bits',0,6,253,1,3
	.word	7199
	.byte	32
	.byte	'Ifx_P_OMCR0_Bits',0,6,136,2,3
	.word	6186
	.byte	32
	.byte	'Ifx_P_OMCR12_Bits',0,6,146,2,3
	.word	6710
	.byte	32
	.byte	'Ifx_P_OMCR4_Bits',0,6,157,2,3
	.word	6360
	.byte	32
	.byte	'Ifx_P_OMCR8_Bits',0,6,168,2,3
	.word	6534
	.byte	32
	.byte	'Ifx_P_OMR_Bits',0,6,205,2,3
	.word	1933
	.byte	32
	.byte	'Ifx_P_OMSR_Bits',0,6,227,2,3
	.word	6866
	.byte	32
	.byte	'Ifx_P_OMSR0_Bits',0,6,237,2,3
	.word	5523
	.byte	32
	.byte	'Ifx_P_OMSR12_Bits',0,6,248,2,3
	.word	6011
	.byte	32
	.byte	'Ifx_P_OMSR4_Bits',0,6,131,3,3
	.word	5670
	.byte	32
	.byte	'Ifx_P_OMSR8_Bits',0,6,142,3,3
	.word	5839
	.byte	32
	.byte	'Ifx_P_OUT_Bits',0,6,164,3,3
	.word	1617
	.byte	32
	.byte	'Ifx_P_PCSR_Bits',0,6,187,3,3
	.word	5159
	.byte	32
	.byte	'Ifx_P_PDISC_Bits',0,6,209,3,3
	.word	4793
	.byte	32
	.byte	'Ifx_P_PDR0_Bits',0,6,230,3,3
	.word	3824
	.byte	32
	.byte	'Ifx_P_PDR1_Bits',0,6,251,3,3
	.word	4128
	.byte	32
	.byte	'Ifx_P_ACCEN0',0,6,136,4,3
	.word	8499
	.byte	32
	.byte	'Ifx_P_ACCEN1',0,6,144,4,3
	.word	7932
	.byte	32
	.byte	'Ifx_P_ESR',0,6,152,4,3
	.word	4744
	.byte	32
	.byte	'Ifx_P_ID',0,6,160,4,3
	.word	2584
	.byte	32
	.byte	'Ifx_P_IN',0,6,168,4,3
	.word	3775
	.byte	32
	.byte	'Ifx_P_IOCR0',0,6,176,4,3
	.word	2808
	.byte	32
	.byte	'Ifx_P_IOCR12',0,6,184,4,3
	.word	3460
	.byte	32
	.byte	'Ifx_P_IOCR4',0,6,192,4,3
	.word	3023
	.byte	32
	.byte	'Ifx_P_IOCR8',0,6,200,4,3
	.word	3240
	.byte	32
	.byte	'Ifx_P_LPCR',0,6,208,4,3
	.word	7827
	.byte	32
	.byte	'Ifx_P_OMCR',0,6,216,4,3
	.word	7507
	.byte	32
	.byte	'Ifx_P_OMCR0',0,6,224,4,3
	.word	6320
	.byte	32
	.byte	'Ifx_P_OMCR12',0,6,232,4,3
	.word	6826
	.byte	32
	.byte	'Ifx_P_OMCR4',0,6,240,4,3
	.word	6494
	.byte	32
	.byte	'Ifx_P_OMCR8',0,6,248,4,3
	.word	6670
	.byte	32
	.byte	'Ifx_P_OMR',0,6,128,5,3
	.word	2464
	.byte	32
	.byte	'Ifx_P_OMSR',0,6,136,5,3
	.word	7159
	.byte	32
	.byte	'Ifx_P_OMSR0',0,6,144,5,3
	.word	5630
	.byte	32
	.byte	'Ifx_P_OMSR12',0,6,152,5,3
	.word	6146
	.byte	32
	.byte	'Ifx_P_OMSR4',0,6,160,5,3
	.word	5799
	.byte	32
	.byte	'Ifx_P_OMSR8',0,6,168,5,3
	.word	5971
	.byte	32
	.byte	'Ifx_P_OUT',0,6,176,5,3
	.word	1893
	.byte	32
	.byte	'Ifx_P_PCSR',0,6,184,5,3
	.word	5483
	.byte	32
	.byte	'Ifx_P_PDISC',0,6,192,5,3
	.word	5119
	.byte	32
	.byte	'Ifx_P_PDR0',0,6,200,5,3
	.word	4088
	.byte	32
	.byte	'Ifx_P_PDR1',0,6,208,5,3
	.word	4404
	.byte	14
	.word	8539
	.byte	32
	.byte	'Ifx_P',0,6,128,6,3
	.word	50806
	.byte	17,20,162,11,9,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,18
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,32
	.byte	'IfxScu_WDTCON1_IR',0,20,167,11,3
	.word	50826
	.byte	10
	.byte	'_Ifx_SCU_ACCEN00_Bits',0,4,68,16,4,11
	.byte	'EN0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	603
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_ACCEN00_Bits',0,4,102,3
	.word	50948
	.byte	10
	.byte	'_Ifx_SCU_ACCEN01_Bits',0,4,105,16,4,11
	.byte	'reserved_0',0,4
	.word	428
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN01_Bits',0,4,108,3
	.word	51507
	.byte	10
	.byte	'_Ifx_SCU_ACCEN10_Bits',0,4,111,16,4,11
	.byte	'EN0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	603
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_ACCEN10_Bits',0,4,145,1,3
	.word	51586
	.byte	10
	.byte	'_Ifx_SCU_ACCEN11_Bits',0,4,148,1,16,4,11
	.byte	'reserved_0',0,4
	.word	428
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN11_Bits',0,4,151,1,3
	.word	52146
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,4,154,1,16,4,11
	.byte	'STM0DIS',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'STM3DIS',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'STM4DIS',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'STM5DIS',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	603
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	428
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,4,164,1,3
	.word	52227
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,4,167,1,16,4,11
	.byte	'STMDIV',0,1
	.word	603
	.byte	4,4,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	603
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	603
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	603
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	603
	.byte	4,4,2,35,2,11
	.byte	'BBBDIV',0,1
	.word	603
	.byte	4,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	603
	.byte	2,6,2,35,3,11
	.byte	'FSI2DIV',0,1
	.word	603
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	603
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	603
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON0_Bits',0,4,181,1,3
	.word	52444
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,4,184,1,16,4,11
	.byte	'MCANDIV',0,1
	.word	603
	.byte	4,4,2,35,0,11
	.byte	'CLKSELMCAN',0,1
	.word	603
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'PLL1DIVDIS',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'I2CDIV',0,1
	.word	603
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	603
	.byte	4,0,2,35,1,11
	.byte	'MSCDIV',0,1
	.word	603
	.byte	4,4,2,35,2,11
	.byte	'CLKSELMSC',0,1
	.word	603
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	603
	.byte	2,0,2,35,2,11
	.byte	'QSPIDIV',0,1
	.word	603
	.byte	4,4,2,35,3,11
	.byte	'CLKSELQSPI',0,1
	.word	603
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	603
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON1_Bits',0,4,199,1,3
	.word	52717
	.byte	10
	.byte	'_Ifx_SCU_CCUCON10_Bits',0,4,202,1,16,4,11
	.byte	'CPU4DIV',0,1
	.word	603
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	428
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON10_Bits',0,4,206,1,3
	.word	53043
	.byte	10
	.byte	'_Ifx_SCU_CCUCON11_Bits',0,4,209,1,16,4,11
	.byte	'CPU5DIV',0,1
	.word	603
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	428
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON11_Bits',0,4,213,1,3
	.word	53145
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,4,216,1,16,4,11
	.byte	'ASCLINFDIV',0,1
	.word	603
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	603
	.byte	4,0,2,35,0,11
	.byte	'ASCLINSDIV',0,1
	.word	603
	.byte	4,4,2,35,1,11
	.byte	'CLKSELASCLINS',0,1
	.word	603
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	428
	.byte	10,8,2,35,0,11
	.byte	'EBUPERON',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'ERAYPERON',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'HSPDMPERON',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	603
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	603
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON2_Bits',0,4,228,1,3
	.word	53247
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,4,231,1,16,4,11
	.byte	'PLL0MONEN',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'PLL1MONEN',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'PLL2MONEN',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'SPBMONEN',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'BACKMONEN',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	603
	.byte	3,0,2,35,0,11
	.byte	'PLL0MONTST',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'PLL1MONTST',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'PLL2MONTST',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'SPBMONTST',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'BACKMONTST',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	428
	.byte	11,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	603
	.byte	6,2,2,35,3,11
	.byte	'UP',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	603
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON3_Bits',0,4,248,1,3
	.word	53521
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,4,251,1,16,4,11
	.byte	'LOTHR',0,2
	.word	620
	.byte	12,4,2,35,0,11
	.byte	'UPTHR',0,4
	.word	428
	.byte	12,8,2,35,0,11
	.byte	'MONEN',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'MONTST',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	603
	.byte	4,2,2,35,3,11
	.byte	'UP',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	603
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON4_Bits',0,4,132,2,3
	.word	53890
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,4,135,2,16,4,11
	.byte	'GETHDIV',0,1
	.word	603
	.byte	4,4,2,35,0,11
	.byte	'MCANHDIV',0,1
	.word	603
	.byte	4,0,2,35,0,11
	.byte	'ADASDIV',0,1
	.word	603
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	428
	.byte	18,2,2,35,0,11
	.byte	'UP',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	603
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON5_Bits',0,4,143,2,3
	.word	54070
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,4,146,2,16,4,11
	.byte	'CPU0DIV',0,1
	.word	603
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	428
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON6_Bits',0,4,150,2,3
	.word	54239
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,4,153,2,16,4,11
	.byte	'CPU1DIV',0,1
	.word	603
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	428
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON7_Bits',0,4,157,2,3
	.word	54339
	.byte	10
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,4,160,2,16,4,11
	.byte	'CPU2DIV',0,1
	.word	603
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	428
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON8_Bits',0,4,164,2,3
	.word	54439
	.byte	10
	.byte	'_Ifx_SCU_CCUCON9_Bits',0,4,167,2,16,4,11
	.byte	'CPU3DIV',0,1
	.word	603
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	428
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON9_Bits',0,4,171,2,3
	.word	54539
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,4,174,2,16,4,11
	.byte	'CHREV',0,1
	.word	603
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	603
	.byte	2,0,2,35,0,11
	.byte	'CHPK',0,1
	.word	603
	.byte	4,4,2,35,1,11
	.byte	'CHID',0,1
	.word	603
	.byte	4,0,2,35,1,11
	.byte	'EEA',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	603
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	603
	.byte	4,4,2,35,3,11
	.byte	'VART',0,1
	.word	603
	.byte	3,1,2,35,3,11
	.byte	'SEC',0,1
	.word	603
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CHIPID_Bits',0,4,185,2,3
	.word	54639
	.byte	10
	.byte	'_Ifx_SCU_DTSCLIM_Bits',0,4,188,2,16,4,11
	.byte	'LOWER',0,2
	.word	620
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'BGPOK',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'EN',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'LLU',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	620
	.byte	12,4,2,35,2,11
	.byte	'INTEN',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'INT',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	603
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_DTSCLIM_Bits',0,4,200,2,3
	.word	54842
	.byte	10
	.byte	'_Ifx_SCU_DTSCSTAT_Bits',0,4,203,2,16,4,11
	.byte	'RESULT',0,2
	.word	620
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	428
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_SCU_DTSCSTAT_Bits',0,4,207,2,3
	.word	55074
	.byte	10
	.byte	'_Ifx_SCU_EICON0_Bits',0,4,210,2,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	451
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	451
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SCU_EICON0_Bits',0,4,216,2,3
	.word	55176
	.byte	10
	.byte	'_Ifx_SCU_EICON1_Bits',0,4,219,2,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	428
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_EICON1_Bits',0,4,228,2,3
	.word	55304
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,4,231,2,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	603
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	603
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	428
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	603
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	603
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	603
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EICR_Bits',0,4,250,2,3
	.word	55493
	.byte	10
	.byte	'_Ifx_SCU_EIFILT_Bits',0,4,253,2,16,4,11
	.byte	'FILRQ0A',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'FILRQ5A',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'FILRQ2A',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'FILRQ3A',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'FILRQ0C',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'FILRQ1C',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'FILRQ3C',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'FILRQ2C',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'FILRQ4A',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'FILRQ6A',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'FILRQ1A',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'FILRQ7A',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'FILRQ6D',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'FILRQ4D',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'FILRQ2B',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'FILRQ3B',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'FILRQ7C',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	603
	.byte	7,0,2,35,2,11
	.byte	'FILTDIV',0,1
	.word	603
	.byte	4,4,2,35,3,11
	.byte	'DEPTH',0,1
	.word	603
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_EIFILT_Bits',0,4,147,3,3
	.word	55857
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,4,150,3,16,4,11
	.byte	'INTF0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	428
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_EIFR_Bits',0,4,161,3,3
	.word	56296
	.byte	10
	.byte	'_Ifx_SCU_EISR_Bits',0,4,164,3,16,4,11
	.byte	'AE',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	620
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	620
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_EISR_Bits',0,4,174,3,3
	.word	56507
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,4,177,3,16,4,11
	.byte	'POL',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	620
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	620
	.byte	14,0,2,35,2,0,32
	.byte	'Ifx_SCU_EMSR_Bits',0,4,187,3,3
	.word	56683
	.byte	10
	.byte	'_Ifx_SCU_EMSSW_Bits',0,4,190,3,16,4,11
	.byte	'reserved_0',0,4
	.word	428
	.byte	24,8,2,35,0,11
	.byte	'EMSFM',0,1
	.word	603
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	603
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	603
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_EMSSW_Bits',0,4,196,3,3
	.word	56877
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,4,199,3,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	620
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	428
	.byte	23,0,2,35,0,0,32
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,4,204,3,3
	.word	57012
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,4,207,3,16,4,11
	.byte	'ARI',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	428
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_ESROCFG_Bits',0,4,212,3,3
	.word	57148
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,4,215,3,16,4,11
	.byte	'EN0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	603
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	620
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	603
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	603
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	603
	.byte	8,0,2,35,3,0,32
	.byte	'Ifx_SCU_EXTCON_Bits',0,4,226,3,3
	.word	57259
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,4,229,3,16,4,11
	.byte	'STEP',0,2
	.word	620
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	603
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	603
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	620
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	603
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	603
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_FDR_Bits',0,4,237,3,3
	.word	57477
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,4,240,3,16,4,11
	.byte	'FS0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	603
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	603
	.byte	8,0,2,35,3,0,32
	.byte	'Ifx_SCU_FMR_Bits',0,4,132,4,3
	.word	57640
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,4,135,4,16,4,11
	.byte	'MODREV',0,1
	.word	603
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	603
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	620
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_ID_Bits',0,4,140,4,3
	.word	57976
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,4,143,4,16,4,11
	.byte	'IPEN00',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	603
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	603
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	603
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	603
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SCU_IGCR_Bits',0,4,167,4,3
	.word	58083
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,4,170,4,16,4,11
	.byte	'P0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	428
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_IN_Bits',0,4,175,4,3
	.word	58535
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,4,178,4,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	603
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	603
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	603
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_IOCR_Bits',0,4,185,4,3
	.word	58634
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,4,188,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'LBISTRES',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,4
	.word	428
	.byte	18,12,2,35,0,11
	.byte	'reserved_20',0,2
	.word	620
	.byte	8,4,2,35,2,11
	.byte	'LBISTDONE',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'LBISTERRINJ',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'LBISTREQRED',0,1
	.word	603
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,4,198,4,3
	.word	58784
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,4,201,4,16,4,11
	.byte	'SEED',0,4
	.word	428
	.byte	19,13,2,35,0,11
	.byte	'reserved_19',0,1
	.word	603
	.byte	5,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	603
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	603
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,4,208,4,3
	.word	59022
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,4,211,4,16,4,11
	.byte	'LENGTH',0,2
	.word	620
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	428
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,4,215,4,3
	.word	59183
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL3_Bits',0,4,218,4,16,4,11
	.byte	'SIGNATURE',0,4
	.word	428
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL3_Bits',0,4,221,4,3
	.word	59289
	.byte	10
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,4,224,4,16,4,11
	.byte	'LS2',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	620
	.byte	14,1,2,35,0,11
	.byte	'LSEN2',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'LS0',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	620
	.byte	14,1,2,35,2,11
	.byte	'LSEN0',0,1
	.word	603
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_LCLCON0_Bits',0,4,232,4,3
	.word	59375
	.byte	10
	.byte	'_Ifx_SCU_LCLCON1_Bits',0,4,235,4,16,4,11
	.byte	'LS3',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	620
	.byte	14,1,2,35,0,11
	.byte	'LSEN3',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'LS1',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	620
	.byte	14,1,2,35,2,11
	.byte	'LSEN1',0,1
	.word	603
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_LCLCON1_Bits',0,4,243,4,3
	.word	59543
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,4,246,4,16,4,11
	.byte	'LCLT0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'LCLT2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'LCLT3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'LCLT4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'LCLT5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	620
	.byte	10,0,2,35,0,11
	.byte	'PLCLT0',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'PLCLT1',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'PLCLT2',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'PLCLT3',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'PLCLT4',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'PLCLT5',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	620
	.byte	10,0,2,35,2,0,32
	.byte	'Ifx_SCU_LCLTEST_Bits',0,4,134,5,3
	.word	59711
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,4,137,5,16,4,11
	.byte	'DEPT',0,1
	.word	603
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	620
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_MANID_Bits',0,4,142,5,3
	.word	60025
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,4,145,5,16,4,11
	.byte	'PS0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	620
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	620
	.byte	14,0,2,35,2,0,32
	.byte	'Ifx_SCU_OMR_Bits',0,4,153,5,3
	.word	60136
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,4,156,5,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	603
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	603
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'HYSEN',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'HYSCTL',0,1
	.word	603
	.byte	2,4,2,35,1,11
	.byte	'AMPCTL',0,1
	.word	603
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	603
	.byte	2,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	603
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	603
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	603
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_OSCCON_Bits',0,4,177,5,3
	.word	60294
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,4,180,5,16,4,11
	.byte	'P0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	428
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_OUT_Bits',0,4,185,5,3
	.word	60705
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,4,188,5,16,4,11
	.byte	'CSEL0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'CSEL3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'CSEL4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'CSEL5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	620
	.byte	10,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	603
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	603
	.byte	6,0,2,35,3,0,32
	.byte	'Ifx_SCU_OVCCON_Bits',0,4,204,5,3
	.word	60806
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,4,207,5,16,4,11
	.byte	'OVEN0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'OVEN3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'OVEN4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'OVEN5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	428
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,4,216,5,3
	.word	61124
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,4,219,5,16,4,11
	.byte	'PDIS0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	428
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDISC_Bits',0,4,224,5,3
	.word	61311
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,4,227,5,16,4,11
	.byte	'PD0',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	603
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	603
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	603
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	428
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDR_Bits',0,4,234,5,3
	.word	61422
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,4,237,5,16,4,11
	.byte	'PDR0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	428
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDRR_Bits',0,4,248,5,3
	.word	61555
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON0_Bits',0,4,251,5,16,4,11
	.byte	'DIVBY',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	620
	.byte	8,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	603
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	603
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	603
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	603
	.byte	5,0,2,35,3,0,32
	.byte	'Ifx_SCU_PERPLLCON0_Bits',0,4,134,6,3
	.word	61758
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON1_Bits',0,4,137,6,16,4,11
	.byte	'K2DIV',0,1
	.word	603
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	603
	.byte	5,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	603
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	428
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLCON1_Bits',0,4,143,6,3
	.word	61998
	.byte	10
	.byte	'_Ifx_SCU_PERPLLSTAT_Bits',0,4,146,6,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'K3RDY',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	428
	.byte	25,0,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLSTAT_Bits',0,4,156,6,3
	.word	62142
	.byte	10
	.byte	'_Ifx_SCU_PMCSR0_Bits',0,4,159,6,16,4,11
	.byte	'REQSLP',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	603
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	428
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR0_Bits',0,4,165,6,3
	.word	62364
	.byte	10
	.byte	'_Ifx_SCU_PMCSR1_Bits',0,4,168,6,16,4,11
	.byte	'REQSLP',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	603
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	428
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR1_Bits',0,4,174,6,3
	.word	62500
	.byte	10
	.byte	'_Ifx_SCU_PMCSR2_Bits',0,4,177,6,16,4,11
	.byte	'REQSLP',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	603
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	428
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR2_Bits',0,4,183,6,3
	.word	62636
	.byte	10
	.byte	'_Ifx_SCU_PMCSR3_Bits',0,4,186,6,16,4,11
	.byte	'REQSLP',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	603
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	428
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR3_Bits',0,4,192,6,3
	.word	62772
	.byte	10
	.byte	'_Ifx_SCU_PMCSR4_Bits',0,4,195,6,16,4,11
	.byte	'REQSLP',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	603
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	428
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR4_Bits',0,4,201,6,3
	.word	62908
	.byte	10
	.byte	'_Ifx_SCU_PMCSR5_Bits',0,4,204,6,16,4,11
	.byte	'REQSLP',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	603
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	428
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR5_Bits',0,4,210,6,3
	.word	63044
	.byte	10
	.byte	'_Ifx_SCU_PMSTAT0_Bits',0,4,213,6,16,4,11
	.byte	'CPU0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'CPU1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'CPU2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'CPU3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'CPU4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'CPU5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	620
	.byte	10,0,2,35,0,11
	.byte	'CPU0LS',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'CPU1LS',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'CPU2LS',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'CPU3LS',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	620
	.byte	12,0,2,35,2,0,32
	.byte	'Ifx_SCU_PMSTAT0_Bits',0,4,227,6,3
	.word	63180
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,4,230,6,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	8,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	603
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	428
	.byte	11,8,2,35,0,11
	.byte	'CPUSEL',0,1
	.word	603
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	603
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	603
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,4,241,6,3
	.word	63452
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR0_Bits',0,4,244,6,16,4,11
	.byte	'LJTEN',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'LJTOVEN',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'LJTOVIEN',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'LJTSTRT',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'LJTSTP',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'LJTCLR',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	620
	.byte	6,4,2,35,0,11
	.byte	'SDSTEP',0,1
	.word	603
	.byte	4,0,2,35,1,11
	.byte	'VDTEN',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'VDTOVEN',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'VDTOVIEN',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'VDTSTRT',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'VDTSTP',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'VDTCLR',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	620
	.byte	7,3,2,35,2,11
	.byte	'LPSLPEN',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	603
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMTRCSR0_Bits',0,4,135,7,3
	.word	63697
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR1_Bits',0,4,138,7,16,4,11
	.byte	'LJTCV',0,2
	.word	620
	.byte	16,0,2,35,0,11
	.byte	'VDTCV',0,2
	.word	620
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	603
	.byte	6,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMTRCSR1_Bits',0,4,143,7,3
	.word	64085
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR2_Bits',0,4,146,7,16,4,11
	.byte	'LDJMPREQ',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	2,4,2,35,0,11
	.byte	'LJTRUN',0,1
	.word	603
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	603
	.byte	2,0,2,35,0,11
	.byte	'LJTOV',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	603
	.byte	3,4,2,35,1,11
	.byte	'LJTOVCLR',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	603
	.byte	3,0,2,35,1,11
	.byte	'LJTCNT',0,2
	.word	620
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_PMTRCSR2_Bits',0,4,157,7,3
	.word	64203
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR3_Bits',0,4,160,7,16,4,11
	.byte	'VDROOPREQ',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	2,4,2,35,0,11
	.byte	'VDTRUN',0,1
	.word	603
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	603
	.byte	2,0,2,35,0,11
	.byte	'VDTOV',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	603
	.byte	3,4,2,35,1,11
	.byte	'VDTOVCLR',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	603
	.byte	3,0,2,35,1,11
	.byte	'VDTCNT',0,2
	.word	620
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	603
	.byte	6,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMTRCSR3_Bits',0,4,172,7,3
	.word	64446
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,4,175,7,16,4,11
	.byte	'ESR0',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	603
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	603
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	603
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	603
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	603
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	603
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	603
	.byte	2,0,2,35,1,11
	.byte	'STM3',0,1
	.word	603
	.byte	2,6,2,35,2,11
	.byte	'STM4',0,1
	.word	603
	.byte	2,4,2,35,2,11
	.byte	'STM5',0,1
	.word	603
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	620
	.byte	10,0,2,35,2,0,32
	.byte	'Ifx_SCU_RSTCON_Bits',0,4,189,7,3
	.word	64713
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,4,192,7,16,4,11
	.byte	'FRTO',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'CSSX',0,2
	.word	620
	.byte	6,3,2,35,0,11
	.byte	'reserved_13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	620
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_RSTCON2_Bits',0,4,206,7,3
	.word	64972
	.byte	10
	.byte	'_Ifx_SCU_RSTCON3_Bits',0,4,209,7,16,4,11
	.byte	'reserved_0',0,4
	.word	428
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON3_Bits',0,4,212,7,3
	.word	65277
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,4,215,7,16,4,11
	.byte	'ESR0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'STM3',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'STM4',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'STM5',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	603
	.byte	5,0,2,35,1,11
	.byte	'PORST',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'EVRC',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'HSMS',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'HSMA',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'LBPORST',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'LBTERM',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	603
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,4,245,7,3
	.word	65358
	.byte	10
	.byte	'_Ifx_SCU_SEICON0_Bits',0,4,248,7,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	451
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	451
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON0_Bits',0,4,254,7,3
	.word	65907
	.byte	10
	.byte	'_Ifx_SCU_SEICON1_Bits',0,4,129,8,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	428
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON1_Bits',0,4,138,8,3
	.word	66037
	.byte	10
	.byte	'_Ifx_SCU_SEISR_Bits',0,4,141,8,16,4,11
	.byte	'AE',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	620
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	620
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SEISR_Bits',0,4,151,8,3
	.word	66228
	.byte	10
	.byte	'_Ifx_SCU_STCON_Bits',0,4,154,8,16,4,11
	.byte	'reserved_0',0,2
	.word	620
	.byte	13,3,2,35,0,11
	.byte	'SFCBAE',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'CFCBAE',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'STP',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_STCON_Bits',0,4,161,8,3
	.word	66406
	.byte	10
	.byte	'_Ifx_SCU_STMEM1_Bits',0,4,164,8,16,4,11
	.byte	'MEM',0,4
	.word	428
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM1_Bits',0,4,167,8,3
	.word	66557
	.byte	10
	.byte	'_Ifx_SCU_STMEM2_Bits',0,4,170,8,16,4,11
	.byte	'MEM',0,4
	.word	428
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM2_Bits',0,4,173,8,3
	.word	66629
	.byte	10
	.byte	'_Ifx_SCU_STMEM3_Bits',0,4,176,8,16,4,11
	.byte	'MEM',0,4
	.word	428
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM3_Bits',0,4,179,8,3
	.word	66701
	.byte	10
	.byte	'_Ifx_SCU_STMEM4_Bits',0,4,182,8,16,4,11
	.byte	'MEM',0,4
	.word	428
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM4_Bits',0,4,185,8,3
	.word	66773
	.byte	10
	.byte	'_Ifx_SCU_STMEM5_Bits',0,4,188,8,16,4,11
	.byte	'MEM',0,4
	.word	428
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM5_Bits',0,4,191,8,3
	.word	66845
	.byte	10
	.byte	'_Ifx_SCU_STMEM6_Bits',0,4,194,8,16,4,11
	.byte	'MEM',0,4
	.word	428
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM6_Bits',0,4,197,8,3
	.word	66917
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,4,200,8,16,4,11
	.byte	'HWCFG',0,1
	.word	603
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	603
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	603
	.byte	3,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	603
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_STSTAT_Bits',0,4,216,8,3
	.word	66989
	.byte	10
	.byte	'_Ifx_SCU_SWAPCTRL_Bits',0,4,219,8,16,4,11
	.byte	'ADDRCFG',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'SPARE',0,2
	.word	620
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SWAPCTRL_Bits',0,4,224,8,3
	.word	67318
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,4,227,8,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	6,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	603
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,4,234,8,3
	.word	67438
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,4,237,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	603
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'DDC',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	603
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SYSCON_Bits',0,4,249,8,3
	.word	67608
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON0_Bits',0,4,252,8,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	620
	.byte	6,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	603
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	603
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	603
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	603
	.byte	3,2,2,35,3,11
	.byte	'INSEL',0,1
	.word	603
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SCU_SYSPLLCON0_Bits',0,4,137,9,3
	.word	67871
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON1_Bits',0,4,140,9,16,4,11
	.byte	'K2DIV',0,1
	.word	603
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	428
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON1_Bits',0,4,144,9,3
	.word	68150
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON2_Bits',0,4,147,9,16,4,11
	.byte	'MODCFG',0,2
	.word	620
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SYSPLLCON2_Bits',0,4,151,9,3
	.word	68254
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLSTAT_Bits',0,4,154,9,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	603
	.byte	2,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	428
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLSTAT_Bits',0,4,164,9,3
	.word	68360
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,4,167,9,16,4,11
	.byte	'ESR0T',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	428
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,4,174,9,3
	.word	68583
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS0_Bits',0,4,177,9,16,4,11
	.byte	'CPU0ESR0T',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'CPU0ESR1T',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'CPU0TRAP2T',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'CPU0SMUT',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	603
	.byte	4,0,2,35,0,11
	.byte	'CPU1ESR0T',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'CPU1ESR1T',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'CPU1TRAP2T',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'CPU1SMUT',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	603
	.byte	4,0,2,35,1,11
	.byte	'CPU2ESR0T',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'CPU2ESR1T',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'CPU2TRAP2T',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'CPU2SMUT',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	603
	.byte	4,0,2,35,2,11
	.byte	'CPU3ESR0T',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'CPU3ESR1T',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'CPU3TRAP2T',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'CPU3SMUT',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	603
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_TRAPDIS0_Bits',0,4,199,9,3
	.word	68731
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS1_Bits',0,4,202,9,16,4,11
	.byte	'CPU4ESR0T',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'CPU4ESR1T',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'CPU4TRAP2T',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'CPU4SMUT',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	603
	.byte	4,0,2,35,0,11
	.byte	'CPU5ESR0T',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'CPU5ESR1T',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'CPU5TRAP2T',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'CPU5SMUT',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	603
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_TRAPDIS1_Bits',0,4,215,9,3
	.word	69219
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,4,218,9,16,4,11
	.byte	'ESR0T',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	428
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSET_Bits',0,4,225,9,3
	.word	69516
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,4,228,9,16,4,11
	.byte	'ESR0T',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	428
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,4,235,9,3
	.word	69664
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,4,244,9,3
	.word	467
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,4,132,10,3
	.word	642
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,4,148,10,3
	.word	908
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,4,151,10,16,4,11
	.byte	'ENDINIT',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	451
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	451
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,4,157,10,3
	.word	69914
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,4,160,10,16,4,11
	.byte	'CLRIRF',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	603
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,4,173,10,3
	.word	70040
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,4,176,10,16,4,11
	.byte	'AE',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	603
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	620
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,4,189,10,3
	.word	70292
	.byte	12,4,197,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50948
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN00',0,4,202,10,3
	.word	70511
	.byte	12,4,205,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51507
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN01',0,4,210,10,3
	.word	70576
	.byte	12,4,213,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51586
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN10',0,4,218,10,3
	.word	70641
	.byte	12,4,221,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52146
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN11',0,4,226,10,3
	.word	70706
	.byte	12,4,229,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52227
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ARSTDIS',0,4,234,10,3
	.word	70771
	.byte	12,4,237,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52444
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON0',0,4,242,10,3
	.word	70836
	.byte	12,4,245,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52717
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON1',0,4,250,10,3
	.word	70901
	.byte	12,4,253,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53043
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON10',0,4,130,11,3
	.word	70966
	.byte	12,4,133,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53145
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON11',0,4,138,11,3
	.word	71032
	.byte	12,4,141,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53247
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON2',0,4,146,11,3
	.word	71098
	.byte	12,4,149,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53521
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON3',0,4,154,11,3
	.word	71163
	.byte	12,4,157,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53890
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON4',0,4,162,11,3
	.word	71228
	.byte	12,4,165,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54070
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON5',0,4,170,11,3
	.word	71293
	.byte	12,4,173,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54239
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON6',0,4,178,11,3
	.word	71358
	.byte	12,4,181,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54339
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON7',0,4,186,11,3
	.word	71423
	.byte	12,4,189,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54439
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON8',0,4,194,11,3
	.word	71488
	.byte	12,4,197,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54539
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON9',0,4,202,11,3
	.word	71553
	.byte	12,4,205,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54639
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CHIPID',0,4,210,11,3
	.word	71618
	.byte	12,4,213,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54842
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_DTSCLIM',0,4,218,11,3
	.word	71682
	.byte	12,4,221,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55074
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_DTSCSTAT',0,4,226,11,3
	.word	71747
	.byte	12,4,229,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55176
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EICON0',0,4,234,11,3
	.word	71813
	.byte	12,4,237,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55304
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EICON1',0,4,242,11,3
	.word	71877
	.byte	12,4,245,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55493
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EICR',0,4,250,11,3
	.word	71941
	.byte	12,4,253,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55857
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EIFILT',0,4,130,12,3
	.word	72003
	.byte	12,4,133,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56296
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EIFR',0,4,138,12,3
	.word	72067
	.byte	12,4,141,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56507
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EISR',0,4,146,12,3
	.word	72129
	.byte	12,4,149,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56683
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EMSR',0,4,154,12,3
	.word	72191
	.byte	12,4,157,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56877
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EMSSW',0,4,162,12,3
	.word	72253
	.byte	12,4,165,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57012
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX',0,4,170,12,3
	.word	72316
	.byte	12,4,173,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57148
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ESROCFG',0,4,178,12,3
	.word	72389
	.byte	12,4,181,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57259
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EXTCON',0,4,186,12,3
	.word	72454
	.byte	12,4,189,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57477
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_FDR',0,4,194,12,3
	.word	72518
	.byte	12,4,197,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57640
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_FMR',0,4,202,12,3
	.word	72579
	.byte	12,4,205,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57976
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ID',0,4,210,12,3
	.word	72640
	.byte	12,4,213,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58083
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IGCR',0,4,218,12,3
	.word	72700
	.byte	12,4,221,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58535
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IN',0,4,226,12,3
	.word	72762
	.byte	12,4,229,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58634
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IOCR',0,4,234,12,3
	.word	72822
	.byte	12,4,237,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58784
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL0',0,4,242,12,3
	.word	72884
	.byte	12,4,245,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59022
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL1',0,4,250,12,3
	.word	72952
	.byte	12,4,253,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59183
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL2',0,4,130,13,3
	.word	73020
	.byte	12,4,133,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59289
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL3',0,4,138,13,3
	.word	73088
	.byte	12,4,141,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59375
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LCLCON0',0,4,146,13,3
	.word	73156
	.byte	12,4,149,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59543
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LCLCON1',0,4,154,13,3
	.word	73221
	.byte	12,4,157,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59711
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LCLTEST',0,4,162,13,3
	.word	73286
	.byte	12,4,165,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60025
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_MANID',0,4,170,13,3
	.word	73351
	.byte	12,4,173,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60136
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OMR',0,4,178,13,3
	.word	73414
	.byte	12,4,181,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60294
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OSCCON',0,4,186,13,3
	.word	73475
	.byte	12,4,189,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60705
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OUT',0,4,194,13,3
	.word	73539
	.byte	12,4,197,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60806
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OVCCON',0,4,202,13,3
	.word	73600
	.byte	12,4,205,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61124
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OVCENABLE',0,4,210,13,3
	.word	73664
	.byte	12,4,213,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61311
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDISC',0,4,218,13,3
	.word	73731
	.byte	12,4,221,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61422
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDR',0,4,226,13,3
	.word	73794
	.byte	12,4,229,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61555
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDRR',0,4,234,13,3
	.word	73855
	.byte	12,4,237,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61758
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLCON0',0,4,242,13,3
	.word	73917
	.byte	12,4,245,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61998
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLCON1',0,4,250,13,3
	.word	73985
	.byte	12,4,253,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62142
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLSTAT',0,4,130,14,3
	.word	74053
	.byte	12,4,133,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62364
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR0',0,4,138,14,3
	.word	74121
	.byte	12,4,141,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62500
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR1',0,4,146,14,3
	.word	74185
	.byte	12,4,149,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62636
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR2',0,4,154,14,3
	.word	74249
	.byte	12,4,157,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62772
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR3',0,4,162,14,3
	.word	74313
	.byte	12,4,165,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62908
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR4',0,4,170,14,3
	.word	74377
	.byte	12,4,173,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63044
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR5',0,4,178,14,3
	.word	74441
	.byte	12,4,181,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63180
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMSTAT0',0,4,186,14,3
	.word	74505
	.byte	12,4,189,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63452
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMSWCR1',0,4,194,14,3
	.word	74570
	.byte	12,4,197,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63697
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR0',0,4,202,14,3
	.word	74635
	.byte	12,4,205,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64085
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR1',0,4,210,14,3
	.word	74701
	.byte	12,4,213,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64203
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR2',0,4,218,14,3
	.word	74767
	.byte	12,4,221,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64446
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR3',0,4,226,14,3
	.word	74833
	.byte	12,4,229,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64713
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON',0,4,234,14,3
	.word	74899
	.byte	12,4,237,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64972
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON2',0,4,242,14,3
	.word	74963
	.byte	12,4,245,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65277
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON3',0,4,250,14,3
	.word	75028
	.byte	12,4,253,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65358
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTSTAT',0,4,130,15,3
	.word	75093
	.byte	12,4,133,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65907
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON0',0,4,138,15,3
	.word	75158
	.byte	12,4,141,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66037
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON1',0,4,146,15,3
	.word	75223
	.byte	12,4,149,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66228
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SEISR',0,4,154,15,3
	.word	75288
	.byte	12,4,157,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66406
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STCON',0,4,162,15,3
	.word	75351
	.byte	12,4,165,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66557
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM1',0,4,170,15,3
	.word	75414
	.byte	12,4,173,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66629
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM2',0,4,178,15,3
	.word	75478
	.byte	12,4,181,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66701
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM3',0,4,186,15,3
	.word	75542
	.byte	12,4,189,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66773
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM4',0,4,194,15,3
	.word	75606
	.byte	12,4,197,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66845
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM5',0,4,202,15,3
	.word	75670
	.byte	12,4,205,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66917
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM6',0,4,210,15,3
	.word	75734
	.byte	12,4,213,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66989
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STSTAT',0,4,218,15,3
	.word	75798
	.byte	12,4,221,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67318
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SWAPCTRL',0,4,226,15,3
	.word	75862
	.byte	12,4,229,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67438
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SWRSTCON',0,4,234,15,3
	.word	75928
	.byte	12,4,237,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67608
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSCON',0,4,242,15,3
	.word	75994
	.byte	12,4,245,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67871
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON0',0,4,250,15,3
	.word	76058
	.byte	12,4,253,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68150
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON1',0,4,130,16,3
	.word	76126
	.byte	12,4,133,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68254
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON2',0,4,138,16,3
	.word	76194
	.byte	12,4,141,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68360
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLSTAT',0,4,146,16,3
	.word	76262
	.byte	12,4,149,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68583
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPCLR',0,4,154,16,3
	.word	76330
	.byte	12,4,157,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68731
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPDIS0',0,4,162,16,3
	.word	76395
	.byte	12,4,165,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69219
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPDIS1',0,4,170,16,3
	.word	76461
	.byte	12,4,173,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69516
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSET',0,4,178,16,3
	.word	76527
	.byte	12,4,181,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69664
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSTAT',0,4,186,16,3
	.word	76592
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON0',0,4,194,16,3
	.word	563
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON1',0,4,202,16,3
	.word	868
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_SR',0,4,210,16,3
	.word	1099
	.byte	12,4,213,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69914
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON0',0,4,218,16,3
	.word	76743
	.byte	12,4,221,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70040
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON1',0,4,226,16,3
	.word	76810
	.byte	12,4,229,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70292
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_SR',0,4,234,16,3
	.word	76877
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX',0,4,246,16,25,4,13
	.byte	'ESRCFGX',0
	.word	72316
	.byte	4,2,35,0,0,14
	.word	76942
	.byte	32
	.byte	'Ifx_SCU_ESRCFGX',0,4,249,16,3
	.word	76983
	.byte	14
	.word	1139
	.byte	32
	.byte	'Ifx_SCU_WDTCPU',0,4,141,17,3
	.word	77013
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,4,156,17,25,12,13
	.byte	'CON0',0
	.word	76743
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	76810
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	76877
	.byte	4,2,35,8,0,14
	.word	77042
	.byte	32
	.byte	'Ifx_SCU_WDTS',0,4,161,17,3
	.word	77103
	.byte	15,8
	.word	76942
	.byte	16,1,0,14
	.word	77130
	.byte	15,20
	.word	603
	.byte	16,19,0,15,16
	.word	71941
	.byte	16,3,0,15,16
	.word	72700
	.byte	16,3,0,15,72
	.word	1139
	.byte	16,5,0,14
	.word	77171
	.byte	14
	.word	77042
	.byte	15,176,2
	.word	603
	.byte	16,175,2,0,10
	.byte	'_Ifx_SCU',0,4,176,17,25,128,8,13
	.byte	'reserved_0',0
	.word	4444
	.byte	8,2,35,0,13
	.byte	'ID',0
	.word	72640
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2624
	.byte	4,2,35,12,13
	.byte	'OSCCON',0
	.word	73475
	.byte	4,2,35,16,13
	.byte	'SYSPLLSTAT',0
	.word	76262
	.byte	4,2,35,20,13
	.byte	'SYSPLLCON0',0
	.word	76058
	.byte	4,2,35,24,13
	.byte	'SYSPLLCON1',0
	.word	76126
	.byte	4,2,35,28,13
	.byte	'SYSPLLCON2',0
	.word	76194
	.byte	4,2,35,32,13
	.byte	'PERPLLSTAT',0
	.word	74053
	.byte	4,2,35,36,13
	.byte	'PERPLLCON0',0
	.word	73917
	.byte	4,2,35,40,13
	.byte	'PERPLLCON1',0
	.word	73985
	.byte	4,2,35,44,13
	.byte	'CCUCON0',0
	.word	70836
	.byte	4,2,35,48,13
	.byte	'CCUCON1',0
	.word	70901
	.byte	4,2,35,52,13
	.byte	'FDR',0
	.word	72518
	.byte	4,2,35,56,13
	.byte	'EXTCON',0
	.word	72454
	.byte	4,2,35,60,13
	.byte	'CCUCON2',0
	.word	71098
	.byte	4,2,35,64,13
	.byte	'CCUCON3',0
	.word	71163
	.byte	4,2,35,68,13
	.byte	'CCUCON4',0
	.word	71228
	.byte	4,2,35,72,13
	.byte	'CCUCON5',0
	.word	71293
	.byte	4,2,35,76,13
	.byte	'RSTSTAT',0
	.word	75093
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	2624
	.byte	4,2,35,84,13
	.byte	'RSTCON',0
	.word	74899
	.byte	4,2,35,88,13
	.byte	'ARSTDIS',0
	.word	70771
	.byte	4,2,35,92,13
	.byte	'SWRSTCON',0
	.word	75928
	.byte	4,2,35,96,13
	.byte	'RSTCON2',0
	.word	74963
	.byte	4,2,35,100,13
	.byte	'RSTCON3',0
	.word	75028
	.byte	4,2,35,104,13
	.byte	'reserved_6C',0
	.word	2624
	.byte	4,2,35,108,13
	.byte	'ESRCFGX',0
	.word	77139
	.byte	8,2,35,112,13
	.byte	'ESROCFG',0
	.word	72389
	.byte	4,2,35,120,13
	.byte	'SYSCON',0
	.word	75994
	.byte	4,2,35,124,13
	.byte	'CCUCON6',0
	.word	71358
	.byte	4,3,35,128,1,13
	.byte	'CCUCON7',0
	.word	71423
	.byte	4,3,35,132,1,13
	.byte	'CCUCON8',0
	.word	71488
	.byte	4,3,35,136,1,13
	.byte	'CCUCON9',0
	.word	71553
	.byte	4,3,35,140,1,13
	.byte	'CCUCON10',0
	.word	70966
	.byte	4,3,35,144,1,13
	.byte	'CCUCON11',0
	.word	71032
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	2624
	.byte	4,3,35,152,1,13
	.byte	'PDR',0
	.word	73794
	.byte	4,3,35,156,1,13
	.byte	'IOCR',0
	.word	72822
	.byte	4,3,35,160,1,13
	.byte	'OUT',0
	.word	73539
	.byte	4,3,35,164,1,13
	.byte	'OMR',0
	.word	73414
	.byte	4,3,35,168,1,13
	.byte	'IN',0
	.word	72762
	.byte	4,3,35,172,1,13
	.byte	'reserved_B0',0
	.word	18333
	.byte	16,3,35,176,1,13
	.byte	'STSTAT',0
	.word	75798
	.byte	4,3,35,192,1,13
	.byte	'STCON',0
	.word	75351
	.byte	4,3,35,196,1,13
	.byte	'PMCSR0',0
	.word	74121
	.byte	4,3,35,200,1,13
	.byte	'PMCSR1',0
	.word	74185
	.byte	4,3,35,204,1,13
	.byte	'PMCSR2',0
	.word	74249
	.byte	4,3,35,208,1,13
	.byte	'PMCSR3',0
	.word	74313
	.byte	4,3,35,212,1,13
	.byte	'PMCSR4',0
	.word	74377
	.byte	4,3,35,216,1,13
	.byte	'PMCSR5',0
	.word	74441
	.byte	4,3,35,220,1,13
	.byte	'reserved_E0',0
	.word	2624
	.byte	4,3,35,224,1,13
	.byte	'PMSTAT0',0
	.word	74505
	.byte	4,3,35,228,1,13
	.byte	'PMSWCR1',0
	.word	74570
	.byte	4,3,35,232,1,13
	.byte	'reserved_EC',0
	.word	18333
	.byte	16,3,35,236,1,13
	.byte	'EMSR',0
	.word	72191
	.byte	4,3,35,252,1,13
	.byte	'EMSSW',0
	.word	72253
	.byte	4,3,35,128,2,13
	.byte	'DTSCSTAT',0
	.word	71747
	.byte	4,3,35,132,2,13
	.byte	'DTSCLIM',0
	.word	71682
	.byte	4,3,35,136,2,13
	.byte	'reserved_10C',0
	.word	77144
	.byte	20,3,35,140,2,13
	.byte	'TRAPDIS1',0
	.word	76461
	.byte	4,3,35,160,2,13
	.byte	'TRAPSTAT',0
	.word	76592
	.byte	4,3,35,164,2,13
	.byte	'TRAPSET',0
	.word	76527
	.byte	4,3,35,168,2,13
	.byte	'TRAPCLR',0
	.word	76330
	.byte	4,3,35,172,2,13
	.byte	'TRAPDIS0',0
	.word	76395
	.byte	4,3,35,176,2,13
	.byte	'LCLCON0',0
	.word	73156
	.byte	4,3,35,180,2,13
	.byte	'LCLCON1',0
	.word	73221
	.byte	4,3,35,184,2,13
	.byte	'LCLTEST',0
	.word	73286
	.byte	4,3,35,188,2,13
	.byte	'CHIPID',0
	.word	71618
	.byte	4,3,35,192,2,13
	.byte	'MANID',0
	.word	73351
	.byte	4,3,35,196,2,13
	.byte	'reserved_148',0
	.word	2624
	.byte	4,3,35,200,2,13
	.byte	'SWAPCTRL',0
	.word	75862
	.byte	4,3,35,204,2,13
	.byte	'reserved_150',0
	.word	77144
	.byte	20,3,35,208,2,13
	.byte	'LBISTCTRL0',0
	.word	72884
	.byte	4,3,35,228,2,13
	.byte	'LBISTCTRL1',0
	.word	72952
	.byte	4,3,35,232,2,13
	.byte	'LBISTCTRL2',0
	.word	73020
	.byte	4,3,35,236,2,13
	.byte	'LBISTCTRL3',0
	.word	73088
	.byte	4,3,35,240,2,13
	.byte	'reserved_174',0
	.word	18333
	.byte	16,3,35,244,2,13
	.byte	'STMEM1',0
	.word	75414
	.byte	4,3,35,132,3,13
	.byte	'STMEM2',0
	.word	75478
	.byte	4,3,35,136,3,13
	.byte	'PDISC',0
	.word	73731
	.byte	4,3,35,140,3,13
	.byte	'reserved_190',0
	.word	4444
	.byte	8,3,35,144,3,13
	.byte	'PMTRCSR0',0
	.word	74635
	.byte	4,3,35,152,3,13
	.byte	'PMTRCSR1',0
	.word	74701
	.byte	4,3,35,156,3,13
	.byte	'PMTRCSR2',0
	.word	74767
	.byte	4,3,35,160,3,13
	.byte	'PMTRCSR3',0
	.word	74833
	.byte	4,3,35,164,3,13
	.byte	'reserved_1A8',0
	.word	3815
	.byte	24,3,35,168,3,13
	.byte	'STMEM3',0
	.word	75542
	.byte	4,3,35,192,3,13
	.byte	'STMEM4',0
	.word	75606
	.byte	4,3,35,196,3,13
	.byte	'STMEM5',0
	.word	75670
	.byte	4,3,35,200,3,13
	.byte	'STMEM6',0
	.word	75734
	.byte	4,3,35,204,3,13
	.byte	'reserved_1D0',0
	.word	18333
	.byte	16,3,35,208,3,13
	.byte	'OVCENABLE',0
	.word	73664
	.byte	4,3,35,224,3,13
	.byte	'OVCCON',0
	.word	73600
	.byte	4,3,35,228,3,13
	.byte	'reserved_1E8',0
	.word	11152
	.byte	36,3,35,232,3,13
	.byte	'EIFILT',0
	.word	72003
	.byte	4,3,35,140,4,13
	.byte	'EICR',0
	.word	77153
	.byte	16,3,35,144,4,13
	.byte	'EIFR',0
	.word	72067
	.byte	4,3,35,160,4,13
	.byte	'FMR',0
	.word	72579
	.byte	4,3,35,164,4,13
	.byte	'PDRR',0
	.word	73855
	.byte	4,3,35,168,4,13
	.byte	'IGCR',0
	.word	77162
	.byte	16,3,35,172,4,13
	.byte	'reserved_23C',0
	.word	18333
	.byte	16,3,35,188,4,13
	.byte	'WDTCPU',0
	.word	77180
	.byte	72,3,35,204,4,13
	.byte	'reserved_294',0
	.word	4444
	.byte	8,3,35,148,5,13
	.byte	'EICON0',0
	.word	71813
	.byte	4,3,35,156,5,13
	.byte	'EICON1',0
	.word	71877
	.byte	4,3,35,160,5,13
	.byte	'EISR',0
	.word	72129
	.byte	4,3,35,164,5,13
	.byte	'WDTS',0
	.word	77185
	.byte	12,3,35,168,5,13
	.byte	'SEICON0',0
	.word	75158
	.byte	4,3,35,180,5,13
	.byte	'SEICON1',0
	.word	75223
	.byte	4,3,35,184,5,13
	.byte	'SEISR',0
	.word	75288
	.byte	4,3,35,188,5,13
	.byte	'reserved_2C0',0
	.word	77190
	.byte	176,2,3,35,192,5,13
	.byte	'ACCEN11',0
	.word	70706
	.byte	4,3,35,240,7,13
	.byte	'ACCEN10',0
	.word	70641
	.byte	4,3,35,244,7,13
	.byte	'ACCEN01',0
	.word	70576
	.byte	4,3,35,248,7,13
	.byte	'ACCEN00',0
	.word	70511
	.byte	4,3,35,252,7,0,14
	.word	77201
	.byte	32
	.byte	'Ifx_SCU',0,4,166,18,3
	.word	79322
	.byte	17,5,73,9,1,18
	.byte	'IfxPort_ControlledBy_port',0,0,18
	.byte	'IfxPort_ControlledBy_hsct',0,1,0,32
	.byte	'IfxPort_ControlledBy',0,5,77,3
	.word	79344
	.byte	32
	.byte	'IfxPort_InputMode',0,5,87,3
	.word	9119
	.byte	17,5,91,9,1,18
	.byte	'IfxPort_LvdsMode_high',0,0,18
	.byte	'IfxPort_LvdsMode_medium',0,1,0,32
	.byte	'IfxPort_LvdsMode',0,5,95,3
	.word	79461
	.byte	32
	.byte	'IfxPort_Mode',0,5,122,3
	.word	33969
	.byte	32
	.byte	'IfxPort_OutputIdx',0,5,136,1,3
	.word	9420
	.byte	32
	.byte	'IfxPort_OutputMode',0,5,145,1,3
	.word	9324
	.byte	32
	.byte	'IfxPort_PadDriver',0,5,165,1,3
	.word	34713
	.byte	17,5,169,1,9,1,18
	.byte	'IfxPort_PadSupply_3v',0,0,18
	.byte	'IfxPort_PadSupply_5v',0,1,0,32
	.byte	'IfxPort_PadSupply',0,5,173,1,3
	.word	79645
	.byte	17,5,177,1,9,1,18
	.byte	'IfxPort_PinFunctionMode_digital',0,0,18
	.byte	'IfxPort_PinFunctionMode_analog',0,1,0,32
	.byte	'IfxPort_PinFunctionMode',0,5,181,1,3
	.word	79725
	.byte	32
	.byte	'IfxPort_State',0,5,193,1,3
	.word	9733
	.byte	32
	.byte	'IfxPort_Pin',0,5,250,1,3
	.word	36461
	.byte	20
	.word	36618
	.byte	32
	.byte	'IfxCan_Rxd_In',0,14,62,3
	.word	79876
	.byte	20
	.word	36695
	.byte	32
	.byte	'IfxCan_Txd_Out',0,14,71,3
	.word	79903
	.byte	10
	.byte	'_Ifx_CPU_A_Bits',0,21,68,16,4,11
	.byte	'ADDR',0,4
	.word	451
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_A_Bits',0,21,71,3
	.word	79931
	.byte	10
	.byte	'_Ifx_CPU_BIV_Bits',0,21,74,16,4,11
	.byte	'VSS',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'BIV',0,4
	.word	451
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_BIV_Bits',0,21,78,3
	.word	79992
	.byte	10
	.byte	'_Ifx_CPU_BLK_OMASK_Bits',0,21,81,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	5,27,2,35,0,11
	.byte	'OMASK',0,4
	.word	451
	.byte	12,15,2,35,0,11
	.byte	'ONE',0,4
	.word	451
	.byte	11,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	451
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OMASK_Bits',0,21,87,3
	.word	80071
	.byte	10
	.byte	'_Ifx_CPU_BLK_OTAR_Bits',0,21,90,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	5,27,2,35,0,11
	.byte	'TBASE',0,4
	.word	451
	.byte	23,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	451
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OTAR_Bits',0,21,95,3
	.word	80209
	.byte	10
	.byte	'_Ifx_CPU_BLK_RABR_Bits',0,21,98,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	5,27,2,35,0,11
	.byte	'OBASE',0,4
	.word	451
	.byte	17,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	451
	.byte	2,8,2,35,0,11
	.byte	'OMEM',0,4
	.word	451
	.byte	4,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	451
	.byte	3,1,2,35,0,11
	.byte	'OVEN',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_RABR_Bits',0,21,106,3
	.word	80330
	.byte	10
	.byte	'_Ifx_CPU_BTV_Bits',0,21,109,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'BTV',0,4
	.word	451
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_BTV_Bits',0,21,113,3
	.word	80506
	.byte	10
	.byte	'_Ifx_CPU_CCNT_Bits',0,21,116,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	451
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_CCNT_Bits',0,21,120,3
	.word	80592
	.byte	10
	.byte	'_Ifx_CPU_CCTRL_Bits',0,21,123,16,4,11
	.byte	'CM',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'CE',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'M1',0,4
	.word	451
	.byte	3,27,2,35,0,11
	.byte	'M2',0,4
	.word	451
	.byte	3,24,2,35,0,11
	.byte	'M3',0,4
	.word	451
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	451
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_CPU_CCTRL_Bits',0,21,131,1,3
	.word	80681
	.byte	10
	.byte	'_Ifx_CPU_COMPAT_Bits',0,21,134,1,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	3,29,2,35,0,11
	.byte	'RM',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'SP',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	451
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_COMPAT_Bits',0,21,140,1,3
	.word	80828
	.byte	10
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,21,143,1,16,4,11
	.byte	'CORE_ID',0,4
	.word	451
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	451
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_CORE_ID_Bits',0,21,147,1,3
	.word	80957
	.byte	10
	.byte	'_Ifx_CPU_CPR_L_Bits',0,21,150,1,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	5,27,2,35,0,11
	.byte	'LOWBND',0,4
	.word	451
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_L_Bits',0,21,154,1,3
	.word	81057
	.byte	10
	.byte	'_Ifx_CPU_CPR_U_Bits',0,21,157,1,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	5,27,2,35,0,11
	.byte	'UPPBND',0,4
	.word	451
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_U_Bits',0,21,161,1,3
	.word	81152
	.byte	10
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,21,164,1,16,4,11
	.byte	'MOD_REV',0,4
	.word	451
	.byte	8,24,2,35,0,11
	.byte	'MOD_32B',0,4
	.word	451
	.byte	8,16,2,35,0,11
	.byte	'MOD',0,4
	.word	451
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPU_ID_Bits',0,21,169,1,3
	.word	81247
	.byte	10
	.byte	'_Ifx_CPU_CPXE_Bits',0,21,172,1,16,4,11
	.byte	'XE_N',0,4
	.word	451
	.byte	10,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	451
	.byte	22,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPXE_Bits',0,21,176,1,3
	.word	81357
	.byte	10
	.byte	'_Ifx_CPU_CREVT_Bits',0,21,179,1,16,4,11
	.byte	'EVTA',0,4
	.word	451
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	451
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	451
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_CREVT_Bits',0,21,187,1,3
	.word	81449
	.byte	10
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,21,190,1,16,4,11
	.byte	'CID',0,4
	.word	451
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	451
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_CUS_ID_Bits',0,21,194,1,3
	.word	81603
	.byte	10
	.byte	'_Ifx_CPU_D_Bits',0,21,197,1,16,4,11
	.byte	'DATA',0,4
	.word	451
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_D_Bits',0,21,200,1,3
	.word	81697
	.byte	10
	.byte	'_Ifx_CPU_DATR_Bits',0,21,203,1,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	3,29,2,35,0,11
	.byte	'SBE',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	451
	.byte	5,23,2,35,0,11
	.byte	'CWE',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'CFE',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	451
	.byte	3,18,2,35,0,11
	.byte	'SOE',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	451
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_DATR_Bits',0,21,214,1,3
	.word	81760
	.byte	10
	.byte	'_Ifx_CPU_DBGSR_Bits',0,21,217,1,16,4,11
	.byte	'DE',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'HALT',0,4
	.word	451
	.byte	2,29,2,35,0,11
	.byte	'SIH',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'SUSP',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'PREVSUSP',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'PEVT',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EVTSRC',0,4
	.word	451
	.byte	5,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	451
	.byte	19,0,2,35,0,0,32
	.byte	'Ifx_CPU_DBGSR_Bits',0,21,228,1,3
	.word	81986
	.byte	10
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,21,231,1,16,4,11
	.byte	'DTA',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	451
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_DBGTCR_Bits',0,21,235,1,3
	.word	82201
	.byte	10
	.byte	'_Ifx_CPU_DCON0_Bits',0,21,238,1,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'DCBYP',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	451
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_CPU_DCON0_Bits',0,21,243,1,3
	.word	82295
	.byte	10
	.byte	'_Ifx_CPU_DCON2_Bits',0,21,246,1,16,4,11
	.byte	'DCACHE_SZE',0,4
	.word	451
	.byte	16,16,2,35,0,11
	.byte	'DSCRATCH_SZE',0,4
	.word	451
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_DCON2_Bits',0,21,250,1,3
	.word	82411
	.byte	10
	.byte	'_Ifx_CPU_DCX_Bits',0,21,253,1,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	6,26,2,35,0,11
	.byte	'DCXVALUE',0,4
	.word	451
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_CPU_DCX_Bits',0,21,129,2,3
	.word	82512
	.byte	10
	.byte	'_Ifx_CPU_DEADD_Bits',0,21,132,2,16,4,11
	.byte	'ERROR_ADDRESS',0,4
	.word	451
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_DEADD_Bits',0,21,135,2,3
	.word	82605
	.byte	10
	.byte	'_Ifx_CPU_DIEAR_Bits',0,21,138,2,16,4,11
	.byte	'TA',0,4
	.word	451
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_DIEAR_Bits',0,21,141,2,3
	.word	82685
	.byte	10
	.byte	'_Ifx_CPU_DIETR_Bits',0,21,144,2,16,4,11
	.byte	'IED',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	451
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'IE_DLMU',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	451
	.byte	15,0,2,35,0,0,32
	.byte	'Ifx_CPU_DIETR_Bits',0,21,159,2,3
	.word	82754
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,21,162,2,16,4,11
	.byte	'EN0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,21,196,2,3
	.word	83038
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,21,199,2,16,4,11
	.byte	'EN0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,21,233,2,3
	.word	83629
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,21,236,2,16,4,11
	.byte	'EN32',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,21,142,3,3
	.word	84220
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,21,145,3,16,4,11
	.byte	'EN32',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,21,179,3,3
	.word	84821
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,21,182,3,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	451
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,21,186,3,3
	.word	85422
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,21,189,3,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	451
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,21,193,3,3
	.word	85537
	.byte	10
	.byte	'_Ifx_CPU_DMS_Bits',0,21,196,3,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'DMSVALUE',0,4
	.word	451
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_DMS_Bits',0,21,200,3,3
	.word	85652
	.byte	10
	.byte	'_Ifx_CPU_DPRE_Bits',0,21,203,3,16,4,11
	.byte	'RE_N',0,4
	.word	451
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	451
	.byte	14,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPRE_Bits',0,21,207,3,3
	.word	85745
	.byte	10
	.byte	'_Ifx_CPU_DPR_L_Bits',0,21,210,3,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	451
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_L_Bits',0,21,214,3,3
	.word	85837
	.byte	10
	.byte	'_Ifx_CPU_DPR_U_Bits',0,21,217,3,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	451
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_U_Bits',0,21,221,3,3
	.word	85932
	.byte	10
	.byte	'_Ifx_CPU_DPWE_Bits',0,21,224,3,16,4,11
	.byte	'WE_N',0,4
	.word	451
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	451
	.byte	14,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPWE_Bits',0,21,228,3,3
	.word	86027
	.byte	10
	.byte	'_Ifx_CPU_DSTR_Bits',0,21,231,3,16,4,11
	.byte	'SRE',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'GAE',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'LBE',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'DRE',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	451
	.byte	2,26,2,35,0,11
	.byte	'CRE',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	451
	.byte	7,18,2,35,0,11
	.byte	'DTME',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'LOE',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'SDE',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'SCE',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'CAC',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'MPE',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'CLE',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	451
	.byte	3,8,2,35,0,11
	.byte	'ALN',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	451
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_CPU_DSTR_Bits',0,21,250,3,3
	.word	86119
	.byte	10
	.byte	'_Ifx_CPU_EXEVT_Bits',0,21,253,3,16,4,11
	.byte	'EVTA',0,4
	.word	451
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	451
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	451
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_EXEVT_Bits',0,21,133,4,3
	.word	86458
	.byte	10
	.byte	'_Ifx_CPU_FCX_Bits',0,21,136,4,16,4,11
	.byte	'FCXO',0,4
	.word	451
	.byte	16,16,2,35,0,11
	.byte	'FCXS',0,4
	.word	451
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	451
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_FCX_Bits',0,21,141,4,3
	.word	86612
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON0_Bits',0,21,144,4,16,4,11
	.byte	'TAG1',0,4
	.word	451
	.byte	6,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	451
	.byte	2,24,2,35,0,11
	.byte	'TAG2',0,4
	.word	451
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	451
	.byte	2,16,2,35,0,11
	.byte	'TAG3',0,4
	.word	451
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	451
	.byte	2,8,2,35,0,11
	.byte	'TAG4',0,4
	.word	451
	.byte	6,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	451
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON0_Bits',0,21,154,4,3
	.word	86718
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON1_Bits',0,21,157,4,16,4,11
	.byte	'STALL',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	451
	.byte	15,16,2,35,0,11
	.byte	'MASKUECC',0,4
	.word	451
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	451
	.byte	6,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	451
	.byte	2,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	451
	.byte	6,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON1_Bits',0,21,165,4,3
	.word	86936
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON2_Bits',0,21,168,4,16,4,11
	.byte	'RECDIS',0,4
	.word	451
	.byte	2,30,2,35,0,11
	.byte	'ECCCORDIS',0,4
	.word	451
	.byte	2,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	451
	.byte	4,24,2,35,0,11
	.byte	'HMARGIN',0,4
	.word	451
	.byte	2,22,2,35,0,11
	.byte	'MSEL',0,4
	.word	451
	.byte	2,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	451
	.byte	4,16,2,35,0,11
	.byte	'ECCSCLR',0,4
	.word	451
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	451
	.byte	6,8,2,35,0,11
	.byte	'SBABCLR',0,4
	.word	451
	.byte	2,6,2,35,0,11
	.byte	'DBABCLR',0,4
	.word	451
	.byte	2,4,2,35,0,11
	.byte	'MBABCLR',0,4
	.word	451
	.byte	2,2,2,35,0,11
	.byte	'ZBABCLR',0,4
	.word	451
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON2_Bits',0,21,182,4,3
	.word	87127
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON3_Bits',0,21,185,4,16,4,11
	.byte	'ECCERRINJ',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EDCERRINJ',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'SBABERRINJ',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'DBABERRINJ',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'MBABERRINJ',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'ZBABERRINJ',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'SBERERRINJ',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'DBERERRINJ',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'NVMCERRINJ',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'FLCONERRINJ',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	451
	.byte	22,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON3_Bits',0,21,198,4,3
	.word	87427
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON4_Bits',0,21,201,4,16,4,11
	.byte	'DDIS',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	451
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON4_Bits',0,21,205,4,3
	.word	87732
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,21,208,4,16,4,11
	.byte	'TST',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'TCL',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	451
	.byte	6,24,2,35,0,11
	.byte	'RM',0,4
	.word	451
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	451
	.byte	8,14,2,35,0,11
	.byte	'FXE',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'FUE',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'FZE',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'FVE',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'FIE',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	451
	.byte	3,6,2,35,0,11
	.byte	'FX',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'FU',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'FZ',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'FV',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'FI',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,21,227,4,3
	.word	87833
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,21,230,4,16,4,11
	.byte	'OPC',0,4
	.word	451
	.byte	8,24,2,35,0,11
	.byte	'FMT',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	451
	.byte	7,16,2,35,0,11
	.byte	'DREG',0,4
	.word	451
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	451
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,21,237,4,3
	.word	88182
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,21,240,4,16,4,11
	.byte	'PC',0,4
	.word	451
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,21,243,4,3
	.word	88342
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,21,246,4,16,4,11
	.byte	'SRC1',0,4
	.word	451
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,21,249,4,3
	.word	88423
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,21,252,4,16,4,11
	.byte	'SRC2',0,4
	.word	451
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,21,255,4,3
	.word	88510
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,21,130,5,16,4,11
	.byte	'SRC3',0,4
	.word	451
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,21,133,5,3
	.word	88597
	.byte	10
	.byte	'_Ifx_CPU_ICNT_Bits',0,21,136,5,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	451
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_ICNT_Bits',0,21,140,5,3
	.word	88684
	.byte	10
	.byte	'_Ifx_CPU_ICR_Bits',0,21,143,5,16,4,11
	.byte	'CCPN',0,4
	.word	451
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	451
	.byte	7,17,2,35,0,11
	.byte	'IE',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'PIPN',0,4
	.word	451
	.byte	8,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	451
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_ICR_Bits',0,21,150,5,3
	.word	88775
	.byte	10
	.byte	'_Ifx_CPU_ISP_Bits',0,21,153,5,16,4,11
	.byte	'ISP',0,4
	.word	451
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_ISP_Bits',0,21,156,5,3
	.word	88917
	.byte	10
	.byte	'_Ifx_CPU_KRST0_Bits',0,21,159,5,16,4,11
	.byte	'RST',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'RSTSTAT',0,4
	.word	451
	.byte	2,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	451
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_KRST0_Bits',0,21,164,5,3
	.word	88983
	.byte	10
	.byte	'_Ifx_CPU_KRST1_Bits',0,21,167,5,16,4,11
	.byte	'RST',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	451
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_KRST1_Bits',0,21,171,5,3
	.word	89094
	.byte	10
	.byte	'_Ifx_CPU_KRSTCLR_Bits',0,21,174,5,16,4,11
	.byte	'CLR',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	451
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_KRSTCLR_Bits',0,21,178,5,3
	.word	89186
	.byte	10
	.byte	'_Ifx_CPU_LCX_Bits',0,21,181,5,16,4,11
	.byte	'LCXO',0,4
	.word	451
	.byte	16,16,2,35,0,11
	.byte	'LCXS',0,4
	.word	451
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	451
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_LCX_Bits',0,21,186,5,3
	.word	89282
	.byte	10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,21,189,5,16,4,11
	.byte	'EN0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,21,223,5,3
	.word	89388
	.byte	10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,21,226,5,16,4,11
	.byte	'EN32',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,21,132,6,3
	.word	89971
	.byte	10
	.byte	'_Ifx_CPU_M1CNT_Bits',0,21,135,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	451
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M1CNT_Bits',0,21,139,6,3
	.word	90564
	.byte	10
	.byte	'_Ifx_CPU_M2CNT_Bits',0,21,142,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	451
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M2CNT_Bits',0,21,146,6,3
	.word	90657
	.byte	10
	.byte	'_Ifx_CPU_M3CNT_Bits',0,21,149,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	451
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M3CNT_Bits',0,21,153,6,3
	.word	90750
	.byte	10
	.byte	'_Ifx_CPU_OSEL_Bits',0,21,156,6,16,4,11
	.byte	'SHOVEN_X',0,4
	.word	451
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_OSEL_Bits',0,21,159,6,3
	.word	90843
	.byte	10
	.byte	'_Ifx_CPU_PC_Bits',0,21,162,6,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'PC',0,4
	.word	451
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_PC_Bits',0,21,166,6,3
	.word	90916
	.byte	10
	.byte	'_Ifx_CPU_PCON0_Bits',0,21,169,6,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'PCBYP',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	451
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCON0_Bits',0,21,174,6,3
	.word	91001
	.byte	10
	.byte	'_Ifx_CPU_PCON1_Bits',0,21,177,6,16,4,11
	.byte	'PCINV',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'PBINV',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	451
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCON1_Bits',0,21,182,6,3
	.word	91117
	.byte	10
	.byte	'_Ifx_CPU_PCON2_Bits',0,21,185,6,16,4,11
	.byte	'PCACHE_SZE',0,4
	.word	451
	.byte	16,16,2,35,0,11
	.byte	'PSCRATCH_SZE',0,4
	.word	451
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCON2_Bits',0,21,189,6,3
	.word	91228
	.byte	10
	.byte	'_Ifx_CPU_PCXI_Bits',0,21,192,6,16,4,11
	.byte	'PCXO',0,4
	.word	451
	.byte	16,16,2,35,0,11
	.byte	'PCXS',0,4
	.word	451
	.byte	4,12,2,35,0,11
	.byte	'UL',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'PIE',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'PCPN',0,4
	.word	451
	.byte	8,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	451
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCXI_Bits',0,21,200,6,3
	.word	91329
	.byte	10
	.byte	'_Ifx_CPU_PIEAR_Bits',0,21,203,6,16,4,11
	.byte	'TA',0,4
	.word	451
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_PIEAR_Bits',0,21,206,6,3
	.word	91482
	.byte	10
	.byte	'_Ifx_CPU_PIETR_Bits',0,21,209,6,16,4,11
	.byte	'IED',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	451
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'IE_ADDR',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	451
	.byte	15,0,2,35,0,0,32
	.byte	'Ifx_CPU_PIETR_Bits',0,21,224,6,3
	.word	91551
	.byte	10
	.byte	'_Ifx_CPU_PMA0_Bits',0,21,227,6,16,4,11
	.byte	'DAC',0,4
	.word	451
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	451
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA0_Bits',0,21,231,6,3
	.word	91835
	.byte	10
	.byte	'_Ifx_CPU_PMA1_Bits',0,21,234,6,16,4,11
	.byte	'CAC',0,4
	.word	451
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	451
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA1_Bits',0,21,238,6,3
	.word	91926
	.byte	10
	.byte	'_Ifx_CPU_PMA2_Bits',0,21,241,6,16,4,11
	.byte	'PSI',0,4
	.word	451
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	451
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA2_Bits',0,21,245,6,3
	.word	92017
	.byte	10
	.byte	'_Ifx_CPU_PSTR_Bits',0,21,248,6,16,4,11
	.byte	'FRE',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'FBE',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	451
	.byte	9,20,2,35,0,11
	.byte	'FPE',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'FME',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	451
	.byte	17,0,2,35,0,0,32
	.byte	'Ifx_CPU_PSTR_Bits',0,21,130,7,3
	.word	92108
	.byte	10
	.byte	'_Ifx_CPU_PSW_Bits',0,21,133,7,16,4,11
	.byte	'CDC',0,4
	.word	451
	.byte	7,25,2,35,0,11
	.byte	'CDE',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'GW',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'IS',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'IO',0,4
	.word	451
	.byte	2,20,2,35,0,11
	.byte	'PRS',0,4
	.word	451
	.byte	2,18,2,35,0,11
	.byte	'S',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'PRS2',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	451
	.byte	8,8,2,35,0,11
	.byte	'USB',0,4
	.word	451
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_PSW_Bits',0,21,145,7,3
	.word	92311
	.byte	10
	.byte	'_Ifx_CPU_RGN_ACCENA_Bits',0,21,148,7,16,4,11
	.byte	'EN0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENA_Bits',0,21,182,7,3
	.word	92516
	.byte	10
	.byte	'_Ifx_CPU_RGN_ACCENB_Bits',0,21,185,7,16,4,11
	.byte	'EN32',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENB_Bits',0,21,219,7,3
	.word	93083
	.byte	10
	.byte	'_Ifx_CPU_RGN_LA_Bits',0,21,222,7,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	451
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_LA_Bits',0,21,226,7,3
	.word	93660
	.byte	10
	.byte	'_Ifx_CPU_RGN_UA_Bits',0,21,229,7,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	451
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_UA_Bits',0,21,233,7,3
	.word	93755
	.byte	10
	.byte	'_Ifx_CPU_SEGEN_Bits',0,21,236,7,16,4,11
	.byte	'ADFLIP',0,4
	.word	451
	.byte	8,24,2,35,0,11
	.byte	'ADTYPE',0,4
	.word	451
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	451
	.byte	21,1,2,35,0,11
	.byte	'AE',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SEGEN_Bits',0,21,242,7,3
	.word	93850
	.byte	10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,21,245,7,16,4,11
	.byte	'EN0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,21,151,8,3
	.word	93978
	.byte	10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,21,154,8,16,4,11
	.byte	'EN32',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,21,188,8,3
	.word	94561
	.byte	10
	.byte	'_Ifx_CPU_SMACON_Bits',0,21,191,8,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	24,8,2,35,0,11
	.byte	'IODT',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	451
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_CPU_SMACON_Bits',0,21,196,8,3
	.word	95154
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,21,199,8,16,4,11
	.byte	'EN0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,21,233,8,3
	.word	95272
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,21,236,8,16,4,11
	.byte	'EN32',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,21,142,9,3
	.word	95861
	.byte	10
	.byte	'_Ifx_CPU_SWEVT_Bits',0,21,145,9,16,4,11
	.byte	'EVTA',0,4
	.word	451
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	451
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	451
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_SWEVT_Bits',0,21,153,9,3
	.word	96460
	.byte	10
	.byte	'_Ifx_CPU_SYSCON_Bits',0,21,156,9,16,4,11
	.byte	'FCDSF',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'PROTEN',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'TPROTEN',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'IS',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'TS',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	451
	.byte	3,24,2,35,0,11
	.byte	'ESDIS',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	451
	.byte	7,16,2,35,0,11
	.byte	'U1_IED',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'U1_IOS',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	451
	.byte	6,8,2,35,0,11
	.byte	'BHALT',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	451
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_CPU_SYSCON_Bits',0,21,171,9,3
	.word	96614
	.byte	10
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,21,174,9,16,4,11
	.byte	'ASI',0,4
	.word	451
	.byte	5,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	451
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,21,178,9,3
	.word	96913
	.byte	10
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,21,181,9,16,4,11
	.byte	'TEXP0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'TEXP1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'TEXP2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	451
	.byte	13,16,2,35,0,11
	.byte	'TTRAP',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	451
	.byte	15,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_CON_Bits',0,21,189,9,3
	.word	97011
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,21,192,9,16,4,11
	.byte	'EXTIM_CLASS_EN',0,4
	.word	451
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	451
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,21,196,9,3
	.word	97183
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,21,199,9,16,4,11
	.byte	'ENTRY_CVAL',0,4
	.word	451
	.byte	12,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	451
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,21,203,9,3
	.word	97312
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,21,206,9,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	4,28,2,35,0,11
	.byte	'ENTRY_LVAL',0,4
	.word	451
	.byte	8,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	451
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,21,211,9,3
	.word	97442
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,21,214,9,16,4,11
	.byte	'EXIT_CVAL',0,4
	.word	451
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	451
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,21,218,9,3
	.word	97594
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,21,221,9,16,4,11
	.byte	'reserved_0',0,4
	.word	451
	.byte	4,28,2,35,0,11
	.byte	'EXIT_LVAL',0,4
	.word	451
	.byte	20,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	451
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,21,226,9,3
	.word	97721
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_FCX_Bits',0,21,229,9,16,4,11
	.byte	'EXIT_FCX',0,4
	.word	451
	.byte	20,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	451
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_FCX_Bits',0,21,233,9,3
	.word	97870
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_STAT_Bits',0,21,236,9,16,4,11
	.byte	'EXIT_TIN',0,4
	.word	451
	.byte	8,24,2,35,0,11
	.byte	'EXIT_CLASS',0,4
	.word	451
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	451
	.byte	4,17,2,35,0,11
	.byte	'EXIT_AT',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'ENTRY_TIN',0,4
	.word	451
	.byte	8,8,2,35,0,11
	.byte	'ENTRY_CLASS',0,4
	.word	451
	.byte	3,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	451
	.byte	4,1,2,35,0,11
	.byte	'ENTRY_AT',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_STAT_Bits',0,21,246,9,3
	.word	97984
	.byte	10
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,21,249,9,16,4,11
	.byte	'TIMER',0,4
	.word	451
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,21,252,9,3
	.word	98228
	.byte	10
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,21,255,9,16,4,11
	.byte	'T0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'T1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'T2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'T3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'T4',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'T5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'T6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'T7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	451
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,21,138,10,3
	.word	98308
	.byte	10
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,21,141,10,16,4,11
	.byte	'ADDR',0,4
	.word	451
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_TR_ADR_Bits',0,21,144,10,3
	.word	98503
	.byte	10
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,21,147,10,16,4,11
	.byte	'EVTA',0,4
	.word	451
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	451
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	451
	.byte	4,20,2,35,0,11
	.byte	'TYP',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'RNG',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'ASI_EN',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'ASI',0,4
	.word	451
	.byte	5,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	451
	.byte	6,5,2,35,0,11
	.byte	'AST',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'ALD',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	451
	.byte	3,0,2,35,0,0,32
	.byte	'Ifx_CPU_TR_EVT_Bits',0,21,164,10,3
	.word	98576
	.byte	12,21,172,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79931
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_A',0,21,177,10,3
	.word	98894
	.byte	12,21,180,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79992
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BIV',0,21,185,10,3
	.word	98953
	.byte	12,21,188,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80071
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OMASK',0,21,193,10,3
	.word	99014
	.byte	12,21,196,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80209
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OTAR',0,21,201,10,3
	.word	99081
	.byte	12,21,204,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80330
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_RABR',0,21,209,10,3
	.word	99147
	.byte	12,21,212,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80506
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BTV',0,21,217,10,3
	.word	99213
	.byte	12,21,220,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80592
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CCNT',0,21,225,10,3
	.word	99274
	.byte	12,21,228,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80681
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CCTRL',0,21,233,10,3
	.word	99336
	.byte	12,21,236,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80828
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_COMPAT',0,21,241,10,3
	.word	99399
	.byte	12,21,244,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80957
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CORE_ID',0,21,249,10,3
	.word	99463
	.byte	12,21,252,10,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81057
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_L',0,21,129,11,3
	.word	99528
	.byte	12,21,132,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81152
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_U',0,21,137,11,3
	.word	99591
	.byte	12,21,140,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81247
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPU_ID',0,21,145,11,3
	.word	99654
	.byte	12,21,148,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81357
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPXE',0,21,153,11,3
	.word	99718
	.byte	12,21,156,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81449
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CREVT',0,21,161,11,3
	.word	99780
	.byte	12,21,164,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81603
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CUS_ID',0,21,169,11,3
	.word	99843
	.byte	12,21,172,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81697
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_D',0,21,177,11,3
	.word	99907
	.byte	12,21,180,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81760
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DATR',0,21,185,11,3
	.word	99966
	.byte	12,21,188,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81986
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DBGSR',0,21,193,11,3
	.word	100028
	.byte	12,21,196,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82201
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DBGTCR',0,21,201,11,3
	.word	100091
	.byte	12,21,204,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82295
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DCON0',0,21,209,11,3
	.word	100155
	.byte	12,21,212,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82411
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DCON2',0,21,217,11,3
	.word	100218
	.byte	12,21,220,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82512
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DCX',0,21,225,11,3
	.word	100281
	.byte	12,21,228,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82605
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DEADD',0,21,233,11,3
	.word	100342
	.byte	12,21,236,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82685
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DIEAR',0,21,241,11,3
	.word	100405
	.byte	12,21,244,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82754
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DIETR',0,21,249,11,3
	.word	100468
	.byte	12,21,252,11,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83038
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R',0,21,129,12,3
	.word	100531
	.byte	12,21,132,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83629
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W',0,21,137,12,3
	.word	100611
	.byte	12,21,140,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	84220
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R',0,21,145,12,3
	.word	100691
	.byte	12,21,148,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	84821
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W',0,21,153,12,3
	.word	100771
	.byte	12,21,156,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85422
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA',0,21,161,12,3
	.word	100851
	.byte	12,21,164,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85537
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA',0,21,169,12,3
	.word	100925
	.byte	12,21,172,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85652
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DMS',0,21,177,12,3
	.word	100999
	.byte	12,21,180,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85745
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPRE',0,21,185,12,3
	.word	101060
	.byte	12,21,188,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85837
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_L',0,21,193,12,3
	.word	101122
	.byte	12,21,196,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85932
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_U',0,21,201,12,3
	.word	101185
	.byte	12,21,204,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86027
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPWE',0,21,209,12,3
	.word	101248
	.byte	12,21,212,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86119
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DSTR',0,21,217,12,3
	.word	101310
	.byte	12,21,220,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86458
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_EXEVT',0,21,225,12,3
	.word	101372
	.byte	12,21,228,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86612
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FCX',0,21,233,12,3
	.word	101435
	.byte	12,21,236,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86718
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON0',0,21,241,12,3
	.word	101496
	.byte	12,21,244,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86936
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON1',0,21,249,12,3
	.word	101563
	.byte	12,21,252,12,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87127
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON2',0,21,129,13,3
	.word	101630
	.byte	12,21,132,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87427
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON3',0,21,137,13,3
	.word	101697
	.byte	12,21,140,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87732
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON4',0,21,145,13,3
	.word	101764
	.byte	12,21,148,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87833
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,21,153,13,3
	.word	101831
	.byte	12,21,156,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88182
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,21,161,13,3
	.word	101901
	.byte	12,21,164,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88342
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,21,169,13,3
	.word	101971
	.byte	12,21,172,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88423
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,21,177,13,3
	.word	102040
	.byte	12,21,180,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88510
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,21,185,13,3
	.word	102111
	.byte	12,21,188,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88597
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,21,193,13,3
	.word	102182
	.byte	12,21,196,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88684
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ICNT',0,21,201,13,3
	.word	102253
	.byte	12,21,204,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88775
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ICR',0,21,209,13,3
	.word	102315
	.byte	12,21,212,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88917
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ISP',0,21,217,13,3
	.word	102376
	.byte	12,21,220,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88983
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_KRST0',0,21,225,13,3
	.word	102437
	.byte	12,21,228,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	89094
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_KRST1',0,21,233,13,3
	.word	102500
	.byte	12,21,236,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	89186
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_KRSTCLR',0,21,241,13,3
	.word	102563
	.byte	12,21,244,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	89282
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_LCX',0,21,249,13,3
	.word	102628
	.byte	12,21,252,13,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	89388
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R',0,21,129,14,3
	.word	102689
	.byte	12,21,132,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	89971
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R',0,21,137,14,3
	.word	102765
	.byte	12,21,140,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90564
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M1CNT',0,21,145,14,3
	.word	102841
	.byte	12,21,148,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90657
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M2CNT',0,21,153,14,3
	.word	102904
	.byte	12,21,156,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90750
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M3CNT',0,21,161,14,3
	.word	102967
	.byte	12,21,164,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90843
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_OSEL',0,21,169,14,3
	.word	103030
	.byte	12,21,172,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90916
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PC',0,21,177,14,3
	.word	103092
	.byte	12,21,180,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91001
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCON0',0,21,185,14,3
	.word	103152
	.byte	12,21,188,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91117
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCON1',0,21,193,14,3
	.word	103215
	.byte	12,21,196,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91228
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCON2',0,21,201,14,3
	.word	103278
	.byte	12,21,204,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91329
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCXI',0,21,209,14,3
	.word	103341
	.byte	12,21,212,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91482
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PIEAR',0,21,217,14,3
	.word	103403
	.byte	12,21,220,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91551
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PIETR',0,21,225,14,3
	.word	103466
	.byte	12,21,228,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91835
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA0',0,21,233,14,3
	.word	103529
	.byte	12,21,236,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91926
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA1',0,21,241,14,3
	.word	103591
	.byte	12,21,244,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92017
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA2',0,21,249,14,3
	.word	103653
	.byte	12,21,252,14,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92108
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PSTR',0,21,129,15,3
	.word	103715
	.byte	12,21,132,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92311
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PSW',0,21,137,15,3
	.word	103777
	.byte	12,21,140,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92516
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENA',0,21,145,15,3
	.word	103838
	.byte	12,21,148,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93083
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENB',0,21,153,15,3
	.word	103906
	.byte	12,21,156,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93660
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_LA',0,21,161,15,3
	.word	103974
	.byte	12,21,164,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93755
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_UA',0,21,169,15,3
	.word	104038
	.byte	12,21,172,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93850
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SEGEN',0,21,177,15,3
	.word	104102
	.byte	12,21,180,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93978
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W',0,21,185,15,3
	.word	104165
	.byte	12,21,188,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94561
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W',0,21,193,15,3
	.word	104241
	.byte	12,21,196,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95154
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SMACON',0,21,201,15,3
	.word	104317
	.byte	12,21,204,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95272
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R',0,21,209,15,3
	.word	104381
	.byte	12,21,212,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95861
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R',0,21,217,15,3
	.word	104460
	.byte	12,21,220,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	96460
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SWEVT',0,21,225,15,3
	.word	104539
	.byte	12,21,228,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	96614
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SYSCON',0,21,233,15,3
	.word	104602
	.byte	12,21,236,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	96913
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TASK_ASI',0,21,241,15,3
	.word	104666
	.byte	12,21,244,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97011
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_CON',0,21,249,15,3
	.word	104732
	.byte	12,21,252,15,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97183
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN',0,21,129,16,3
	.word	104797
	.byte	12,21,132,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97312
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL',0,21,137,16,3
	.word	104873
	.byte	12,21,140,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97442
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL',0,21,145,16,3
	.word	104951
	.byte	12,21,148,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97594
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL',0,21,153,16,3
	.word	105029
	.byte	12,21,156,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97721
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL',0,21,161,16,3
	.word	105106
	.byte	12,21,164,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97870
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_FCX',0,21,169,16,3
	.word	105183
	.byte	12,21,172,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97984
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_STAT',0,21,177,16,3
	.word	105254
	.byte	12,21,180,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98228
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_TIMER',0,21,185,16,3
	.word	105326
	.byte	12,21,188,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98308
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TRIG_ACC',0,21,193,16,3
	.word	105393
	.byte	12,21,196,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98503
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TR_ADR',0,21,201,16,3
	.word	105459
	.byte	12,21,204,16,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98576
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TR_EVT',0,21,209,16,3
	.word	105523
	.byte	10
	.byte	'_Ifx_CPU_RGN',0,21,221,16,25,16,13
	.byte	'LA',0
	.word	103974
	.byte	4,2,35,0,13
	.byte	'UA',0
	.word	104038
	.byte	4,2,35,4,13
	.byte	'ACCENA',0
	.word	103838
	.byte	4,2,35,8,13
	.byte	'ACCENB',0
	.word	103906
	.byte	4,2,35,12,0,14
	.word	105587
	.byte	32
	.byte	'Ifx_CPU_RGN',0,21,227,16,3
	.word	105663
	.byte	10
	.byte	'_Ifx_CPU_BLK',0,21,242,16,25,12,13
	.byte	'RABR',0
	.word	99147
	.byte	4,2,35,0,13
	.byte	'OTAR',0
	.word	99081
	.byte	4,2,35,4,13
	.byte	'OMASK',0
	.word	99014
	.byte	4,2,35,8,0,14
	.word	105689
	.byte	32
	.byte	'Ifx_CPU_BLK',0,21,247,16,3
	.word	105752
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP',0,21,134,17,25,28,13
	.byte	'CON',0
	.word	101831
	.byte	4,2,35,0,13
	.byte	'PC',0
	.word	101971
	.byte	4,2,35,4,13
	.byte	'OPC',0
	.word	101901
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2624
	.byte	4,2,35,12,13
	.byte	'SRC1',0
	.word	102040
	.byte	4,2,35,16,13
	.byte	'SRC2',0
	.word	102111
	.byte	4,2,35,20,13
	.byte	'SRC3',0
	.word	102182
	.byte	4,2,35,24,0,14
	.word	105778
	.byte	32
	.byte	'Ifx_CPU_FPU_TRAP',0,21,143,17,3
	.word	105903
	.byte	10
	.byte	'_Ifx_CPU_DPR',0,21,158,17,25,8,13
	.byte	'L',0
	.word	101122
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	101185
	.byte	4,2,35,4,0,14
	.word	105934
	.byte	32
	.byte	'Ifx_CPU_DPR',0,21,162,17,3
	.word	105976
	.byte	10
	.byte	'_Ifx_CPU_CPR',0,21,177,17,25,8,13
	.byte	'L',0
	.word	99528
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	99591
	.byte	4,2,35,4,0,14
	.word	106002
	.byte	32
	.byte	'Ifx_CPU_CPR',0,21,181,17,3
	.word	106044
	.byte	15,12
	.word	105326
	.byte	16,2,0,10
	.byte	'_Ifx_CPU_TPS',0,21,196,17,25,16,13
	.byte	'CON',0
	.word	104732
	.byte	4,2,35,0,13
	.byte	'TIMER',0
	.word	106070
	.byte	12,2,35,4,0,14
	.word	106079
	.byte	32
	.byte	'Ifx_CPU_TPS',0,21,200,17,3
	.word	106127
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM',0,21,215,17,25,28,13
	.byte	'ENTRY_LVAL',0
	.word	104951
	.byte	4,2,35,0,13
	.byte	'ENTRY_CVAL',0
	.word	104873
	.byte	4,2,35,4,13
	.byte	'EXIT_LVAL',0
	.word	105106
	.byte	4,2,35,8,13
	.byte	'EXIT_CVAL',0
	.word	105029
	.byte	4,2,35,12,13
	.byte	'CLASS_EN',0
	.word	104797
	.byte	4,2,35,16,13
	.byte	'STAT',0
	.word	105254
	.byte	4,2,35,20,13
	.byte	'FCX',0
	.word	105183
	.byte	4,2,35,24,0,14
	.word	106153
	.byte	32
	.byte	'Ifx_CPU_TPS_EXTIM',0,21,224,17,3
	.word	106302
	.byte	10
	.byte	'_Ifx_CPU_TR',0,21,239,17,25,8,13
	.byte	'EVT',0
	.word	105523
	.byte	4,2,35,0,13
	.byte	'ADR',0
	.word	105459
	.byte	4,2,35,4,0,14
	.word	106334
	.byte	32
	.byte	'Ifx_CPU_TR',0,21,243,17,3
	.word	106379
	.byte	15,128,34
	.word	603
	.byte	16,255,33,0,15,236,253,2
	.word	603
	.byte	16,235,253,2,0,15,244,31
	.word	603
	.byte	16,243,31,0,15,128,1
	.word	105587
	.byte	16,7,0,14
	.word	106439
	.byte	15,232,1
	.word	603
	.byte	16,231,1,0,15,128,48
	.word	603
	.byte	16,255,47,0,15,128,3
	.word	105689
	.byte	16,31,0,14
	.word	106476
	.byte	15,160,39
	.word	603
	.byte	16,159,39,0,15,208,223,1
	.word	603
	.byte	16,207,223,1,0,15,248,1
	.word	603
	.byte	16,247,1,0,15,244,29
	.word	603
	.byte	16,243,29,0,15,232,3
	.word	603
	.byte	16,231,3,0,15,252,23
	.word	603
	.byte	16,251,23,0,14
	.word	105778
	.byte	15,228,63
	.word	603
	.byte	16,227,63,0,15,144,1
	.word	105934
	.byte	16,17,0,14
	.word	106575
	.byte	15,240,30
	.word	603
	.byte	16,239,30,0,15,80
	.word	106002
	.byte	16,9,0,14
	.word	106601
	.byte	15,176,31
	.word	603
	.byte	16,175,31,0,15,152,7
	.word	603
	.byte	16,151,7,0,14
	.word	106079
	.byte	15,48
	.word	603
	.byte	16,47,0,14
	.word	106153
	.byte	15,164,23
	.word	603
	.byte	16,163,23,0,15,64
	.word	106334
	.byte	16,7,0,14
	.word	106667
	.byte	15,192,23
	.word	603
	.byte	16,191,23,0,15,28
	.word	603
	.byte	16,27,0,15,180,1
	.word	603
	.byte	16,179,1,0,15,64
	.word	99907
	.byte	16,15,0,15,64
	.word	603
	.byte	16,63,0,15,64
	.word	98894
	.byte	16,15,0,10
	.byte	'_Ifx_CPU',0,21,130,18,25,128,128,8,13
	.byte	'reserved_0',0
	.word	106404
	.byte	128,34,2,35,0,13
	.byte	'FLASHCON0',0
	.word	101496
	.byte	4,3,35,128,34,13
	.byte	'FLASHCON1',0
	.word	101563
	.byte	4,3,35,132,34,13
	.byte	'FLASHCON2',0
	.word	101630
	.byte	4,3,35,136,34,13
	.byte	'FLASHCON3',0
	.word	101697
	.byte	4,3,35,140,34,13
	.byte	'FLASHCON4',0
	.word	101764
	.byte	4,3,35,144,34,13
	.byte	'reserved_1114',0
	.word	106415
	.byte	236,253,2,3,35,148,34,13
	.byte	'KRST0',0
	.word	102437
	.byte	4,4,35,128,160,3,13
	.byte	'KRST1',0
	.word	102500
	.byte	4,4,35,132,160,3,13
	.byte	'KRSTCLR',0
	.word	102563
	.byte	4,4,35,136,160,3,13
	.byte	'reserved_D00C',0
	.word	106428
	.byte	244,31,4,35,140,160,3,13
	.byte	'RGN',0
	.word	106449
	.byte	128,1,4,35,128,192,3,13
	.byte	'reserved_E080',0
	.word	4444
	.byte	8,4,35,128,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R0',0
	.word	104381
	.byte	4,4,35,136,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R0',0
	.word	104460
	.byte	4,4,35,140,193,3,13
	.byte	'reserved_E090',0
	.word	4444
	.byte	8,4,35,144,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R1',0
	.word	104381
	.byte	4,4,35,152,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R1',0
	.word	104460
	.byte	4,4,35,156,193,3,13
	.byte	'reserved_E0A0',0
	.word	4444
	.byte	8,4,35,160,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R2',0
	.word	104381
	.byte	4,4,35,168,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R2',0
	.word	104460
	.byte	4,4,35,172,193,3,13
	.byte	'reserved_E0B0',0
	.word	4444
	.byte	8,4,35,176,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R3',0
	.word	104381
	.byte	4,4,35,184,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R3',0
	.word	104460
	.byte	4,4,35,188,193,3,13
	.byte	'reserved_E0C0',0
	.word	4444
	.byte	8,4,35,192,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R4',0
	.word	104381
	.byte	4,4,35,200,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R4',0
	.word	104460
	.byte	4,4,35,204,193,3,13
	.byte	'reserved_E0D0',0
	.word	4444
	.byte	8,4,35,208,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R5',0
	.word	104381
	.byte	4,4,35,216,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R5',0
	.word	104460
	.byte	4,4,35,220,193,3,13
	.byte	'reserved_E0E0',0
	.word	4444
	.byte	8,4,35,224,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R6',0
	.word	104381
	.byte	4,4,35,232,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R6',0
	.word	104460
	.byte	4,4,35,236,193,3,13
	.byte	'reserved_E0F0',0
	.word	4444
	.byte	8,4,35,240,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R7',0
	.word	104381
	.byte	4,4,35,248,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R7',0
	.word	104460
	.byte	4,4,35,252,193,3,13
	.byte	'SFR_SPROT_ACCENA_W',0
	.word	104165
	.byte	4,4,35,128,194,3,13
	.byte	'SFR_SPROT_ACCENB_W',0
	.word	104241
	.byte	4,4,35,132,194,3,13
	.byte	'reserved_E108',0
	.word	4444
	.byte	8,4,35,136,194,3,13
	.byte	'LPB_SPROT_ACCENA_R',0
	.word	102689
	.byte	4,4,35,144,194,3,13
	.byte	'LPB_SPROT_ACCENB_R',0
	.word	102765
	.byte	4,4,35,148,194,3,13
	.byte	'reserved_E118',0
	.word	106454
	.byte	232,1,4,35,152,194,3,13
	.byte	'DLMU_SPROT_RGNLA0',0
	.word	100851
	.byte	4,4,35,128,196,3,13
	.byte	'DLMU_SPROT_RGNUA0',0
	.word	100925
	.byte	4,4,35,132,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W0',0
	.word	100611
	.byte	4,4,35,136,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W0',0
	.word	100771
	.byte	4,4,35,140,196,3,13
	.byte	'DLMU_SPROT_RGNLA1',0
	.word	100851
	.byte	4,4,35,144,196,3,13
	.byte	'DLMU_SPROT_RGNUA1',0
	.word	100925
	.byte	4,4,35,148,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W1',0
	.word	100611
	.byte	4,4,35,152,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W1',0
	.word	100771
	.byte	4,4,35,156,196,3,13
	.byte	'DLMU_SPROT_RGNLA2',0
	.word	100851
	.byte	4,4,35,160,196,3,13
	.byte	'DLMU_SPROT_RGNUA2',0
	.word	100925
	.byte	4,4,35,164,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W2',0
	.word	100611
	.byte	4,4,35,168,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W2',0
	.word	100771
	.byte	4,4,35,172,196,3,13
	.byte	'DLMU_SPROT_RGNLA3',0
	.word	100851
	.byte	4,4,35,176,196,3,13
	.byte	'DLMU_SPROT_RGNUA3',0
	.word	100925
	.byte	4,4,35,180,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W3',0
	.word	100611
	.byte	4,4,35,184,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W3',0
	.word	100771
	.byte	4,4,35,188,196,3,13
	.byte	'DLMU_SPROT_RGNLA4',0
	.word	100851
	.byte	4,4,35,192,196,3,13
	.byte	'DLMU_SPROT_RGNUA4',0
	.word	100925
	.byte	4,4,35,196,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W4',0
	.word	100611
	.byte	4,4,35,200,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W4',0
	.word	100771
	.byte	4,4,35,204,196,3,13
	.byte	'DLMU_SPROT_RGNLA5',0
	.word	100851
	.byte	4,4,35,208,196,3,13
	.byte	'DLMU_SPROT_RGNUA5',0
	.word	100925
	.byte	4,4,35,212,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W5',0
	.word	100611
	.byte	4,4,35,216,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W5',0
	.word	100771
	.byte	4,4,35,220,196,3,13
	.byte	'DLMU_SPROT_RGNLA6',0
	.word	100851
	.byte	4,4,35,224,196,3,13
	.byte	'DLMU_SPROT_RGNUA6',0
	.word	100925
	.byte	4,4,35,228,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W6',0
	.word	100611
	.byte	4,4,35,232,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W6',0
	.word	100771
	.byte	4,4,35,236,196,3,13
	.byte	'DLMU_SPROT_RGNLA7',0
	.word	100851
	.byte	4,4,35,240,196,3,13
	.byte	'DLMU_SPROT_RGNUA7',0
	.word	100925
	.byte	4,4,35,244,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W7',0
	.word	100611
	.byte	4,4,35,248,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W7',0
	.word	100771
	.byte	4,4,35,252,196,3,13
	.byte	'reserved_E280',0
	.word	4444
	.byte	8,4,35,128,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R0',0
	.word	100531
	.byte	4,4,35,136,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R0',0
	.word	100691
	.byte	4,4,35,140,197,3,13
	.byte	'reserved_E290',0
	.word	4444
	.byte	8,4,35,144,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R1',0
	.word	100531
	.byte	4,4,35,152,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R1',0
	.word	100691
	.byte	4,4,35,156,197,3,13
	.byte	'reserved_E2A0',0
	.word	4444
	.byte	8,4,35,160,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R2',0
	.word	100531
	.byte	4,4,35,168,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R2',0
	.word	100691
	.byte	4,4,35,172,197,3,13
	.byte	'reserved_E2B0',0
	.word	4444
	.byte	8,4,35,176,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R3',0
	.word	100531
	.byte	4,4,35,184,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R3',0
	.word	100691
	.byte	4,4,35,188,197,3,13
	.byte	'reserved_E2C0',0
	.word	4444
	.byte	8,4,35,192,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R4',0
	.word	100531
	.byte	4,4,35,200,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R4',0
	.word	100691
	.byte	4,4,35,204,197,3,13
	.byte	'reserved_E2D0',0
	.word	4444
	.byte	8,4,35,208,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R5',0
	.word	100531
	.byte	4,4,35,216,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R5',0
	.word	100691
	.byte	4,4,35,220,197,3,13
	.byte	'reserved_E2E0',0
	.word	4444
	.byte	8,4,35,224,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R6',0
	.word	100531
	.byte	4,4,35,232,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R6',0
	.word	100691
	.byte	4,4,35,236,197,3,13
	.byte	'reserved_E2F0',0
	.word	4444
	.byte	8,4,35,240,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R7',0
	.word	100531
	.byte	4,4,35,248,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R7',0
	.word	100691
	.byte	4,4,35,252,197,3,13
	.byte	'reserved_E300',0
	.word	106465
	.byte	128,48,4,35,128,198,3,13
	.byte	'OSEL',0
	.word	103030
	.byte	4,4,35,128,246,3,13
	.byte	'reserved_FB04',0
	.word	4784
	.byte	12,4,35,132,246,3,13
	.byte	'BLK',0
	.word	106486
	.byte	128,3,4,35,144,246,3,13
	.byte	'reserved_FC90',0
	.word	106491
	.byte	160,39,4,35,144,249,3,13
	.byte	'SEGEN',0
	.word	104102
	.byte	4,4,35,176,160,4,13
	.byte	'reserved_11034',0
	.word	106502
	.byte	208,223,1,4,35,180,160,4,13
	.byte	'TASK_ASI',0
	.word	104666
	.byte	4,4,35,132,128,6,13
	.byte	'reserved_18008',0
	.word	106515
	.byte	248,1,4,35,136,128,6,13
	.byte	'PMA0',0
	.word	103529
	.byte	4,4,35,128,130,6,13
	.byte	'PMA1',0
	.word	103591
	.byte	4,4,35,132,130,6,13
	.byte	'PMA2',0
	.word	103653
	.byte	4,4,35,136,130,6,13
	.byte	'reserved_1810C',0
	.word	106526
	.byte	244,29,4,35,140,130,6,13
	.byte	'DCON2',0
	.word	100218
	.byte	4,4,35,128,160,6,13
	.byte	'reserved_19004',0
	.word	4444
	.byte	8,4,35,132,160,6,13
	.byte	'SMACON',0
	.word	104317
	.byte	4,4,35,140,160,6,13
	.byte	'DSTR',0
	.word	101310
	.byte	4,4,35,144,160,6,13
	.byte	'reserved_19014',0
	.word	2624
	.byte	4,4,35,148,160,6,13
	.byte	'DATR',0
	.word	99966
	.byte	4,4,35,152,160,6,13
	.byte	'DEADD',0
	.word	100342
	.byte	4,4,35,156,160,6,13
	.byte	'DIEAR',0
	.word	100405
	.byte	4,4,35,160,160,6,13
	.byte	'DIETR',0
	.word	100468
	.byte	4,4,35,164,160,6,13
	.byte	'reserved_19028',0
	.word	3815
	.byte	24,4,35,168,160,6,13
	.byte	'DCON0',0
	.word	100155
	.byte	4,4,35,192,160,6,13
	.byte	'reserved_19044',0
	.word	32187
	.byte	188,3,4,35,196,160,6,13
	.byte	'PSTR',0
	.word	103715
	.byte	4,4,35,128,164,6,13
	.byte	'PCON1',0
	.word	103215
	.byte	4,4,35,132,164,6,13
	.byte	'PCON2',0
	.word	103278
	.byte	4,4,35,136,164,6,13
	.byte	'PCON0',0
	.word	103152
	.byte	4,4,35,140,164,6,13
	.byte	'PIEAR',0
	.word	103403
	.byte	4,4,35,144,164,6,13
	.byte	'PIETR',0
	.word	103466
	.byte	4,4,35,148,164,6,13
	.byte	'reserved_19218',0
	.word	106537
	.byte	232,3,4,35,152,164,6,13
	.byte	'COMPAT',0
	.word	99399
	.byte	4,4,35,128,168,6,13
	.byte	'reserved_19404',0
	.word	106548
	.byte	252,23,4,35,132,168,6,13
	.byte	'FPU_TRAP',0
	.word	106559
	.byte	28,4,35,128,192,6,13
	.byte	'reserved_1A01C',0
	.word	106564
	.byte	228,63,4,35,156,192,6,13
	.byte	'DPR',0
	.word	106585
	.byte	144,1,4,35,128,128,7,13
	.byte	'reserved_1C090',0
	.word	106590
	.byte	240,30,4,35,144,129,7,13
	.byte	'CPR',0
	.word	106610
	.byte	80,4,35,128,160,7,13
	.byte	'reserved_1D050',0
	.word	106615
	.byte	176,31,4,35,208,160,7,13
	.byte	'CPXE_0',0
	.word	99718
	.byte	4,4,35,128,192,7,13
	.byte	'CPXE_1',0
	.word	99718
	.byte	4,4,35,132,192,7,13
	.byte	'CPXE_2',0
	.word	99718
	.byte	4,4,35,136,192,7,13
	.byte	'CPXE_3',0
	.word	99718
	.byte	4,4,35,140,192,7,13
	.byte	'DPRE_0',0
	.word	101060
	.byte	4,4,35,144,192,7,13
	.byte	'DPRE_1',0
	.word	101060
	.byte	4,4,35,148,192,7,13
	.byte	'DPRE_2',0
	.word	101060
	.byte	4,4,35,152,192,7,13
	.byte	'DPRE_3',0
	.word	101060
	.byte	4,4,35,156,192,7,13
	.byte	'DPWE_0',0
	.word	101248
	.byte	4,4,35,160,192,7,13
	.byte	'DPWE_1',0
	.word	101248
	.byte	4,4,35,164,192,7,13
	.byte	'DPWE_2',0
	.word	101248
	.byte	4,4,35,168,192,7,13
	.byte	'DPWE_3',0
	.word	101248
	.byte	4,4,35,172,192,7,13
	.byte	'reserved_1E030',0
	.word	18333
	.byte	16,4,35,176,192,7,13
	.byte	'CPXE_4',0
	.word	99718
	.byte	4,4,35,192,192,7,13
	.byte	'CPXE_5',0
	.word	99718
	.byte	4,4,35,196,192,7,13
	.byte	'reserved_1E048',0
	.word	4444
	.byte	8,4,35,200,192,7,13
	.byte	'DPRE_4',0
	.word	101060
	.byte	4,4,35,208,192,7,13
	.byte	'DPRE_5',0
	.word	101060
	.byte	4,4,35,212,192,7,13
	.byte	'reserved_1E058',0
	.word	4444
	.byte	8,4,35,216,192,7,13
	.byte	'DPWE_4',0
	.word	101248
	.byte	4,4,35,224,192,7,13
	.byte	'DPWE_5',0
	.word	101248
	.byte	4,4,35,228,192,7,13
	.byte	'reserved_1E068',0
	.word	106626
	.byte	152,7,4,35,232,192,7,13
	.byte	'TPS',0
	.word	106637
	.byte	16,4,35,128,200,7,13
	.byte	'reserved_1E410',0
	.word	106642
	.byte	48,4,35,144,200,7,13
	.byte	'TPS_EXTIM',0
	.word	106651
	.byte	28,4,35,192,200,7,13
	.byte	'reserved_1E45C',0
	.word	106656
	.byte	164,23,4,35,220,200,7,13
	.byte	'TR',0
	.word	106676
	.byte	64,4,35,128,224,7,13
	.byte	'reserved_1F040',0
	.word	106681
	.byte	192,23,4,35,192,224,7,13
	.byte	'CCTRL',0
	.word	99336
	.byte	4,4,35,128,248,7,13
	.byte	'CCNT',0
	.word	99274
	.byte	4,4,35,132,248,7,13
	.byte	'ICNT',0
	.word	102253
	.byte	4,4,35,136,248,7,13
	.byte	'M1CNT',0
	.word	102841
	.byte	4,4,35,140,248,7,13
	.byte	'M2CNT',0
	.word	102904
	.byte	4,4,35,144,248,7,13
	.byte	'M3CNT',0
	.word	102967
	.byte	4,4,35,148,248,7,13
	.byte	'reserved_1FC18',0
	.word	106454
	.byte	232,1,4,35,152,248,7,13
	.byte	'DBGSR',0
	.word	100028
	.byte	4,4,35,128,250,7,13
	.byte	'reserved_1FD04',0
	.word	2624
	.byte	4,4,35,132,250,7,13
	.byte	'EXEVT',0
	.word	101372
	.byte	4,4,35,136,250,7,13
	.byte	'CREVT',0
	.word	99780
	.byte	4,4,35,140,250,7,13
	.byte	'SWEVT',0
	.word	104539
	.byte	4,4,35,144,250,7,13
	.byte	'reserved_1FD14',0
	.word	106692
	.byte	28,4,35,148,250,7,13
	.byte	'TRIG_ACC',0
	.word	105393
	.byte	4,4,35,176,250,7,13
	.byte	'reserved_1FD34',0
	.word	4784
	.byte	12,4,35,180,250,7,13
	.byte	'DMS',0
	.word	100999
	.byte	4,4,35,192,250,7,13
	.byte	'DCX',0
	.word	100281
	.byte	4,4,35,196,250,7,13
	.byte	'DBGTCR',0
	.word	100091
	.byte	4,4,35,200,250,7,13
	.byte	'reserved_1FD4C',0
	.word	106701
	.byte	180,1,4,35,204,250,7,13
	.byte	'PCXI',0
	.word	103341
	.byte	4,4,35,128,252,7,13
	.byte	'PSW',0
	.word	103777
	.byte	4,4,35,132,252,7,13
	.byte	'PC',0
	.word	103092
	.byte	4,4,35,136,252,7,13
	.byte	'reserved_1FE0C',0
	.word	4444
	.byte	8,4,35,140,252,7,13
	.byte	'SYSCON',0
	.word	104602
	.byte	4,4,35,148,252,7,13
	.byte	'CPU_ID',0
	.word	99654
	.byte	4,4,35,152,252,7,13
	.byte	'CORE_ID',0
	.word	99463
	.byte	4,4,35,156,252,7,13
	.byte	'BIV',0
	.word	98953
	.byte	4,4,35,160,252,7,13
	.byte	'BTV',0
	.word	99213
	.byte	4,4,35,164,252,7,13
	.byte	'ISP',0
	.word	102376
	.byte	4,4,35,168,252,7,13
	.byte	'ICR',0
	.word	102315
	.byte	4,4,35,172,252,7,13
	.byte	'reserved_1FE30',0
	.word	4444
	.byte	8,4,35,176,252,7,13
	.byte	'FCX',0
	.word	101435
	.byte	4,4,35,184,252,7,13
	.byte	'LCX',0
	.word	102628
	.byte	4,4,35,188,252,7,13
	.byte	'reserved_1FE40',0
	.word	18333
	.byte	16,4,35,192,252,7,13
	.byte	'CUS_ID',0
	.word	99843
	.byte	4,4,35,208,252,7,13
	.byte	'reserved_1FE54',0
	.word	16344
	.byte	172,1,4,35,212,252,7,13
	.byte	'D',0
	.word	106712
	.byte	64,4,35,128,254,7,13
	.byte	'reserved_1FF40',0
	.word	106721
	.byte	64,4,35,192,254,7,13
	.byte	'A',0
	.word	106730
	.byte	64,4,35,128,255,7,13
	.byte	'reserved_1FFC0',0
	.word	106721
	.byte	64,4,35,192,255,7,0,14
	.word	106739
	.byte	32
	.byte	'Ifx_CPU',0,21,210,19,3
	.word	111837
	.byte	17,8,124,9,1,18
	.byte	'IfxCpu_Id_0',0,0,18
	.byte	'IfxCpu_Id_1',0,1,18
	.byte	'IfxCpu_Id_2',0,2,18
	.byte	'IfxCpu_Id_3',0,3,18
	.byte	'IfxCpu_Id_4',0,4,18
	.byte	'IfxCpu_Id_6',0,6,18
	.byte	'IfxCpu_Id_none',0,7,0,32
	.byte	'IfxCpu_Id',0,8,133,1,3
	.word	111859
	.byte	32
	.byte	'IfxCpu_ResourceCpu',0,8,170,1,3
	.word	9914
	.byte	32
	.byte	'Ifx_SRC_SRCR_Bits',0,11,85,3
	.word	10476
	.byte	32
	.byte	'Ifx_SRC_SRCR',0,11,98,3
	.word	10766
	.byte	10
	.byte	'_Ifx_SRC_CPU_CPU',0,11,110,25,4,13
	.byte	'SB',0
	.word	10766
	.byte	4,2,35,0,0,14
	.word	112060
	.byte	32
	.byte	'Ifx_SRC_CPU_CPU',0,11,113,3
	.word	112095
	.byte	15,24
	.word	112060
	.byte	16,5,0,14
	.word	112124
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,11,128,1,25,24,13
	.byte	'CPU',0
	.word	112133
	.byte	24,2,35,0,0,14
	.word	112138
	.byte	32
	.byte	'Ifx_SRC_CPU',0,11,131,1,3
	.word	112171
	.byte	10
	.byte	'_Ifx_SRC_AGBT_AGBT',0,11,146,1,25,4,13
	.byte	'SR',0
	.word	10766
	.byte	4,2,35,0,0,14
	.word	112197
	.byte	32
	.byte	'Ifx_SRC_AGBT_AGBT',0,11,149,1,3
	.word	112235
	.byte	15,4
	.word	112197
	.byte	16,0,0,14
	.word	112267
	.byte	10
	.byte	'_Ifx_SRC_AGBT',0,11,164,1,25,4,13
	.byte	'AGBT',0
	.word	112276
	.byte	4,2,35,0,0,14
	.word	112281
	.byte	32
	.byte	'Ifx_SRC_AGBT',0,11,167,1,3
	.word	112316
	.byte	10
	.byte	'_Ifx_SRC_XBAR_XBAR',0,11,182,1,25,4,13
	.byte	'SR',0
	.word	10766
	.byte	4,2,35,0,0,14
	.word	112343
	.byte	32
	.byte	'Ifx_SRC_XBAR_XBAR',0,11,185,1,3
	.word	112381
	.byte	15,12
	.word	112343
	.byte	16,2,0,14
	.word	112413
	.byte	10
	.byte	'_Ifx_SRC_XBAR',0,11,200,1,25,12,13
	.byte	'XBAR',0
	.word	112422
	.byte	12,2,35,0,0,14
	.word	112427
	.byte	32
	.byte	'Ifx_SRC_XBAR',0,11,203,1,3
	.word	112462
	.byte	15,8
	.word	10766
	.byte	16,1,0,10
	.byte	'_Ifx_SRC_CERBERUS_CERBERUS',0,11,218,1,25,8,13
	.byte	'SR',0
	.word	112489
	.byte	8,2,35,0,0,14
	.word	112498
	.byte	32
	.byte	'Ifx_SRC_CERBERUS_CERBERUS',0,11,221,1,3
	.word	112544
	.byte	14
	.word	112498
	.byte	10
	.byte	'_Ifx_SRC_CERBERUS',0,11,236,1,25,8,13
	.byte	'CERBERUS',0
	.word	112584
	.byte	8,2,35,0,0,14
	.word	112589
	.byte	32
	.byte	'Ifx_SRC_CERBERUS',0,11,239,1,3
	.word	112632
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN_ASCLIN',0,11,254,1,25,12,13
	.byte	'TX',0
	.word	10766
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	10766
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	10766
	.byte	4,2,35,8,0,14
	.word	112663
	.byte	32
	.byte	'Ifx_SRC_ASCLIN_ASCLIN',0,11,131,2,3
	.word	112730
	.byte	15,144,1
	.word	112663
	.byte	16,11,0,14
	.word	112766
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,11,146,2,25,144,1,13
	.byte	'ASCLIN',0
	.word	112776
	.byte	144,1,2,35,0,0,14
	.word	112781
	.byte	32
	.byte	'Ifx_SRC_ASCLIN',0,11,149,2,3
	.word	112822
	.byte	10
	.byte	'_Ifx_SRC_QSPI_QSPI',0,11,164,2,25,20,13
	.byte	'TX',0
	.word	10766
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	10766
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	10766
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	10766
	.byte	4,2,35,12,13
	.byte	'U',0
	.word	10766
	.byte	4,2,35,16,0,14
	.word	112851
	.byte	32
	.byte	'Ifx_SRC_QSPI_QSPI',0,11,171,2,3
	.word	112937
	.byte	15,120
	.word	112851
	.byte	16,5,0,14
	.word	112969
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,11,186,2,25,120,13
	.byte	'QSPI',0
	.word	112978
	.byte	120,2,35,0,0,14
	.word	112983
	.byte	32
	.byte	'Ifx_SRC_QSPI',0,11,189,2,3
	.word	113018
	.byte	10
	.byte	'_Ifx_SRC_HSCT_HSCT',0,11,204,2,25,4,13
	.byte	'SR',0
	.word	10766
	.byte	4,2,35,0,0,14
	.word	113045
	.byte	32
	.byte	'Ifx_SRC_HSCT_HSCT',0,11,207,2,3
	.word	113083
	.byte	15,8
	.word	113045
	.byte	16,1,0,14
	.word	113115
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,11,222,2,25,8,13
	.byte	'HSCT',0
	.word	113124
	.byte	8,2,35,0,0,14
	.word	113129
	.byte	32
	.byte	'Ifx_SRC_HSCT',0,11,225,2,3
	.word	113164
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL_CH',0,11,240,2,25,16,13
	.byte	'COK',0
	.word	10766
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	10766
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	10766
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	10766
	.byte	4,2,35,12,0,14
	.word	113191
	.byte	32
	.byte	'Ifx_SRC_HSSL_HSSL_CH',0,11,246,2,3
	.word	113272
	.byte	15,64
	.word	113191
	.byte	16,3,0,14
	.word	113307
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL',0,11,133,3,25,68,13
	.byte	'CH',0
	.word	113316
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	10766
	.byte	4,2,35,64,0,14
	.word	113321
	.byte	32
	.byte	'Ifx_SRC_HSSL_HSSL',0,11,137,3,3
	.word	113372
	.byte	15,136,1
	.word	113321
	.byte	16,1,0,14
	.word	113404
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,11,152,3,25,136,1,13
	.byte	'HSSL',0
	.word	113414
	.byte	136,1,2,35,0,0,14
	.word	113419
	.byte	32
	.byte	'Ifx_SRC_HSSL',0,11,155,3,3
	.word	113456
	.byte	10
	.byte	'_Ifx_SRC_I2C_I2C',0,11,170,3,25,16,13
	.byte	'DTR',0
	.word	10766
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	10766
	.byte	4,2,35,4,13
	.byte	'P',0
	.word	10766
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2624
	.byte	4,2,35,12,0,14
	.word	113483
	.byte	32
	.byte	'Ifx_SRC_I2C_I2C',0,11,176,3,3
	.word	113564
	.byte	15,32
	.word	113483
	.byte	16,1,0,14
	.word	113594
	.byte	10
	.byte	'_Ifx_SRC_I2C',0,11,191,3,25,32,13
	.byte	'I2C',0
	.word	113603
	.byte	32,2,35,0,0,14
	.word	113608
	.byte	32
	.byte	'Ifx_SRC_I2C',0,11,194,3,3
	.word	113641
	.byte	10
	.byte	'_Ifx_SRC_SENT_SENT',0,11,209,3,25,4,13
	.byte	'SR',0
	.word	10766
	.byte	4,2,35,0,0,14
	.word	113667
	.byte	32
	.byte	'Ifx_SRC_SENT_SENT',0,11,212,3,3
	.word	113705
	.byte	15,40
	.word	113667
	.byte	16,9,0,14
	.word	113737
	.byte	10
	.byte	'_Ifx_SRC_SENT',0,11,227,3,25,40,13
	.byte	'SENT',0
	.word	113746
	.byte	40,2,35,0,0,14
	.word	113751
	.byte	32
	.byte	'Ifx_SRC_SENT',0,11,230,3,3
	.word	113786
	.byte	15,20
	.word	10766
	.byte	16,4,0,10
	.byte	'_Ifx_SRC_MSC_MSC',0,11,245,3,25,20,13
	.byte	'SR',0
	.word	113813
	.byte	20,2,35,0,0,14
	.word	113822
	.byte	32
	.byte	'Ifx_SRC_MSC_MSC',0,11,248,3,3
	.word	113858
	.byte	15,80
	.word	113822
	.byte	16,3,0,14
	.word	113888
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,11,135,4,25,80,13
	.byte	'MSC',0
	.word	113897
	.byte	80,2,35,0,0,14
	.word	113902
	.byte	32
	.byte	'Ifx_SRC_MSC',0,11,138,4,3
	.word	113935
	.byte	15,16
	.word	10766
	.byte	16,3,0,10
	.byte	'_Ifx_SRC_CCU6_CCU',0,11,153,4,25,16,13
	.byte	'SR',0
	.word	113961
	.byte	16,2,35,0,0,14
	.word	113970
	.byte	32
	.byte	'Ifx_SRC_CCU6_CCU',0,11,156,4,3
	.word	114007
	.byte	15,32
	.word	113970
	.byte	16,1,0,14
	.word	114038
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,11,171,4,25,32,13
	.byte	'CCU',0
	.word	114047
	.byte	32,2,35,0,0,14
	.word	114052
	.byte	32
	.byte	'Ifx_SRC_CCU6',0,11,174,4,3
	.word	114086
	.byte	10
	.byte	'_Ifx_SRC_GPT12_GPT12',0,11,189,4,25,24,13
	.byte	'CIRQ',0
	.word	10766
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	10766
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	10766
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	10766
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	10766
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	10766
	.byte	4,2,35,20,0,14
	.word	114113
	.byte	32
	.byte	'Ifx_SRC_GPT12_GPT12',0,11,197,4,3
	.word	114215
	.byte	15,24
	.word	114113
	.byte	16,0,0,14
	.word	114249
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,11,212,4,25,24,13
	.byte	'GPT12',0
	.word	114258
	.byte	24,2,35,0,0,14
	.word	114263
	.byte	32
	.byte	'Ifx_SRC_GPT12',0,11,215,4,3
	.word	114300
	.byte	10
	.byte	'_Ifx_SRC_STM_STM',0,11,230,4,25,8,13
	.byte	'SR',0
	.word	112489
	.byte	8,2,35,0,0,14
	.word	114328
	.byte	32
	.byte	'Ifx_SRC_STM_STM',0,11,233,4,3
	.word	114364
	.byte	15,48
	.word	114328
	.byte	16,5,0,14
	.word	114394
	.byte	10
	.byte	'_Ifx_SRC_STM',0,11,248,4,25,48,13
	.byte	'STM',0
	.word	114403
	.byte	48,2,35,0,0,14
	.word	114408
	.byte	32
	.byte	'Ifx_SRC_STM',0,11,251,4,3
	.word	114441
	.byte	10
	.byte	'_Ifx_SRC_FCE_FCE0',0,11,138,5,25,4,13
	.byte	'SR',0
	.word	10766
	.byte	4,2,35,0,0,14
	.word	114467
	.byte	32
	.byte	'Ifx_SRC_FCE_FCE0',0,11,141,5,3
	.word	114504
	.byte	14
	.word	114467
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,11,156,5,25,4,13
	.byte	'FCE0',0
	.word	114535
	.byte	4,2,35,0,0,14
	.word	114540
	.byte	32
	.byte	'Ifx_SRC_FCE',0,11,159,5,3
	.word	114574
	.byte	15,32
	.word	603
	.byte	16,31,0,15,128,4
	.word	10766
	.byte	16,127,0,10
	.byte	'_Ifx_SRC_DMA_DMA',0,11,174,5,25,176,4,13
	.byte	'ERR',0
	.word	113961
	.byte	16,2,35,0,13
	.byte	'reserved_10',0
	.word	114600
	.byte	32,2,35,16,13
	.byte	'CH',0
	.word	114609
	.byte	128,4,2,35,48,0,14
	.word	114619
	.byte	32
	.byte	'Ifx_SRC_DMA_DMA',0,11,179,5,3
	.word	114691
	.byte	15,176,4
	.word	114619
	.byte	16,0,0,14
	.word	114721
	.byte	10
	.byte	'_Ifx_SRC_DMA',0,11,194,5,25,176,4,13
	.byte	'DMA',0
	.word	114731
	.byte	176,4,2,35,0,0,14
	.word	114736
	.byte	32
	.byte	'Ifx_SRC_DMA',0,11,197,5,3
	.word	114771
	.byte	10
	.byte	'_Ifx_SRC_SDMMC_SDMMC',0,11,212,5,25,8,13
	.byte	'ERR',0
	.word	10766
	.byte	4,2,35,0,13
	.byte	'DMA',0
	.word	10766
	.byte	4,2,35,4,0,14
	.word	114797
	.byte	32
	.byte	'Ifx_SRC_SDMMC_SDMMC',0,11,216,5,3
	.word	114851
	.byte	15,8
	.word	114797
	.byte	16,0,0,14
	.word	114885
	.byte	10
	.byte	'_Ifx_SRC_SDMMC',0,11,231,5,25,8,13
	.byte	'SDMMC',0
	.word	114894
	.byte	8,2,35,0,0,14
	.word	114899
	.byte	32
	.byte	'Ifx_SRC_SDMMC',0,11,234,5,3
	.word	114936
	.byte	15,40
	.word	10766
	.byte	16,9,0,10
	.byte	'_Ifx_SRC_GETH_GETH',0,11,249,5,25,40,13
	.byte	'SR',0
	.word	114964
	.byte	40,2,35,0,0,14
	.word	114973
	.byte	32
	.byte	'Ifx_SRC_GETH_GETH',0,11,252,5,3
	.word	115011
	.byte	15,40
	.word	114973
	.byte	16,0,0,14
	.word	115043
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,11,139,6,25,40,13
	.byte	'GETH',0
	.word	115052
	.byte	40,2,35,0,0,14
	.word	115057
	.byte	32
	.byte	'Ifx_SRC_GETH',0,11,142,6,3
	.word	115092
	.byte	14
	.word	42901
	.byte	32
	.byte	'Ifx_SRC_CAN_CAN',0,11,160,6,3
	.word	115119
	.byte	15,192,1
	.word	42901
	.byte	16,2,0,14
	.word	115149
	.byte	10
	.byte	'_Ifx_SRC_CAN',0,11,175,6,25,192,1,13
	.byte	'CAN',0
	.word	115159
	.byte	192,1,2,35,0,0,14
	.word	115164
	.byte	32
	.byte	'Ifx_SRC_CAN',0,11,178,6,3
	.word	115199
	.byte	10
	.byte	'_Ifx_SRC_VADC_G',0,11,193,6,25,16,13
	.byte	'SR0',0
	.word	10766
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	10766
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	10766
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	10766
	.byte	4,2,35,12,0,14
	.word	115225
	.byte	32
	.byte	'Ifx_SRC_VADC_G',0,11,199,6,3
	.word	115300
	.byte	10
	.byte	'_Ifx_SRC_VADC_FC',0,11,214,6,25,4,13
	.byte	'SR0',0
	.word	10766
	.byte	4,2,35,0,0,14
	.word	115329
	.byte	32
	.byte	'Ifx_SRC_VADC_FC',0,11,217,6,3
	.word	115366
	.byte	15,192,1
	.word	115225
	.byte	16,11,0,14
	.word	115396
	.byte	15,32
	.word	115329
	.byte	16,7,0,14
	.word	115411
	.byte	15,32
	.word	115225
	.byte	16,1,0,14
	.word	115425
	.byte	10
	.byte	'_Ifx_SRC_VADC',0,11,233,6,25,128,2,13
	.byte	'G',0
	.word	115406
	.byte	192,1,2,35,0,13
	.byte	'FC',0
	.word	115420
	.byte	32,3,35,192,1,13
	.byte	'CG',0
	.word	115434
	.byte	32,3,35,224,1,0,14
	.word	115439
	.byte	32
	.byte	'Ifx_SRC_VADC',0,11,238,6,3
	.word	115499
	.byte	10
	.byte	'_Ifx_SRC_DSADC_DSADC',0,11,253,6,25,8,13
	.byte	'SRM',0
	.word	10766
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	10766
	.byte	4,2,35,4,0,14
	.word	115526
	.byte	32
	.byte	'Ifx_SRC_DSADC_DSADC',0,11,129,7,3
	.word	115580
	.byte	15,112
	.word	115526
	.byte	16,13,0,14
	.word	115614
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,11,144,7,25,112,13
	.byte	'DSADC',0
	.word	115623
	.byte	112,2,35,0,0,14
	.word	115628
	.byte	32
	.byte	'Ifx_SRC_DSADC',0,11,147,7,3
	.word	115665
	.byte	10
	.byte	'_Ifx_SRC_ERAY_ERAY',0,11,162,7,25,48,13
	.byte	'INT0',0
	.word	10766
	.byte	4,2,35,0,13
	.byte	'INT1',0
	.word	10766
	.byte	4,2,35,4,13
	.byte	'TINT0',0
	.word	10766
	.byte	4,2,35,8,13
	.byte	'TINT1',0
	.word	10766
	.byte	4,2,35,12,13
	.byte	'NDAT0',0
	.word	10766
	.byte	4,2,35,16,13
	.byte	'NDAT1',0
	.word	10766
	.byte	4,2,35,20,13
	.byte	'MBSC0',0
	.word	10766
	.byte	4,2,35,24,13
	.byte	'MBSC1',0
	.word	10766
	.byte	4,2,35,28,13
	.byte	'OBUSY',0
	.word	10766
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	10766
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	4444
	.byte	8,2,35,40,0,14
	.word	115693
	.byte	32
	.byte	'Ifx_SRC_ERAY_ERAY',0,11,175,7,3
	.word	115888
	.byte	15,96
	.word	115693
	.byte	16,1,0,14
	.word	115920
	.byte	10
	.byte	'_Ifx_SRC_ERAY',0,11,190,7,25,96,13
	.byte	'ERAY',0
	.word	115929
	.byte	96,2,35,0,0,14
	.word	115934
	.byte	32
	.byte	'Ifx_SRC_ERAY',0,11,193,7,3
	.word	115969
	.byte	10
	.byte	'_Ifx_SRC_HSM_HSM',0,11,208,7,25,8,13
	.byte	'HSM',0
	.word	112489
	.byte	8,2,35,0,0,14
	.word	115996
	.byte	32
	.byte	'Ifx_SRC_HSM_HSM',0,11,211,7,3
	.word	116033
	.byte	15,8
	.word	115996
	.byte	16,0,0,14
	.word	116063
	.byte	10
	.byte	'_Ifx_SRC_HSM',0,11,226,7,25,8,13
	.byte	'HSM',0
	.word	116072
	.byte	8,2,35,0,0,14
	.word	116077
	.byte	32
	.byte	'Ifx_SRC_HSM',0,11,229,7,3
	.word	116110
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,11,244,7,25,16,13
	.byte	'SCUERU',0
	.word	113961
	.byte	16,2,35,0,0,14
	.word	116136
	.byte	32
	.byte	'Ifx_SRC_SCU',0,11,247,7,3
	.word	116172
	.byte	10
	.byte	'_Ifx_SRC_PMS_PMS',0,11,134,8,25,4,13
	.byte	'SR',0
	.word	10766
	.byte	4,2,35,0,0,14
	.word	116198
	.byte	32
	.byte	'Ifx_SRC_PMS_PMS',0,11,137,8,3
	.word	116234
	.byte	15,16
	.word	116198
	.byte	16,3,0,14
	.word	116264
	.byte	10
	.byte	'_Ifx_SRC_PMS',0,11,152,8,25,16,13
	.byte	'PMS',0
	.word	116273
	.byte	16,2,35,0,0,14
	.word	116278
	.byte	32
	.byte	'Ifx_SRC_PMS',0,11,155,8,3
	.word	116311
	.byte	15,12
	.word	10766
	.byte	16,2,0,10
	.byte	'_Ifx_SRC_SMU_SMU',0,11,170,8,25,12,13
	.byte	'SR',0
	.word	116337
	.byte	12,2,35,0,0,14
	.word	116346
	.byte	32
	.byte	'Ifx_SRC_SMU_SMU',0,11,173,8,3
	.word	116382
	.byte	15,12
	.word	116346
	.byte	16,0,0,14
	.word	116412
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,11,188,8,25,12,13
	.byte	'SMU',0
	.word	116421
	.byte	12,2,35,0,0,14
	.word	116426
	.byte	32
	.byte	'Ifx_SRC_SMU',0,11,191,8,3
	.word	116459
	.byte	15,32
	.word	10766
	.byte	16,7,0,10
	.byte	'_Ifx_SRC_PSI5_PSI5',0,11,206,8,25,32,13
	.byte	'SR',0
	.word	116485
	.byte	32,2,35,0,0,14
	.word	116494
	.byte	32
	.byte	'Ifx_SRC_PSI5_PSI5',0,11,209,8,3
	.word	116532
	.byte	15,32
	.word	116494
	.byte	16,0,0,14
	.word	116564
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,11,224,8,25,32,13
	.byte	'PSI5',0
	.word	116573
	.byte	32,2,35,0,0,14
	.word	116578
	.byte	32
	.byte	'Ifx_SRC_PSI5',0,11,227,8,3
	.word	116613
	.byte	10
	.byte	'_Ifx_SRC_HSPDM_HSPDM0',0,11,242,8,25,12,13
	.byte	'BFR',0
	.word	10766
	.byte	4,2,35,0,13
	.byte	'RAMP',0
	.word	10766
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	10766
	.byte	4,2,35,8,0,14
	.word	116640
	.byte	32
	.byte	'Ifx_SRC_HSPDM_HSPDM0',0,11,247,8,3
	.word	116709
	.byte	14
	.word	116640
	.byte	10
	.byte	'_Ifx_SRC_HSPDM',0,11,134,9,25,12,13
	.byte	'HSPDM0',0
	.word	116744
	.byte	12,2,35,0,0,14
	.word	116749
	.byte	32
	.byte	'Ifx_SRC_HSPDM',0,11,137,9,3
	.word	116787
	.byte	10
	.byte	'_Ifx_SRC_DAM_DAM',0,11,152,9,25,24,13
	.byte	'LI0',0
	.word	10766
	.byte	4,2,35,0,13
	.byte	'RI0',0
	.word	10766
	.byte	4,2,35,4,13
	.byte	'LI1',0
	.word	10766
	.byte	4,2,35,8,13
	.byte	'RI1',0
	.word	10766
	.byte	4,2,35,12,13
	.byte	'DR',0
	.word	10766
	.byte	4,2,35,16,13
	.byte	'ERR',0
	.word	10766
	.byte	4,2,35,20,0,14
	.word	116815
	.byte	32
	.byte	'Ifx_SRC_DAM_DAM',0,11,160,9,3
	.word	116916
	.byte	15,48
	.word	116815
	.byte	16,1,0,14
	.word	116946
	.byte	10
	.byte	'_Ifx_SRC_DAM',0,11,175,9,25,48,13
	.byte	'DAM',0
	.word	116955
	.byte	48,2,35,0,0,14
	.word	116960
	.byte	32
	.byte	'Ifx_SRC_DAM',0,11,178,9,3
	.word	116993
	.byte	10
	.byte	'_Ifx_SRC_PSI5S_PSI5S',0,11,193,9,25,32,13
	.byte	'SR',0
	.word	116485
	.byte	32,2,35,0,0,14
	.word	117019
	.byte	32
	.byte	'Ifx_SRC_PSI5S_PSI5S',0,11,196,9,3
	.word	117059
	.byte	15,32
	.word	117019
	.byte	16,0,0,14
	.word	117093
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,11,211,9,25,32,13
	.byte	'PSI5S',0
	.word	117102
	.byte	32,2,35,0,0,14
	.word	117107
	.byte	32
	.byte	'Ifx_SRC_PSI5S',0,11,214,9,3
	.word	117144
	.byte	10
	.byte	'_Ifx_SRC_RIF_RIF',0,11,229,9,25,8,13
	.byte	'ERR',0
	.word	10766
	.byte	4,2,35,0,13
	.byte	'INT',0
	.word	10766
	.byte	4,2,35,4,0,14
	.word	117172
	.byte	32
	.byte	'Ifx_SRC_RIF_RIF',0,11,233,9,3
	.word	117222
	.byte	15,16
	.word	117172
	.byte	16,1,0,14
	.word	117252
	.byte	10
	.byte	'_Ifx_SRC_RIF',0,11,248,9,25,16,13
	.byte	'RIF',0
	.word	117261
	.byte	16,2,35,0,0,14
	.word	117266
	.byte	32
	.byte	'Ifx_SRC_RIF',0,11,251,9,3
	.word	117299
	.byte	10
	.byte	'_Ifx_SRC_SPU_SPU',0,11,138,10,25,8,13
	.byte	'INT',0
	.word	10766
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	10766
	.byte	4,2,35,4,0,14
	.word	117325
	.byte	32
	.byte	'Ifx_SRC_SPU_SPU',0,11,142,10,3
	.word	117375
	.byte	15,16
	.word	117325
	.byte	16,1,0,14
	.word	117405
	.byte	10
	.byte	'_Ifx_SRC_SPU',0,11,157,10,25,16,13
	.byte	'SPU',0
	.word	117414
	.byte	16,2,35,0,0,14
	.word	117419
	.byte	32
	.byte	'Ifx_SRC_SPU',0,11,160,10,3
	.word	117452
	.byte	10
	.byte	'_Ifx_SRC_GPSR_GPSR',0,11,175,10,25,32,13
	.byte	'SR',0
	.word	116485
	.byte	32,2,35,0,0,14
	.word	117478
	.byte	32
	.byte	'Ifx_SRC_GPSR_GPSR',0,11,178,10,3
	.word	117516
	.byte	15,192,1
	.word	117478
	.byte	16,5,0,14
	.word	117548
	.byte	10
	.byte	'_Ifx_SRC_GPSR',0,11,193,10,25,192,1,13
	.byte	'GPSR',0
	.word	117558
	.byte	192,1,2,35,0,0,14
	.word	117563
	.byte	32
	.byte	'Ifx_SRC_GPSR',0,11,196,10,3
	.word	117600
	.byte	10
	.byte	'_Ifx_STM_ACCEN0_Bits',0,22,68,16,4,11
	.byte	'EN0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	603
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_STM_ACCEN0_Bits',0,22,102,3
	.word	117627
	.byte	10
	.byte	'_Ifx_STM_ACCEN1_Bits',0,22,105,16,4,11
	.byte	'reserved_0',0,4
	.word	428
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN1_Bits',0,22,108,3
	.word	118184
	.byte	10
	.byte	'_Ifx_STM_CAP_Bits',0,22,111,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	428
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CAP_Bits',0,22,114,3
	.word	118261
	.byte	10
	.byte	'_Ifx_STM_CAPSV_Bits',0,22,117,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	428
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CAPSV_Bits',0,22,120,3
	.word	118334
	.byte	10
	.byte	'_Ifx_STM_CLC_Bits',0,22,123,16,4,11
	.byte	'DISR',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	428
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_STM_CLC_Bits',0,22,130,1,3
	.word	118411
	.byte	10
	.byte	'_Ifx_STM_CMCON_Bits',0,22,133,1,16,4,11
	.byte	'MSIZE0',0,1
	.word	603
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	603
	.byte	3,0,2,35,0,11
	.byte	'MSTART0',0,1
	.word	603
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	603
	.byte	3,0,2,35,1,11
	.byte	'MSIZE1',0,1
	.word	603
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	603
	.byte	3,0,2,35,2,11
	.byte	'MSTART1',0,1
	.word	603
	.byte	5,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	603
	.byte	3,0,2,35,3,0,32
	.byte	'Ifx_STM_CMCON_Bits',0,22,143,1,3
	.word	118553
	.byte	10
	.byte	'_Ifx_STM_CMP_Bits',0,22,146,1,16,4,11
	.byte	'CMPVAL',0,4
	.word	428
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CMP_Bits',0,22,149,1,3
	.word	118773
	.byte	10
	.byte	'_Ifx_STM_ICR_Bits',0,22,152,1,16,4,11
	.byte	'CMP0EN',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'CMP0IR',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'CMP0OS',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'CMP1EN',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'CMP1IR',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'CMP1OS',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	428
	.byte	25,0,2,35,0,0,32
	.byte	'Ifx_STM_ICR_Bits',0,22,162,1,3
	.word	118842
	.byte	10
	.byte	'_Ifx_STM_ID_Bits',0,22,165,1,16,4,11
	.byte	'MODREV',0,1
	.word	603
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	603
	.byte	8,0,2,35,1,11
	.byte	'MODNUM',0,2
	.word	620
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_STM_ID_Bits',0,22,170,1,3
	.word	119045
	.byte	10
	.byte	'_Ifx_STM_ISCR_Bits',0,22,173,1,16,4,11
	.byte	'CMP0IRR',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'CMP0IRS',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'CMP1IRR',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'CMP1IRS',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	428
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_STM_ISCR_Bits',0,22,180,1,3
	.word	119149
	.byte	10
	.byte	'_Ifx_STM_KRST0_Bits',0,22,183,1,16,4,11
	.byte	'RST',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	428
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_STM_KRST0_Bits',0,22,188,1,3
	.word	119300
	.byte	10
	.byte	'_Ifx_STM_KRST1_Bits',0,22,191,1,16,4,11
	.byte	'RST',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	428
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_STM_KRST1_Bits',0,22,195,1,3
	.word	119411
	.byte	10
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,22,198,1,16,4,11
	.byte	'CLR',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	428
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_STM_KRSTCLR_Bits',0,22,202,1,3
	.word	119503
	.byte	10
	.byte	'_Ifx_STM_OCS_Bits',0,22,205,1,16,4,11
	.byte	'reserved_0',0,1
	.word	603
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	428
	.byte	21,8,2,35,0,11
	.byte	'SUS',0,1
	.word	603
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	603
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_STM_OCS_Bits',0,22,213,1,3
	.word	119599
	.byte	10
	.byte	'_Ifx_STM_TIM0_Bits',0,22,216,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	428
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM0_Bits',0,22,219,1,3
	.word	119767
	.byte	10
	.byte	'_Ifx_STM_TIM0SV_Bits',0,22,222,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	428
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM0SV_Bits',0,22,225,1,3
	.word	119840
	.byte	10
	.byte	'_Ifx_STM_TIM1_Bits',0,22,228,1,16,4,11
	.byte	'STM_35_4',0,4
	.word	428
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM1_Bits',0,22,231,1,3
	.word	119917
	.byte	10
	.byte	'_Ifx_STM_TIM2_Bits',0,22,234,1,16,4,11
	.byte	'STM_39_8',0,4
	.word	428
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM2_Bits',0,22,237,1,3
	.word	119990
	.byte	10
	.byte	'_Ifx_STM_TIM3_Bits',0,22,240,1,16,4,11
	.byte	'STM_43_12',0,4
	.word	428
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM3_Bits',0,22,243,1,3
	.word	120063
	.byte	10
	.byte	'_Ifx_STM_TIM4_Bits',0,22,246,1,16,4,11
	.byte	'STM_47_16',0,4
	.word	428
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM4_Bits',0,22,249,1,3
	.word	120137
	.byte	10
	.byte	'_Ifx_STM_TIM5_Bits',0,22,252,1,16,4,11
	.byte	'STM_51_20',0,4
	.word	428
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM5_Bits',0,22,255,1,3
	.word	120211
	.byte	10
	.byte	'_Ifx_STM_TIM6_Bits',0,22,130,2,16,4,11
	.byte	'STM_63_32',0,4
	.word	428
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM6_Bits',0,22,133,2,3
	.word	120285
	.byte	12,22,141,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	117627
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN0',0,22,146,2,3
	.word	120359
	.byte	12,22,149,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	118184
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN1',0,22,154,2,3
	.word	120423
	.byte	12,22,157,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	118261
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CAP',0,22,162,2,3
	.word	120487
	.byte	12,22,165,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	118334
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CAPSV',0,22,170,2,3
	.word	120548
	.byte	12,22,173,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	118411
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CLC',0,22,178,2,3
	.word	120611
	.byte	12,22,181,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	118553
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CMCON',0,22,186,2,3
	.word	120672
	.byte	12,22,189,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	118773
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CMP',0,22,194,2,3
	.word	120735
	.byte	12,22,197,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	118842
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ICR',0,22,202,2,3
	.word	120796
	.byte	12,22,205,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	119045
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ID',0,22,210,2,3
	.word	120857
	.byte	12,22,213,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	119149
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ISCR',0,22,218,2,3
	.word	120917
	.byte	12,22,221,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	119300
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRST0',0,22,226,2,3
	.word	120979
	.byte	12,22,229,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	119411
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRST1',0,22,234,2,3
	.word	121042
	.byte	12,22,237,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	119503
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRSTCLR',0,22,242,2,3
	.word	121105
	.byte	12,22,245,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	119599
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_OCS',0,22,250,2,3
	.word	121170
	.byte	12,22,253,2,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	119767
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM0',0,22,130,3,3
	.word	121231
	.byte	12,22,133,3,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	119840
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM0SV',0,22,138,3,3
	.word	121293
	.byte	12,22,141,3,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	119917
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM1',0,22,146,3,3
	.word	121357
	.byte	12,22,149,3,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	119990
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM2',0,22,154,3,3
	.word	121419
	.byte	12,22,157,3,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	120063
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM3',0,22,162,3,3
	.word	121481
	.byte	12,22,165,3,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	120137
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM4',0,22,170,3,3
	.word	121543
	.byte	12,22,173,3,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	120211
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM5',0,22,178,3,3
	.word	121605
	.byte	12,22,181,3,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	120285
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM6',0,22,186,3,3
	.word	121667
	.byte	17,7,141,1,9,1,18
	.byte	'IfxCpu_CounterMode_normal',0,0,18
	.byte	'IfxCpu_CounterMode_task',0,1,0,32
	.byte	'IfxCpu_CounterMode',0,7,145,1,3
	.word	121729
	.byte	31,7,198,1,9,6,13
	.byte	'counter',0
	.word	10161
	.byte	4,2,35,0,13
	.byte	'overlfow',0
	.word	603
	.byte	1,2,35,4,0,32
	.byte	'IfxCpu_Counter',0,7,202,1,3
	.word	121818
	.byte	31,7,210,1,9,32,13
	.byte	'instruction',0
	.word	121818
	.byte	6,2,35,0,13
	.byte	'clock',0
	.word	121818
	.byte	6,2,35,6,13
	.byte	'counter1',0
	.word	121818
	.byte	6,2,35,12,13
	.byte	'counter2',0
	.word	121818
	.byte	6,2,35,18,13
	.byte	'counter3',0
	.word	121818
	.byte	6,2,35,24,0,32
	.byte	'IfxCpu_Perf',0,7,217,1,3
	.word	121884
	.byte	10
	.byte	'_Ifx_SMU_ACCEN0_Bits',0,23,68,16,4,11
	.byte	'EN0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	603
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SMU_ACCEN0_Bits',0,23,102,3
	.word	122002
	.byte	10
	.byte	'_Ifx_SMU_ACCEN1_Bits',0,23,105,16,4,11
	.byte	'reserved_0',0,4
	.word	428
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SMU_ACCEN1_Bits',0,23,108,3
	.word	122559
	.byte	10
	.byte	'_Ifx_SMU_AD_Bits',0,23,111,16,4,11
	.byte	'DF0',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'DF1',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'DF2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'DF3',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'DF4',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'DF5',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'DF6',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'DF7',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'DF8',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'DF9',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'DF10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'DF11',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'DF12',0,1
	.word	603
	.byte	1,3,2,35,1,11
	.byte	'DF13',0,1
	.word	603
	.byte	1,2,2,35,1,11
	.byte	'DF14',0,1
	.word	603
	.byte	1,1,2,35,1,11
	.byte	'DF15',0,1
	.word	603
	.byte	1,0,2,35,1,11
	.byte	'DF16',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'DF17',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'DF18',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'DF19',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'DF20',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'DF21',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'DF22',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'DF23',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'DF24',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'DF25',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'DF26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'DF27',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'DF28',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'DF29',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'DF30',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'DF31',0,1
	.word	603
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SMU_AD_Bits',0,23,145,1,3
	.word	122636
	.byte	10
	.byte	'_Ifx_SMU_AEX_Bits',0,23,148,1,16,4,11
	.byte	'IRQ0STS',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'IRQ1STS',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'IRQ2STS',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'RST0STS',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'RST1STS',0,1
	.word	603
	.byte	1,3,2,35,0,11
	.byte	'RST2STS',0,1
	.word	603
	.byte	1,2,2,35,0,11
	.byte	'RST3STS',0,1
	.word	603
	.byte	1,1,2,35,0,11
	.byte	'RST4STS',0,1
	.word	603
	.byte	1,0,2,35,0,11
	.byte	'RST5STS',0,1
	.word	603
	.byte	1,7,2,35,1,11
	.byte	'NMISTS',0,1
	.word	603
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	603
	.byte	1,5,2,35,1,11
	.byte	'EMSSTS',0,1
	.word	603
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	603
	.byte	4,0,2,35,1,11
	.byte	'IRQ0AEM',0,1
	.word	603
	.byte	1,7,2,35,2,11
	.byte	'IRQ1AEM',0,1
	.word	603
	.byte	1,6,2,35,2,11
	.byte	'IRQ2AEM',0,1
	.word	603
	.byte	1,5,2,35,2,11
	.byte	'RST0AEM',0,1
	.word	603
	.byte	1,4,2,35,2,11
	.byte	'RST1AEM',0,1
	.word	603
	.byte	1,3,2,35,2,11
	.byte	'RST2AEM',0,1
	.word	603
	.byte	1,2,2,35,2,11
	.byte	'RST3AEM',0,1
	.word	603
	.byte	1,1,2,35,2,11
	.byte	'RST4AEM',0,1
	.word	603
	.byte	1,0,2,35,2,11
	.byte	'RST5AEM',0,1
	.word	603
	.byte	1,7,2,35,3,11
	.byte	'NMIAEM',0,1
	.word	603
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	603
	.byte	1,5,2,35,3,11
	.byte	'EMSAEM',0,1
	.word	603
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	603
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SMU_AEX_Bits',0,23,176,1,3
	.word	123186
	.byte	10
	.byte	'_Ifx_SMU_AEXCLR_Bits',0,23,179,1,16,4,11
	.byte	'IRQ0CLR',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'IRQ1CLR',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'IRQ2CLR',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'RST0CLR',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'RST1CLR',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'RST2CLR',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'RST3CLR',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'RST4CLR',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'RST5CLR',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'NMICLR',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'EMSCLR',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	451
	.byte	4,16,2,35,0,11
	.byte	'IRQ0AEMCLR',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'IRQ1AEMCLR',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'IRQ2AEMCLR',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'RST0AEMCLR',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'RST1AEMCLR',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'RST2AEMCLR',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'RST3AEMCLR',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'RST4AEMCLR',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'RST5AEMCLR',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'NMIAEMCLR',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'EMSAEMCLR',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	451
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_SMU_AEXCLR_Bits',0,23,207,1,3
	.word	123743
	.byte	10
	.byte	'_Ifx_SMU_AFCNT_Bits',0,23,210,1,16,4,11
	.byte	'FCNT',0,1
	.word	603
	.byte	4,4,2,35,0,11
	.byte	'ACNT',0,2
	.word	620
	.byte	12,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	620
	.byte	14,2,2,35,2,11
	.byte	'FCO',0,1
	.word	603
	.byte	1,1,2,35,3,11
	.byte	'ACO',0,1
	.word	603
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SMU_AFCNT_Bits',0,23,217,1,3
	.word	124339
	.byte	10
	.byte	'_Ifx_SMU_AG_Bits',0,23,220,1,16,4,11
	.byte	'SF0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'SF1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'SF2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'SF3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'SF4',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'SF5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'SF6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'SF7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'SF8',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'SF9',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'SF10',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'SF11',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'SF12',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'SF13',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'SF14',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'SF15',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'SF16',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'SF17',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'SF18',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'SF19',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'SF20',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'SF21',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'SF22',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'SF23',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'SF24',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'SF25',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'SF26',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'SF27',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'SF28',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'SF29',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'SF30',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'SF31',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_AG_Bits',0,23,254,1,3
	.word	124479
	.byte	10
	.byte	'_Ifx_SMU_AGC_Bits',0,23,129,2,16,4,11
	.byte	'IGCS0',0,4
	.word	451
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'IGCS1',0,4
	.word	451
	.byte	3,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'IGCS2',0,4
	.word	451
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	451
	.byte	5,16,2,35,0,11
	.byte	'RCS',0,4
	.word	451
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	451
	.byte	2,8,2,35,0,11
	.byte	'PES',0,4
	.word	451
	.byte	5,3,2,35,0,11
	.byte	'EFRST',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	451
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_SMU_AGC_Bits',0,23,142,2,3
	.word	125030
	.byte	10
	.byte	'_Ifx_SMU_AGCF_Bits',0,23,145,2,16,4,11
	.byte	'CF0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'CF1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'CF2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'CF3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'CF4',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'CF5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'CF6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'CF7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'CF8',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'CF9',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'CF10',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'CF11',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'CF12',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'CF13',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'CF14',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'CF15',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'CF16',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'CF17',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'CF18',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'CF19',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'CF20',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'CF21',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'CF22',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'CF23',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'CF24',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'CF25',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'CF26',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'CF27',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'CF28',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'CF29',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'CF30',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'CF31',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_AGCF_Bits',0,23,179,2,3
	.word	125292
	.byte	10
	.byte	'_Ifx_SMU_AGFSP_Bits',0,23,182,2,16,4,11
	.byte	'FE0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'FE1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'FE2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'FE3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'FE4',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'FE5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'FE6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'FE7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'FE8',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'FE9',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'FE10',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'FE11',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'FE12',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'FE13',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'FE14',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'FE15',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'FE16',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'FE17',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'FE18',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'FE19',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'FE20',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'FE21',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'FE22',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'FE23',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'FE24',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'FE25',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'FE26',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'FE27',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'FE28',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'FE29',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'FE30',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'FE31',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_AGFSP_Bits',0,23,216,2,3
	.word	125847
	.byte	10
	.byte	'_Ifx_SMU_CLC_Bits',0,23,219,2,16,4,11
	.byte	'DISR',0,1
	.word	603
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	603
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	428
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SMU_CLC_Bits',0,23,226,2,3
	.word	126404
	.byte	10
	.byte	'_Ifx_SMU_CMD_Bits',0,23,229,2,16,4,11
	.byte	'CMD',0,4
	.word	451
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	451
	.byte	4,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	451
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SMU_CMD_Bits',0,23,234,2,3
	.word	126547
	.byte	10
	.byte	'_Ifx_SMU_DBG_Bits',0,23,237,2,16,4,11
	.byte	'SSM',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	428
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SMU_DBG_Bits',0,23,241,2,3
	.word	126650
	.byte	10
	.byte	'_Ifx_SMU_FSP_Bits',0,23,244,2,16,4,11
	.byte	'PRE1',0,4
	.word	451
	.byte	3,29,2,35,0,11
	.byte	'PRE2',0,4
	.word	451
	.byte	2,27,2,35,0,11
	.byte	'MODE',0,4
	.word	451
	.byte	2,25,2,35,0,11
	.byte	'PES',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'TFSP_LOW',0,4
	.word	451
	.byte	14,10,2,35,0,11
	.byte	'TFSP_HIGH',0,4
	.word	451
	.byte	10,0,2,35,0,0,32
	.byte	'Ifx_SMU_FSP_Bits',0,23,252,2,3
	.word	126738
	.byte	10
	.byte	'_Ifx_SMU_ID_Bits',0,23,255,2,16,4,11
	.byte	'MOD_REV',0,1
	.word	603
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	603
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,2
	.word	620
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SMU_ID_Bits',0,23,132,3,3
	.word	126893
	.byte	10
	.byte	'_Ifx_SMU_KEYS_Bits',0,23,135,3,16,4,11
	.byte	'CFGLCK',0,4
	.word	451
	.byte	8,24,2,35,0,11
	.byte	'PERLCK',0,4
	.word	451
	.byte	8,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	451
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SMU_KEYS_Bits',0,23,140,3,3
	.word	127003
	.byte	10
	.byte	'_Ifx_SMU_OCS_Bits',0,23,143,3,16,4,11
	.byte	'TGS',0,1
	.word	603
	.byte	2,6,2,35,0,11
	.byte	'TGB',0,1
	.word	603
	.byte	1,5,2,35,0,11
	.byte	'TG_P',0,1
	.word	603
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	428
	.byte	20,8,2,35,0,11
	.byte	'SUS',0,1
	.word	603
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	603
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	603
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	603
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SMU_OCS_Bits',0,23,153,3,3
	.word	127115
	.byte	10
	.byte	'_Ifx_SMU_PCTL_Bits',0,23,156,3,16,4,11
	.byte	'HWDIR',0,4
	.word	451
	.byte	2,30,2,35,0,11
	.byte	'HWEN',0,4
	.word	451
	.byte	2,28,2,35,0,11
	.byte	'GFSCU_EN',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'GFSTS_EN',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'PCS',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	451
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	451
	.byte	9,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	451
	.byte	9,0,2,35,0,0,32
	.byte	'Ifx_SMU_PCTL_Bits',0,23,167,3,3
	.word	127307
	.byte	10
	.byte	'_Ifx_SMU_RMCTL_Bits',0,23,170,3,16,4,11
	.byte	'TE0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'TE1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'TE2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'TE3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'TE4',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'TE5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'TE6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'TE7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'TE8',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'TE9',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'TE10',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_RMCTL_Bits',0,23,204,3,3
	.word	127538
	.byte	10
	.byte	'_Ifx_SMU_RMEF_Bits',0,23,207,3,16,4,11
	.byte	'EF0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'EF1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'EF2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'EF3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'EF4',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'EF5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'EF6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'EF7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'EF8',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'EF9',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'EF10',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_RMEF_Bits',0,23,241,3,3
	.word	128242
	.byte	10
	.byte	'_Ifx_SMU_RMSTS_Bits',0,23,244,3,16,4,11
	.byte	'STS0',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'STS1',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'STS2',0,4
	.word	451
	.byte	1,29,2,35,0,11
	.byte	'STS3',0,4
	.word	451
	.byte	1,28,2,35,0,11
	.byte	'STS4',0,4
	.word	451
	.byte	1,27,2,35,0,11
	.byte	'STS5',0,4
	.word	451
	.byte	1,26,2,35,0,11
	.byte	'STS6',0,4
	.word	451
	.byte	1,25,2,35,0,11
	.byte	'STS7',0,4
	.word	451
	.byte	1,24,2,35,0,11
	.byte	'STS8',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'STS9',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'STS10',0,4
	.word	451
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	451
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	451
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	451
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	451
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	451
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	451
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	451
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	451
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	451
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	451
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	451
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	451
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	451
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	451
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	451
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	451
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_RMSTS_Bits',0,23,150,4,3
	.word	128944
	.byte	10
	.byte	'_Ifx_SMU_RTAC00_Bits',0,23,153,4,16,4,11
	.byte	'GID0',0,4
	.word	451
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	451
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	451
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	451
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	451
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	451
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC00_Bits',0,23,161,4,3
	.word	129659
	.byte	10
	.byte	'_Ifx_SMU_RTAC01_Bits',0,23,164,4,16,4,11
	.byte	'GID2',0,4
	.word	451
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	451
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	451
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	451
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	451
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	451
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC01_Bits',0,23,172,4,3
	.word	129827
	.byte	10
	.byte	'_Ifx_SMU_RTAC10_Bits',0,23,175,4,16,4,11
	.byte	'GID0',0,4
	.word	451
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	451
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	451
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	451
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	451
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	451
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC10_Bits',0,23,183,4,3
	.word	129995
	.byte	10
	.byte	'_Ifx_SMU_RTAC11_Bits',0,23,186,4,16,4,11
	.byte	'GID2',0,4
	.word	451
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	451
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	451
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	451
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	451
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	451
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC11_Bits',0,23,194,4,3
	.word	130163
	.byte	10
	.byte	'_Ifx_SMU_RTC_Bits',0,23,197,4,16,4,11
	.byte	'RT0E',0,4
	.word	451
	.byte	1,31,2,35,0,11
	.byte	'RT1E',0,4
	.word	451
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	451
	.byte	6,24,2,35,0,11
	.byte	'RTD',0,4
	.word	451
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTC_Bits',0,23,203,4,3
	.word	130331
	.byte	10
	.byte	'_Ifx_SMU_STS_Bits',0,23,206,4,16,4,11
	.byte	'CMD',0,4
	.word	451
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	451
	.byte	4,24,2,35,0,11
	.byte	'RES',0,4
	.word	451
	.byte	1,23,2,35,0,11
	.byte	'ASCE',0,4
	.word	451
	.byte	1,22,2,35,0,11
	.byte	'FSP',0,4
	.word	451
	.byte	2,20,2,35,0,11
	.byte	'FSTS',0,4
	.word	451
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	451
	.byte	3,16,2,35,0,11
	.byte	'RTS0',0,4
	.word	451
	.byte	1,15,2,35,0,11
	.byte	'RTME0',0,4
	.word	451
	.byte	1,14,2,35,0,11
	.byte	'RTS1',0,4
	.word	451
	.byte	1,13,2,35,0,11
	.byte	'RTME1',0,4
	.word	451
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	451
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_SMU_STS_Bits',0,23,220,4,3
	.word	130451
	.byte	12,23,228,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	122002
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_ACCEN0',0,23,233,4,3
	.word	130706
	.byte	12,23,236,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	122559
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_ACCEN1',0,23,241,4,3
	.word	130770
	.byte	12,23,244,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	122636
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AD',0,23,249,4,3
	.word	130834
	.byte	12,23,252,4,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	123186
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AEX',0,23,129,5,3
	.word	130894
	.byte	12,23,132,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	123743
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AEXCLR',0,23,137,5,3
	.word	130955
	.byte	12,23,140,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	124339
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AFCNT',0,23,145,5,3
	.word	131019
	.byte	12,23,148,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	124479
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AG',0,23,153,5,3
	.word	131082
	.byte	12,23,156,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	125030
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AGC',0,23,161,5,3
	.word	131142
	.byte	12,23,164,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	125292
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AGCF',0,23,169,5,3
	.word	131203
	.byte	12,23,172,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	125847
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AGFSP',0,23,177,5,3
	.word	131265
	.byte	12,23,180,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	126404
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_CLC',0,23,185,5,3
	.word	131328
	.byte	12,23,188,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	126547
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_CMD',0,23,193,5,3
	.word	131389
	.byte	12,23,196,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	126650
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_DBG',0,23,201,5,3
	.word	131450
	.byte	12,23,204,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	126738
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_FSP',0,23,209,5,3
	.word	131511
	.byte	12,23,212,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	126893
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_ID',0,23,217,5,3
	.word	131572
	.byte	12,23,220,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	127003
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_KEYS',0,23,225,5,3
	.word	131632
	.byte	12,23,228,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	127115
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_OCS',0,23,233,5,3
	.word	131694
	.byte	12,23,236,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	127307
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_PCTL',0,23,241,5,3
	.word	131755
	.byte	12,23,244,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	127538
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RMCTL',0,23,249,5,3
	.word	131817
	.byte	12,23,252,5,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	128242
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RMEF',0,23,129,6,3
	.word	131880
	.byte	12,23,132,6,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	128944
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RMSTS',0,23,137,6,3
	.word	131942
	.byte	12,23,140,6,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	129659
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC00',0,23,145,6,3
	.word	132005
	.byte	12,23,148,6,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	129827
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC01',0,23,153,6,3
	.word	132069
	.byte	12,23,156,6,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	129995
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC10',0,23,161,6,3
	.word	132133
	.byte	12,23,164,6,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	130163
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC11',0,23,169,6,3
	.word	132197
	.byte	12,23,172,6,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	130331
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTC',0,23,177,6,3
	.word	132261
	.byte	12,23,180,6,9,4,13
	.byte	'U',0
	.word	428
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	444
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	130451
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_STS',0,23,185,6,3
	.word	132322
	.byte	17,9,210,2,9,1,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy30',0,1,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy60',0,2,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy120',0,3,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy240',0,4,0,32
	.byte	'IfxScuCcu_LowPowerDivRatio',0,9,216,2,3
	.word	132383
	.byte	17,9,220,2,9,1,18
	.byte	'IfxScuCcu_ModulationAmplitude_0p5',0,0,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p0',0,1,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p25',0,2,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p5',0,3,18
	.byte	'IfxScuCcu_ModulationAmplitude_2p0',0,4,18
	.byte	'IfxScuCcu_ModulationAmplitude_2p5',0,5,18
	.byte	'IfxScuCcu_ModulationAmplitude_count',0,6,0,32
	.byte	'IfxScuCcu_ModulationAmplitude',0,9,229,2,3
	.word	132576
	.byte	17,9,254,3,9,1,18
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc1',0,0,18
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc0',0,1,18
	.byte	'IfxScuCcu_PllInputClockSelection_fSysclk',0,2,0,32
	.byte	'IfxScuCcu_PllInputClockSelection',0,9,131,4,3
	.word	132877
	.byte	17,9,135,4,9,1,18
	.byte	'IfxScuCcu_Traprequest_esr0',0,0,18
	.byte	'IfxScuCcu_Traprequest_esr1',0,1,18
	.byte	'IfxScuCcu_Traprequest_trap2',0,2,18
	.byte	'IfxScuCcu_Traprequest_smu',0,3,0,32
	.byte	'IfxScuCcu_Traprequest',0,9,141,4,3
	.word	133051
	.byte	17,9,147,4,9,1,18
	.byte	'IfxScuCcu_ModEn_disabled',0,0,18
	.byte	'IfxScuCcu_ModEn_enabled',0,1,0,32
	.byte	'IfxScuCcu_ModEn',0,9,151,4,3
	.word	133205
	.byte	31,9,162,4,9,6,13
	.byte	'pDivider',0
	.word	603
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	603
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	603
	.byte	1,2,35,2,13
	.byte	'k3Divider',0
	.word	603
	.byte	1,2,35,3,13
	.byte	'k3DividerBypass',0
	.word	603
	.byte	1,2,35,4,0,32
	.byte	'IfxScuCcu_PerPllConfig',0,9,171,4,3
	.word	133290
	.byte	31,9,176,4,9,4,13
	.byte	'pDivider',0
	.word	603
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	603
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	603
	.byte	1,2,35,2,0,32
	.byte	'IfxScuCcu_SysPllConfig',0,9,181,4,3
	.word	133428
	.byte	31,9,189,4,9,8,13
	.byte	'value',0
	.word	10161
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	10161
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_CcuconRegConfig',0,9,193,4,3
	.word	133522
	.byte	31,9,197,4,9,6,13
	.byte	'k2Step',0
	.word	603
	.byte	1,2,35,0,13
	.byte	'waitTime',0
	.word	224
	.byte	4,2,35,2,0,32
	.byte	'IfxScuCcu_PllStepConfig',0,9,201,4,3
	.word	133593
	.byte	31,9,205,4,9,16,13
	.byte	'xtalFrequency',0
	.word	10161
	.byte	4,2,35,0,13
	.byte	'pllInputClockSelection',0
	.word	132877
	.byte	1,2,35,4,13
	.byte	'sysPllConfig',0
	.word	133428
	.byte	4,2,35,6,13
	.byte	'perPllConfig',0
	.word	133290
	.byte	6,2,35,10,0,32
	.byte	'IfxScuCcu_pllsParameterConfig',0,9,211,4,3
	.word	133667
	.byte	31,9,219,4,9,8,13
	.byte	'value',0
	.word	10161
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	10161
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,9,223,4,3
	.word	133812
	.byte	31,9,231,4,9,80,13
	.byte	'ccucon0',0
	.word	133522
	.byte	8,2,35,0,13
	.byte	'ccucon1',0
	.word	133522
	.byte	8,2,35,8,13
	.byte	'ccucon2',0
	.word	133522
	.byte	8,2,35,16,13
	.byte	'ccucon5',0
	.word	133522
	.byte	8,2,35,24,13
	.byte	'ccucon6',0
	.word	133522
	.byte	8,2,35,32,13
	.byte	'ccucon7',0
	.word	133522
	.byte	8,2,35,40,13
	.byte	'ccucon8',0
	.word	133522
	.byte	8,2,35,48,13
	.byte	'ccucon9',0
	.word	133522
	.byte	8,2,35,56,13
	.byte	'ccucon10',0
	.word	133522
	.byte	8,2,35,64,13
	.byte	'ccucon11',0
	.word	133522
	.byte	8,2,35,72,0,32
	.byte	'IfxScuCcu_ClockDistributionConfig',0,9,243,4,3
	.word	133888
	.byte	31,9,247,4,9,20,13
	.byte	'pllsParameters',0
	.word	133667
	.byte	16,2,35,0,13
	.byte	'waitTime',0
	.word	224
	.byte	4,2,35,16,0,32
	.byte	'IfxScuCcu_InitialStepConfig',0,9,251,4,3
	.word	134110
	.byte	20
	.word	133593
	.byte	3
	.word	134196
	.byte	31,9,255,4,9,8,13
	.byte	'numOfSteps',0
	.word	603
	.byte	1,2,35,0,13
	.byte	'pllSteps',0
	.word	134201
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_PllThrottleConfig',0,9,131,5,3
	.word	134206
	.byte	31,9,137,5,9,2,13
	.byte	'Mod_Enable',0
	.word	133205
	.byte	1,2,35,0,13
	.byte	'Mod_Amp',0
	.word	132576
	.byte	1,2,35,1,0,32
	.byte	'IfxScuCcu_Mod_Config',0,9,141,5,3
	.word	134288
	.byte	17,24,66,9,1,18
	.byte	'IfxSrc_Tos_cpu0',0,0,18
	.byte	'IfxSrc_Tos_dma',0,1,18
	.byte	'IfxSrc_Tos_cpu1',0,2,18
	.byte	'IfxSrc_Tos_cpu2',0,3,18
	.byte	'IfxSrc_Tos_cpu3',0,4,18
	.byte	'IfxSrc_Tos_cpu4',0,5,18
	.byte	'IfxSrc_Tos_cpu5',0,6,0,32
	.byte	'IfxSrc_Tos',0,24,75,3
	.word	134362
	.byte	17,12,86,9,1,18
	.byte	'IfxCan_CanNodeErrorWarningLimitStatus_notReached',0,0,18
	.byte	'IfxCan_CanNodeErrorWarningLimitStatus_reached',0,1,0,32
	.byte	'IfxCan_CanNodeErrorWarningLimitStatus',0,12,90,3
	.word	134512
	.byte	32
	.byte	'IfxCan_ClockSelect',0,12,101,3
	.word	42316
	.byte	32
	.byte	'IfxCan_ClockSource',0,12,112,3
	.word	42414
	.byte	32
	.byte	'IfxCan_DataFieldSize',0,12,127,3
	.word	37263
	.byte	32
	.byte	'IfxCan_DataLengthCode',0,12,149,1,3
	.word	35362
	.byte	17,12,153,1,9,1,18
	.byte	'IfxCan_FilterElementConfiguration_disable',0,0,18
	.byte	'IfxCan_FilterElementConfiguration_storeInRxFifo0',0,1,18
	.byte	'IfxCan_FilterElementConfiguration_storeInRxFifo1',0,2,18
	.byte	'IfxCan_FilterElementConfiguration_rejectId',0,3,18
	.byte	'IfxCan_FilterElementConfiguration_setPriority',0,4,18
	.byte	'IfxCan_FilterElementConfiguration_setPriorityAndStoreInFifo0',0,5,18
	.byte	'IfxCan_FilterElementConfiguration_setPriorityAndStoreInFifo1',0,6,18
	.byte	'IfxCan_FilterElementConfiguration_storeInRxBuffer',0,7,0,32
	.byte	'IfxCan_FilterElementConfiguration',0,12,163,1,3
	.word	134777
	.byte	17,12,167,1,9,1,18
	.byte	'IfxCan_FilterType_range',0,0,18
	.byte	'IfxCan_FilterType_dualId',0,1,18
	.byte	'IfxCan_FilterType_classic',0,2,18
	.byte	'IfxCan_FilterType_none',0,3,0,32
	.byte	'IfxCan_FilterType',0,12,173,1,3
	.word	135244
	.byte	32
	.byte	'IfxCan_FrameMode',0,12,183,1,3
	.word	35802
	.byte	32
	.byte	'IfxCan_Interrupt',0,12,231,1,3
	.word	41064
	.byte	32
	.byte	'IfxCan_InterruptGroup',0,12,254,1,3
	.word	40174
	.byte	32
	.byte	'IfxCan_InterruptLine',0,12,148,2,3
	.word	40651
	.byte	17,12,152,2,9,1,18
	.byte	'IfxCan_LastErrorCodeType_noError',0,0,18
	.byte	'IfxCan_LastErrorCodeType_stuffError',0,1,18
	.byte	'IfxCan_LastErrorCodeType_formError',0,2,18
	.byte	'IfxCan_LastErrorCodeType_ackError',0,3,18
	.byte	'IfxCan_LastErrorCodeType_bit1Error',0,4,18
	.byte	'IfxCan_LastErrorCodeType_bit0Error',0,5,18
	.byte	'IfxCan_LastErrorCodeType_crcError',0,6,18
	.byte	'IfxCan_LastErrorCodeType_noCANBusEvent',0,7,0,32
	.byte	'IfxCan_LastErrorCodeType',0,12,162,2,3
	.word	135497
	.byte	17,12,166,2,9,1,18
	.byte	'IfxCan_MessageIdLength_standard',0,0,18
	.byte	'IfxCan_MessageIdLength_extended',0,1,18
	.byte	'IfxCan_MessageIdLength_both',0,2,0,32
	.byte	'IfxCan_MessageIdLength',0,12,171,2,3
	.word	135835
	.byte	17,12,175,2,9,1,18
	.byte	'IfxCan_NonMatchingFrame_acceptToRxFifo0',0,0,18
	.byte	'IfxCan_NonMatchingFrame_acceptToRxFifo1',0,1,18
	.byte	'IfxCan_NonMatchingFrame_reject',0,2,0,32
	.byte	'IfxCan_NonMatchingFrame',0,12,180,2,3
	.word	135972
	.byte	32
	.byte	'IfxCan_RxBufferId',0,12,250,2,3
	.word	38214
	.byte	17,12,255,2,9,1,18
	.byte	'IfxCan_RxFifoMode_blocking',0,0,18
	.byte	'IfxCan_RxFifoMode_overwrite',0,1,0,32
	.byte	'IfxCan_RxFifoMode',0,12,131,3,3
	.word	136156
	.byte	17,12,148,3,9,1,18
	.byte	'IfxCan_SleepMode_enable',0,0,18
	.byte	'IfxCan_SleepMode_disable',0,1,0,32
	.byte	'IfxCan_SleepMode',0,12,152,3,3
	.word	136249
	.byte	17,12,170,3,9,1,18
	.byte	'IfxCan_SuspendMode_none',0,0,18
	.byte	'IfxCan_SuspendMode_hard',0,1,18
	.byte	'IfxCan_SuspendMode_soft',0,2,0,32
	.byte	'IfxCan_SuspendMode',0,12,175,3,3
	.word	136335
	.byte	32
	.byte	'IfxCan_TxBufferId',0,12,213,3,3
	.word	37476
	.byte	17,12,217,3,9,1,18
	.byte	'IfxCan_TxMode_fifo',0,0,18
	.byte	'IfxCan_TxMode_queue',0,1,18
	.byte	'IfxCan_TxMode_dedicatedBuffers',0,2,18
	.byte	'IfxCan_TxMode_sharedFifo',0,3,18
	.byte	'IfxCan_TxMode_sharedQueue',0,4,0,32
	.byte	'IfxCan_TxMode',0,12,224,3,3
	.word	136475
	.byte	17,12,230,3,9,1,18
	.byte	'IfxCan_CanNodeBusOffErrorStatus_NoErr',0,0,18
	.byte	'IfxCan_CanNodeBusOffErrorStatus_BusOffErr',0,1,0,32
	.byte	'IfxCan_CanNodeBusOffErrorStatus',0,12,234,3,3
	.word	136636
	.byte	17,12,238,3,9,1,18
	.byte	'IfxCan_CanNodeCommunicationState_synchronize',0,0,18
	.byte	'IfxCan_CanNodeCommunicationState_idle',0,1,18
	.byte	'IfxCan_CanNodeCommunicationState_receive',0,2,18
	.byte	'IfxCan_CanNodeCommunicationState_transmit',0,3,0,32
	.byte	'IfxCan_CanNodeCommunicationState',0,12,244,3,3
	.word	136768
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L275:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,1,1,11,15,73,19,0,0,16,33,0,47,15,0,0,17,4,1,58,15,59
	.byte	15,57,15,11,15,0,0,18,40,0,3,8,28,13,0,0,19,11,1,0,0,20,38,0,73,19,0,0,21,46,1,3,8,54,15,39,12,63,12,60
	.byte	12,0,0,22,5,0,73,19,0,0,23,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,24,5,0,3,8,73,19,0,0,25,46,1,49
	.byte	19,0,0,26,5,0,49,19,0,0,27,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,28,46,0,3,8,58,15,59
	.byte	15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,29,29,1,49,19,0,0,30,11,0,49,19,0,0,31,19,1,58,15,59,15,57
	.byte	15,11,15,0,0,32,22,0,3,8,58,15,59,15,57,15,73,19,0,0,33,21,0,54,15,0,0,34,52,0,3,8,58,15,59,15,57,15,73
	.byte	19,63,12,60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L276:
	.word	.L952-.L951
.L951:
	.half	3
	.word	.L954-.L953
.L953:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxScuWdt.h',0,2,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0
	.byte	'IfxPort.h',0,4,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxCpu_cfg.h',0,5,0,0
	.byte	'IfxScuCcu.h',0,2,0,0
	.byte	'IfxSrc.h',0,6,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.h',0,0,0,0
	.byte	'IfxCan_regdef.h',0,3,0,0
	.byte	'IfxCan_PinMap.h',0,7,0,0
	.byte	'IfxCan_cfg.h',0,5,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_TypesReg.h',0,3,0,0
	.byte	'IfxScu_cfg.h',0,5,0,0
	.byte	'IfxCpu_regdef.h',0,3,0,0
	.byte	'IfxStm_regdef.h',0,3,0,0
	.byte	'IfxSmu_regdef.h',0,3,0,0
	.byte	'IfxSrc_cfg.h',0,5,0,0,0
.L954:
.L952:
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_getDataLength')
	.sect	'.debug_info'
.L277:
	.word	274
	.half	3
	.word	.L278
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L280,.L279
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_getDataLength',0,1,71,8
	.word	.L527
	.byte	1,1,1
	.word	.L176,.L528,.L175
	.byte	4
	.byte	'dataLengthCode',0,1,71,56
	.word	.L529,.L530
	.byte	5
	.word	.L531
	.byte	6
	.byte	'numBytes',0,1,73,12
	.word	.L527,.L532
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_getDataLength')
	.sect	'.debug_abbrev'
.L278:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_getDataLength')
	.sect	'.debug_line'
.L279:
	.word	.L956-.L955
.L955:
	.half	3
	.word	.L958-.L957
.L957:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L958:
	.byte	5,5,7,0,5,2
	.word	.L176
	.byte	3,202,0,1,5,22,9
	.half	.L825-.L176
	.byte	3,13,1,5,27,9
	.half	.L826-.L825
	.byte	1,5,1,3,1,1,7,9
	.half	.L281-.L826
	.byte	0,1,1
.L956:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_getDataLength')
	.sect	'.debug_ranges'
.L280:
	.word	-1,.L176,0,.L281-.L176,0,0
.L531:
	.word	-1,.L176,0,.L528-.L176,-1,.L178,0,.L486-.L178,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_getDataLengthFromCode')
	.sect	'.debug_info'
.L282:
	.word	303
	.half	3
	.word	.L283
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L285,.L284
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_getDataLengthFromCode',0,1,92,8
	.word	.L527
	.byte	1,1,1
	.word	.L180,.L533,.L179
	.byte	4
	.byte	'node',0,1,92,53
	.word	.L534,.L535
	.byte	4
	.byte	'dataLengthCode',0,1,92,81
	.word	.L529,.L536
	.byte	5
	.word	.L180,.L533
	.byte	6
	.byte	'numBytes',0,1,94,12
	.word	.L527,.L537
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_getDataLengthFromCode')
	.sect	'.debug_abbrev'
.L283:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_getDataLengthFromCode')
	.sect	'.debug_line'
.L284:
	.word	.L960-.L959
.L959:
	.half	3
	.word	.L962-.L961
.L961:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L962:
	.byte	5,10,7,0,5,2
	.word	.L180
	.byte	3,224,0,1,5,73,9
	.half	.L963-.L180
	.byte	1,5,44,7,9
	.half	.L964-.L963
	.byte	3,2,1,5,54,9
	.half	.L827-.L964
	.byte	1,5,15,9
	.half	.L9-.L827
	.byte	3,2,1,5,78,9
	.half	.L965-.L9
	.byte	1,5,44,7,9
	.half	.L966-.L965
	.byte	3,2,1,5,22,9
	.half	.L10-.L966
	.byte	3,7,1,5,1,9
	.half	.L829-.L10
	.byte	3,1,1,7,9
	.half	.L286-.L829
	.byte	0,1,1
.L960:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_getDataLengthFromCode')
	.sect	'.debug_ranges'
.L285:
	.word	-1,.L180,0,.L286-.L180,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_getFrameMode')
	.sect	'.debug_info'
.L287:
	.word	279
	.half	3
	.word	.L288
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L290,.L289
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_getFrameMode',0,1,125,18
	.word	.L538
	.byte	1,1,1
	.word	.L184,.L539,.L183
	.byte	4
	.byte	'rxBufferElement',0,1,125,58
	.word	.L540,.L541
	.byte	5
	.word	.L184,.L539
	.byte	6
	.byte	'frameMode',0,1,127,22
	.word	.L538,.L542
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_getFrameMode')
	.sect	'.debug_abbrev'
.L288:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_getFrameMode')
	.sect	'.debug_line'
.L289:
	.word	.L968-.L967
.L967:
	.half	3
	.word	.L970-.L969
.L969:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L970:
	.byte	5,30,7,0,5,2
	.word	.L184
	.byte	3,129,1,1,5,5,9
	.half	.L971-.L184
	.byte	1,5,34,7,9
	.half	.L972-.L971
	.byte	3,3,1,5,9,9
	.half	.L973-.L972
	.byte	1,5,23,7,9
	.half	.L974-.L973
	.byte	3,2,1,5,1,3,15,1,5,23,7,9
	.half	.L16-.L974
	.byte	3,118,1,5,1,3,10,1,5,19,7,9
	.half	.L15-.L16
	.byte	3,124,1,5,1,3,4,1,7,9
	.half	.L291-.L15
	.byte	0,1,1
.L968:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_getFrameMode')
	.sect	'.debug_ranges'
.L290:
	.word	-1,.L184,0,.L291-.L184,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_initRxPin')
	.sect	'.debug_info'
.L292:
	.word	357
	.half	3
	.word	.L293
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L295,.L294
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_initRxPin',0,1,203,2,9
	.word	.L543
	.byte	1,1,1
	.word	.L210,.L544,.L209
	.byte	4
	.byte	'node',0,1,203,2,42
	.word	.L534,.L545
	.byte	4
	.byte	'rxd',0,1,203,2,63
	.word	.L546,.L547
	.byte	4
	.byte	'mode',0,1,203,2,86
	.word	.L548,.L549
	.byte	4
	.byte	'padDriver',0,1,203,2,110
	.word	.L550,.L551
	.byte	5
	.word	.L210,.L544
	.byte	6
	.word	.L552,.L553,.L554
	.byte	7
	.word	.L555,.L556
	.byte	7
	.word	.L557,.L558
	.byte	7
	.word	.L559,.L560
	.byte	8
	.word	.L561,.L553,.L554
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_initRxPin')
	.sect	'.debug_abbrev'
.L293:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_initRxPin')
	.sect	'.debug_line'
.L294:
	.word	.L976-.L975
.L975:
	.half	3
	.word	.L978-.L977
.L977:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0
	.byte	'IfxPort.h',0,1,0,0,0
.L978:
	.byte	5,9,7,0,5,2
	.word	.L210
	.byte	3,202,2,1,5,52,9
	.half	.L860-.L210
	.byte	3,2,1,4,2,5,40,9
	.half	.L553-.L860
	.byte	3,210,2,1,4,1,5,9,3,172,125,1,4,2,5,40,9
	.half	.L859-.L553
	.byte	3,212,2,1,4,1,5,37,3,174,125,1,4,2,5,40,9
	.half	.L858-.L859
	.byte	3,210,2,1,4,1,5,37,9
	.half	.L554-.L858
	.byte	3,175,125,1,5,52,9
	.half	.L979-.L554
	.byte	1,5,63,9
	.half	.L980-.L979
	.byte	1,5,29,9
	.half	.L981-.L980
	.byte	3,1,1,5,17,9
	.half	.L982-.L981
	.byte	1,5,12,9
	.half	.L983-.L982
	.byte	3,2,1,5,24,9
	.half	.L984-.L983
	.byte	3,126,1,5,1,9
	.half	.L985-.L984
	.byte	3,3,1,7,9
	.half	.L296-.L985
	.byte	0,1,1
.L976:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_initRxPin')
	.sect	'.debug_ranges'
.L295:
	.word	-1,.L210,0,.L296-.L210,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_initTxPin')
	.sect	'.debug_info'
.L297:
	.word	348
	.half	3
	.word	.L298
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L300,.L299
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_initTxPin',0,1,213,2,9
	.word	.L543
	.byte	1,1,1
	.word	.L212,.L562,.L211
	.byte	4
	.byte	'txd',0,1,213,2,47
	.word	.L563,.L564
	.byte	4
	.byte	'mode',0,1,213,2,71
	.word	.L565,.L566
	.byte	4
	.byte	'padDriver',0,1,213,2,95
	.word	.L550,.L567
	.byte	5
	.word	.L212,.L562
	.byte	6
	.word	.L568,.L569,.L570
	.byte	7
	.word	.L571,.L572
	.byte	7
	.word	.L573,.L574
	.byte	7
	.word	.L575,.L576
	.byte	7
	.word	.L577,.L578
	.byte	8
	.word	.L579,.L569,.L570
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_initTxPin')
	.sect	'.debug_abbrev'
.L298:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_initTxPin')
	.sect	'.debug_line'
.L299:
	.word	.L987-.L986
.L986:
	.half	3
	.word	.L989-.L988
.L988:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0
	.byte	'IfxPort.h',0,1,0,0,0
.L989:
	.byte	5,9,7,0,5,2
	.word	.L212
	.byte	3,212,2,1,5,53,9
	.half	.L569-.L212
	.byte	3,2,1,5,73,9
	.half	.L990-.L569
	.byte	1,5,38,9
	.half	.L861-.L990
	.byte	1,4,2,5,61,9
	.half	.L862-.L861
	.byte	3,206,2,1,5,40,9
	.half	.L991-.L862
	.byte	1,4,1,5,37,9
	.half	.L570-.L991
	.byte	3,179,125,1,5,52,9
	.half	.L992-.L570
	.byte	1,5,63,9
	.half	.L993-.L992
	.byte	1,5,12,9
	.half	.L994-.L993
	.byte	3,2,1,5,1,3,1,1,7,9
	.half	.L301-.L994
	.byte	0,1,1
.L987:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_initTxPin')
	.sect	'.debug_ranges'
.L300:
	.word	-1,.L212,0,.L301-.L212,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_setBitTiming')
	.sect	'.debug_info'
.L302:
	.word	755
	.half	3
	.word	.L303
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L305,.L304
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_setBitTiming',0,1,129,3,6,1,1,1
	.word	.L218,.L580,.L217
	.byte	4
	.byte	'node',0,1,129,3,42
	.word	.L534,.L581
	.byte	4
	.byte	'moduleFreq',0,1,129,3,56
	.word	.L582,.L583
	.byte	4
	.byte	'baudrate',0,1,129,3,75
	.word	.L527,.L584
	.byte	4
	.byte	'samplePoint',0,1,129,3,92
	.word	.L585,.L586
	.byte	4
	.byte	'syncJumpWidth',0,1,129,3,112
	.word	.L585,.L587
	.byte	5
	.word	.L588
	.byte	6
	.byte	'maxTSEG1',0,1,133,3,13
	.word	.L589,.L590
	.byte	6
	.byte	'tempBRP',0,1,140,3,13
	.word	.L589,.L591
	.byte	6
	.byte	'tempSJW',0,1,140,3,22
	.word	.L589,.L592
	.byte	6
	.byte	'tempTSEG1',0,1,140,3,31
	.word	.L589,.L593
	.byte	6
	.byte	'tempTBAUD',0,1,140,3,42
	.word	.L589,.L594
	.byte	6
	.byte	'bestBRP',0,1,141,3,13
	.word	.L589,.L595
	.byte	6
	.byte	'bestSJW',0,1,141,3,28
	.word	.L589,.L596
	.byte	6
	.byte	'bestTBAUD',0,1,141,3,41
	.word	.L589,.L597
	.byte	6
	.byte	'bestTSEG1',0,1,141,3,56
	.word	.L589,.L598
	.byte	6
	.byte	'bestTSEG2',0,1,141,3,71
	.word	.L589,.L599
	.byte	6
	.byte	'bestError',0,1,142,3,13
	.word	.L582,.L600
	.byte	5
	.word	.L601
	.byte	6
	.byte	'Fquanta',0,1,166,3,17
	.word	.L582,.L602
	.byte	5
	.word	.L603
	.byte	6
	.byte	'tempBaudrate',0,1,174,3,17
	.word	.L582,.L605
	.byte	0,0,7
	.word	.L606,.L607
	.byte	6
	.byte	'tempSamplePoint',0,1,223,3,16
	.word	.L589,.L608
	.byte	6
	.byte	'error',0,1,224,3,16
	.word	.L589,.L609
	.byte	0,5
	.word	.L610
	.byte	6
	.byte	'tempSyncJumpWidth',0,1,132,4,16
	.word	.L589,.L611
	.byte	6
	.byte	'error',0,1,133,4,16
	.word	.L589,.L612
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_setBitTiming')
	.sect	'.debug_abbrev'
.L303:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,11,1,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_setBitTiming')
	.sect	'.debug_line'
.L304:
	.word	.L996-.L995
.L995:
	.half	3
	.word	.L998-.L997
.L997:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L998:
	.byte	5,6,7,0,5,2
	.word	.L218
	.byte	3,128,3,1,5,40,9
	.half	.L999-.L218
	.byte	3,35,1,9
	.half	.L50-.L999
	.byte	3,2,1,5,9,9
	.half	.L1000-.L50
	.byte	3,3,1,5,42,7,9
	.half	.L604-.L1000
	.byte	3,5,1,5,32,9
	.half	.L1001-.L604
	.byte	3,1,1,5,25,9
	.half	.L878-.L1001
	.byte	3,2,1,5,9,9
	.half	.L1002-.L878
	.byte	1,5,27,7,9
	.half	.L1003-.L1002
	.byte	3,5,1,5,13,9
	.half	.L1004-.L1003
	.byte	1,5,51,7,9
	.half	.L1005-.L1004
	.byte	1,5,23,9
	.half	.L1006-.L1005
	.byte	3,2,1,9
	.half	.L1007-.L1006
	.byte	3,1,1,9
	.half	.L1008-.L1007
	.byte	3,1,1,5,31,9
	.half	.L1009-.L1008
	.byte	3,2,1,5,17,9
	.half	.L1010-.L1009
	.byte	1,5,47,7,9
	.half	.L1011-.L1010
	.byte	1,5,45,9
	.half	.L1012-.L1011
	.byte	1,5,49,9
	.half	.L53-.L1012
	.byte	3,104,1,5,40,1,5,17,7,9
	.half	.L51-.L53
	.byte	3,48,1,5,31,9
	.half	.L1013-.L51
	.byte	1,5,29,9
	.half	.L1014-.L1013
	.byte	1,5,21,9
	.half	.L880-.L1014
	.byte	3,2,1,5,19,9
	.half	.L1015-.L880
	.byte	1,5,20,9
	.half	.L882-.L1015
	.byte	3,7,1,5,35,9
	.half	.L606-.L882
	.byte	3,119,1,5,46,9
	.half	.L57-.L606
	.byte	3,11,1,5,60,9
	.half	.L1016-.L57
	.byte	1,5,56,9
	.half	.L883-.L1016
	.byte	3,1,1,5,39,9
	.half	.L1017-.L883
	.byte	1,5,25,9
	.half	.L884-.L1017
	.byte	3,2,1,5,23,9
	.half	.L1018-.L884
	.byte	1,5,9,9
	.half	.L885-.L1018
	.byte	1,5,23,7,9
	.half	.L1019-.L885
	.byte	3,2,1,9
	.half	.L1020-.L1019
	.byte	3,1,1,5,9,9
	.half	.L58-.L1020
	.byte	3,3,1,5,64,7,9
	.half	.L607-.L58
	.byte	3,117,1,5,53,9
	.half	.L1021-.L607
	.byte	1,5,27,7,9
	.half	.L59-.L1021
	.byte	3,18,1,5,39,9
	.half	.L1022-.L59
	.byte	1,5,19,9
	.half	.L1023-.L1022
	.byte	3,2,1,9
	.half	.L1024-.L1023
	.byte	3,7,1,5,17,3,8,1,5,18,9
	.half	.L881-.L1024
	.byte	3,2,1,5,43,1,5,45,9
	.half	.L61-.L881
	.byte	3,2,1,5,54,9
	.half	.L1025-.L61
	.byte	1,5,9,9
	.half	.L879-.L1025
	.byte	3,3,1,5,23,7,9
	.half	.L889-.L879
	.byte	3,2,1,9
	.half	.L1026-.L889
	.byte	3,1,1,5,52,9
	.half	.L62-.L1026
	.byte	3,120,1,5,43,9
	.half	.L60-.L62
	.byte	1,5,21,7,9
	.half	.L1027-.L60
	.byte	3,13,1,5,39,9
	.half	.L1028-.L1027
	.byte	1,5,29,9
	.half	.L890-.L1028
	.byte	1,5,21,9
	.half	.L1029-.L890
	.byte	3,1,1,5,39,9
	.half	.L1030-.L1029
	.byte	1,5,29,9
	.half	.L891-.L1030
	.byte	1,5,41,9
	.half	.L1031-.L891
	.byte	3,1,1,5,29,1,5,21,9
	.half	.L893-.L1031
	.byte	3,1,1,5,41,9
	.half	.L1032-.L893
	.byte	1,5,29,9
	.half	.L892-.L1032
	.byte	1,5,1,9
	.half	.L1033-.L892
	.byte	3,2,1,7,9
	.half	.L306-.L1033
	.byte	0,1,1
.L996:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_setBitTiming')
	.sect	'.debug_ranges'
.L305:
	.word	-1,.L218,0,.L306-.L218,0,0
.L588:
	.word	-1,.L218,0,.L580-.L218,-1,.L226,0,.L496-.L226,0,0
.L601:
	.word	-1,.L218,.L50-.L218,.L53-.L218,-1,.L222,0,.L511-.L222,0,0
.L603:
	.word	-1,.L218,.L604-.L218,.L53-.L218,-1,.L220,0,.L521-.L220,0,0
.L610:
	.word	-1,.L218,.L61-.L218,.L62-.L218,-1,.L224,0,.L506-.L224,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_setBitTimingValues')
	.sect	'.debug_info'
.L307:
	.word	370
	.half	3
	.word	.L308
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L310,.L309
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_setBitTimingValues',0,1,151,4,6,1,1,1
	.word	.L228,.L613,.L227
	.byte	4
	.byte	'node',0,1,151,4,48
	.word	.L534,.L614
	.byte	4
	.byte	'syncJumpWidth',0,1,151,4,61
	.word	.L585,.L615
	.byte	4
	.byte	'timeSegment2',0,1,151,4,82
	.word	.L543,.L616
	.byte	4
	.byte	'timeSegment1',0,1,151,4,102
	.word	.L543,.L617
	.byte	4
	.byte	'prescaler',0,1,151,4,123
	.word	.L585,.L618
	.byte	5
	.word	.L228,.L613
	.byte	6
	.byte	'nbtp',0,1,153,4,20
	.word	.L619,.L620
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_setBitTimingValues')
	.sect	'.debug_abbrev'
.L308:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_setBitTimingValues')
	.sect	'.debug_line'
.L309:
	.word	.L1035-.L1034
.L1034:
	.half	3
	.word	.L1037-.L1036
.L1036:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1037:
	.byte	5,21,7,0,5,2
	.word	.L228
	.byte	3,154,4,1,5,31,3,127,1,5,19,9
	.half	.L894-.L228
	.byte	3,1,1,9
	.half	.L1038-.L894
	.byte	3,1,1,9
	.half	.L1039-.L1038
	.byte	3,1,1,9
	.half	.L1040-.L1039
	.byte	3,1,1,3,2,1,5,1,9
	.half	.L1041-.L1040
	.byte	3,1,1,7,9
	.half	.L311-.L1041
	.byte	0,1,1
.L1035:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_setBitTimingValues')
	.sect	'.debug_ranges'
.L310:
	.word	-1,.L228,0,.L311-.L228,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_setFastBitTiming')
	.sect	'.debug_info'
.L312:
	.word	775
	.half	3
	.word	.L313
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L315,.L314
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_setFastBitTiming',0,1,164,4,6,1,1,1
	.word	.L230,.L621,.L229
	.byte	4
	.byte	'node',0,1,164,4,46
	.word	.L534,.L622
	.byte	4
	.byte	'moduleFreq',0,1,164,4,60
	.word	.L582,.L623
	.byte	4
	.byte	'baudrate',0,1,164,4,79
	.word	.L527,.L624
	.byte	4
	.byte	'samplePoint',0,1,164,4,96
	.word	.L585,.L625
	.byte	4
	.byte	'syncJumpWidth',0,1,164,4,116
	.word	.L585,.L626
	.byte	5
	.word	.L230,.L621
	.byte	6
	.byte	'maxTSEG1',0,1,168,4,13
	.word	.L589,.L627
	.byte	6
	.byte	'tempBRP',0,1,175,4,13
	.word	.L589,.L628
	.byte	6
	.byte	'tempSJW',0,1,175,4,22
	.word	.L589,.L629
	.byte	6
	.byte	'tempTSEG1',0,1,175,4,31
	.word	.L589,.L630
	.byte	6
	.byte	'tempTBAUD',0,1,175,4,42
	.word	.L589,.L631
	.byte	6
	.byte	'bestBRP',0,1,176,4,13
	.word	.L589,.L632
	.byte	6
	.byte	'bestSJW',0,1,176,4,28
	.word	.L589,.L633
	.byte	6
	.byte	'bestTBAUD',0,1,176,4,41
	.word	.L589,.L634
	.byte	6
	.byte	'bestTSEG1',0,1,176,4,56
	.word	.L589,.L635
	.byte	6
	.byte	'bestTSEG2',0,1,176,4,71
	.word	.L589,.L636
	.byte	6
	.byte	'bestError',0,1,177,4,13
	.word	.L582,.L637
	.byte	5
	.word	.L63,.L66
	.byte	6
	.byte	'Fquanta',0,1,201,4,17
	.word	.L582,.L638
	.byte	5
	.word	.L639,.L66
	.byte	6
	.byte	'tempBaudrate',0,1,209,4,17
	.word	.L582,.L640
	.byte	0,0,5
	.word	.L641,.L642
	.byte	6
	.byte	'tempSamplePoint',0,1,130,5,16
	.word	.L589,.L643
	.byte	6
	.byte	'error',0,1,131,5,16
	.word	.L589,.L644
	.byte	0,5
	.word	.L74,.L75
	.byte	6
	.byte	'tempSyncJumpWidth',0,1,166,5,16
	.word	.L589,.L645
	.byte	6
	.byte	'error',0,1,167,5,16
	.word	.L589,.L646
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_setFastBitTiming')
	.sect	'.debug_abbrev'
.L313:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_setFastBitTiming')
	.sect	'.debug_line'
.L314:
	.word	.L1043-.L1042
.L1042:
	.half	3
	.word	.L1045-.L1044
.L1044:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1045:
	.byte	5,6,7,0,5,2
	.word	.L230
	.byte	3,163,4,1,5,40,9
	.half	.L897-.L230
	.byte	3,35,1,9
	.half	.L63-.L897
	.byte	3,2,1,5,9,9
	.half	.L895-.L63
	.byte	3,3,1,5,42,7,9
	.half	.L639-.L895
	.byte	3,5,1,5,32,9
	.half	.L896-.L639
	.byte	3,1,1,5,25,9
	.half	.L1046-.L896
	.byte	3,2,1,5,9,9
	.half	.L1047-.L1046
	.byte	1,5,27,7,9
	.half	.L1048-.L1047
	.byte	3,5,1,5,13,9
	.half	.L1049-.L1048
	.byte	1,5,51,7,9
	.half	.L1050-.L1049
	.byte	1,5,23,9
	.half	.L1051-.L1050
	.byte	3,2,1,9
	.half	.L1052-.L1051
	.byte	3,1,1,9
	.half	.L1053-.L1052
	.byte	3,1,1,5,31,9
	.half	.L1054-.L1053
	.byte	3,2,1,5,17,9
	.half	.L1055-.L1054
	.byte	1,5,47,7,9
	.half	.L1056-.L1055
	.byte	1,5,45,9
	.half	.L1057-.L1056
	.byte	1,5,49,9
	.half	.L66-.L1057
	.byte	3,104,1,5,40,1,5,17,7,9
	.half	.L64-.L66
	.byte	3,48,1,5,31,9
	.half	.L1058-.L64
	.byte	1,5,29,9
	.half	.L1059-.L1058
	.byte	1,5,19,9
	.half	.L898-.L1059
	.byte	3,2,1,5,20,9
	.half	.L899-.L898
	.byte	3,7,1,5,35,9
	.half	.L641-.L899
	.byte	3,119,1,5,46,9
	.half	.L70-.L641
	.byte	3,11,1,5,60,9
	.half	.L1060-.L70
	.byte	1,5,56,9
	.half	.L900-.L1060
	.byte	3,1,1,5,39,9
	.half	.L1061-.L900
	.byte	1,5,25,9
	.half	.L901-.L1061
	.byte	3,2,1,5,23,9
	.half	.L1062-.L901
	.byte	1,5,9,9
	.half	.L902-.L1062
	.byte	1,5,23,7,9
	.half	.L1063-.L902
	.byte	3,2,1,9
	.half	.L1064-.L1063
	.byte	3,1,1,5,9,9
	.half	.L71-.L1064
	.byte	3,3,1,5,64,7,9
	.half	.L642-.L71
	.byte	3,117,1,5,53,9
	.half	.L1065-.L642
	.byte	1,5,27,7,9
	.half	.L72-.L1065
	.byte	3,17,1,5,39,9
	.half	.L1066-.L72
	.byte	1,5,19,9
	.half	.L1067-.L1066
	.byte	3,2,1,9
	.half	.L1068-.L1067
	.byte	3,7,1,5,17,3,8,1,5,18,9
	.half	.L905-.L1068
	.byte	3,2,1,5,43,1,5,45,9
	.half	.L74-.L905
	.byte	3,2,1,5,54,9
	.half	.L1069-.L74
	.byte	1,5,9,9
	.half	.L1070-.L1069
	.byte	3,3,1,5,23,7,9
	.half	.L1071-.L1070
	.byte	3,2,1,9
	.half	.L1072-.L1071
	.byte	3,1,1,5,52,9
	.half	.L75-.L1072
	.byte	3,120,1,5,43,9
	.half	.L73-.L75
	.byte	1,5,21,7,9
	.half	.L1073-.L73
	.byte	3,13,1,5,39,9
	.half	.L1074-.L1073
	.byte	1,5,29,9
	.half	.L903-.L1074
	.byte	1,5,13,9
	.half	.L1075-.L903
	.byte	3,1,1,5,21,9
	.half	.L1076-.L1075
	.byte	1,5,39,9
	.half	.L1077-.L1076
	.byte	1,5,29,9
	.half	.L904-.L1077
	.byte	1,5,21,9
	.half	.L1078-.L904
	.byte	3,1,1,5,41,9
	.half	.L1079-.L1078
	.byte	1,5,29,9
	.half	.L907-.L1079
	.byte	1,5,21,9
	.half	.L1080-.L907
	.byte	3,1,1,5,41,9
	.half	.L1081-.L1080
	.byte	1,5,29,9
	.half	.L906-.L1081
	.byte	1,5,1,9
	.half	.L1082-.L906
	.byte	3,2,1,7,9
	.half	.L316-.L1082
	.byte	0,1,1
.L1043:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_setFastBitTiming')
	.sect	'.debug_ranges'
.L315:
	.word	-1,.L230,0,.L316-.L230,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_setFastBitTimingValues')
	.sect	'.debug_info'
.L317:
	.word	374
	.half	3
	.word	.L318
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L320,.L319
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_setFastBitTimingValues',0,1,185,5,6,1,1,1
	.word	.L232,.L647,.L231
	.byte	4
	.byte	'node',0,1,185,5,52
	.word	.L534,.L648
	.byte	4
	.byte	'syncJumpWidth',0,1,185,5,65
	.word	.L585,.L649
	.byte	4
	.byte	'timeSegment2',0,1,185,5,86
	.word	.L543,.L650
	.byte	4
	.byte	'timeSegment1',0,1,185,5,106
	.word	.L543,.L651
	.byte	4
	.byte	'prescaler',0,1,185,5,127
	.word	.L585,.L652
	.byte	5
	.word	.L232,.L647
	.byte	6
	.byte	'dbtp',0,1,187,5,20
	.word	.L653,.L654
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_setFastBitTimingValues')
	.sect	'.debug_abbrev'
.L318:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_setFastBitTimingValues')
	.sect	'.debug_line'
.L319:
	.word	.L1084-.L1083
.L1083:
	.half	3
	.word	.L1086-.L1085
.L1085:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1086:
	.byte	5,31,7,0,5,2
	.word	.L232
	.byte	3,187,5,1,5,19,9
	.half	.L908-.L232
	.byte	3,1,1,9
	.half	.L1087-.L908
	.byte	3,1,1,9
	.half	.L1088-.L1087
	.byte	3,1,1,9
	.half	.L1089-.L1088
	.byte	3,1,1,3,2,1,5,1,9
	.half	.L1090-.L1089
	.byte	3,1,1,7,9
	.half	.L321-.L1090
	.byte	0,1,1
.L1084:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_setFastBitTimingValues')
	.sect	'.debug_ranges'
.L320:
	.word	-1,.L232,0,.L321-.L232,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_setFrameMode')
	.sect	'.debug_info'
.L322:
	.word	266
	.half	3
	.word	.L323
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L325,.L324
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_setFrameMode',0,1,198,5,6,1,1,1
	.word	.L234,.L655,.L233
	.byte	4
	.byte	'node',0,1,198,5,42
	.word	.L534,.L656
	.byte	4
	.byte	'frameMode',0,1,198,5,65
	.word	.L538,.L657
	.byte	5
	.word	.L234,.L655
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_setFrameMode')
	.sect	'.debug_abbrev'
.L323:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_setFrameMode')
	.sect	'.debug_line'
.L324:
	.word	.L1092-.L1091
.L1091:
	.half	3
	.word	.L1094-.L1093
.L1093:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1094:
	.byte	5,10,7,0,5,2
	.word	.L234
	.byte	3,201,5,1,7,9
	.half	.L1095-.L234
	.byte	3,4,1,7,9
	.half	.L1096-.L1095
	.byte	3,4,1,5,1,7,9
	.half	.L1097-.L1096
	.byte	3,5,1,5,21,7,9
	.half	.L76-.L1097
	.byte	3,116,1,5,27,9
	.half	.L1098-.L76
	.byte	1,5,9,3,2,1,5,21,9
	.half	.L77-.L1098
	.byte	3,2,1,5,27,9
	.half	.L1099-.L77
	.byte	1,5,21,9
	.half	.L1100-.L1099
	.byte	3,1,1,5,27,9
	.half	.L1101-.L1100
	.byte	1,5,9,3,1,1,5,21,9
	.half	.L78-.L1101
	.byte	3,2,1,5,27,9
	.half	.L1102-.L78
	.byte	1,5,21,9
	.half	.L1103-.L1102
	.byte	3,1,1,5,27,9
	.half	.L1104-.L1103
	.byte	1,5,1,9
	.half	.L1105-.L1104
	.byte	3,3,1,7,9
	.half	.L326-.L1105
	.byte	0,1,1
.L1092:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_setFrameMode')
	.sect	'.debug_ranges'
.L325:
	.word	-1,.L234,0,.L326-.L234,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_setFrameModeReq')
	.sect	'.debug_info'
.L327:
	.word	280
	.half	3
	.word	.L328
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L330,.L329
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_setFrameModeReq',0,1,218,5,6,1,1,1
	.word	.L236,.L658,.L235
	.byte	4
	.byte	'txBufferElement',0,1,218,5,49
	.word	.L659,.L660
	.byte	4
	.byte	'frameMode',0,1,218,5,83
	.word	.L538,.L661
	.byte	5
	.word	.L236,.L658
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_setFrameModeReq')
	.sect	'.debug_abbrev'
.L328:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_setFrameModeReq')
	.sect	'.debug_line'
.L329:
	.word	.L1107-.L1106
.L1106:
	.half	3
	.word	.L1109-.L1108
.L1108:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1109:
	.byte	5,10,7,0,5,2
	.word	.L236
	.byte	3,221,5,1,7,9
	.half	.L1110-.L236
	.byte	3,4,1,7,9
	.half	.L1111-.L1110
	.byte	3,4,1,5,1,7,9
	.half	.L1112-.L1111
	.byte	3,5,1,5,30,7,9
	.half	.L82-.L1112
	.byte	3,116,1,5,35,9
	.half	.L1113-.L82
	.byte	1,5,9,3,2,1,5,30,9
	.half	.L83-.L1113
	.byte	3,2,1,5,35,9
	.half	.L1114-.L83
	.byte	1,5,30,9
	.half	.L1115-.L1114
	.byte	3,1,1,5,35,9
	.half	.L1116-.L1115
	.byte	1,5,9,3,1,1,5,30,9
	.half	.L84-.L1116
	.byte	3,2,1,5,35,9
	.half	.L1117-.L84
	.byte	1,5,30,9
	.half	.L1118-.L1117
	.byte	3,1,1,5,35,9
	.half	.L1119-.L1118
	.byte	1,5,1,9
	.half	.L1120-.L1119
	.byte	3,3,1,7,9
	.half	.L331-.L1120
	.byte	0,1,1
.L1107:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_setFrameModeReq')
	.sect	'.debug_ranges'
.L330:
	.word	-1,.L236,0,.L331-.L236,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_setFrameModeRequest')
	.sect	'.debug_info'
.L332:
	.word	302
	.half	3
	.word	.L333
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L335,.L334
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_setFrameModeRequest',0,1,238,5,6,1,1,1
	.word	.L238,.L662,.L237
	.byte	4
	.byte	'node',0,1,238,5,49
	.word	.L534,.L663
	.byte	4
	.byte	'txBufferElement',0,1,238,5,70
	.word	.L659,.L664
	.byte	4
	.byte	'frameMode',0,1,238,5,104
	.word	.L538,.L665
	.byte	5
	.word	.L238,.L662
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_setFrameModeRequest')
	.sect	'.debug_abbrev'
.L333:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_setFrameModeRequest')
	.sect	'.debug_line'
.L334:
	.word	.L1122-.L1121
.L1121:
	.half	3
	.word	.L1124-.L1123
.L1123:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1124:
	.byte	5,10,7,0,5,2
	.word	.L238
	.byte	3,243,5,1,7,9
	.half	.L1125-.L238
	.byte	3,4,1,7,9
	.half	.L1126-.L1125
	.byte	3,4,1,5,1,7,9
	.half	.L1127-.L1126
	.byte	3,5,1,5,30,7,9
	.half	.L88-.L1127
	.byte	3,116,1,5,35,9
	.half	.L1128-.L88
	.byte	1,5,9,3,2,1,5,30,9
	.half	.L89-.L1128
	.byte	3,2,1,5,35,9
	.half	.L1129-.L89
	.byte	1,5,30,9
	.half	.L1130-.L1129
	.byte	3,1,1,5,35,9
	.half	.L1131-.L1130
	.byte	1,5,9,3,1,1,5,30,9
	.half	.L90-.L1131
	.byte	3,2,1,5,35,9
	.half	.L1132-.L90
	.byte	1,5,30,9
	.half	.L1133-.L1132
	.byte	3,1,1,5,35,9
	.half	.L1134-.L1133
	.byte	1,5,1,9
	.half	.L1135-.L1134
	.byte	3,3,1,7,9
	.half	.L336-.L1135
	.byte	0,1,1
.L1122:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_setFrameModeRequest')
	.sect	'.debug_ranges'
.L335:
	.word	-1,.L238,0,.L336-.L238,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_getDataLengthInBytes')
	.sect	'.debug_info'
.L337:
	.word	288
	.half	3
	.word	.L338
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L340,.L339
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_getDataLengthInBytes',0,1,140,8,8
	.word	.L527
	.byte	1,1,1
	.word	.L272,.L666,.L271
	.byte	4
	.byte	'dataLengthCode',0,1,140,8,63
	.word	.L529,.L667
	.byte	5
	.word	.L272,.L666
	.byte	6
	.byte	'numBytes',0,1,142,8,12
	.word	.L527,.L668
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_getDataLengthInBytes')
	.sect	'.debug_abbrev'
.L338:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_getDataLengthInBytes')
	.sect	'.debug_line'
.L339:
	.word	.L1137-.L1136
.L1136:
	.half	3
	.word	.L1139-.L1138
.L1138:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1139:
	.byte	5,5,7,0,5,2
	.word	.L272
	.byte	3,143,8,1,9
	.half	.L950-.L272
	.byte	3,13,1,5,1,3,1,1,7,9
	.half	.L341-.L950
	.byte	0,1,1
.L1137:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_getDataLengthInBytes')
	.sect	'.debug_ranges'
.L340:
	.word	-1,.L272,0,.L341-.L272,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_getTxBufferDataFieldSize')
	.sect	'.debug_info'
.L342:
	.word	300
	.half	3
	.word	.L343
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L345,.L344
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_getTxBufferDataFieldSize',0,1,160,2,7
	.word	.L543
	.byte	1,1,1
	.word	.L204,.L669,.L203
	.byte	4
	.byte	'node',0,1,160,2,55
	.word	.L534,.L670
	.byte	5
	.word	.L204,.L669
	.byte	6
	.byte	'sizeCode',0,1,162,2,26
	.word	.L671,.L672
	.byte	6
	.byte	'size',0,1,164,2,26
	.word	.L543,.L673
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_getTxBufferDataFieldSize')
	.sect	'.debug_abbrev'
.L343:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_getTxBufferDataFieldSize')
	.sect	'.debug_line'
.L344:
	.word	.L1141-.L1140
.L1140:
	.half	3
	.word	.L1143-.L1142
.L1142:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1143:
	.byte	5,73,7,0,5,2
	.word	.L204
	.byte	3,161,2,1,5,5,9
	.half	.L1144-.L204
	.byte	3,4,1,5,33,7,9
	.half	.L1145-.L1144
	.byte	3,2,1,5,1,9
	.half	.L852-.L1145
	.byte	3,8,1,5,33,7,9
	.half	.L38-.L852
	.byte	3,124,1,5,1,9
	.half	.L853-.L38
	.byte	3,4,1,7,9
	.half	.L346-.L853
	.byte	0,1,1
.L1141:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_getTxBufferDataFieldSize')
	.sect	'.debug_ranges'
.L345:
	.word	-1,.L204,0,.L346-.L204,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_getTxBufferElementAddress')
	.sect	'.debug_info'
.L347:
	.word	390
	.half	3
	.word	.L348
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L350,.L349
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_getTxBufferElementAddress',0,1,179,2,16
	.word	.L659
	.byte	1,1,1
	.word	.L206,.L674,.L205
	.byte	4
	.byte	'node',0,1,179,2,65
	.word	.L534,.L675
	.byte	4
	.byte	'ramBaseAddress',0,1,179,2,78
	.word	.L527,.L676
	.byte	4
	.byte	'txBuffersStartAddress',0,1,179,2,101
	.word	.L585,.L677
	.byte	4
	.byte	'txBufferNumber',0,1,179,2,142,1
	.word	.L678,.L679
	.byte	5
	.word	.L206,.L674
	.byte	6
	.byte	'numOfDataBytes',0,1,181,2,41
	.word	.L585,.L680
	.byte	7
	.word	.L681,.L674
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_getTxBufferElementAddress')
	.sect	'.debug_abbrev'
.L348:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_getTxBufferElementAddress')
	.sect	'.debug_line'
.L349:
	.word	.L1147-.L1146
.L1146:
	.half	3
	.word	.L1149-.L1148
.L1148:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1149:
	.byte	5,16,7,0,5,2
	.word	.L206
	.byte	3,178,2,1,5,59,9
	.half	.L854-.L206
	.byte	3,4,1,5,52,9
	.half	.L681-.L854
	.byte	3,4,1,5,1,9
	.half	.L855-.L681
	.byte	3,2,1,7,9
	.half	.L351-.L855
	.byte	0,1,1
.L1147:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_getTxBufferElementAddress')
	.sect	'.debug_ranges'
.L350:
	.word	-1,.L206,0,.L351-.L206,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_writeTxBufData')
	.sect	'.debug_info'
.L352:
	.word	334
	.half	3
	.word	.L353
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L355,.L354
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_writeTxBufData',0,1,217,6,6,1,1,1
	.word	.L244,.L682,.L243
	.byte	4
	.byte	'txBufferElement',0,1,217,6,48
	.word	.L659,.L683
	.byte	4
	.byte	'dataLengthCode',0,1,217,6,87
	.word	.L529,.L684
	.byte	4
	.byte	'data',0,1,217,6,111
	.word	.L685,.L686
	.byte	5
	.word	.L687
	.byte	6
	.byte	'i',0,1,219,6,13
	.word	.L527,.L688
	.byte	6
	.byte	'length',0,1,223,6,13
	.word	.L527,.L689
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_writeTxBufData')
	.sect	'.debug_abbrev'
.L353:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_writeTxBufData')
	.sect	'.debug_line'
.L354:
	.word	.L1151-.L1150
.L1150:
	.half	3
	.word	.L1153-.L1152
.L1152:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1153:
	.byte	5,6,7,0,5,2
	.word	.L244
	.byte	3,216,6,1,5,60,9
	.half	.L916-.L244
	.byte	3,6,1,5,12,9
	.half	.L917-.L916
	.byte	3,3,1,5,1,9
	.half	.L913-.L917
	.byte	3,4,1,7,9
	.half	.L356-.L913
	.byte	0,1,1
.L1151:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_writeTxBufData')
	.sect	'.debug_ranges'
.L355:
	.word	-1,.L244,0,.L356-.L244,0,0
.L687:
	.word	-1,.L244,0,.L682-.L244,-1,.L246,0,.L501-.L246,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_writeData')
	.sect	'.debug_info'
.L357:
	.word	361
	.half	3
	.word	.L358
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L360,.L359
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_writeData',0,1,233,6,6,1,1,1
	.word	.L248,.L690,.L247
	.byte	4
	.byte	'node',0,1,233,6,39
	.word	.L534,.L691
	.byte	4
	.byte	'txBufferElement',0,1,233,6,60
	.word	.L659,.L692
	.byte	4
	.byte	'dataLengthCode',0,1,233,6,99
	.word	.L529,.L693
	.byte	4
	.byte	'data',0,1,233,6,123
	.word	.L685,.L694
	.byte	5
	.word	.L248,.L690
	.byte	5
	.word	.L695,.L690
	.byte	6
	.byte	'i',0,1,236,6,13
	.word	.L527,.L696
	.byte	6
	.byte	'length',0,1,240,6,13
	.word	.L527,.L697
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_writeData')
	.sect	'.debug_abbrev'
.L358:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_writeData')
	.sect	'.debug_line'
.L359:
	.word	.L1155-.L1154
.L1154:
	.half	3
	.word	.L1157-.L1156
.L1156:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1157:
	.byte	5,6,7,0,5,2
	.word	.L248
	.byte	3,232,6,1,5,60,9
	.half	.L695-.L248
	.byte	3,7,1,5,12,9
	.half	.L920-.L695
	.byte	3,3,1,5,1,9
	.half	.L918-.L920
	.byte	3,4,1,7,9
	.half	.L361-.L918
	.byte	0,1,1
.L1155:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_writeData')
	.sect	'.debug_ranges'
.L360:
	.word	-1,.L248,0,.L361-.L248,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_clearRxBufferNewDataFlag')
	.sect	'.debug_info'
.L362:
	.word	295
	.half	3
	.word	.L363
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L365,.L364
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_clearRxBufferNewDataFlag',0,1,54,6,1,1,1
	.word	.L174,.L698,.L173
	.byte	4
	.byte	'node',0,1,54,54
	.word	.L534,.L699
	.byte	4
	.byte	'rxBufferId',0,1,54,78
	.word	.L700,.L701
	.byte	5
	.word	.L174,.L698
	.byte	6
	.byte	'value',0,1,56,12
	.word	.L527,.L702
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_clearRxBufferNewDataFlag')
	.sect	'.debug_abbrev'
.L363:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_clearRxBufferNewDataFlag')
	.sect	'.debug_line'
.L364:
	.word	.L1159-.L1158
.L1158:
	.half	3
	.word	.L1161-.L1160
.L1160:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1161:
	.byte	5,22,7,0,5,2
	.word	.L174
	.byte	3,57,1,5,5,9
	.half	.L1162-.L174
	.byte	1,5,26,7,9
	.half	.L1163-.L1162
	.byte	3,2,1,5,29,9
	.half	.L1164-.L1163
	.byte	1,5,23,3,1,1,5,1,9
	.half	.L821-.L1164
	.byte	3,7,1,5,26,7,9
	.half	.L2-.L821
	.byte	3,125,1,5,44,9
	.half	.L1165-.L2
	.byte	1,5,29,9
	.half	.L1166-.L1165
	.byte	1,5,23,3,1,1,5,1,9
	.half	.L822-.L1166
	.byte	3,2,1,7,9
	.half	.L366-.L822
	.byte	0,1,1
.L1159:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_clearRxBufferNewDataFlag')
	.sect	'.debug_ranges'
.L365:
	.word	-1,.L174,0,.L366-.L174,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_getRxBufferDataFieldSize')
	.sect	'.debug_info'
.L367:
	.word	300
	.half	3
	.word	.L368
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L370,.L369
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_getRxBufferDataFieldSize',0,1,181,1,7
	.word	.L543
	.byte	1,1,1
	.word	.L188,.L703,.L187
	.byte	4
	.byte	'node',0,1,181,1,55
	.word	.L534,.L704
	.byte	5
	.word	.L188,.L703
	.byte	6
	.byte	'sizeCode',0,1,183,1,26
	.word	.L671,.L705
	.byte	6
	.byte	'size',0,1,185,1,26
	.word	.L543,.L706
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_getRxBufferDataFieldSize')
	.sect	'.debug_abbrev'
.L368:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_getRxBufferDataFieldSize')
	.sect	'.debug_line'
.L369:
	.word	.L1168-.L1167
.L1167:
	.half	3
	.word	.L1170-.L1169
.L1169:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1170:
	.byte	5,73,7,0,5,2
	.word	.L188
	.byte	3,182,1,1,5,5,9
	.half	.L1171-.L188
	.byte	3,4,1,5,33,7,9
	.half	.L1172-.L1171
	.byte	3,2,1,5,1,9
	.half	.L833-.L1172
	.byte	3,8,1,5,33,7,9
	.half	.L25-.L833
	.byte	3,124,1,5,1,9
	.half	.L834-.L25
	.byte	3,4,1,7,9
	.half	.L371-.L834
	.byte	0,1,1
.L1168:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_getRxBufferDataFieldSize')
	.sect	'.debug_ranges'
.L370:
	.word	-1,.L188,0,.L371-.L188,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_getRxBufferElementAddress')
	.sect	'.debug_info'
.L372:
	.word	386
	.half	3
	.word	.L373
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L375,.L374
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_getRxBufferElementAddress',0,1,200,1,16
	.word	.L540
	.byte	1,1,1
	.word	.L190,.L707,.L189
	.byte	4
	.byte	'node',0,1,200,1,65
	.word	.L534,.L708
	.byte	4
	.byte	'ramBaseAddress',0,1,200,1,78
	.word	.L527,.L709
	.byte	4
	.byte	'rxBuffersStartAddress',0,1,200,1,101
	.word	.L585,.L710
	.byte	4
	.byte	'rxBufferNumber',0,1,200,1,142,1
	.word	.L700,.L711
	.byte	5
	.word	.L190,.L707
	.byte	6
	.byte	'numOfDataBytes',0,1,202,1,41
	.word	.L585,.L712
	.byte	7
	.word	.L713
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_getRxBufferElementAddress')
	.sect	'.debug_abbrev'
.L373:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_getRxBufferElementAddress')
	.sect	'.debug_line'
.L374:
	.word	.L1174-.L1173
.L1173:
	.half	3
	.word	.L1176-.L1175
.L1175:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1176:
	.byte	5,16,7,0,5,2
	.word	.L190
	.byte	3,199,1,1,5,59,9
	.half	.L835-.L190
	.byte	3,4,1,5,52,9
	.half	.L714-.L835
	.byte	3,3,1,5,1,9
	.half	.L838-.L714
	.byte	3,3,1,7,9
	.half	.L376-.L838
	.byte	0,1,1
.L1174:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_getRxBufferElementAddress')
	.sect	'.debug_ranges'
.L375:
	.word	-1,.L190,0,.L376-.L190,0,0
.L713:
	.word	-1,.L190,.L714-.L190,.L707-.L190,-1,.L192,0,.L481-.L192,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_getRxFifo0DataFieldSize')
	.sect	'.debug_info'
.L377:
	.word	299
	.half	3
	.word	.L378
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L380,.L379
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_getRxFifo0DataFieldSize',0,1,213,1,7
	.word	.L543
	.byte	1,1,1
	.word	.L194,.L715,.L193
	.byte	4
	.byte	'node',0,1,213,1,54
	.word	.L534,.L716
	.byte	5
	.word	.L194,.L715
	.byte	6
	.byte	'sizeCode',0,1,215,1,26
	.word	.L671,.L717
	.byte	6
	.byte	'size',0,1,217,1,26
	.word	.L543,.L718
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_getRxFifo0DataFieldSize')
	.sect	'.debug_abbrev'
.L378:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_getRxFifo0DataFieldSize')
	.sect	'.debug_line'
.L379:
	.word	.L1178-.L1177
.L1177:
	.half	3
	.word	.L1180-.L1179
.L1179:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1180:
	.byte	5,73,7,0,5,2
	.word	.L194
	.byte	3,214,1,1,5,5,9
	.half	.L1181-.L194
	.byte	3,4,1,5,33,7,9
	.half	.L1182-.L1181
	.byte	3,2,1,5,1,9
	.half	.L840-.L1182
	.byte	3,8,1,5,33,7,9
	.half	.L29-.L840
	.byte	3,124,1,5,1,9
	.half	.L841-.L29
	.byte	3,4,1,7,9
	.half	.L381-.L841
	.byte	0,1,1
.L1178:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_getRxFifo0DataFieldSize')
	.sect	'.debug_ranges'
.L380:
	.word	-1,.L194,0,.L381-.L194,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_getRxFifo0ElementAddress')
	.sect	'.debug_info'
.L382:
	.word	387
	.half	3
	.word	.L383
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L385,.L384
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_getRxFifo0ElementAddress',0,1,232,1,16
	.word	.L540
	.byte	1,1,1
	.word	.L196,.L719,.L195
	.byte	4
	.byte	'node',0,1,232,1,64
	.word	.L534,.L720
	.byte	4
	.byte	'ramBaseAddress',0,1,232,1,77
	.word	.L527,.L721
	.byte	4
	.byte	'rxFifo0StartAddress',0,1,232,1,100
	.word	.L585,.L722
	.byte	4
	.byte	'rxBufferNumber',0,1,232,1,139,1
	.word	.L700,.L723
	.byte	5
	.word	.L196,.L719
	.byte	6
	.byte	'numOfDataBytes',0,1,234,1,51
	.word	.L585,.L724
	.byte	7
	.word	.L725,.L719
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_getRxFifo0ElementAddress')
	.sect	'.debug_abbrev'
.L383:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_getRxFifo0ElementAddress')
	.sect	'.debug_line'
.L384:
	.word	.L1184-.L1183
.L1183:
	.half	3
	.word	.L1186-.L1185
.L1185:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1186:
	.byte	5,16,7,0,5,2
	.word	.L196
	.byte	3,231,1,1,5,62,9
	.half	.L842-.L196
	.byte	3,4,1,5,50,9
	.half	.L725-.L842
	.byte	3,3,1,5,1,9
	.half	.L843-.L725
	.byte	3,3,1,7,9
	.half	.L386-.L843
	.byte	0,1,1
.L1184:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_getRxFifo0ElementAddress')
	.sect	'.debug_ranges'
.L385:
	.word	-1,.L196,0,.L386-.L196,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_getRxFifo1DataFieldSize')
	.sect	'.debug_info'
.L387:
	.word	299
	.half	3
	.word	.L388
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L390,.L389
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_getRxFifo1DataFieldSize',0,1,245,1,7
	.word	.L543
	.byte	1,1,1
	.word	.L198,.L726,.L197
	.byte	4
	.byte	'node',0,1,245,1,54
	.word	.L534,.L727
	.byte	5
	.word	.L198,.L726
	.byte	6
	.byte	'sizeCode',0,1,247,1,26
	.word	.L671,.L728
	.byte	6
	.byte	'size',0,1,249,1,26
	.word	.L543,.L729
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_getRxFifo1DataFieldSize')
	.sect	'.debug_abbrev'
.L388:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_getRxFifo1DataFieldSize')
	.sect	'.debug_line'
.L389:
	.word	.L1188-.L1187
.L1187:
	.half	3
	.word	.L1190-.L1189
.L1189:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1190:
	.byte	5,73,7,0,5,2
	.word	.L198
	.byte	3,246,1,1,5,5,9
	.half	.L844-.L198
	.byte	3,4,1,5,33,7,9
	.half	.L1191-.L844
	.byte	3,2,1,5,1,9
	.half	.L845-.L1191
	.byte	3,8,1,5,33,7,9
	.half	.L33-.L845
	.byte	3,124,1,5,1,9
	.half	.L846-.L33
	.byte	3,4,1,7,9
	.half	.L391-.L846
	.byte	0,1,1
.L1188:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_getRxFifo1DataFieldSize')
	.sect	'.debug_ranges'
.L390:
	.word	-1,.L198,0,.L391-.L198,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_getRxFifo1ElementAddress')
	.sect	'.debug_info'
.L392:
	.word	387
	.half	3
	.word	.L393
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L395,.L394
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_getRxFifo1ElementAddress',0,1,136,2,16
	.word	.L540
	.byte	1,1,1
	.word	.L200,.L730,.L199
	.byte	4
	.byte	'node',0,1,136,2,64
	.word	.L534,.L731
	.byte	4
	.byte	'ramBaseAddress',0,1,136,2,77
	.word	.L527,.L732
	.byte	4
	.byte	'rxFifo1StartAddress',0,1,136,2,100
	.word	.L585,.L733
	.byte	4
	.byte	'rxBufferNumber',0,1,136,2,139,1
	.word	.L700,.L734
	.byte	5
	.word	.L200,.L730
	.byte	6
	.byte	'numOfDataBytes',0,1,138,2,51
	.word	.L585,.L735
	.byte	7
	.word	.L736,.L730
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_getRxFifo1ElementAddress')
	.sect	'.debug_abbrev'
.L393:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_getRxFifo1ElementAddress')
	.sect	'.debug_line'
.L394:
	.word	.L1193-.L1192
.L1192:
	.half	3
	.word	.L1195-.L1194
.L1194:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1195:
	.byte	5,16,7,0,5,2
	.word	.L200
	.byte	3,135,2,1,5,62,9
	.half	.L847-.L200
	.byte	3,4,1,5,50,9
	.half	.L736-.L847
	.byte	3,3,1,5,1,9
	.half	.L848-.L736
	.byte	3,3,1,7,9
	.half	.L396-.L848
	.byte	0,1,1
.L1193:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_getRxFifo1ElementAddress')
	.sect	'.debug_ranges'
.L395:
	.word	-1,.L200,0,.L396-.L200,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_isRxBufferNewDataUpdated')
	.sect	'.debug_info'
.L397:
	.word	323
	.half	3
	.word	.L398
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L400,.L399
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_isRxBufferNewDataUpdated',0,1,222,2,9
	.word	.L543
	.byte	1,1,1
	.word	.L214,.L737,.L213
	.byte	4
	.byte	'node',0,1,222,2,57
	.word	.L534,.L738
	.byte	4
	.byte	'rxBufferId',0,1,222,2,81
	.word	.L700,.L739
	.byte	5
	.word	.L214,.L737
	.byte	6
	.byte	'mask',0,1,224,2,13
	.word	.L527,.L740
	.byte	6
	.byte	'tempVar',0,1,225,2,13
	.word	.L543,.L741
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_isRxBufferNewDataUpdated')
	.sect	'.debug_abbrev'
.L398:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_isRxBufferNewDataUpdated')
	.sect	'.debug_line'
.L399:
	.word	.L1197-.L1196
.L1196:
	.half	3
	.word	.L1199-.L1198
.L1198:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1199:
	.byte	5,22,7,0,5,2
	.word	.L214
	.byte	3,226,2,1,5,5,9
	.half	.L1200-.L214
	.byte	1,5,20,7,9
	.half	.L1201-.L1200
	.byte	3,2,1,5,40,3,1,1,5,23,9
	.half	.L1202-.L1201
	.byte	3,127,1,5,9,3,2,1,5,20,9
	.half	.L45-.L1202
	.byte	3,4,1,5,38,9
	.half	.L1203-.L45
	.byte	1,5,23,9
	.half	.L1204-.L1203
	.byte	1,5,40,3,1,1,5,45,9
	.half	.L863-.L1204
	.byte	1,5,43,9
	.half	.L864-.L863
	.byte	1,5,1,3,3,1,7,9
	.half	.L401-.L864
	.byte	0,1,1
.L1197:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_isRxBufferNewDataUpdated')
	.sect	'.debug_ranges'
.L400:
	.word	-1,.L214,0,.L401-.L214,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_readData')
	.sect	'.debug_info'
.L402:
	.word	332
	.half	3
	.word	.L403
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L405,.L404
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_readData',0,1,242,2,6,1,1,1
	.word	.L216,.L742,.L215
	.byte	4
	.byte	'rxBufferElement',0,1,242,2,42
	.word	.L540,.L743
	.byte	4
	.byte	'dataLengthCode',0,1,242,2,81
	.word	.L529,.L744
	.byte	4
	.byte	'data',0,1,242,2,105
	.word	.L685,.L745
	.byte	5
	.word	.L216,.L742
	.byte	6
	.byte	'i',0,1,244,2,13
	.word	.L527,.L746
	.byte	6
	.byte	'length',0,1,247,2,13
	.word	.L527,.L747
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_readData')
	.sect	'.debug_abbrev'
.L403:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_readData')
	.sect	'.debug_line'
.L404:
	.word	.L1206-.L1205
.L1205:
	.half	3
	.word	.L1208-.L1207
.L1207:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1208:
	.byte	5,6,7,0,5,2
	.word	.L216
	.byte	3,241,2,1,5,60,9
	.half	.L868-.L216
	.byte	3,5,1,5,12,9
	.half	.L865-.L868
	.byte	3,3,1,5,60,3,123,1,5,27,9
	.half	.L867-.L865
	.byte	3,5,1,5,30,9
	.half	.L49-.L867
	.byte	1,5,37,3,2,1,5,17,9
	.half	.L1209-.L49
	.byte	1,5,27,9
	.half	.L48-.L1209
	.byte	3,126,1,5,1,7,9
	.half	.L1210-.L48
	.byte	3,4,1,7,9
	.half	.L406-.L1210
	.byte	0,1,1
.L1206:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_readData')
	.sect	'.debug_ranges'
.L405:
	.word	-1,.L216,0,.L406-.L216,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_getExtendedFilterElementAddress')
	.sect	'.debug_info'
.L407:
	.word	343
	.half	3
	.word	.L408
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L410,.L409
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_getExtendedFilterElementAddress',0,1,114,17
	.word	.L748
	.byte	1,1,1
	.word	.L182,.L749,.L181
	.byte	4
	.byte	'ramBaseAddress',0,1,114,68
	.word	.L527,.L750
	.byte	4
	.byte	'extendedFilterListStartAddress',0,1,114,91
	.word	.L585,.L751
	.byte	4
	.byte	'filterNumber',0,1,114,129,1
	.word	.L543,.L752
	.byte	5
	.word	.L182,.L749
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_getExtendedFilterElementAddress')
	.sect	'.debug_abbrev'
.L408:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_getExtendedFilterElementAddress')
	.sect	'.debug_line'
.L409:
	.word	.L1212-.L1211
.L1211:
	.half	3
	.word	.L1214-.L1213
.L1213:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1214:
	.byte	5,51,7,0,5,2
	.word	.L182
	.byte	3,246,0,1,5,36,9
	.half	.L831-.L182
	.byte	3,127,1,5,84,9
	.half	.L830-.L831
	.byte	3,1,1,5,12,9
	.half	.L1215-.L830
	.byte	3,2,1,5,1,9
	.half	.L1216-.L1215
	.byte	3,1,1,7,9
	.half	.L411-.L1216
	.byte	0,1,1
.L1212:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_getExtendedFilterElementAddress')
	.sect	'.debug_ranges'
.L410:
	.word	-1,.L182,0,.L411-.L182,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_getStandardFilterElementAddress')
	.sect	'.debug_info'
.L412:
	.word	347
	.half	3
	.word	.L413
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L415,.L414
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_getStandardFilterElementAddress',0,1,149,2,17
	.word	.L753
	.byte	1,1,1
	.word	.L202,.L754,.L201
	.byte	4
	.byte	'ramBaseAddress',0,1,149,2,68
	.word	.L527,.L755
	.byte	4
	.byte	'standardFilterListStartAddress',0,1,149,2,91
	.word	.L585,.L756
	.byte	4
	.byte	'filterNumber',0,1,149,2,129,1
	.word	.L543,.L757
	.byte	5
	.word	.L202,.L754
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_getStandardFilterElementAddress')
	.sect	'.debug_abbrev'
.L413:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_getStandardFilterElementAddress')
	.sect	'.debug_line'
.L414:
	.word	.L1218-.L1217
.L1217:
	.half	3
	.word	.L1220-.L1219
.L1219:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1220:
	.byte	5,51,7,0,5,2
	.word	.L202
	.byte	3,153,2,1,5,36,9
	.half	.L850-.L202
	.byte	3,127,1,5,84,9
	.half	.L849-.L850
	.byte	3,1,1,5,12,9
	.half	.L1221-.L849
	.byte	3,2,1,5,1,9
	.half	.L1222-.L1221
	.byte	3,1,1,7,9
	.half	.L416-.L1222
	.byte	0,1,1
.L1218:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_getStandardFilterElementAddress')
	.sect	'.debug_ranges'
.L415:
	.word	-1,.L202,0,.L416-.L202,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_setGroupInterruptLine')
	.sect	'.debug_info'
.L417:
	.word	307
	.half	3
	.word	.L418
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L420,.L419
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_setGroupInterruptLine',0,1,132,6,6,1,1,1
	.word	.L240,.L758,.L239
	.byte	4
	.byte	'node',0,1,132,6,51
	.word	.L534,.L759
	.byte	4
	.byte	'interruptGroup',0,1,132,6,79
	.word	.L760,.L761
	.byte	4
	.byte	'interruptLine',0,1,132,6,116
	.word	.L762,.L763
	.byte	5
	.word	.L240,.L758
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_setGroupInterruptLine')
	.sect	'.debug_abbrev'
.L418:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_setGroupInterruptLine')
	.sect	'.debug_line'
.L419:
	.word	.L1224-.L1223
.L1223:
	.half	3
	.word	.L1226-.L1225
.L1225:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1226:
	.byte	5,5,7,0,5,2
	.word	.L240
	.byte	3,133,6,1,5,47,7,9
	.half	.L1227-.L240
	.byte	3,2,1,5,21,1,5,43,9
	.half	.L909-.L1227
	.byte	1,5,24,9
	.half	.L910-.L909
	.byte	1,5,1,9
	.half	.L1228-.L910
	.byte	3,6,1,5,48,7,9
	.half	.L94-.L1228
	.byte	3,126,1,5,21,1,5,48,9
	.half	.L1229-.L94
	.byte	1,5,43,9
	.half	.L1230-.L1229
	.byte	1,5,24,9
	.half	.L911-.L1230
	.byte	1,5,1,9
	.half	.L1231-.L911
	.byte	3,2,1,7,9
	.half	.L421-.L1231
	.byte	0,1,1
.L1224:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_setGroupInterruptLine')
	.sect	'.debug_ranges'
.L420:
	.word	-1,.L240,0,.L421-.L240,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_setInterruptLine')
	.sect	'.debug_info'
.L422:
	.word	297
	.half	3
	.word	.L423
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L425,.L424
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_setInterruptLine',0,1,145,6,6,1,1,1
	.word	.L242,.L764,.L241
	.byte	4
	.byte	'node',0,1,145,6,46
	.word	.L534,.L765
	.byte	4
	.byte	'interrupt',0,1,145,6,69
	.word	.L766,.L767
	.byte	4
	.byte	'interruptLine',0,1,145,6,101
	.word	.L762,.L768
	.byte	5
	.word	.L242,.L764
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_setInterruptLine')
	.sect	'.debug_abbrev'
.L423:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_setInterruptLine')
	.sect	'.debug_line'
.L424:
	.word	.L1233-.L1232
.L1232:
	.half	3
	.word	.L1235-.L1234
.L1234:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1235:
	.byte	5,5,7,0,5,2
	.word	.L242
	.byte	3,146,6,1,5,23,9
	.half	.L98-.L242
	.byte	3,3,1,5,30,9
	.half	.L1236-.L98
	.byte	1,5,9,3,1,1,5,23,9
	.half	.L99-.L1236
	.byte	3,4,1,5,29,9
	.half	.L1237-.L99
	.byte	1,5,9,3,1,1,5,23,9
	.half	.L100-.L1237
	.byte	3,2,1,5,30,9
	.half	.L1238-.L100
	.byte	1,5,9,3,1,1,5,23,9
	.half	.L101-.L1238
	.byte	3,7,1,5,29,9
	.half	.L1239-.L101
	.byte	1,5,1,9
	.half	.L97-.L1239
	.byte	3,48,1,5,23,7,9
	.half	.L102-.L97
	.byte	3,83,1,5,30,9
	.half	.L1240-.L102
	.byte	1,5,1,9
	.half	.L1241-.L1240
	.byte	3,45,1,5,23,7,9
	.half	.L104-.L1241
	.byte	3,86,1,5,30,9
	.half	.L1242-.L104
	.byte	1,5,9,3,1,1,5,23,9
	.half	.L106-.L1242
	.byte	3,2,1,5,28,9
	.half	.L1243-.L106
	.byte	1,5,9,3,1,1,5,23,9
	.half	.L107-.L1243
	.byte	3,3,1,5,30,9
	.half	.L1244-.L107
	.byte	1,5,9,3,1,1,5,23,9
	.half	.L109-.L1244
	.byte	3,2,1,5,29,9
	.half	.L1245-.L109
	.byte	1,5,1,9
	.half	.L1246-.L1245
	.byte	3,32,1,5,23,7,9
	.half	.L110-.L1246
	.byte	3,100,1,5,31,9
	.half	.L1247-.L110
	.byte	1,5,1,9
	.half	.L1248-.L1247
	.byte	3,28,1,5,23,7,9
	.half	.L115-.L1248
	.byte	3,106,1,5,29,9
	.half	.L1249-.L115
	.byte	1,5,9,3,1,1,5,23,9
	.half	.L116-.L1249
	.byte	3,2,1,5,29,9
	.half	.L1250-.L116
	.byte	1,5,1,9
	.half	.L1251-.L1250
	.byte	3,19,1,5,23,7,9
	.half	.L117-.L1251
	.byte	3,112,1,5,30,9
	.half	.L1252-.L117
	.byte	1,5,1,9
	.half	.L1253-.L1252
	.byte	3,16,1,5,23,7,9
	.half	.L120-.L1253
	.byte	3,115,1,5,29,9
	.half	.L1254-.L120
	.byte	1,5,1,9
	.half	.L1255-.L1254
	.byte	3,13,1,5,23,7,9
	.half	.L123-.L1255
	.byte	3,118,1,5,29,9
	.half	.L1256-.L123
	.byte	1,5,9,3,1,1,5,23,9
	.half	.L125-.L1256
	.byte	3,4,1,5,28,9
	.half	.L1257-.L125
	.byte	1,5,1,9
	.half	.L1258-.L1257
	.byte	3,5,1,7,9
	.half	.L426-.L1258
	.byte	0,1,1
.L1233:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_setInterruptLine')
	.sect	'.debug_ranges'
.L425:
	.word	-1,.L242,0,.L426-.L242,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_disableModule')
	.sect	'.debug_info'
.L427:
	.word	291
	.half	3
	.word	.L428
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L430,.L429
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_disableModule',0,1,250,6,6,1,1,1
	.word	.L250,.L769,.L249
	.byte	4
	.byte	'can',0,1,250,6,36
	.word	.L770,.L771
	.byte	5
	.word	.L772
	.byte	6
	.byte	'passwd',0,1,252,6,12
	.word	.L585,.L773
	.byte	7
	.word	.L774,.L147,.L775
	.byte	8
	.word	.L776,.L777
	.byte	9
	.word	.L778,.L147,.L775
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_disableModule')
	.sect	'.debug_abbrev'
.L428:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18,1,0,0
	.byte	0
	.sdecl	'.debug_line',debug,cluster('IfxCan_disableModule')
	.sect	'.debug_line'
.L429:
	.word	.L1260-.L1259
.L1259:
	.half	3
	.word	.L1262-.L1261
.L1261:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.h',0,0,0,0,0
.L1262:
	.byte	5,6,7,0,5,2
	.word	.L250
	.byte	3,249,6,1,5,53,9
	.half	.L922-.L250
	.byte	3,2,1,5,19,9
	.half	.L921-.L922
	.byte	1,5,31,9
	.half	.L924-.L921
	.byte	3,1,1,5,15,9
	.half	.L923-.L924
	.byte	3,3,1,5,21,9
	.half	.L1263-.L923
	.byte	1,4,2,5,15,9
	.half	.L1264-.L1263
	.byte	3,253,11,1,5,22,9
	.half	.L147-.L1264
	.byte	1,4,1,5,47,9
	.half	.L775-.L147
	.byte	3,134,116,1,5,29,7,9
	.half	.L1265-.L775
	.byte	3,3,1,5,1,9
	.half	.L431-.L1265
	.byte	3,1,0,1,1
.L1260:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_disableModule')
	.sect	'.debug_ranges'
.L430:
	.word	-1,.L250,0,.L431-.L250,0,0
.L772:
	.word	-1,.L250,0,.L769-.L250,-1,.L252,0,.L526-.L252,-1,.L254,0,.L491-.L254,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_enableModule')
	.sect	'.debug_info'
.L432:
	.word	294
	.half	3
	.word	.L433
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L435,.L434
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_enableModule',0,1,138,7,6,1,1,1
	.word	.L256,.L779,.L255
	.byte	4
	.byte	'can',0,1,138,7,35
	.word	.L770,.L780
	.byte	5
	.word	.L256,.L779
	.byte	6
	.byte	'passwd',0,1,140,7,12
	.word	.L585,.L781
	.byte	7
	.word	.L774,.L148,.L782
	.byte	8
	.word	.L776,.L783
	.byte	9
	.word	.L778,.L148,.L782
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_enableModule')
	.sect	'.debug_abbrev'
.L433:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_enableModule')
	.sect	'.debug_line'
.L434:
	.word	.L1267-.L1266
.L1266:
	.half	3
	.word	.L1269-.L1268
.L1268:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.h',0,0,0,0,0
.L1269:
	.byte	5,6,7,0,5,2
	.word	.L256
	.byte	3,137,7,1,5,53,9
	.half	.L929-.L256
	.byte	3,2,1,5,19,9
	.half	.L928-.L929
	.byte	1,5,31,9
	.half	.L931-.L928
	.byte	3,1,1,5,15,9
	.half	.L930-.L931
	.byte	3,3,1,5,21,9
	.half	.L1270-.L930
	.byte	1,4,2,5,15,9
	.half	.L1271-.L1270
	.byte	3,237,11,1,5,22,9
	.half	.L148-.L1271
	.byte	1,4,1,5,48,9
	.half	.L782-.L148
	.byte	3,150,116,1,5,29,7,9
	.half	.L1272-.L782
	.byte	3,3,1,5,1,9
	.half	.L436-.L1272
	.byte	3,1,0,1,1
.L1267:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_enableModule')
	.sect	'.debug_ranges'
.L435:
	.word	-1,.L256,0,.L436-.L256,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_getAddress')
	.sect	'.debug_info'
.L437:
	.word	260
	.half	3
	.word	.L438
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L440,.L439
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_getAddress',0,1,154,7,10
	.word	.L770
	.byte	1,1,1
	.word	.L258,.L784,.L257
	.byte	4
	.byte	'can',0,1,154,7,41
	.word	.L785,.L786
	.byte	5
	.word	.L258,.L784
	.byte	6
	.byte	'module',0,1,156,7,14
	.word	.L770,.L787
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_getAddress')
	.sect	'.debug_abbrev'
.L438:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_getAddress')
	.sect	'.debug_line'
.L439:
	.word	.L1274-.L1273
.L1273:
	.half	3
	.word	.L1276-.L1275
.L1275:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1276:
	.byte	5,5,7,0,5,2
	.word	.L258
	.byte	3,157,7,1,5,29,7,9
	.half	.L1277-.L258
	.byte	3,2,1,5,48,9
	.half	.L1278-.L1277
	.byte	1,5,53,9
	.half	.L1279-.L1278
	.byte	1,5,1,9
	.half	.L934-.L1279
	.byte	3,8,1,5,16,7,9
	.half	.L149-.L934
	.byte	3,124,1,5,1,9
	.half	.L935-.L149
	.byte	3,4,1,7,9
	.half	.L441-.L935
	.byte	0,1,1
.L1274:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_getAddress')
	.sect	'.debug_ranges'
.L440:
	.word	-1,.L258,0,.L441-.L258,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_getIndex')
	.sect	'.debug_info'
.L442:
	.word	277
	.half	3
	.word	.L443
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L445,.L444
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_getIndex',0,1,171,7,14
	.word	.L785
	.byte	1,1,1
	.word	.L260,.L788,.L259
	.byte	4
	.byte	'can',0,1,171,7,39
	.word	.L770,.L789
	.byte	5
	.word	.L260,.L788
	.byte	6
	.byte	'index',0,1,173,7,18
	.word	.L527,.L790
	.byte	6
	.byte	'result',0,1,174,7,18
	.word	.L785,.L791
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_getIndex')
	.sect	'.debug_abbrev'
.L443:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_getIndex')
	.sect	'.debug_line'
.L444:
	.word	.L1281-.L1280
.L1280:
	.half	3
	.word	.L1283-.L1282
.L1282:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1283:
	.byte	5,12,7,0,5,2
	.word	.L260
	.byte	3,175,7,1,5,13,3,4,1,5,47,9
	.half	.L1284-.L260
	.byte	3,126,1,5,39,9
	.half	.L152-.L1284
	.byte	3,2,1,5,9,9
	.half	.L1285-.L152
	.byte	1,5,62,7,9
	.half	.L1286-.L1285
	.byte	3,2,1,5,22,9
	.half	.L1287-.L1286
	.byte	1,5,1,3,6,1,5,54,7,9
	.half	.L153-.L1287
	.byte	3,118,1,5,47,1,5,1,7,9
	.half	.L1288-.L153
	.byte	3,10,1,7,9
	.half	.L446-.L1288
	.byte	0,1,1
.L1281:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_getIndex')
	.sect	'.debug_ranges'
.L445:
	.word	-1,.L260,0,.L446-.L260,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_getModuleFrequency')
	.sect	'.debug_info'
.L447:
	.word	255
	.half	3
	.word	.L448
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L450,.L449
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_getModuleFrequency',0,1,191,7,9
	.word	.L582
	.byte	1,1,1
	.word	.L262,.L792,.L261
	.byte	4
	.word	.L262,.L792
	.byte	5
	.byte	'moduleFreq',0,1,193,7,13
	.word	.L582,.L793
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_getModuleFrequency')
	.sect	'.debug_abbrev'
.L448:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_getModuleFrequency')
	.sect	'.debug_line'
.L449:
	.word	.L1290-.L1289
.L1289:
	.half	3
	.word	.L1292-.L1291
.L1291:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1292:
	.byte	5,44,7,0,5,2
	.word	.L262
	.byte	3,194,7,1,5,1,7,9
	.half	.L451-.L262
	.byte	3,3,0,1,1
.L1290:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_getModuleFrequency')
	.sect	'.debug_ranges'
.L450:
	.word	-1,.L262,0,.L451-.L262,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_resetModule')
	.sect	'.debug_info'
.L452:
	.word	257
	.half	3
	.word	.L453
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L455,.L454
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_resetModule',0,1,213,7,6,1,1,1
	.word	.L266,.L794,.L265
	.byte	4
	.byte	'can',0,1,213,7,34
	.word	.L770,.L795
	.byte	5
	.word	.L266,.L794
	.byte	6
	.byte	'passwd',0,1,215,7,12
	.word	.L585,.L796
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_resetModule')
	.sect	'.debug_abbrev'
.L453:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_resetModule')
	.sect	'.debug_line'
.L454:
	.word	.L1294-.L1293
.L1293:
	.half	3
	.word	.L1296-.L1295
.L1295:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1296:
	.byte	5,6,7,0,5,2
	.word	.L266
	.byte	3,212,7,1,5,53,9
	.half	.L940-.L266
	.byte	3,2,1,5,19,9
	.half	.L939-.L940
	.byte	1,5,31,9
	.half	.L942-.L939
	.byte	3,2,1,5,17,9
	.half	.L941-.L942
	.byte	3,1,1,5,22,9
	.half	.L1297-.L941
	.byte	1,5,17,9
	.half	.L1298-.L1297
	.byte	3,1,1,5,22,9
	.half	.L1299-.L1298
	.byte	1,5,29,9
	.half	.L1300-.L1299
	.byte	3,1,1,5,20,9
	.half	.L944-.L1300
	.byte	3,2,1,5,29,9
	.half	.L159-.L944
	.byte	1,5,37,9
	.half	.L1301-.L159
	.byte	1,5,31,7,9
	.half	.L1302-.L1301
	.byte	3,4,1,5,19,9
	.half	.L946-.L1302
	.byte	3,1,1,5,24,9
	.half	.L1303-.L946
	.byte	1,5,29,9
	.half	.L1304-.L1303
	.byte	3,1,1,5,24,3,127,1,5,29,9
	.half	.L1305-.L1304
	.byte	3,1,1,5,1,7,9
	.half	.L456-.L1305
	.byte	3,1,0,1,1
.L1294:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_resetModule')
	.sect	'.debug_ranges'
.L455:
	.word	-1,.L266,0,.L456-.L266,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_setClockSource')
	.sect	'.debug_info'
.L457:
	.word	303
	.half	3
	.word	.L458
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L460,.L459
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_setClockSource',0,1,232,7,6,1,1,1
	.word	.L268,.L797,.L267
	.byte	4
	.byte	'can',0,1,232,7,37
	.word	.L770,.L798
	.byte	4
	.byte	'clockSelect',0,1,232,7,61
	.word	.L799,.L800
	.byte	4
	.byte	'clockSource',0,1,232,7,93
	.word	.L801,.L802
	.byte	5
	.word	.L803
	.byte	6
	.byte	'mcr',0,1,234,7,17
	.word	.L804,.L805
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_setClockSource')
	.sect	'.debug_abbrev'
.L458:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_setClockSource')
	.sect	'.debug_line'
.L459:
	.word	.L1307-.L1306
.L1306:
	.half	3
	.word	.L1309-.L1308
.L1308:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1309:
	.byte	5,26,7,0,5,2
	.word	.L268
	.byte	3,236,7,1,5,10,9
	.half	.L949-.L268
	.byte	3,1,1,5,16,9
	.half	.L1310-.L949
	.byte	1,9
	.half	.L1311-.L1310
	.byte	3,1,1,5,14,9
	.half	.L1312-.L1311
	.byte	3,7,1,5,10,9
	.half	.L1313-.L1312
	.byte	3,127,1,7,9
	.half	.L1314-.L1313
	.byte	3,3,1,7,9
	.half	.L1315-.L1314
	.byte	3,3,1,7,9
	.half	.L1316-.L1315
	.byte	3,3,1,7,9
	.half	.L1317-.L1316
	.byte	1,5,23,9
	.half	.L160-.L1317
	.byte	3,120,1,5,9,3,1,1,5,23,9
	.half	.L161-.L160
	.byte	3,2,1,5,9,3,1,1,5,23,9
	.half	.L162-.L161
	.byte	3,2,1,5,9,3,1,1,5,23,9
	.half	.L163-.L162
	.byte	3,2,1,9
	.half	.L164-.L163
	.byte	3,4,1,5,16,1,5,10,9
	.half	.L1318-.L164
	.byte	3,3,1,5,16,3,125,1,9
	.half	.L1319-.L1318
	.byte	3,3,1,9
	.half	.L1320-.L1319
	.byte	3,1,1,5,1,9
	.half	.L1321-.L1320
	.byte	3,2,1,7,9
	.half	.L461-.L1321
	.byte	0,1,1
.L1307:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_setClockSource')
	.sect	'.debug_ranges'
.L460:
	.word	-1,.L268,0,.L461-.L268,0,0
.L803:
	.word	-1,.L268,0,.L797-.L268,-1,.L270,0,.L516-.L270,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_getFrameModeFromTxEventFifo')
	.sect	'.debug_info'
.L462:
	.word	300
	.half	3
	.word	.L463
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L465,.L464
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_getFrameModeFromTxEventFifo',0,1,153,1,18
	.word	.L538
	.byte	1,1,1
	.word	.L186,.L806,.L185
	.byte	4
	.byte	'txEventFifoElement',0,1,153,1,75
	.word	.L807,.L808
	.byte	5
	.word	.L186,.L806
	.byte	6
	.byte	'frameMode',0,1,155,1,22
	.word	.L538,.L809
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_getFrameModeFromTxEventFifo')
	.sect	'.debug_abbrev'
.L463:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_getFrameModeFromTxEventFifo')
	.sect	'.debug_line'
.L464:
	.word	.L1323-.L1322
.L1322:
	.half	3
	.word	.L1325-.L1324
.L1324:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1325:
	.byte	5,33,7,0,5,2
	.word	.L186
	.byte	3,157,1,1,5,5,9
	.half	.L1326-.L186
	.byte	1,5,37,7,9
	.half	.L1327-.L1326
	.byte	3,3,1,5,9,9
	.half	.L1328-.L1327
	.byte	1,5,23,7,9
	.half	.L1329-.L1328
	.byte	3,2,1,5,1,3,15,1,5,23,7,9
	.half	.L21-.L1329
	.byte	3,118,1,5,1,3,10,1,5,19,7,9
	.half	.L20-.L21
	.byte	3,124,1,5,1,3,4,1,7,9
	.half	.L466-.L20
	.byte	0,1,1
.L1323:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_getFrameModeFromTxEventFifo')
	.sect	'.debug_ranges'
.L465:
	.word	-1,.L186,0,.L466-.L186,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_Node_getTxEventFifoElementAddress')
	.sect	'.debug_info'
.L467:
	.word	341
	.half	3
	.word	.L468
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L470,.L469
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_Node_getTxEventFifoElementAddress',0,1,192,2,18
	.word	.L807
	.byte	1,1,1
	.word	.L208,.L810,.L207
	.byte	4
	.byte	'ramBaseAddress',0,1,192,2,66
	.word	.L527,.L811
	.byte	4
	.byte	'txEventFifoStartAddress',0,1,192,2,89
	.word	.L585,.L812
	.byte	4
	.byte	'txEventFifoNumber',0,1,192,2,120
	.word	.L543,.L813
	.byte	5
	.word	.L208,.L810
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_Node_getTxEventFifoElementAddress')
	.sect	'.debug_abbrev'
.L468:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_Node_getTxEventFifoElementAddress')
	.sect	'.debug_line'
.L469:
	.word	.L1331-.L1330
.L1330:
	.half	3
	.word	.L1333-.L1332
.L1332:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1333:
	.byte	5,48,7,0,5,2
	.word	.L208
	.byte	3,196,2,1,5,33,9
	.half	.L856-.L208
	.byte	3,127,1,5,74,9
	.half	.L857-.L856
	.byte	3,1,1,5,12,9
	.half	.L1334-.L857
	.byte	3,2,1,5,1,9
	.half	.L1335-.L1334
	.byte	3,1,1,7,9
	.half	.L471-.L1335
	.byte	0,1,1
.L1331:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_Node_getTxEventFifoElementAddress')
	.sect	'.debug_ranges'
.L470:
	.word	-1,.L208,0,.L471-.L208,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCan_getSrcPointer')
	.sect	'.debug_info'
.L472:
	.word	323
	.half	3
	.word	.L473
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L475,.L474
	.byte	2
	.word	.L273
	.byte	3
	.byte	'IfxCan_getSrcPointer',0,1,201,7,24
	.word	.L814
	.byte	1,1,1
	.word	.L264,.L815,.L263
	.byte	4
	.byte	'can',0,1,201,7,54
	.word	.L770,.L816
	.byte	4
	.byte	'interruptLine',0,1,201,7,80
	.word	.L762,.L817
	.byte	5
	.word	.L264,.L815
	.byte	6
	.byte	'canIndex',0,1,203,7,28
	.word	.L785,.L818
	.byte	6
	.byte	'srcCanBaseAddress',0,1,204,7,28
	.word	.L819,.L820
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCan_getSrcPointer')
	.sect	'.debug_abbrev'
.L473:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCan_getSrcPointer')
	.sect	'.debug_line'
.L474:
	.word	.L1337-.L1336
.L1336:
	.half	3
	.word	.L1339-.L1338
.L1338:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1339:
	.byte	5,24,7,0,5,2
	.word	.L264
	.byte	3,200,7,1,5,84,9
	.half	.L937-.L264
	.byte	3,2,1,5,68,9
	.half	.L938-.L937
	.byte	3,1,1,5,66,9
	.half	.L1340-.L938
	.byte	1,5,31,9
	.half	.L1341-.L1340
	.byte	3,5,1,5,46,9
	.half	.L1342-.L1341
	.byte	1,5,1,9
	.half	.L1343-.L1342
	.byte	3,1,1,7,9
	.half	.L476-.L1343
	.byte	0,1,1
.L1337:
	.sdecl	'.debug_ranges',debug,cluster('IfxCan_getSrcPointer')
	.sect	'.debug_ranges'
.L475:
	.word	-1,.L264,0,.L476-.L264,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_6')
	.sect	'.debug_info'
.L477:
	.word	199
	.half	3
	.word	.L478
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L480,.L479
	.byte	2
	.word	.L273
	.byte	3
	.byte	'.cocofun_6',0,1,200,1,16,1
	.word	.L192,.L481,.L191
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_6')
	.sect	'.debug_abbrev'
.L478:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_6')
	.sect	'.debug_line'
.L479:
	.word	.L1345-.L1344
.L1344:
	.half	3
	.word	.L1347-.L1346
.L1346:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1347:
	.byte	5,41,7,0,5,2
	.word	.L192
	.byte	3,204,1,1,5,35,9
	.half	.L1348-.L192
	.byte	3,1,1,5,52,9
	.half	.L837-.L1348
	.byte	3,1,1,5,76,9
	.half	.L836-.L837
	.byte	1,5,12,9
	.half	.L1349-.L836
	.byte	3,2,1,9
	.half	.L481-.L1349
	.byte	0,1,1,5,45,0,5,2
	.word	.L192
	.byte	3,236,1,1,5,44,9
	.half	.L1348-.L192
	.byte	3,1,1,5,50,9
	.half	.L837-.L1348
	.byte	3,1,1,5,72,9
	.half	.L836-.L837
	.byte	1,5,12,9
	.half	.L1349-.L836
	.byte	3,2,1,9
	.half	.L1350-.L1349
	.byte	3,96,1,7,9
	.half	.L481-.L1350
	.byte	0,1,1,5,45,0,5,2
	.word	.L192
	.byte	3,140,2,1,5,44,9
	.half	.L1348-.L192
	.byte	3,1,1,5,50,9
	.half	.L837-.L1348
	.byte	3,1,1,5,72,9
	.half	.L836-.L837
	.byte	1,5,12,9
	.half	.L1349-.L836
	.byte	3,2,1,9
	.half	.L1350-.L1349
	.byte	3,64,1,7,9
	.half	.L481-.L1350
	.byte	0,1,1,5,41,0,5,2
	.word	.L192
	.byte	3,183,2,1,5,35,9
	.half	.L1348-.L192
	.byte	3,1,1,5,52,9
	.half	.L837-.L1348
	.byte	3,2,1,5,76,9
	.half	.L836-.L837
	.byte	1,5,12,9
	.half	.L1349-.L836
	.byte	3,1,1,9
	.half	.L1350-.L1349
	.byte	3,149,127,1,7,9
	.half	.L481-.L1350
	.byte	0,1,1
.L1345:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_6')
	.sect	'.debug_ranges'
.L480:
	.word	-1,.L192,0,.L481-.L192,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_7')
	.sect	'.debug_info'
.L482:
	.word	198
	.half	3
	.word	.L483
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L485,.L484
	.byte	2
	.word	.L273
	.byte	3
	.byte	'.cocofun_7',0,1,71,8,1
	.word	.L178,.L486,.L177
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_7')
	.sect	'.debug_abbrev'
.L483:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_7')
	.sect	'.debug_line'
.L484:
	.word	.L1352-.L1351
.L1351:
	.half	3
	.word	.L1354-.L1353
.L1353:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1354:
	.byte	5,5,7,0,5,2
	.word	.L178
	.byte	3,202,0,1,5,10,7,9
	.half	.L1355-.L178
	.byte	3,4,1,5,49,7,9
	.half	.L1356-.L1355
	.byte	3,2,1,5,44,9
	.half	.L823-.L1356
	.byte	1,5,53,1,5,50,9
	.half	.L6-.L823
	.byte	3,4,1,5,44,9
	.half	.L824-.L6
	.byte	1,5,5,9
	.half	.L5-.L824
	.byte	3,122,1,7,9
	.half	.L486-.L5
	.byte	0,1,1,5,5,0,5,2
	.word	.L178
	.byte	3,143,8,1,5,10,7,9
	.half	.L1355-.L178
	.byte	3,4,1,5,49,7,9
	.half	.L1356-.L1355
	.byte	3,2,1,5,44,9
	.half	.L823-.L1356
	.byte	1,5,53,1,5,50,9
	.half	.L6-.L823
	.byte	3,4,1,5,44,9
	.half	.L824-.L6
	.byte	1,5,5,9
	.half	.L5-.L824
	.byte	3,181,120,1,7,9
	.half	.L486-.L5
	.byte	0,1,1
.L1352:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_7')
	.sect	'.debug_ranges'
.L485:
	.word	-1,.L178,0,.L486-.L178,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_8')
	.sect	'.debug_info'
.L487:
	.word	199
	.half	3
	.word	.L488
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L490,.L489
	.byte	2
	.word	.L273
	.byte	3
	.byte	'.cocofun_8',0,1,250,6,6,1
	.word	.L254,.L491,.L253
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_8')
	.sect	'.debug_abbrev'
.L488:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_8')
	.sect	'.debug_line'
.L489:
	.word	.L1358-.L1357
.L1357:
	.half	3
	.word	.L1360-.L1359
.L1359:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1360:
	.byte	5,15,7,0,5,2
	.word	.L254
	.byte	3,255,6,1,9
	.half	.L491-.L254
	.byte	0,1,1,5,15,0,5,2
	.word	.L254
	.byte	3,255,6,1,5,21,9
	.half	.L925-.L254
	.byte	1,5,15,9
	.half	.L1361-.L925
	.byte	1,7,9
	.half	.L491-.L1361
	.byte	0,1,1,5,15,0,5,2
	.word	.L254
	.byte	3,255,6,1,9
	.half	.L925-.L254
	.byte	3,16,1,9
	.half	.L1361-.L925
	.byte	3,112,1,7,9
	.half	.L491-.L1361
	.byte	0,1,1,5,15,0,5,2
	.word	.L254
	.byte	3,255,6,1,5,21,9
	.half	.L925-.L254
	.byte	3,16,1,5,15,9
	.half	.L1361-.L925
	.byte	3,112,1,7,9
	.half	.L491-.L1361
	.byte	0,1,1
.L1358:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_8')
	.sect	'.debug_ranges'
.L490:
	.word	-1,.L254,0,.L491-.L254,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_9')
	.sect	'.debug_info'
.L492:
	.word	199
	.half	3
	.word	.L493
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L495,.L494
	.byte	2
	.word	.L273
	.byte	3
	.byte	'.cocofun_9',0,1,129,3,6,1
	.word	.L226,.L496,.L225
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_9')
	.sect	'.debug_abbrev'
.L493:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_9')
	.sect	'.debug_line'
.L494:
	.word	.L1363-.L1362
.L1362:
	.half	3
	.word	.L1365-.L1364
.L1364:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1365:
	.byte	5,17,7,0,5,2
	.word	.L226
	.byte	3,160,3,1,5,23,9
	.half	.L1366-.L226
	.byte	3,108,1,5,15,9
	.half	.L871-.L1366
	.byte	3,20,1,5,6,9
	.half	.L872-.L871
	.byte	3,96,1,5,36,9
	.half	.L874-.L872
	.byte	3,12,1,5,18,9
	.half	.L870-.L874
	.byte	3,23,1,5,51,9
	.half	.L869-.L870
	.byte	3,105,1,5,18,3,23,1,7,9
	.half	.L496-.L869
	.byte	0,1,1,5,17,0,5,2
	.word	.L226
	.byte	3,195,4,1,5,23,9
	.half	.L1366-.L226
	.byte	3,108,1,5,15,9
	.half	.L871-.L1366
	.byte	3,20,1,5,6,9
	.half	.L872-.L871
	.byte	3,96,1,5,36,9
	.half	.L874-.L872
	.byte	3,12,1,5,18,9
	.half	.L870-.L874
	.byte	3,23,1,5,51,9
	.half	.L869-.L870
	.byte	3,105,1,5,18,3,244,126,1,7,9
	.half	.L496-.L869
	.byte	0,1,1
.L1363:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_9')
	.sect	'.debug_ranges'
.L495:
	.word	-1,.L226,0,.L496-.L226,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_10')
	.sect	'.debug_info'
.L497:
	.word	200
	.half	3
	.word	.L498
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L500,.L499
	.byte	2
	.word	.L273
	.byte	3
	.byte	'.cocofun_10',0,1,217,6,6,1
	.word	.L246,.L501,.L245
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_10')
	.sect	'.debug_abbrev'
.L498:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_10')
	.sect	'.debug_line'
.L499:
	.word	.L1368-.L1367
.L1367:
	.half	3
	.word	.L1370-.L1369
.L1369:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1370:
	.byte	5,12,7,0,5,2
	.word	.L246
	.byte	3,225,6,1,5,60,3,123,1,5,27,9
	.half	.L915-.L246
	.byte	3,5,1,5,30,9
	.half	.L144-.L915
	.byte	1,5,37,3,2,1,5,31,9
	.half	.L1371-.L144
	.byte	1,5,27,9
	.half	.L143-.L1371
	.byte	3,126,1,7,9
	.half	.L1372-.L143
	.byte	1,7,9
	.half	.L501-.L1372
	.byte	0,1,1,5,12,0,5,2
	.word	.L246
	.byte	3,242,6,1,5,60,3,123,1,5,27,9
	.half	.L915-.L246
	.byte	3,5,1,5,30,9
	.half	.L144-.L915
	.byte	1,5,37,3,2,1,5,31,9
	.half	.L1371-.L144
	.byte	1,5,27,9
	.half	.L143-.L1371
	.byte	3,126,1,7,9
	.half	.L1372-.L143
	.byte	3,111,1,7,9
	.half	.L501-.L1372
	.byte	0,1,1
.L1368:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_10')
	.sect	'.debug_ranges'
.L500:
	.word	-1,.L246,0,.L501-.L246,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_11')
	.sect	'.debug_info'
.L502:
	.word	200
	.half	3
	.word	.L503
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L505,.L504
	.byte	2
	.word	.L273
	.byte	3
	.byte	'.cocofun_11',0,1,129,3,6,1
	.word	.L224,.L506,.L223
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_11')
	.sect	'.debug_abbrev'
.L503:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_11')
	.sect	'.debug_line'
.L504:
	.word	.L1374-.L1373
.L1373:
	.half	3
	.word	.L1376-.L1375
.L1375:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1376:
	.byte	5,54,7,0,5,2
	.word	.L224
	.byte	3,131,4,1,5,60,9
	.half	.L886-.L224
	.byte	3,1,1,5,41,9
	.half	.L887-.L886
	.byte	1,5,25,9
	.half	.L888-.L887
	.byte	3,2,1,5,23,9
	.half	.L1377-.L888
	.byte	1,9
	.half	.L506-.L1377
	.byte	0,1,1,5,54,0,5,2
	.word	.L224
	.byte	3,165,5,1,5,60,9
	.half	.L886-.L224
	.byte	3,1,1,5,41,9
	.half	.L887-.L886
	.byte	1,5,25,9
	.half	.L888-.L887
	.byte	3,2,1,5,23,9
	.half	.L1377-.L888
	.byte	1,3,222,126,1,7,9
	.half	.L506-.L1377
	.byte	0,1,1
.L1374:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_11')
	.sect	'.debug_ranges'
.L505:
	.word	-1,.L224,0,.L506-.L224,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_12')
	.sect	'.debug_info'
.L507:
	.word	200
	.half	3
	.word	.L508
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L510,.L509
	.byte	2
	.word	.L273
	.byte	3
	.byte	'.cocofun_12',0,1,129,3,6,1
	.word	.L222,.L511,.L221
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_12')
	.sect	'.debug_abbrev'
.L508:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_12')
	.sect	'.debug_line'
.L509:
	.word	.L1379-.L1378
.L1378:
	.half	3
	.word	.L1381-.L1380
.L1380:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1381:
	.byte	5,40,7,0,5,2
	.word	.L222
	.byte	3,165,3,1,5,38,9
	.half	.L1382-.L222
	.byte	1,5,29,9
	.half	.L875-.L1382
	.byte	3,1,1,9
	.half	.L511-.L875
	.byte	0,1,1,5,40,0,5,2
	.word	.L222
	.byte	3,200,4,1,5,38,9
	.half	.L1382-.L222
	.byte	1,5,29,9
	.half	.L875-.L1382
	.byte	3,1,1,9
	.half	.L877-.L875
	.byte	3,221,126,1,7,9
	.half	.L511-.L877
	.byte	0,1,1
.L1379:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_12')
	.sect	'.debug_ranges'
.L510:
	.word	-1,.L222,0,.L511-.L222,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_13')
	.sect	'.debug_info'
.L512:
	.word	200
	.half	3
	.word	.L513
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L515,.L514
	.byte	2
	.word	.L273
	.byte	3
	.byte	'.cocofun_13',0,1,232,7,6,1
	.word	.L270,.L516,.L269
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_13')
	.sect	'.debug_abbrev'
.L513:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_13')
	.sect	'.debug_line'
.L514:
	.word	.L1384-.L1383
.L1383:
	.half	3
	.word	.L1386-.L1385
.L1385:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1386:
	.byte	5,16,7,0,5,2
	.word	.L270
	.byte	3,238,7,1,3,1,1,9
	.half	.L516-.L270
	.byte	0,1,1,5,16,0,5,2
	.word	.L270
	.byte	3,134,8,1,3,1,1,9
	.half	.L1387-.L270
	.byte	3,104,1,7,9
	.half	.L516-.L1387
	.byte	0,1,1
.L1384:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_13')
	.sect	'.debug_ranges'
.L515:
	.word	-1,.L270,0,.L516-.L270,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_14')
	.sect	'.debug_info'
.L517:
	.word	200
	.half	3
	.word	.L518
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L520,.L519
	.byte	2
	.word	.L273
	.byte	3
	.byte	'.cocofun_14',0,1,129,3,6,1
	.word	.L220,.L521,.L219
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_14')
	.sect	'.debug_abbrev'
.L518:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_14')
	.sect	'.debug_line'
.L519:
	.word	.L1389-.L1388
.L1388:
	.half	3
	.word	.L1391-.L1390
.L1390:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0,0
.L1391:
	.byte	5,42,7,0,5,2
	.word	.L220
	.byte	3,173,3,1,5,40,9
	.half	.L1392-.L220
	.byte	1,5,32,9
	.half	.L876-.L1392
	.byte	3,1,1,9
	.half	.L521-.L876
	.byte	0,1,1,5,42,0,5,2
	.word	.L220
	.byte	3,208,4,1,5,40,9
	.half	.L1392-.L220
	.byte	1,5,32,9
	.half	.L876-.L1392
	.byte	3,1,1,3,221,126,1,7,9
	.half	.L521-.L876
	.byte	0,1,1
.L1389:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_14')
	.sect	'.debug_ranges'
.L520:
	.word	-1,.L220,0,.L521-.L220,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_15')
	.sect	'.debug_info'
.L522:
	.word	200
	.half	3
	.word	.L523
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L525,.L524
	.byte	2
	.word	.L273
	.byte	3
	.byte	'.cocofun_15',0,1,250,6,6,1
	.word	.L252,.L526,.L251
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_15')
	.sect	'.debug_abbrev'
.L523:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_15')
	.sect	'.debug_line'
.L524:
	.word	.L1394-.L1393
.L1393:
	.half	3
	.word	.L1396-.L1395
.L1395:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Can\\Std\\IfxCan.h',0,0,0,0,0
.L1396:
	.byte	4,2,5,15,7,0,5,2
	.word	.L252
	.byte	3,252,18,1,9
	.half	.L526-.L252
	.byte	0,1,1,5,15,0,5,2
	.word	.L252
	.byte	3,255,6,1,4,2,9
	.half	.L1397-.L252
	.byte	3,253,11,1,7,9
	.half	.L526-.L1397
	.byte	0,1,1,5,21,0,5,2
	.word	.L252
	.byte	3,255,6,1,4,2,5,15,9
	.half	.L1397-.L252
	.byte	3,253,11,1,7,9
	.half	.L526-.L1397
	.byte	0,1,1,5,15,0,5,2
	.word	.L252
	.byte	3,143,7,1,4,2,9
	.half	.L1397-.L252
	.byte	3,237,11,1,7,9
	.half	.L526-.L1397
	.byte	0,1,1,5,21,0,5,2
	.word	.L252
	.byte	3,143,7,1,4,2,5,15,9
	.half	.L1397-.L252
	.byte	3,237,11,1,7,9
	.half	.L526-.L1397
	.byte	0,1,1,4,2,5,15,0,5,2
	.word	.L252
	.byte	3,252,18,1,9
	.half	.L526-.L252
	.byte	0,1,1,5,17,0,5,2
	.word	.L252
	.byte	3,217,7,1,4,2,5,15,9
	.half	.L1397-.L252
	.byte	3,163,11,1,7,9
	.half	.L526-.L1397
	.byte	0,1,1,5,22,0,5,2
	.word	.L252
	.byte	3,217,7,1,4,2,5,15,9
	.half	.L1397-.L252
	.byte	3,163,11,1,7,9
	.half	.L526-.L1397
	.byte	0,1,1,5,17,0,5,2
	.word	.L252
	.byte	3,218,7,1,4,2,5,15,9
	.half	.L1397-.L252
	.byte	3,162,11,1,7,9
	.half	.L526-.L1397
	.byte	0,1,1,5,22,0,5,2
	.word	.L252
	.byte	3,218,7,1,4,2,5,15,9
	.half	.L1397-.L252
	.byte	3,162,11,1,7,9
	.half	.L526-.L1397
	.byte	0,1,1,5,20,0,5,2
	.word	.L252
	.byte	3,221,7,1,4,2,5,15,9
	.half	.L1397-.L252
	.byte	3,159,11,1,7,9
	.half	.L526-.L1397
	.byte	0,1,1,5,19,0,5,2
	.word	.L252
	.byte	3,226,7,1,4,2,5,15,9
	.half	.L1397-.L252
	.byte	3,154,11,1,7,9
	.half	.L526-.L1397
	.byte	0,1,1,5,24,0,5,2
	.word	.L252
	.byte	3,226,7,1,4,2,5,15,9
	.half	.L1397-.L252
	.byte	3,154,11,1,7,9
	.half	.L526-.L1397
	.byte	0,1,1
.L1394:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_15')
	.sect	'.debug_ranges'
.L525:
	.word	-1,.L252,0,.L526-.L252,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_10')
	.sect	'.debug_loc'
.L245:
	.word	-1,.L246,0,.L501-.L246
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_11')
	.sect	'.debug_loc'
.L223:
	.word	-1,.L224,0,.L506-.L224
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_12')
	.sect	'.debug_loc'
.L221:
	.word	-1,.L222,0,.L511-.L222
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_13')
	.sect	'.debug_loc'
.L269:
	.word	-1,.L270,0,.L516-.L270
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_14')
	.sect	'.debug_loc'
.L219:
	.word	-1,.L220,0,.L521-.L220
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_15')
	.sect	'.debug_loc'
.L251:
	.word	-1,.L252,0,.L526-.L252
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_6')
	.sect	'.debug_loc'
.L191:
	.word	-1,.L192,0,.L481-.L192
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_7')
	.sect	'.debug_loc'
.L177:
	.word	-1,.L178,0,.L486-.L178
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_8')
	.sect	'.debug_loc'
.L253:
	.word	-1,.L254,0,.L491-.L254
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_9')
	.sect	'.debug_loc'
.L225:
	.word	-1,.L226,0,.L496-.L226
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_clearRxBufferNewDataFlag')
	.sect	'.debug_loc'
.L173:
	.word	-1,.L174,0,.L698-.L174
	.half	2
	.byte	138,0
	.word	0,0
.L699:
	.word	-1,.L174,0,.L698-.L174
	.half	1
	.byte	100
	.word	0,0
.L701:
	.word	-1,.L174,0,.L698-.L174
	.half	1
	.byte	84
	.word	0,0
.L702:
	.word	-1,.L174,.L821-.L174,.L2-.L174
	.half	1
	.byte	95
	.word	.L822-.L174,.L698-.L174
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_getDataLength')
	.sect	'.debug_loc'
.L175:
	.word	-1,.L176,0,.L528-.L176
	.half	2
	.byte	138,0
	.word	0,0
.L530:
	.word	-1,.L176,.L178-.L176,.L823-.L176
	.half	1
	.byte	84
	.word	.L6-.L176,.L824-.L176
	.half	1
	.byte	84
	.word	.L7-.L176,.L486-.L176
	.half	1
	.byte	84
	.word	.L825-.L176,.L826-.L176
	.half	1
	.byte	84
	.word	0,0
.L532:
	.word	-1,.L176,.L178-.L176,.L823-.L176
	.half	1
	.byte	84
	.word	.L6-.L176,.L824-.L176
	.half	1
	.byte	84
	.word	.L7-.L176,.L486-.L176
	.half	1
	.byte	84
	.word	.L825-.L176,.L826-.L176
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_getDataLengthFromCode')
	.sect	'.debug_loc'
.L179:
	.word	-1,.L180,0,.L533-.L180
	.half	2
	.byte	138,0
	.word	0,0
.L536:
	.word	-1,.L180,0,.L827-.L180
	.half	1
	.byte	84
	.word	.L9-.L180,.L828-.L180
	.half	1
	.byte	84
	.word	.L10-.L180,.L829-.L180
	.half	1
	.byte	84
	.word	0,0
.L535:
	.word	-1,.L180,0,.L533-.L180
	.half	1
	.byte	100
	.word	0,0
.L537:
	.word	-1,.L180,0,.L827-.L180
	.half	1
	.byte	84
	.word	.L9-.L180,.L828-.L180
	.half	1
	.byte	84
	.word	.L10-.L180,.L829-.L180
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_getDataLengthInBytes')
	.sect	'.debug_loc'
.L271:
	.word	-1,.L272,0,.L666-.L272
	.half	2
	.byte	138,0
	.word	0,0
.L667:
	.word	-1,.L272,.L178-.L272,.L823-.L272
	.half	1
	.byte	84
	.word	.L823-.L272,.L824-.L272
	.half	1
	.byte	84
	.word	.L7-.L272,.L486-.L272
	.half	1
	.byte	84
	.word	.L950-.L272,.L666-.L272
	.half	1
	.byte	84
	.word	0,0
.L668:
	.word	-1,.L272,.L178-.L272,.L823-.L272
	.half	1
	.byte	84
	.word	.L823-.L272,.L824-.L272
	.half	1
	.byte	84
	.word	.L7-.L272,.L486-.L272
	.half	1
	.byte	84
	.word	.L950-.L272,.L666-.L272
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_getExtendedFilterElementAddress')
	.sect	'.debug_loc'
.L181:
	.word	-1,.L182,0,.L749-.L182
	.half	2
	.byte	138,0
	.word	0,0
.L751:
	.word	-1,.L182,0,.L749-.L182
	.half	1
	.byte	85
	.word	0,0
.L752:
	.word	-1,.L182,0,.L830-.L182
	.half	1
	.byte	86
	.word	0,0
.L750:
	.word	-1,.L182,0,.L831-.L182
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_getFrameMode')
	.sect	'.debug_loc'
.L183:
	.word	-1,.L184,0,.L539-.L184
	.half	2
	.byte	138,0
	.word	0,0
.L542:
	.word	0,0
.L541:
	.word	-1,.L184,0,.L539-.L184
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_getFrameModeFromTxEventFifo')
	.sect	'.debug_loc'
.L185:
	.word	-1,.L186,0,.L806-.L186
	.half	2
	.byte	138,0
	.word	0,0
.L809:
	.word	0,0
.L808:
	.word	-1,.L186,0,.L806-.L186
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_getRxBufferDataFieldSize')
	.sect	'.debug_loc'
.L187:
	.word	-1,.L188,0,.L703-.L188
	.half	2
	.byte	138,0
	.word	0,0
.L704:
	.word	-1,.L188,0,.L703-.L188
	.half	1
	.byte	100
	.word	0,0
.L706:
	.word	0,0
.L705:
	.word	-1,.L188,.L832-.L188,.L833-.L188
	.half	1
	.byte	95
	.word	.L25-.L188,.L834-.L188
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_getRxBufferElementAddress')
	.sect	'.debug_loc'
.L189:
	.word	-1,.L190,0,.L707-.L190
	.half	2
	.byte	138,0
	.word	0,0
.L708:
	.word	-1,.L190,0,.L714-.L190
	.half	1
	.byte	100
	.word	0,0
.L712:
	.word	-1,.L190,.L835-.L190,.L714-.L190
	.half	1
	.byte	82
	.word	.L192-.L190,.L481-.L190
	.half	1
	.byte	82
	.word	.L838-.L190,.L707-.L190
	.half	1
	.byte	82
	.word	0,0
.L709:
	.word	-1,.L190,0,.L714-.L190
	.half	1
	.byte	84
	.word	.L835-.L190,.L714-.L190
	.half	1
	.byte	95
	.word	.L192-.L190,.L836-.L190
	.half	1
	.byte	95
	.word	0,0
.L711:
	.word	-1,.L190,0,.L714-.L190
	.half	1
	.byte	86
	.word	0,0
.L710:
	.word	-1,.L190,0,.L714-.L190
	.half	1
	.byte	85
	.word	.L837-.L190,.L836-.L190
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_getRxFifo0DataFieldSize')
	.sect	'.debug_loc'
.L193:
	.word	-1,.L194,0,.L715-.L194
	.half	2
	.byte	138,0
	.word	0,0
.L716:
	.word	-1,.L194,0,.L715-.L194
	.half	1
	.byte	100
	.word	0,0
.L718:
	.word	0,0
.L717:
	.word	-1,.L194,.L839-.L194,.L840-.L194
	.half	1
	.byte	95
	.word	.L29-.L194,.L841-.L194
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_getRxFifo0ElementAddress')
	.sect	'.debug_loc'
.L195:
	.word	-1,.L196,0,.L719-.L196
	.half	2
	.byte	138,0
	.word	0,0
.L720:
	.word	-1,.L196,0,.L725-.L196
	.half	1
	.byte	100
	.word	0,0
.L724:
	.word	-1,.L196,.L842-.L196,.L725-.L196
	.half	1
	.byte	82
	.word	.L192-.L196,.L481-.L196
	.half	1
	.byte	82
	.word	.L843-.L196,.L719-.L196
	.half	1
	.byte	82
	.word	0,0
.L721:
	.word	-1,.L196,0,.L725-.L196
	.half	1
	.byte	84
	.word	.L842-.L196,.L725-.L196
	.half	1
	.byte	95
	.word	.L192-.L196,.L836-.L196
	.half	1
	.byte	95
	.word	0,0
.L723:
	.word	-1,.L196,0,.L725-.L196
	.half	1
	.byte	86
	.word	0,0
.L722:
	.word	-1,.L196,0,.L725-.L196
	.half	1
	.byte	85
	.word	.L837-.L196,.L836-.L196
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_getRxFifo1DataFieldSize')
	.sect	'.debug_loc'
.L197:
	.word	-1,.L198,0,.L726-.L198
	.half	2
	.byte	138,0
	.word	0,0
.L727:
	.word	-1,.L198,0,.L726-.L198
	.half	1
	.byte	100
	.word	0,0
.L729:
	.word	0,0
.L728:
	.word	-1,.L198,.L844-.L198,.L845-.L198
	.half	1
	.byte	95
	.word	.L33-.L198,.L846-.L198
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_getRxFifo1ElementAddress')
	.sect	'.debug_loc'
.L199:
	.word	-1,.L200,0,.L730-.L200
	.half	2
	.byte	138,0
	.word	0,0
.L731:
	.word	-1,.L200,0,.L736-.L200
	.half	1
	.byte	100
	.word	0,0
.L735:
	.word	-1,.L200,.L847-.L200,.L736-.L200
	.half	1
	.byte	82
	.word	.L192-.L200,.L481-.L200
	.half	1
	.byte	82
	.word	.L848-.L200,.L730-.L200
	.half	1
	.byte	82
	.word	0,0
.L732:
	.word	-1,.L200,0,.L736-.L200
	.half	1
	.byte	84
	.word	.L847-.L200,.L736-.L200
	.half	1
	.byte	95
	.word	.L192-.L200,.L836-.L200
	.half	1
	.byte	95
	.word	0,0
.L734:
	.word	-1,.L200,0,.L736-.L200
	.half	1
	.byte	86
	.word	0,0
.L733:
	.word	-1,.L200,0,.L736-.L200
	.half	1
	.byte	85
	.word	.L837-.L200,.L836-.L200
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_getStandardFilterElementAddress')
	.sect	'.debug_loc'
.L201:
	.word	-1,.L202,0,.L754-.L202
	.half	2
	.byte	138,0
	.word	0,0
.L757:
	.word	-1,.L202,0,.L849-.L202
	.half	1
	.byte	86
	.word	0,0
.L755:
	.word	-1,.L202,0,.L850-.L202
	.half	1
	.byte	84
	.word	0,0
.L756:
	.word	-1,.L202,0,.L754-.L202
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_getTxBufferDataFieldSize')
	.sect	'.debug_loc'
.L203:
	.word	-1,.L204,0,.L669-.L204
	.half	2
	.byte	138,0
	.word	0,0
.L670:
	.word	-1,.L204,0,.L669-.L204
	.half	1
	.byte	100
	.word	0,0
.L673:
	.word	0,0
.L672:
	.word	-1,.L204,.L851-.L204,.L852-.L204
	.half	1
	.byte	95
	.word	.L38-.L204,.L853-.L204
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_getTxBufferElementAddress')
	.sect	'.debug_loc'
.L205:
	.word	-1,.L206,0,.L674-.L206
	.half	2
	.byte	138,0
	.word	0,0
.L675:
	.word	-1,.L206,0,.L681-.L206
	.half	1
	.byte	100
	.word	0,0
.L680:
	.word	-1,.L206,.L854-.L206,.L681-.L206
	.half	1
	.byte	82
	.word	.L192-.L206,.L481-.L206
	.half	1
	.byte	82
	.word	.L855-.L206,.L674-.L206
	.half	1
	.byte	82
	.word	0,0
.L676:
	.word	-1,.L206,0,.L681-.L206
	.half	1
	.byte	84
	.word	.L854-.L206,.L681-.L206
	.half	1
	.byte	95
	.word	.L192-.L206,.L836-.L206
	.half	1
	.byte	95
	.word	0,0
.L679:
	.word	-1,.L206,0,.L681-.L206
	.half	1
	.byte	86
	.word	0,0
.L677:
	.word	-1,.L206,0,.L681-.L206
	.half	1
	.byte	85
	.word	.L837-.L206,.L836-.L206
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_getTxEventFifoElementAddress')
	.sect	'.debug_loc'
.L207:
	.word	-1,.L208,0,.L810-.L208
	.half	2
	.byte	138,0
	.word	0,0
.L811:
	.word	-1,.L208,0,.L856-.L208
	.half	1
	.byte	84
	.word	0,0
.L813:
	.word	-1,.L208,0,.L857-.L208
	.half	1
	.byte	86
	.word	0,0
.L812:
	.word	-1,.L208,0,.L810-.L208
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_initRxPin')
	.sect	'.debug_loc'
.L209:
	.word	-1,.L210,0,.L544-.L210
	.half	2
	.byte	138,0
	.word	0,0
.L549:
	.word	-1,.L210,0,.L858-.L210
	.half	1
	.byte	84
	.word	0,0
.L560:
	.word	0,0
.L545:
	.word	-1,.L210,0,.L858-.L210
	.half	1
	.byte	100
	.word	.L859-.L210,.L544-.L210
	.half	1
	.byte	108
	.word	0,0
.L551:
	.word	-1,.L210,0,.L859-.L210
	.half	1
	.byte	85
	.word	.L553-.L210,.L544-.L210
	.half	1
	.byte	88
	.word	0,0
.L558:
	.word	0,0
.L556:
	.word	0,0
.L547:
	.word	-1,.L210,0,.L554-.L210
	.half	1
	.byte	101
	.word	.L860-.L210,.L544-.L210
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_initTxPin')
	.sect	'.debug_loc'
.L211:
	.word	-1,.L212,0,.L562-.L212
	.half	2
	.byte	138,0
	.word	0,0
.L578:
	.word	0,0
.L566:
	.word	-1,.L212,0,.L570-.L212
	.half	1
	.byte	84
	.word	0,0
.L576:
	.word	0,0
.L567:
	.word	-1,.L212,0,.L861-.L212
	.half	1
	.byte	85
	.word	.L569-.L212,.L562-.L212
	.half	1
	.byte	88
	.word	0,0
.L574:
	.word	0,0
.L572:
	.word	0,0
.L564:
	.word	-1,.L212,0,.L862-.L212
	.half	1
	.byte	100
	.word	.L569-.L212,.L562-.L212
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_isRxBufferNewDataUpdated')
	.sect	'.debug_loc'
.L213:
	.word	-1,.L214,0,.L737-.L214
	.half	2
	.byte	138,0
	.word	0,0
.L740:
	.word	-1,.L214,.L863-.L214,.L864-.L214
	.half	1
	.byte	95
	.word	0,0
.L738:
	.word	-1,.L214,0,.L737-.L214
	.half	1
	.byte	100
	.word	0,0
.L739:
	.word	-1,.L214,0,.L737-.L214
	.half	1
	.byte	84
	.word	0,0
.L741:
	.word	-1,.L214,.L864-.L214,.L737-.L214
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_readData')
	.sect	'.debug_loc'
.L215:
	.word	-1,.L216,0,.L742-.L216
	.half	2
	.byte	138,0
	.word	0,0
.L745:
	.word	-1,.L216,0,.L865-.L216
	.half	1
	.byte	101
	.word	.L868-.L216,.L742-.L216
	.half	1
	.byte	108
	.word	0,0
.L744:
	.word	-1,.L216,0,.L865-.L216
	.half	1
	.byte	84
	.word	0,0
.L746:
	.word	-1,.L216,.L867-.L216,.L742-.L216
	.half	1
	.byte	95
	.word	0,0
.L747:
	.word	-1,.L216,.L865-.L216,.L742-.L216
	.half	1
	.byte	82
	.word	0,0
.L743:
	.word	-1,.L216,0,.L865-.L216
	.half	1
	.byte	100
	.word	.L866-.L216,.L867-.L216
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_setBitTiming')
	.sect	'.debug_loc'
.L602:
	.word	-1,.L218,.L875-.L218,.L511-.L218
	.half	5
	.byte	144,32,157,32,0
	.word	.L220-.L218,.L876-.L218
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L217:
	.word	-1,.L218,0,.L580-.L218
	.half	2
	.byte	138,0
	.word	0,0
.L584:
	.word	-1,.L218,.L226-.L218,.L869-.L218
	.half	1
	.byte	85
	.word	0,0
.L595:
	.word	-1,.L218,.L871-.L218,.L496-.L218
	.half	1
	.byte	89
	.word	.L222-.L218,.L511-.L218
	.half	1
	.byte	89
	.word	.L220-.L218,.L521-.L218
	.half	1
	.byte	89
	.word	.L878-.L218,.L879-.L218
	.half	1
	.byte	89
	.word	.L224-.L218,.L506-.L218
	.half	1
	.byte	89
	.word	.L889-.L218,.L890-.L218
	.half	1
	.byte	89
	.word	0,0
.L600:
	.word	-1,.L218,.L872-.L218,.L496-.L218
	.half	1
	.byte	83
	.word	.L222-.L218,.L511-.L218
	.half	1
	.byte	83
	.word	.L220-.L218,.L521-.L218
	.half	1
	.byte	83
	.word	.L878-.L218,.L880-.L218
	.half	1
	.byte	83
	.word	.L880-.L218,.L881-.L218
	.half	1
	.byte	88
	.word	.L881-.L218,.L879-.L218
	.half	5
	.byte	144,32,157,32,0
	.word	.L224-.L218,.L506-.L218
	.half	5
	.byte	144,32,157,32,0
	.word	.L889-.L218,.L580-.L218
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L596:
	.word	-1,.L218,.L870-.L218,.L496-.L218
	.half	1
	.byte	84
	.word	.L222-.L218,.L511-.L218
	.half	1
	.byte	84
	.word	.L220-.L218,.L521-.L218
	.half	1
	.byte	84
	.word	.L878-.L218,.L879-.L218
	.half	1
	.byte	84
	.word	.L224-.L218,.L506-.L218
	.half	1
	.byte	84
	.word	.L889-.L218,.L891-.L218
	.half	1
	.byte	84
	.word	0,0
.L597:
	.word	-1,.L218,.L869-.L218,.L496-.L218
	.half	1
	.byte	86
	.word	.L222-.L218,.L511-.L218
	.half	1
	.byte	86
	.word	.L220-.L218,.L521-.L218
	.half	1
	.byte	86
	.word	.L878-.L218,.L879-.L218
	.half	1
	.byte	86
	.word	.L224-.L218,.L506-.L218
	.half	1
	.byte	86
	.word	.L889-.L218,.L580-.L218
	.half	1
	.byte	86
	.word	0,0
.L598:
	.word	0,0
.L599:
	.word	-1,.L218,.L881-.L218,.L879-.L218
	.half	1
	.byte	88
	.word	.L224-.L218,.L506-.L218
	.half	1
	.byte	88
	.word	.L889-.L218,.L892-.L218
	.half	1
	.byte	88
	.word	0,0
.L609:
	.word	-1,.L218,.L884-.L218,.L885-.L218
	.half	1
	.byte	95
	.word	0,0
.L612:
	.word	-1,.L218,.L888-.L218,.L506-.L218
	.half	1
	.byte	95
	.word	0,0
.L590:
	.word	-1,.L218,.L882-.L218,.L879-.L218
	.half	1
	.byte	81
	.word	.L224-.L218,.L506-.L218
	.half	1
	.byte	81
	.word	.L889-.L218,.L893-.L218
	.half	1
	.byte	81
	.word	0,0
.L583:
	.word	-1,.L218,.L226-.L218,.L870-.L218
	.half	1
	.byte	84
	.word	.L873-.L218,.L496-.L218
	.half	1
	.byte	88
	.word	.L222-.L218,.L511-.L218
	.half	1
	.byte	88
	.word	.L220-.L218,.L521-.L218
	.half	1
	.byte	88
	.word	.L878-.L218,.L880-.L218
	.half	1
	.byte	88
	.word	0,0
.L581:
	.word	-1,.L218,.L226-.L218,.L496-.L218
	.half	1
	.byte	100
	.word	.L222-.L218,.L511-.L218
	.half	1
	.byte	100
	.word	.L220-.L218,.L521-.L218
	.half	1
	.byte	100
	.word	.L878-.L218,.L879-.L218
	.half	1
	.byte	100
	.word	.L224-.L218,.L506-.L218
	.half	1
	.byte	100
	.word	.L889-.L218,.L580-.L218
	.half	1
	.byte	100
	.word	0,0
.L586:
	.word	-1,.L218,.L226-.L218,.L496-.L218
	.half	1
	.byte	86
	.word	.L874-.L218,.L496-.L218
	.half	1
	.byte	90
	.word	.L222-.L218,.L511-.L218
	.half	1
	.byte	90
	.word	.L220-.L218,.L521-.L218
	.half	1
	.byte	90
	.word	.L878-.L218,.L879-.L218
	.half	1
	.byte	90
	.word	.L224-.L218,.L506-.L218
	.half	1
	.byte	90
	.word	.L889-.L218,.L580-.L218
	.half	1
	.byte	90
	.word	0,0
.L587:
	.word	-1,.L218,.L226-.L218,.L496-.L218
	.half	1
	.byte	87
	.word	.L222-.L218,.L511-.L218
	.half	1
	.byte	87
	.word	.L220-.L218,.L521-.L218
	.half	1
	.byte	87
	.word	.L878-.L218,.L879-.L218
	.half	1
	.byte	87
	.word	.L224-.L218,.L506-.L218
	.half	1
	.byte	87
	.word	.L889-.L218,.L580-.L218
	.half	1
	.byte	87
	.word	0,0
.L591:
	.word	-1,.L218,.L869-.L218,.L496-.L218
	.half	1
	.byte	85
	.word	.L222-.L218,.L511-.L218
	.half	1
	.byte	85
	.word	.L220-.L218,.L521-.L218
	.half	1
	.byte	85
	.word	.L878-.L218,.L57-.L218
	.half	1
	.byte	85
	.word	0,0
.L605:
	.word	-1,.L218,.L876-.L218,.L521-.L218
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L592:
	.word	-1,.L218,.L61-.L218,.L879-.L218
	.half	1
	.byte	85
	.word	.L224-.L218,.L506-.L218
	.half	1
	.byte	85
	.word	.L889-.L218,.L580-.L218
	.half	1
	.byte	85
	.word	0,0
.L608:
	.word	-1,.L218,.L883-.L218,.L61-.L218
	.half	1
	.byte	82
	.word	0,0
.L611:
	.word	-1,.L218,.L886-.L218,.L887-.L218
	.half	1
	.byte	82
	.word	0,0
.L594:
	.word	-1,.L218,.L877-.L218,.L511-.L218
	.half	1
	.byte	91
	.word	.L220-.L218,.L521-.L218
	.half	1
	.byte	91
	.word	.L878-.L218,.L57-.L218
	.half	1
	.byte	91
	.word	0,0
.L593:
	.word	-1,.L218,.L606-.L218,.L881-.L218
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_setBitTimingValues')
	.sect	'.debug_loc'
.L227:
	.word	-1,.L228,0,.L613-.L228
	.half	2
	.byte	138,0
	.word	0,0
.L620:
	.word	-1,.L228,.L894-.L228,.L613-.L228
	.half	1
	.byte	95
	.word	0,0
.L614:
	.word	-1,.L228,0,.L613-.L228
	.half	1
	.byte	100
	.word	0,0
.L618:
	.word	-1,.L228,0,.L613-.L228
	.half	1
	.byte	87
	.word	0,0
.L615:
	.word	-1,.L228,0,.L613-.L228
	.half	1
	.byte	84
	.word	0,0
.L617:
	.word	-1,.L228,0,.L613-.L228
	.half	1
	.byte	86
	.word	0,0
.L616:
	.word	-1,.L228,0,.L613-.L228
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_setFastBitTiming')
	.sect	'.debug_loc'
.L638:
	.word	-1,.L230,.L875-.L230,.L511-.L230
	.half	5
	.byte	144,32,157,32,0
	.word	.L895-.L230,.L896-.L230
	.half	5
	.byte	144,32,157,32,0
	.word	.L220-.L230,.L876-.L230
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L229:
	.word	-1,.L230,0,.L621-.L230
	.half	2
	.byte	138,0
	.word	0,0
.L624:
	.word	-1,.L230,.L226-.L230,.L869-.L230
	.half	1
	.byte	85
	.word	0,0
.L632:
	.word	-1,.L230,.L871-.L230,.L496-.L230
	.half	1
	.byte	89
	.word	.L222-.L230,.L511-.L230
	.half	1
	.byte	89
	.word	.L220-.L230,.L521-.L230
	.half	1
	.byte	89
	.word	.L224-.L230,.L506-.L230
	.half	1
	.byte	89
	.word	.L897-.L230,.L903-.L230
	.half	1
	.byte	89
	.word	0,0
.L637:
	.word	-1,.L230,.L872-.L230,.L496-.L230
	.half	1
	.byte	83
	.word	.L222-.L230,.L511-.L230
	.half	1
	.byte	83
	.word	.L220-.L230,.L521-.L230
	.half	1
	.byte	83
	.word	.L897-.L230,.L898-.L230
	.half	1
	.byte	83
	.word	.L224-.L230,.L506-.L230
	.half	5
	.byte	144,32,157,32,0
	.word	.L898-.L230,.L621-.L230
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L633:
	.word	-1,.L230,.L870-.L230,.L496-.L230
	.half	1
	.byte	84
	.word	.L222-.L230,.L511-.L230
	.half	1
	.byte	84
	.word	.L220-.L230,.L521-.L230
	.half	1
	.byte	84
	.word	.L224-.L230,.L506-.L230
	.half	1
	.byte	84
	.word	.L897-.L230,.L904-.L230
	.half	1
	.byte	84
	.word	0,0
.L634:
	.word	-1,.L230,.L869-.L230,.L496-.L230
	.half	1
	.byte	86
	.word	.L222-.L230,.L511-.L230
	.half	1
	.byte	86
	.word	.L220-.L230,.L521-.L230
	.half	1
	.byte	86
	.word	.L224-.L230,.L506-.L230
	.half	1
	.byte	86
	.word	.L897-.L230,.L621-.L230
	.half	1
	.byte	86
	.word	0,0
.L635:
	.word	0,0
.L636:
	.word	-1,.L230,.L224-.L230,.L506-.L230
	.half	1
	.byte	88
	.word	.L905-.L230,.L906-.L230
	.half	1
	.byte	88
	.word	0,0
.L644:
	.word	-1,.L230,.L901-.L230,.L902-.L230
	.half	1
	.byte	95
	.word	0,0
.L646:
	.word	-1,.L230,.L888-.L230,.L506-.L230
	.half	1
	.byte	95
	.word	0,0
.L627:
	.word	-1,.L230,.L224-.L230,.L506-.L230
	.half	1
	.byte	85
	.word	.L899-.L230,.L907-.L230
	.half	1
	.byte	85
	.word	0,0
.L623:
	.word	-1,.L230,.L226-.L230,.L870-.L230
	.half	1
	.byte	84
	.word	.L873-.L230,.L496-.L230
	.half	1
	.byte	88
	.word	.L222-.L230,.L511-.L230
	.half	1
	.byte	88
	.word	.L220-.L230,.L521-.L230
	.half	1
	.byte	88
	.word	.L897-.L230,.L70-.L230
	.half	1
	.byte	88
	.word	0,0
.L622:
	.word	-1,.L230,.L226-.L230,.L496-.L230
	.half	1
	.byte	100
	.word	.L222-.L230,.L511-.L230
	.half	1
	.byte	100
	.word	.L220-.L230,.L521-.L230
	.half	1
	.byte	100
	.word	.L224-.L230,.L506-.L230
	.half	1
	.byte	100
	.word	.L897-.L230,.L621-.L230
	.half	1
	.byte	100
	.word	0,0
.L625:
	.word	-1,.L230,.L226-.L230,.L496-.L230
	.half	1
	.byte	86
	.word	.L874-.L230,.L496-.L230
	.half	1
	.byte	90
	.word	.L222-.L230,.L511-.L230
	.half	1
	.byte	90
	.word	.L220-.L230,.L521-.L230
	.half	1
	.byte	90
	.word	.L224-.L230,.L506-.L230
	.half	1
	.byte	90
	.word	.L897-.L230,.L621-.L230
	.half	1
	.byte	90
	.word	0,0
.L626:
	.word	-1,.L230,.L226-.L230,.L496-.L230
	.half	1
	.byte	87
	.word	.L222-.L230,.L511-.L230
	.half	1
	.byte	87
	.word	.L220-.L230,.L521-.L230
	.half	1
	.byte	87
	.word	.L224-.L230,.L506-.L230
	.half	1
	.byte	87
	.word	.L897-.L230,.L621-.L230
	.half	1
	.byte	87
	.word	0,0
.L628:
	.word	-1,.L230,.L869-.L230,.L496-.L230
	.half	1
	.byte	85
	.word	.L222-.L230,.L511-.L230
	.half	1
	.byte	85
	.word	.L220-.L230,.L521-.L230
	.half	1
	.byte	85
	.word	.L897-.L230,.L899-.L230
	.half	1
	.byte	85
	.word	0,0
.L640:
	.word	-1,.L230,.L876-.L230,.L521-.L230
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L629:
	.word	-1,.L230,.L224-.L230,.L506-.L230
	.half	1
	.byte	81
	.word	.L74-.L230,.L621-.L230
	.half	1
	.byte	81
	.word	0,0
.L643:
	.word	-1,.L230,.L900-.L230,.L74-.L230
	.half	1
	.byte	82
	.word	0,0
.L645:
	.word	-1,.L230,.L886-.L230,.L887-.L230
	.half	1
	.byte	82
	.word	0,0
.L631:
	.word	-1,.L230,.L877-.L230,.L511-.L230
	.half	1
	.byte	91
	.word	.L220-.L230,.L521-.L230
	.half	1
	.byte	91
	.word	.L895-.L230,.L70-.L230
	.half	1
	.byte	91
	.word	0,0
.L630:
	.word	-1,.L230,.L641-.L230,.L74-.L230
	.half	1
	.byte	81
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_setFastBitTimingValues')
	.sect	'.debug_loc'
.L231:
	.word	-1,.L232,0,.L647-.L232
	.half	2
	.byte	138,0
	.word	0,0
.L654:
	.word	-1,.L232,.L908-.L232,.L647-.L232
	.half	1
	.byte	95
	.word	0,0
.L648:
	.word	-1,.L232,0,.L647-.L232
	.half	1
	.byte	100
	.word	0,0
.L652:
	.word	-1,.L232,0,.L647-.L232
	.half	1
	.byte	87
	.word	0,0
.L649:
	.word	-1,.L232,0,.L647-.L232
	.half	1
	.byte	84
	.word	0,0
.L651:
	.word	-1,.L232,0,.L647-.L232
	.half	1
	.byte	86
	.word	0,0
.L650:
	.word	-1,.L232,0,.L647-.L232
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_setFrameMode')
	.sect	'.debug_loc'
.L233:
	.word	-1,.L234,0,.L655-.L234
	.half	2
	.byte	138,0
	.word	0,0
.L657:
	.word	-1,.L234,0,.L655-.L234
	.half	1
	.byte	84
	.word	0,0
.L656:
	.word	-1,.L234,0,.L655-.L234
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_setFrameModeReq')
	.sect	'.debug_loc'
.L235:
	.word	-1,.L236,0,.L658-.L236
	.half	2
	.byte	138,0
	.word	0,0
.L661:
	.word	-1,.L236,0,.L658-.L236
	.half	1
	.byte	84
	.word	0,0
.L660:
	.word	-1,.L236,0,.L658-.L236
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_setFrameModeRequest')
	.sect	'.debug_loc'
.L237:
	.word	-1,.L238,0,.L662-.L238
	.half	2
	.byte	138,0
	.word	0,0
.L665:
	.word	-1,.L238,0,.L662-.L238
	.half	1
	.byte	84
	.word	0,0
.L663:
	.word	-1,.L238,0,.L662-.L238
	.half	1
	.byte	100
	.word	0,0
.L664:
	.word	-1,.L238,0,.L662-.L238
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_setGroupInterruptLine')
	.sect	'.debug_loc'
.L239:
	.word	-1,.L240,0,.L758-.L240
	.half	2
	.byte	138,0
	.word	0,0
.L761:
	.word	-1,.L240,0,.L909-.L240
	.half	1
	.byte	84
	.word	.L94-.L240,.L758-.L240
	.half	1
	.byte	84
	.word	0,0
.L763:
	.word	-1,.L240,0,.L910-.L240
	.half	1
	.byte	85
	.word	.L94-.L240,.L911-.L240
	.half	1
	.byte	85
	.word	0,0
.L759:
	.word	-1,.L240,0,.L758-.L240
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_setInterruptLine')
	.sect	'.debug_loc'
.L241:
	.word	-1,.L242,0,.L764-.L242
	.half	2
	.byte	138,0
	.word	0,0
.L767:
	.word	-1,.L242,0,.L912-.L242
	.half	1
	.byte	84
	.word	.L98-.L242,.L764-.L242
	.half	1
	.byte	84
	.word	0,0
.L768:
	.word	-1,.L242,0,.L912-.L242
	.half	1
	.byte	85
	.word	.L98-.L242,.L764-.L242
	.half	1
	.byte	85
	.word	0,0
.L765:
	.word	-1,.L242,0,.L912-.L242
	.half	1
	.byte	100
	.word	.L98-.L242,.L764-.L242
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_writeData')
	.sect	'.debug_loc'
.L247:
	.word	-1,.L248,0,.L690-.L248
	.half	2
	.byte	138,0
	.word	0,0
.L694:
	.word	-1,.L248,0,.L918-.L248
	.half	1
	.byte	102
	.word	.L246-.L248,.L501-.L248
	.half	1
	.byte	108
	.word	.L695-.L248,.L690-.L248
	.half	1
	.byte	108
	.word	0,0
.L693:
	.word	-1,.L248,0,.L918-.L248
	.half	1
	.byte	84
	.word	0,0
.L696:
	.word	-1,.L248,.L246-.L248,.L501-.L248
	.half	1
	.byte	95
	.word	.L918-.L248,.L690-.L248
	.half	1
	.byte	95
	.word	0,0
.L697:
	.word	-1,.L248,.L246-.L248,.L501-.L248
	.half	1
	.byte	82
	.word	.L920-.L248,.L690-.L248
	.half	1
	.byte	82
	.word	0,0
.L691:
	.word	-1,.L248,0,.L918-.L248
	.half	1
	.byte	100
	.word	0,0
.L692:
	.word	-1,.L248,0,.L918-.L248
	.half	1
	.byte	101
	.word	.L919-.L248,.L918-.L248
	.half	1
	.byte	111
	.word	.L246-.L248,.L915-.L248
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_Node_writeTxBufData')
	.sect	'.debug_loc'
.L243:
	.word	-1,.L244,0,.L682-.L244
	.half	2
	.byte	138,0
	.word	0,0
.L686:
	.word	-1,.L244,0,.L913-.L244
	.half	1
	.byte	101
	.word	.L246-.L244,.L501-.L244
	.half	1
	.byte	108
	.word	.L916-.L244,.L682-.L244
	.half	1
	.byte	108
	.word	0,0
.L684:
	.word	-1,.L244,0,.L913-.L244
	.half	1
	.byte	84
	.word	0,0
.L688:
	.word	-1,.L244,.L915-.L244,.L501-.L244
	.half	1
	.byte	95
	.word	.L913-.L244,.L682-.L244
	.half	1
	.byte	95
	.word	0,0
.L689:
	.word	-1,.L244,.L246-.L244,.L501-.L244
	.half	1
	.byte	82
	.word	.L917-.L244,.L682-.L244
	.half	1
	.byte	82
	.word	0,0
.L683:
	.word	-1,.L244,0,.L913-.L244
	.half	1
	.byte	100
	.word	.L914-.L244,.L913-.L244
	.half	1
	.byte	111
	.word	.L246-.L244,.L915-.L244
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_disableModule')
	.sect	'.debug_loc'
.L249:
	.word	-1,.L250,0,.L769-.L250
	.half	2
	.byte	138,0
	.word	0,0
.L771:
	.word	-1,.L250,0,.L921-.L250
	.half	1
	.byte	100
	.word	.L922-.L250,.L923-.L250
	.half	1
	.byte	111
	.word	.L252-.L250,.L526-.L250
	.half	1
	.byte	111
	.word	.L925-.L250,.L491-.L250
	.half	1
	.byte	111
	.word	.L926-.L250,.L147-.L250
	.half	1
	.byte	111
	.word	0,0
.L777:
	.word	0,0
.L773:
	.word	-1,.L250,.L921-.L250,.L923-.L250
	.half	1
	.byte	82
	.word	.L924-.L250,.L923-.L250
	.half	1
	.byte	88
	.word	.L252-.L250,.L526-.L250
	.half	1
	.byte	88
	.word	.L925-.L250,.L491-.L250
	.half	1
	.byte	88
	.word	.L926-.L250,.L769-.L250
	.half	1
	.byte	88
	.word	.L927-.L250,.L769-.L250
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_enableModule')
	.sect	'.debug_loc'
.L255:
	.word	-1,.L256,0,.L779-.L256
	.half	2
	.byte	138,0
	.word	0,0
.L780:
	.word	-1,.L256,0,.L928-.L256
	.half	1
	.byte	100
	.word	.L929-.L256,.L930-.L256
	.half	1
	.byte	111
	.word	.L252-.L256,.L526-.L256
	.half	1
	.byte	111
	.word	.L925-.L256,.L491-.L256
	.half	1
	.byte	111
	.word	.L932-.L256,.L148-.L256
	.half	1
	.byte	111
	.word	0,0
.L783:
	.word	0,0
.L781:
	.word	-1,.L256,.L928-.L256,.L930-.L256
	.half	1
	.byte	82
	.word	.L931-.L256,.L930-.L256
	.half	1
	.byte	95
	.word	.L252-.L256,.L526-.L256
	.half	1
	.byte	95
	.word	.L925-.L256,.L491-.L256
	.half	1
	.byte	95
	.word	.L932-.L256,.L779-.L256
	.half	1
	.byte	95
	.word	.L933-.L256,.L779-.L256
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_getAddress')
	.sect	'.debug_loc'
.L257:
	.word	-1,.L258,0,.L784-.L258
	.half	2
	.byte	138,0
	.word	0,0
.L786:
	.word	-1,.L258,0,.L784-.L258
	.half	1
	.byte	84
	.word	0,0
.L787:
	.word	-1,.L258,.L934-.L258,.L149-.L258
	.half	1
	.byte	98
	.word	.L935-.L258,.L784-.L258
	.half	1
	.byte	98
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_getIndex')
	.sect	'.debug_loc'
.L259:
	.word	-1,.L260,0,.L788-.L260
	.half	2
	.byte	138,0
	.word	0,0
.L789:
	.word	-1,.L260,0,.L788-.L260
	.half	1
	.byte	100
	.word	0,0
.L790:
	.word	0,0
.L791:
	.word	-1,.L260,.L936-.L260,.L788-.L260
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_getModuleFrequency')
	.sect	'.debug_loc'
.L261:
	.word	-1,.L262,0,.L792-.L262
	.half	2
	.byte	138,0
	.word	0,0
.L793:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_getSrcPointer')
	.sect	'.debug_loc'
.L263:
	.word	-1,.L264,0,.L937-.L264
	.half	2
	.byte	138,0
	.word	.L937-.L264,.L815-.L264
	.half	2
	.byte	138,16
	.word	.L815-.L264,.L815-.L264
	.half	2
	.byte	138,0
	.word	0,0
.L816:
	.word	-1,.L264,0,.L938-.L264
	.half	1
	.byte	100
	.word	0,0
.L818:
	.word	-1,.L264,.L938-.L264,.L815-.L264
	.half	1
	.byte	82
	.word	0,0
.L817:
	.word	-1,.L264,0,.L938-.L264
	.half	1
	.byte	84
	.word	.L938-.L264,.L815-.L264
	.half	1
	.byte	95
	.word	0,0
.L820:
	.word	-1,.L264,0,.L815-.L264
	.half	2
	.byte	145,112
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_resetModule')
	.sect	'.debug_loc'
.L265:
	.word	-1,.L266,0,.L794-.L266
	.half	2
	.byte	138,0
	.word	0,0
.L795:
	.word	-1,.L266,0,.L939-.L266
	.half	1
	.byte	100
	.word	.L940-.L266,.L941-.L266
	.half	1
	.byte	111
	.word	.L252-.L266,.L526-.L266
	.half	1
	.byte	111
	.word	.L943-.L266,.L944-.L266
	.half	1
	.byte	111
	.word	.L945-.L266,.L946-.L266
	.half	1
	.byte	111
	.word	.L947-.L266,.L794-.L266
	.half	1
	.byte	111
	.word	0,0
.L796:
	.word	-1,.L266,.L939-.L266,.L941-.L266
	.half	1
	.byte	82
	.word	.L942-.L266,.L941-.L266
	.half	1
	.byte	88
	.word	.L252-.L266,.L526-.L266
	.half	1
	.byte	88
	.word	.L943-.L266,.L944-.L266
	.half	1
	.byte	88
	.word	.L945-.L266,.L946-.L266
	.half	1
	.byte	88
	.word	.L947-.L266,.L794-.L266
	.half	1
	.byte	88
	.word	.L948-.L266,.L794-.L266
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCan_setClockSource')
	.sect	'.debug_loc'
.L267:
	.word	-1,.L268,0,.L797-.L268
	.half	2
	.byte	138,0
	.word	0,0
.L798:
	.word	-1,.L268,.L270-.L268,.L516-.L268
	.half	1
	.byte	100
	.word	0,.L797-.L268
	.half	1
	.byte	100
	.word	0,0
.L800:
	.word	-1,.L268,.L270-.L268,.L516-.L268
	.half	1
	.byte	84
	.word	0,.L797-.L268
	.half	1
	.byte	84
	.word	0,0
.L802:
	.word	-1,.L268,.L270-.L268,.L516-.L268
	.half	1
	.byte	85
	.word	0,.L797-.L268
	.half	1
	.byte	85
	.word	0,0
.L805:
	.word	-1,.L268,.L270-.L268,.L516-.L268
	.half	5
	.byte	144,32,157,32,0
	.word	.L949-.L268,.L797-.L268
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1398:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_clearRxBufferNewDataFlag')
	.sect	'.debug_frame'
	.word	24
	.word	.L1398,.L174,.L698-.L174
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_getDataLength')
	.sect	'.debug_frame'
	.word	24
	.word	.L1398,.L176,.L528-.L176
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_getDataLengthFromCode')
	.sect	'.debug_frame'
	.word	24
	.word	.L1398,.L180,.L533-.L180
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_getExtendedFilterElementAddress')
	.sect	'.debug_frame'
	.word	24
	.word	.L1398,.L182,.L749-.L182
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_getFrameMode')
	.sect	'.debug_frame'
	.word	24
	.word	.L1398,.L184,.L539-.L184
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_getFrameModeFromTxEventFifo')
	.sect	'.debug_frame'
	.word	24
	.word	.L1398,.L186,.L806-.L186
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_getRxBufferDataFieldSize')
	.sect	'.debug_frame'
	.word	24
	.word	.L1398,.L188,.L703-.L188
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_getRxBufferElementAddress')
	.sect	'.debug_frame'
	.word	12
	.word	.L1398,.L190,.L707-.L190
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_getRxFifo0DataFieldSize')
	.sect	'.debug_frame'
	.word	24
	.word	.L1398,.L194,.L715-.L194
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_getRxFifo0ElementAddress')
	.sect	'.debug_frame'
	.word	12
	.word	.L1398,.L196,.L719-.L196
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_getRxFifo1DataFieldSize')
	.sect	'.debug_frame'
	.word	24
	.word	.L1398,.L198,.L726-.L198
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_getRxFifo1ElementAddress')
	.sect	'.debug_frame'
	.word	12
	.word	.L1398,.L200,.L730-.L200
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_getStandardFilterElementAddress')
	.sect	'.debug_frame'
	.word	24
	.word	.L1398,.L202,.L754-.L202
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_getTxBufferDataFieldSize')
	.sect	'.debug_frame'
	.word	24
	.word	.L1398,.L204,.L669-.L204
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_getTxBufferElementAddress')
	.sect	'.debug_frame'
	.word	12
	.word	.L1398,.L206,.L674-.L206
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_getTxEventFifoElementAddress')
	.sect	'.debug_frame'
	.word	24
	.word	.L1398,.L208,.L810-.L208
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_initRxPin')
	.sect	'.debug_frame'
	.word	12
	.word	.L1398,.L210,.L544-.L210
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_initTxPin')
	.sect	'.debug_frame'
	.word	12
	.word	.L1398,.L212,.L562-.L212
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_isRxBufferNewDataUpdated')
	.sect	'.debug_frame'
	.word	24
	.word	.L1398,.L214,.L737-.L214
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_readData')
	.sect	'.debug_frame'
	.word	12
	.word	.L1398,.L216,.L742-.L216
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_setBitTiming')
	.sect	'.debug_frame'
	.word	24
	.word	.L1398,.L218,.L580-.L218
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_setBitTimingValues')
	.sect	'.debug_frame'
	.word	24
	.word	.L1398,.L228,.L613-.L228
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_setFastBitTiming')
	.sect	'.debug_frame'
	.word	24
	.word	.L1398,.L230,.L621-.L230
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_setFastBitTimingValues')
	.sect	'.debug_frame'
	.word	24
	.word	.L1398,.L232,.L647-.L232
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_setFrameMode')
	.sect	'.debug_frame'
	.word	24
	.word	.L1398,.L234,.L655-.L234
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_setFrameModeReq')
	.sect	'.debug_frame'
	.word	24
	.word	.L1398,.L236,.L658-.L236
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_setFrameModeRequest')
	.sect	'.debug_frame'
	.word	24
	.word	.L1398,.L238,.L662-.L238
	.byte	8,18,8,19,8,20,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_setGroupInterruptLine')
	.sect	'.debug_frame'
	.word	24
	.word	.L1398,.L240,.L758-.L240
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_setInterruptLine')
	.sect	'.debug_frame'
	.word	24
	.word	.L1398,.L242,.L764-.L242
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_writeTxBufData')
	.sect	'.debug_frame'
	.word	12
	.word	.L1398,.L244,.L682-.L244
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_writeData')
	.sect	'.debug_frame'
	.word	12
	.word	.L1398,.L248,.L690-.L248
	.sdecl	'.debug_frame',debug,cluster('IfxCan_disableModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L1398,.L250,.L769-.L250
	.sdecl	'.debug_frame',debug,cluster('IfxCan_enableModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L1398,.L256,.L779-.L256
	.sdecl	'.debug_frame',debug,cluster('IfxCan_getAddress')
	.sect	'.debug_frame'
	.word	24
	.word	.L1398,.L258,.L784-.L258
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCan_getIndex')
	.sect	'.debug_frame'
	.word	20
	.word	.L1398,.L260,.L788-.L260
	.byte	8,19,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCan_getModuleFrequency')
	.sect	'.debug_frame'
	.word	12
	.word	.L1398,.L262,.L792-.L262
	.sdecl	'.debug_frame',debug,cluster('IfxCan_getSrcPointer')
	.sect	'.debug_frame'
	.word	36
	.word	.L1398,.L264,.L815-.L264
	.byte	4
	.word	(.L937-.L264)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L815-.L937)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCan_resetModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L1398,.L266,.L794-.L266
	.sdecl	'.debug_frame',debug,cluster('IfxCan_setClockSource')
	.sect	'.debug_frame'
	.word	24
	.word	.L1398,.L268,.L797-.L268
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCan_Node_getDataLengthInBytes')
	.sect	'.debug_frame'
	.word	24
	.word	.L1398,.L272,.L666-.L272
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1399:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_7')
	.sect	'.debug_frame'
	.word	24
	.word	.L1399,.L178,.L486-.L178
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_6')
	.sect	'.debug_frame'
	.word	24
	.word	.L1399,.L192,.L481-.L192
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_14')
	.sect	'.debug_frame'
	.word	24
	.word	.L1399,.L220,.L521-.L220
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_12')
	.sect	'.debug_frame'
	.word	24
	.word	.L1399,.L222,.L511-.L222
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_11')
	.sect	'.debug_frame'
	.word	24
	.word	.L1399,.L224,.L506-.L224
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_9')
	.sect	'.debug_frame'
	.word	24
	.word	.L1399,.L226,.L496-.L226
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_10')
	.sect	'.debug_frame'
	.word	24
	.word	.L1399,.L246,.L501-.L246
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_15')
	.sect	'.debug_frame'
	.word	24
	.word	.L1399,.L252,.L526-.L252
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_8')
	.sect	'.debug_frame'
	.word	24
	.word	.L1399,.L254,.L491-.L254
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_13')
	.sect	'.debug_frame'
	.word	24
	.word	.L1399,.L270,.L516-.L270
	.byte	8,18,8,19,8,20,8,21,8,22,8,23


	; Module end
