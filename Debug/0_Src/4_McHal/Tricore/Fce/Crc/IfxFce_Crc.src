	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\4_McHal\\Tricore\\Fce\\Crc\\.IfxFce_Crc.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include\\libc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\4_McHal\\Tricore\\Fce\\Crc\\IfxFce_Crc.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\4_McHal\\Tricore\\Fce\\Crc\\IfxFce_Crc.src ..\\0_Src\\4_McHal\\Tricore\\Fce\\Crc\\IfxFce_Crc.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\4_McHal\\Tricore\\Fce\\Crc\\IfxFce_Crc.c'

	
$TC162
	.sdecl	'.zrodata.IfxFce..2.cnt',data,rom
	.sect	'.zrodata.IfxFce..2.cnt'
	.align	2
.2.cnt:	.type	object
	.size	.2.cnt,4
	.word	-87110914
	.sdecl	'.zrodata.IfxSrc..3.cnt',data,rom
	.sect	'.zrodata.IfxSrc..3.cnt'
	.align	2
.3.cnt:	.type	object
	.size	.3.cnt,4
	.word	-268205264
	.sdecl	'.zrodata.IfxSrc..4.cnt',data,rom
	.sect	'.zrodata.IfxSrc..4.cnt'
	.align	2
.4.cnt:	.type	object
	.size	.4.cnt,4
	.word	-268205263
	.sdecl	'.zrodata.IfxSrc..5.cnt',data,rom
	.sect	'.zrodata.IfxSrc..5.cnt'
	.align	2
.5.cnt:	.type	object
	.size	.5.cnt,4
	.word	-268205261
	
	.sdecl	'.text.IfxFce_Crc.IfxFce_Crc_calculateCrc',code,cluster('IfxFce_Crc_calculateCrc')
	.sect	'.text.IfxFce_Crc.IfxFce_Crc_calculateCrc'
	.align	2
	
	.global	IfxFce_Crc_calculateCrc

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	     1  /**
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	     2   * \file IfxFce_Crc.c
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	     3   * \brief FCE CRC details
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	     4   *
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	     5   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	     6   * \copyright Copyright (c) 2017 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	     7   *
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	     8   *
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	     9   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    10   *
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    11   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    12   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    13   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    14   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    15   *
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    16   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    17   *
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    18   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    19   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    20   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    21   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    22   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    23   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    24   *
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    25   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    26   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    27   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    28   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    29   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    30   * language processor.
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    31   *
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    32   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    33   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    34   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    35   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    36   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    37   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    38   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    39   *
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    40   *
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    41   */
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    42  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    43  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    44  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    45  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    46  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    47  #include "IfxFce_Crc.h"
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    48  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    49  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    50  /*-------------------------Function Implementations---------------------------*/
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    51  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    52  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    53  uint32 IfxFce_Crc_calculateCrc(IfxFce_Crc_Crc *fce, const uint32 *crcData, uint16 crcDataLength, uint32 crcStartValue)
; Function IfxFce_Crc_calculateCrc
.L18:
IfxFce_Crc_calculateCrc:	.type	func
	mov.aa	a15,a4
.L318:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    54  {
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    55      Ifx_FCE          *fceSFR     = fce->fce;
	ld.a	a4,[a15]
.L307:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    56      IfxFce_CrcChannel crcChannel = fce->crcChannel;
	ld.bu	d15,[a15]21
.L100:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     2   * \file IfxFce.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     3   * \brief FCE  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     4   * \ingroup IfxLld_Fce
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    42   * \defgroup IfxLld_Fce_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    43   * \ingroup IfxLld_Fce_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    44   * \defgroup IfxLld_Fce_Std_Module Module Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    45   * \ingroup IfxLld_Fce_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    46   * \defgroup IfxLld_Fce_Std_Support Support Function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    47   * \ingroup IfxLld_Fce_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    48   * \defgroup IfxLld_Fce_Std_InterruptStatus Interrupt Status Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    49   * \ingroup IfxLld_Fce_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    50   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    51  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    52  #ifndef IFXFCE_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    53  #define IFXFCE_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    55  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    56  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    57  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    59  #include "_Impl/IfxFce_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    60  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    62  #include "IfxFce_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    63  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    64  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    66  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    67  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    69  /** \addtogroup IfxLld_Fce_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    70   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    71  /** \brief Ifx_FCE_CHx(x= 0,1), Specifies the channel used for CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    75      IfxFce_CrcChannel_0 = 0,      /**< \brief Specifies the channel0 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    76      IfxFce_CrcChannel_1,          /**< \brief Specifies the channel1 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    77      IfxFce_CrcChannel_2,          /**< \brief Specifies the channel2 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    78      IfxFce_CrcChannel_3,          /**< \brief Specifies the channel3 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    79      IfxFce_CrcChannel_4,          /**< \brief Specifies the channel4 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    80      IfxFce_CrcChannel_5,          /**< \brief Specifies the channel5 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    81      IfxFce_CrcChannel_6,          /**< \brief Specifies the channel6 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    82      IfxFce_CrcChannel_7           /**< \brief Specifies the channel7 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    83  } IfxFce_CrcChannel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    84  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    85  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    86  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    87  /** \brief Specify the CRC kernel used by the fce channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    88   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    89  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    90  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    91      IfxFce_CrcKernel_0 = 0,  /**< \brief Specifies to use kernel 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    92      IfxFce_CrcKernel_1 = 1,  /**< \brief Specifies to use kernel 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    93      IfxFce_CrcKernel_2 = 2,  /**< \brief Specifies to use kernel 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    94      IfxFce_CrcKernel_3 = 3   /**< \brief Specifies to use kernel 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    95  } IfxFce_CrcKernel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    97  /** \addtogroup IfxLld_Fce_Std_Module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    98   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   100  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   101  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   102  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   103  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   104  /** \brief Disable the control of FCE module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   105   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   106   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   107   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   108  IFX_INLINE void IfxFce_disableModule(Ifx_FCE *fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   109  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   110  /** \brief Enable the control of FCE module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   111   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   112   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   113   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   114  IFX_INLINE void IfxFce_enableModule(Ifx_FCE *fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   116  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   117  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   118  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   119  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   120  /** \brief Reset the module by clearing the kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   121   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   122   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   124  IFX_EXTERN void IfxFce_resetModule(Ifx_FCE *fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   125  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   126  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   127  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   128  /** \addtogroup IfxLld_Fce_Std_Support
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   129   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   131  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   132  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   133  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   135  /** \brief Reflects the CRC data and returns it
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   136   * \param crcStartValue start value for reflection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   137   * \param crcLength length of reflected value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   138   * \return Reflected CRC data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   140  IFX_EXTERN uint32 IfxFce_reflectCrc32(uint32 crcStartValue, uint8 crcLength);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   142  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   144  /** \addtogroup IfxLld_Fce_Std_InterruptStatus
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   145   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   147  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   148  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   149  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   150  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   151  /** \brief Returns the SRC pointer for FCE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   152   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   153   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   154  IFX_INLINE volatile Ifx_SRC_SRCR *IfxFce_getSrcPointer(Ifx_FCE *fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   155  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   156  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   162  /** \brief Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   163   * \param fce Specifies the pointer to FCE module handler
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   164   * \param channel Specifies the Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   167  IFX_INLINE void IfxFce_clearCrcErrorFlags(Ifx_FCE *fce, IfxFce_CrcChannel channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   169  /** \brief Gets the CRC interrupt status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   170   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   171   * \param channel Specifies the Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   172   * \return Return Crc Interrupt Status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   174  IFX_INLINE Ifx_FCE_IN_STS IfxFce_getCrcInterruptStatus(Ifx_FCE *fce, IfxFce_CrcChannel channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   176  /** \brief Set the length of over which CRC checksum is calculated.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   177   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   178   * \param channel Specifies the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   179   * \param crcLength Specifies the Length of CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   180   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   181   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   182  IFX_INLINE void IfxFce_setChannelCrcLength(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 crcLength);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   184  /** \brief Set the CRC start value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   185   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   186   * \param channel Specifies the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   187   * \param crcStartValue Set the crc value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   188   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   189   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   190  IFX_INLINE void IfxFce_setCrcstartValue(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 crcStartValue);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   192  /** \brief Set expected crc value to be checked.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   193   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   194   * \param channel Specifies the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   195   * \param expectedCrc Expected CRC value to be checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   196   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   198  IFX_INLINE void IfxFce_setExpectedCrc(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 expectedCrc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   199  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   200  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   201  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   202  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   204  IFX_INLINE void IfxFce_clearCrcErrorFlags(Ifx_FCE *fce, IfxFce_CrcChannel channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   205  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   206      fce->IN[channel].STS.U = 0x00000000U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   207  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   209  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   210  IFX_INLINE void IfxFce_disableModule(Ifx_FCE *fce)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   212      uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   213      IfxScuWdt_clearCpuEndinit(password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   214      fce->CLC.B.DISR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   215      IfxScuWdt_setCpuEndinit(password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   216  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   217  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   219  IFX_INLINE void IfxFce_enableModule(Ifx_FCE *fce)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   220  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   221      uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   222      IfxScuWdt_clearCpuEndinit(password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   223      fce->CLC.B.DISR = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   224      IfxScuWdt_setCpuEndinit(password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   225  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   226  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   228  IFX_INLINE Ifx_FCE_IN_STS IfxFce_getCrcInterruptStatus(Ifx_FCE *fce, IfxFce_CrcChannel channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   229  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   230      Ifx_FCE_IN_STS interruptStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   231      interruptStatus.U = fce->IN[channel].STS.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   233      return interruptStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   234  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   235  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   237  IFX_INLINE volatile Ifx_SRC_SRCR *IfxFce_getSrcPointer(Ifx_FCE *fce)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   239      IFX_UNUSED_PARAMETER(fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   240      return &SRC_FCE0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   241  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   242  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   244  IFX_INLINE void IfxFce_setChannelCrcLength(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 crcLength)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   245  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   246      /*write the dafault value 0xFACECAFE to the register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   247      fce->IN[channel].LENGTH.U = 0xFACECAFE;
	ld.w	d0,.2.cnt
.L344:
	sha	d15,#5
.L308:
	addsc.a	a2,a4,d15,#0
.L345:
	st.w	[a2]272,d0
.L346:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   248      fce->IN[channel].LENGTH.U = crcLength;
	st.w	[a2]272,d4
.L101:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    57      uint32            inputDataCounter;
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    58      uint32            crcResultValue;
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    59      uint32           *dataPtr = (uint32 *)crcData;
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    60  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    61      /*set the Legth*/
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    62      IfxFce_setChannelCrcLength(fce->fce, crcChannel, crcDataLength);
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    63  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    64      /*set the expected CRC*/
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    65      IfxFce_setExpectedCrc(fce->fce, crcChannel, fce->expectedCrc);
	ld.a	a2,[a15]
.L347:
	ld.w	d1,[a15]4
.L110:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     2   * \file IfxFce.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     3   * \brief FCE  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     4   * \ingroup IfxLld_Fce
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    42   * \defgroup IfxLld_Fce_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    43   * \ingroup IfxLld_Fce_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    44   * \defgroup IfxLld_Fce_Std_Module Module Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    45   * \ingroup IfxLld_Fce_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    46   * \defgroup IfxLld_Fce_Std_Support Support Function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    47   * \ingroup IfxLld_Fce_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    48   * \defgroup IfxLld_Fce_Std_InterruptStatus Interrupt Status Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    49   * \ingroup IfxLld_Fce_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    50   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    51  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    52  #ifndef IFXFCE_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    53  #define IFXFCE_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    55  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    56  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    57  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    59  #include "_Impl/IfxFce_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    60  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    62  #include "IfxFce_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    63  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    64  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    66  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    67  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    69  /** \addtogroup IfxLld_Fce_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    70   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    71  /** \brief Ifx_FCE_CHx(x= 0,1), Specifies the channel used for CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    75      IfxFce_CrcChannel_0 = 0,      /**< \brief Specifies the channel0 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    76      IfxFce_CrcChannel_1,          /**< \brief Specifies the channel1 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    77      IfxFce_CrcChannel_2,          /**< \brief Specifies the channel2 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    78      IfxFce_CrcChannel_3,          /**< \brief Specifies the channel3 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    79      IfxFce_CrcChannel_4,          /**< \brief Specifies the channel4 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    80      IfxFce_CrcChannel_5,          /**< \brief Specifies the channel5 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    81      IfxFce_CrcChannel_6,          /**< \brief Specifies the channel6 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    82      IfxFce_CrcChannel_7           /**< \brief Specifies the channel7 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    83  } IfxFce_CrcChannel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    84  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    85  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    86  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    87  /** \brief Specify the CRC kernel used by the fce channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    88   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    89  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    90  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    91      IfxFce_CrcKernel_0 = 0,  /**< \brief Specifies to use kernel 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    92      IfxFce_CrcKernel_1 = 1,  /**< \brief Specifies to use kernel 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    93      IfxFce_CrcKernel_2 = 2,  /**< \brief Specifies to use kernel 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    94      IfxFce_CrcKernel_3 = 3   /**< \brief Specifies to use kernel 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    95  } IfxFce_CrcKernel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    97  /** \addtogroup IfxLld_Fce_Std_Module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    98   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   100  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   101  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   102  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   103  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   104  /** \brief Disable the control of FCE module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   105   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   106   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   107   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   108  IFX_INLINE void IfxFce_disableModule(Ifx_FCE *fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   109  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   110  /** \brief Enable the control of FCE module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   111   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   112   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   113   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   114  IFX_INLINE void IfxFce_enableModule(Ifx_FCE *fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   116  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   117  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   118  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   119  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   120  /** \brief Reset the module by clearing the kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   121   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   122   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   124  IFX_EXTERN void IfxFce_resetModule(Ifx_FCE *fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   125  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   126  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   127  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   128  /** \addtogroup IfxLld_Fce_Std_Support
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   129   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   131  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   132  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   133  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   135  /** \brief Reflects the CRC data and returns it
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   136   * \param crcStartValue start value for reflection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   137   * \param crcLength length of reflected value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   138   * \return Reflected CRC data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   140  IFX_EXTERN uint32 IfxFce_reflectCrc32(uint32 crcStartValue, uint8 crcLength);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   142  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   144  /** \addtogroup IfxLld_Fce_Std_InterruptStatus
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   145   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   147  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   148  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   149  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   150  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   151  /** \brief Returns the SRC pointer for FCE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   152   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   153   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   154  IFX_INLINE volatile Ifx_SRC_SRCR *IfxFce_getSrcPointer(Ifx_FCE *fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   155  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   156  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   162  /** \brief Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   163   * \param fce Specifies the pointer to FCE module handler
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   164   * \param channel Specifies the Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   167  IFX_INLINE void IfxFce_clearCrcErrorFlags(Ifx_FCE *fce, IfxFce_CrcChannel channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   169  /** \brief Gets the CRC interrupt status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   170   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   171   * \param channel Specifies the Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   172   * \return Return Crc Interrupt Status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   174  IFX_INLINE Ifx_FCE_IN_STS IfxFce_getCrcInterruptStatus(Ifx_FCE *fce, IfxFce_CrcChannel channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   176  /** \brief Set the length of over which CRC checksum is calculated.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   177   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   178   * \param channel Specifies the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   179   * \param crcLength Specifies the Length of CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   180   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   181   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   182  IFX_INLINE void IfxFce_setChannelCrcLength(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 crcLength);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   184  /** \brief Set the CRC start value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   185   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   186   * \param channel Specifies the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   187   * \param crcStartValue Set the crc value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   188   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   189   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   190  IFX_INLINE void IfxFce_setCrcstartValue(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 crcStartValue);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   192  /** \brief Set expected crc value to be checked.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   193   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   194   * \param channel Specifies the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   195   * \param expectedCrc Expected CRC value to be checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   196   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   198  IFX_INLINE void IfxFce_setExpectedCrc(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 expectedCrc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   199  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   200  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   201  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   202  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   204  IFX_INLINE void IfxFce_clearCrcErrorFlags(Ifx_FCE *fce, IfxFce_CrcChannel channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   205  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   206      fce->IN[channel].STS.U = 0x00000000U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   207  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   209  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   210  IFX_INLINE void IfxFce_disableModule(Ifx_FCE *fce)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   212      uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   213      IfxScuWdt_clearCpuEndinit(password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   214      fce->CLC.B.DISR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   215      IfxScuWdt_setCpuEndinit(password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   216  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   217  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   219  IFX_INLINE void IfxFce_enableModule(Ifx_FCE *fce)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   220  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   221      uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   222      IfxScuWdt_clearCpuEndinit(password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   223      fce->CLC.B.DISR = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   224      IfxScuWdt_setCpuEndinit(password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   225  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   226  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   228  IFX_INLINE Ifx_FCE_IN_STS IfxFce_getCrcInterruptStatus(Ifx_FCE *fce, IfxFce_CrcChannel channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   229  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   230      Ifx_FCE_IN_STS interruptStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   231      interruptStatus.U = fce->IN[channel].STS.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   233      return interruptStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   234  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   235  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   237  IFX_INLINE volatile Ifx_SRC_SRCR *IfxFce_getSrcPointer(Ifx_FCE *fce)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   239      IFX_UNUSED_PARAMETER(fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   240      return &SRC_FCE0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   241  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   242  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   244  IFX_INLINE void IfxFce_setChannelCrcLength(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 crcLength)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   245  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   246      /*write the dafault value 0xFACECAFE to the register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   247      fce->IN[channel].LENGTH.U = 0xFACECAFE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   248      fce->IN[channel].LENGTH.U = crcLength;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   249  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   250  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   252  IFX_INLINE void IfxFce_setCrcstartValue(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 crcStartValue)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   253  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   254      fce->IN[channel].CRC.U = crcStartValue;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   255  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   258  IFX_INLINE void IfxFce_setExpectedCrc(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 expectedCrc)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   259  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   260      /*write the dafault value 0xFACECAFE to the register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   261      fce->IN[channel].CHECK.U = 0xFACECAFE;
	addsc.a	a2,a2,d15,#0
.L348:
	st.w	[a2]276,d0
.L349:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   262      fce->IN[channel].CHECK.U = expectedCrc;
	st.w	[a2]276,d1
.L111:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    66  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    67      /*Configure CRC register*/
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    68      IfxFce_setCrcstartValue(fce->fce, crcChannel, crcStartValue);
	ld.a	a2,[a15]
.L350:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     2   * \file IfxFce.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     3   * \brief FCE  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     4   * \ingroup IfxLld_Fce
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    42   * \defgroup IfxLld_Fce_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    43   * \ingroup IfxLld_Fce_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    44   * \defgroup IfxLld_Fce_Std_Module Module Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    45   * \ingroup IfxLld_Fce_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    46   * \defgroup IfxLld_Fce_Std_Support Support Function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    47   * \ingroup IfxLld_Fce_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    48   * \defgroup IfxLld_Fce_Std_InterruptStatus Interrupt Status Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    49   * \ingroup IfxLld_Fce_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    50   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    51  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    52  #ifndef IFXFCE_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    53  #define IFXFCE_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    55  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    56  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    57  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    59  #include "_Impl/IfxFce_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    60  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    62  #include "IfxFce_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    63  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    64  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    66  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    67  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    69  /** \addtogroup IfxLld_Fce_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    70   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    71  /** \brief Ifx_FCE_CHx(x= 0,1), Specifies the channel used for CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    75      IfxFce_CrcChannel_0 = 0,      /**< \brief Specifies the channel0 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    76      IfxFce_CrcChannel_1,          /**< \brief Specifies the channel1 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    77      IfxFce_CrcChannel_2,          /**< \brief Specifies the channel2 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    78      IfxFce_CrcChannel_3,          /**< \brief Specifies the channel3 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    79      IfxFce_CrcChannel_4,          /**< \brief Specifies the channel4 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    80      IfxFce_CrcChannel_5,          /**< \brief Specifies the channel5 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    81      IfxFce_CrcChannel_6,          /**< \brief Specifies the channel6 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    82      IfxFce_CrcChannel_7           /**< \brief Specifies the channel7 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    83  } IfxFce_CrcChannel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    84  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    85  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    86  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    87  /** \brief Specify the CRC kernel used by the fce channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    88   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    89  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    90  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    91      IfxFce_CrcKernel_0 = 0,  /**< \brief Specifies to use kernel 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    92      IfxFce_CrcKernel_1 = 1,  /**< \brief Specifies to use kernel 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    93      IfxFce_CrcKernel_2 = 2,  /**< \brief Specifies to use kernel 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    94      IfxFce_CrcKernel_3 = 3   /**< \brief Specifies to use kernel 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    95  } IfxFce_CrcKernel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    97  /** \addtogroup IfxLld_Fce_Std_Module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    98   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   100  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   101  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   102  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   103  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   104  /** \brief Disable the control of FCE module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   105   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   106   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   107   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   108  IFX_INLINE void IfxFce_disableModule(Ifx_FCE *fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   109  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   110  /** \brief Enable the control of FCE module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   111   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   112   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   113   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   114  IFX_INLINE void IfxFce_enableModule(Ifx_FCE *fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   116  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   117  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   118  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   119  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   120  /** \brief Reset the module by clearing the kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   121   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   122   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   124  IFX_EXTERN void IfxFce_resetModule(Ifx_FCE *fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   125  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   126  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   127  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   128  /** \addtogroup IfxLld_Fce_Std_Support
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   129   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   131  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   132  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   133  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   135  /** \brief Reflects the CRC data and returns it
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   136   * \param crcStartValue start value for reflection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   137   * \param crcLength length of reflected value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   138   * \return Reflected CRC data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   140  IFX_EXTERN uint32 IfxFce_reflectCrc32(uint32 crcStartValue, uint8 crcLength);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   142  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   144  /** \addtogroup IfxLld_Fce_Std_InterruptStatus
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   145   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   147  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   148  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   149  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   150  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   151  /** \brief Returns the SRC pointer for FCE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   152   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   153   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   154  IFX_INLINE volatile Ifx_SRC_SRCR *IfxFce_getSrcPointer(Ifx_FCE *fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   155  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   156  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   162  /** \brief Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   163   * \param fce Specifies the pointer to FCE module handler
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   164   * \param channel Specifies the Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   167  IFX_INLINE void IfxFce_clearCrcErrorFlags(Ifx_FCE *fce, IfxFce_CrcChannel channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   169  /** \brief Gets the CRC interrupt status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   170   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   171   * \param channel Specifies the Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   172   * \return Return Crc Interrupt Status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   174  IFX_INLINE Ifx_FCE_IN_STS IfxFce_getCrcInterruptStatus(Ifx_FCE *fce, IfxFce_CrcChannel channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   176  /** \brief Set the length of over which CRC checksum is calculated.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   177   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   178   * \param channel Specifies the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   179   * \param crcLength Specifies the Length of CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   180   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   181   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   182  IFX_INLINE void IfxFce_setChannelCrcLength(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 crcLength);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   184  /** \brief Set the CRC start value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   185   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   186   * \param channel Specifies the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   187   * \param crcStartValue Set the crc value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   188   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   189   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   190  IFX_INLINE void IfxFce_setCrcstartValue(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 crcStartValue);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   192  /** \brief Set expected crc value to be checked.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   193   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   194   * \param channel Specifies the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   195   * \param expectedCrc Expected CRC value to be checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   196   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   198  IFX_INLINE void IfxFce_setExpectedCrc(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 expectedCrc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   199  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   200  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   201  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   202  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   204  IFX_INLINE void IfxFce_clearCrcErrorFlags(Ifx_FCE *fce, IfxFce_CrcChannel channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   205  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   206      fce->IN[channel].STS.U = 0x00000000U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   207  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   209  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   210  IFX_INLINE void IfxFce_disableModule(Ifx_FCE *fce)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   212      uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   213      IfxScuWdt_clearCpuEndinit(password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   214      fce->CLC.B.DISR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   215      IfxScuWdt_setCpuEndinit(password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   216  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   217  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   219  IFX_INLINE void IfxFce_enableModule(Ifx_FCE *fce)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   220  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   221      uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   222      IfxScuWdt_clearCpuEndinit(password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   223      fce->CLC.B.DISR = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   224      IfxScuWdt_setCpuEndinit(password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   225  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   226  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   228  IFX_INLINE Ifx_FCE_IN_STS IfxFce_getCrcInterruptStatus(Ifx_FCE *fce, IfxFce_CrcChannel channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   229  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   230      Ifx_FCE_IN_STS interruptStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   231      interruptStatus.U = fce->IN[channel].STS.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   233      return interruptStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   234  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   235  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   237  IFX_INLINE volatile Ifx_SRC_SRCR *IfxFce_getSrcPointer(Ifx_FCE *fce)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   238  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   239      IFX_UNUSED_PARAMETER(fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   240      return &SRC_FCE0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   241  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   242  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   243  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   244  IFX_INLINE void IfxFce_setChannelCrcLength(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 crcLength)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   245  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   246      /*write the dafault value 0xFACECAFE to the register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   247      fce->IN[channel].LENGTH.U = 0xFACECAFE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   248      fce->IN[channel].LENGTH.U = crcLength;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   249  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   250  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   252  IFX_INLINE void IfxFce_setCrcstartValue(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 crcStartValue)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   253  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   254      fce->IN[channel].CRC.U = crcStartValue;
	addsc.a	a2,a2,d15,#0
.L351:
	st.w	[a2]280,d5
.L120:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    69  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    70      volatile Ifx_FCE_IN_IR *InputData = &fceSFR->IN[fce->crcChannel].IR;
	ld.bu	d15,[a15]21
	sha	d15,#5
.L352:
	addsc.a	a2,a4,d15,#0
.L353:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    71  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    72      if (fce->useDma == TRUE)
	ld.bu	d15,[a15]20
.L354:
	lea	a2,[a2]256
.L309:
	jne	d15,#1,.L2
.L131:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    73      {
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    74          IfxDma_ChannelIncrementStep dmaIncrementStep;
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    75          IfxDma_ChannelMoveSize      dmaChannelsize;
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    76  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    77          if ((fce->crcKernel == IfxFce_CrcKernel_0) || (fce->crcKernel == IfxFce_CrcKernel_1))
	ld.bu	d15,[a15]22
.L355:
	jeq	d15,#0,.L3
.L356:
	jne	d15,#1,.L4
.L3:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    78          {
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    79              dmaIncrementStep = IfxDma_ChannelIncrementStep_1;
	mov	d2,#0
.L310:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    80              dmaChannelsize   = IfxDma_ChannelMoveSize_32bit;
	mov	d3,#2
	j	.L5
.L4:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    81          }
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    82          else if (fce->crcKernel == IfxFce_CrcKernel_2)
	jne	d15,#2,.L6
.L357:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    83          {
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    84              dmaIncrementStep = IfxDma_ChannelIncrementStep_2;
	mov	d2,#1
.L311:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    85              dmaChannelsize   = IfxDma_ChannelMoveSize_16bit;
	mov	d3,d2
	j	.L7
.L6:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    86          }
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    87          else
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    88          {
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    89              dmaIncrementStep = IfxDma_ChannelIncrementStep_4;
	mov	d2,#2
.L317:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    90              dmaChannelsize   = IfxDma_ChannelMoveSize_8bit;
	mov	d3,#0
.L7:
.L5:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    91          }
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    92  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    93          IfxDma_setChannelSourceAddress(fce->fceDmaChannel.dma, fce->fceDmaChannel.channelId, (void *)IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreIndex(), crcData));
	mov.d	d0,a5
.L312:
	insert	d15,d0,#0,#0,#28
	movh	d1,#53248
	jne	d15,d1,.L8
.L138:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return module;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      return (IfxCpu_Id)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   872  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   873  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   874  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   875  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   876  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   877      uint32 reg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   878      reg = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L139:
	insert	d0,d0,#0,#20,#12
.L142:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return module;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      return (IfxCpu_Id)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   872  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   873  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   874  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   875  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   876  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   877      uint32 reg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   878      reg = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   879      return (IfxCpu_ResourceCpu)__minu(reg, 5);
	min.u	d15,d15,#5
.L313:
	extr.u	d15,d15,#0,#8
.L143:
	insert	d0,d0,#7,#28,#3
	sh	d15,d15,#28
	sub	d0,d15
.L8:
	ld.a	a5,[a15]8
.L306:
	ld.b	d15,[a15]12
.L358:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    41   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    42   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    43   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    44   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    45   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    46   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    47   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    48   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    49   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    50   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    51   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    52   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    53   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    54   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    55   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    56   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    57   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    59  #ifndef IFXDMA_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    60  #define IFXDMA_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    62  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    63  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    65  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    66  #include "_Impl/IfxDma_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    67  #include "IfxDma_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    69  #include "IfxDma_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    70  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    71  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    72  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    74  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    75  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    78  /** \addtogroup IfxLld_Dma_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    79   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    80  /** \brief Bus Master Mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    81   * Definition in Ifx_DMA.MODE[4].B.MODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    82   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    83  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    84  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    85      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    86      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    87  } IfxDma_BusMasterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    89  /** \brief Channel Bus Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    93      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    94      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    95      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    96  } IfxDma_ChannelBusPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    97  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    98  /** \brief DMA circular buffer (wrap around) definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    99   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   103      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   104      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   105      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   119  } IfxDma_ChannelIncrementCircular;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   121  /** \brief DMA incrementation direction definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   122   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   126      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   127      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   128  } IfxDma_ChannelIncrementDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   129  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   130  /** \brief DMA incrementation definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   131   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   132   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   133  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   134  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   135      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   136      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   137      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   143  } IfxDma_ChannelIncrementStep;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   145  /** \brief Channel Transfer Interrupt generation mechanism.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   146   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   147   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   148  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   149  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   150      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   151      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   152  } IfxDma_ChannelInterruptControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   154  /** \brief DMA transfer definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   155   * Definition in Ifx_DMA.ME0.CHCR.B.BLKM and Ifx_DMA.ME1.CHCR.B.BLKM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   156   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   157  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   158  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   159      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   160      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   161      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   167  } IfxDma_ChannelMove;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   169  /** \brief DMA move size definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   170   * Definition in Ifx_DMA.ME0.CHCR.B.CHDW and Ifx_DMA.ME1.CHCR.B.CHDW
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   172  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   173  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   174      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   175      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   176      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   180  } IfxDma_ChannelMoveSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   182  /** \brief DMA operation mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   183   * Definition in Ifx_DMA.ME0.CHCR.B.CHMODE and Ifx_DMA.ME1.CHCR.B.CHMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   185  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   186  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   187      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   188      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   189  } IfxDma_ChannelOperationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   190  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   191  /** \brief Pattern detection selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   192   * Definition in Ifx_DMA.ME0.CHCR.B.PATSEL and Ifx_DMA.ME1.CHCR.B.PATSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   194  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   195  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   196      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   197      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   198      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   204  } IfxDma_ChannelPattern;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   206  /** \brief Channel Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   207   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   208  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   209  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   210      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   211      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   212      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   213  } IfxDma_ChannelPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   215  /** \brief DMA request mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   216   * Definition in Ifx_DMA.ME0.CHCR.B.RROAT and Ifx_DMA.ME1.CHCR.B.RROAT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   217   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   218  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   219  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   220      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   221      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   222  } IfxDma_ChannelRequestMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   224  /** \brief DMA request selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   225   * Definition in Ifx_DMA.ME0.CHCR.B.PRSEL and Ifx_DMA.ME1.CHCR.B.PRSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   227  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   228  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   229      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   230      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   231  } IfxDma_ChannelRequestSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   233  /** \brief shadow definition definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   234   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   236  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   237  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   238      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   239      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   240      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   251  } IfxDma_ChannelShadow;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   253  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   254  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   255      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   256      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   257      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   259  } IfxDma_HardwareResourcePartition;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   261  /** \brief DMA move engine definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   263  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   264  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   265      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   266      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   267  } IfxDma_MoveEngine;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   269  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   270   * Definition in Ifx_DMA.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   271   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   272  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   274      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   275      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   276  } IfxDma_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   278  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   280  /** \addtogroup IfxLld_Dma_Std_Reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   281   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   284  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   287  /** \brief Return the status of a DMA channel (reset / not reset)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   288   * This API needs to be used after the IfxDma_resetChannel()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   289   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   290   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   291   * \return TRUE if the channel is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   292   * FALSE if the channel is not reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   293   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   294   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   295   *      // check whether the channel is reset or not and also the hardware trigger disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   296   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   297   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   298   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   299   *              // Dma is out of RESET and there is no hardware request enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   300   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   301   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   305  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   307  /** \brief Reset the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   308   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   309   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   310   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   311   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   312   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   313   *      // Apply reset to the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   314   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   315   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   316   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   317   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   318  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   319  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   320  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   322  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   323   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   324  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   325  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   326  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   327  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   329  /** \brief Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   330   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   331   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   332   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   333   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   334   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   335   *      // Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   336   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   337   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   338   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   339   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   340  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   341  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   342  /** \brief Disable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   343   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   344   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   345   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   346   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   347   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   348   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   350  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   352  /** \brief Disable the generation of a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   353   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   354   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   355   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   356   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   357   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   358   *      // Disable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   359   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   360   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   362   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   363  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   364  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   365  /** \brief Enable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   366   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   367   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   369   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   370   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   371   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   372   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   373   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   374   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   375   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   376   *      // Do not restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   377   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   378   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   379   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   380   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   381   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   382   *      // Check for end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   383   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   384   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   385   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   386   *      // Enable the hardware trigger for channel 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   387   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   388   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   389   *      // Disable the hardware trigger for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   391   *      // Hardware triggers for second time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   392   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   393   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   394   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   395   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   396   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   397   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   398   *      // Restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   399   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   400   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   401   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   402   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   403   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   404  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   406  /** \brief Enable the generation of  a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   407   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   408   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   410   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   411   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   412   *      // Enable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   413   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   414   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   415   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   416   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   417  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   419  /** \brief Check the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   420   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   421   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   422   * \return TRUE if the TRL is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   423   * FALSE if the TRL is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   424   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   425   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   426   *      boolean trlFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   427   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   428   *      // Check whether the channel transaction request lost flag is set or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   429   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   430   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   431   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   433  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   435  /** \brief Converts DMA circular range to circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   436   * \param range DMA circular range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   437   * \return DMA circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   439  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   441  /** \brief Return the hardware transaction request status of a DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   442   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   443   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   444   * \return TRUE if the hardware transaction request is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   445   * FALSE if the hardware transaction request is disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   446   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   447   * A coding example can be found in \ref IfxDma_isChannelReset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   448   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   449   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   450  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   451  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   452  /** \brief Return the status of a DMA channel (transaction pending)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   453   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   454   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   455   * \return TRUE if a transaction request for the given channel is pending
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   456   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   458   *      // check for the channel request pending with the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   459   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   460   *              // There is channel request pending for channel 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   461   *              result |= 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   462   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   463   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   464   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   466  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   468  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   469   * \param dma pointer to DMA registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   470   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   471   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   473  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   474  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   475  /** \brief Request a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   476   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   477   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   480   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   481   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   482   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   483  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   485  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   487  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   488   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   490  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   491  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   492  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   494  /** \brief Clear the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   495   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   496   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   497   * \param mask value holds the bits to clear or mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   498   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   500   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   501   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   502   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   503   *                                                  IFXDMA_ERROR_S |    // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   504   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   505   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   510   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   512   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   513  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   515  /** \brief Disable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   516   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   517   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   518   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   519   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   520   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   521   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   522   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   523  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   525  /** \brief Disable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   526   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   527   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   528   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   530   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   531   *      // Disable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   532   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   533   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   534   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   535   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   537  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   539  /** \brief Enable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   540   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   541   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   542   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   543   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   544   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   545   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   546   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   547  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   548  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   549  /** \brief Enable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   550   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   551   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   552   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   553   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   554   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   555   *      // Enable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   556   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   557   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   558   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   560   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   561  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   562  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   563  /** \brief Return the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   564   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   565   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   566   * \return the content of the DMA.ERRSR register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   568   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   569   *      uint32 errorFlags = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   570   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   571   *      // Get the status of the error flags of move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   572   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   574   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   575   *              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   576   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   578   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   579   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   580   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   581   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   582   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   583   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   584   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   585   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   586   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   587   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   588   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   589   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   590   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   591   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   592   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   593   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   594   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   595   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   596   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   597   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   598   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   599   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   600   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   601   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   603  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   605  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   606  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   607  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   608   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   609  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   610  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   611  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   612  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   614  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   615   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   616   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   617   * \return Actual channel destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   618   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   619   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   620   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   621   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   622   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   623   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   625  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   627  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   628   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   629   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   630   * \return Actual channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   631   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   632   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   633   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   634   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   635   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   636   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   637  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   639  /** \brief Return the DMA channel suspend Mode status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   640   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   641   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   642   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   643   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   644  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   646  /** \brief Return remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   647   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   648   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   649   * \return Remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   650   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   651   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   652   *      // Wait till transfer count (TCOUNT) becomes 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   653   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   654   *      bool notFinished;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   655   *      do {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   656   *              notFinished = false;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   657   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   658   *                              notFinished = true;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   659   *                              break;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   660   *                      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   661   *      } while( notFinished );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   662   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   663   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   664   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   665  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   667  /** \brief get the time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   668   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   669   * \return the current time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   670   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   671   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   672   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   673   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   674   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   675   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   676  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   678  /** \brief Configure the move count for each DMA channel transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   679   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   680   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   681   * \param blockMode value holds the number of moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   682   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   684   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   685   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   686   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   687  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   688  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   689  /** \brief Configure a DMA channel to "continous transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   690   * After a transaction, the hardware request transaction remain enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   691   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   692   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   694   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   695   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   696   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   697   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   698  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   699  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   700  /** \brief Configure the destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   701   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   702   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   703   * \param address is the Initial address of the destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   704   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   705   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   706   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   707   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   708   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   709  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   710  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   711  /** \brief Configure a DMA channel destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   712   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   713   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   714   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   715   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   716   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   717   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   718   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   719   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   720   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   721   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   722  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   723  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   724  /** \brief Configure a DMA channel move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   725   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   726   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   727   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   728   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   729   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   730   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   733  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   735  /** \brief Configure a DMA channel shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   736   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   737   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   738   * \param shadow Specifies the shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   739   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   740   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   741   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   742   *      // Push the shadow mode into double buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   743   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   744   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   745   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   746   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   748  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   750  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   751   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   752   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   753   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   754   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   755   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   756   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   757   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   758   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   759  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   760  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   761  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   762   * One transfer request starts a complete DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   763   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   764   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   765   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   766   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   767   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   768   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   769   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   770  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   771  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   772  /** \brief Configure a DMA channel to "single transfer mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   773   * A transfer request is required for each transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   774   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   775   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   776   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   777   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   778   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   779   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   780   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   781  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   782  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   783  /** \brief Configure the source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   784   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   785   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   786   * \param address is the Initial address of the source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   787   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   788   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   789   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   790   *      // Check for the end of current transaction and before trigger the channel request for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   791   *      // for another channel, re configure the source and destination addresses
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   792   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   793   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   794   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   795   *      // Re-Program the source address for the channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   796   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   797   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the destination address for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   800   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   801   *      // Start DMA transaction for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   803   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   804   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   805   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   806  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   807  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   808  /** \brief Configure a DMA channel source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   809   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   810   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   811   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   812   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   813   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   814   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   815   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   816   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   817   *      // Re-program the source and destination circular buffer control fields
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   818   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   819   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   820   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   821   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   822   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   823   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   824  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   826  /** \brief Configure a DMA channel suspend enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   827   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   828   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   829   * \param enable enable (1) / disable (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   830   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   831   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   832  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   833  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   834  /** \brief Configure the move count of a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   835   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   836   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   837   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   838   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   839   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   840   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   841   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   842   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   843   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   844   *      // Wait till end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   845   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   846   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   847   *      // Change the TREL configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   848   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   849   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the BLKM configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   852   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the Move size configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   855   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   856   *      // Pull down the channel pending request after the first transfer is initiated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   858   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the transaction gets over
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   861   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   862   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   864   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   867   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   868   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   869   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   870  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   871  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   872  /** \brief Configure the shadow pointer register to read only
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   873   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   874   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   875   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   876   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   877   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   878   *      // Disable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   879   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   880   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   881   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   882   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   883  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   884  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   885  /** \brief Configure the shadow pointer register to write-able
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   886   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   887   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   888   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   889   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   890   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   891   *      // Enable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   892   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   893   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   894   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   895   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   896  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   897  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   898  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   899  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   900  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   901   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   902  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   903  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   904  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   905  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   906  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   907  /** \brief Clear channel halt request and aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   908   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   909   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   910   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   911   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   912   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   913   *      // Quit the halt mode of operation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   914   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   915   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   916   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   918  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   920  /** \brief Get channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   921   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   922   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   923   * \return halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   924   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   925   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   926   *      // Check for the channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   927   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   928   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   929   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   930   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   931  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   932  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   933  /** \brief setting channel halt request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   934   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   935   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   936   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   937   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   938   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   939   *      // Halt the channel processing
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   940   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   941   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   942   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   943   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   944  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   945  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   946  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   948  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   949   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   950  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   951  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   952  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   953  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   954  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   955  /** \brief get information on buffer being read by software and clear the notification flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   956   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   957   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   958   * \return TRUE  if one of the buffers is being read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   959   * FALSE if one of the buffers is already read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   960   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   961   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   962   *      // Check the buffer being read (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   963   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   964   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   965   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   966   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   967  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   968  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   969  /** \brief get Double buffer selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   970   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   971   * \param channelId channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   972   * \return TRUE if buffer 1 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   973   * FALSE if buffer 0 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   974   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   975   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   976   *      boolean buffer_being_filled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   977   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   978   *      // Check the buffer being filled (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   979   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   980   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   981   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   982   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   983  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   984  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   985  /** \brief keeps the double buffer active
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   986   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   987   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   988   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   989   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   990   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   991   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   992   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   993   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   994   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   995  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   996  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   997  /** \brief Double buffer switch application
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   998   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   999   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1000   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1001   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1002   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1003   *      // Apply software buffer switch
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1004   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1005   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1006   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1007   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1008  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1009  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1010  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1012  /** \addtogroup IfxLld_Dma_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1013   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1014  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1015  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1016  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1017  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1019  /** \brief Clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1020   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1021   * \param channelId channel for which the interrupt flag should be cleared
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1022   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1023   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1024   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1025   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1026   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1027  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1028  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1029  /** \brief Disable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1030   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1031   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1032   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1033   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1034   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1035   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1036   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1037   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1038   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1039  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1040  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1041  /** \brief Enable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1042   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1043   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1044   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1045   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1046   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1047   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1048   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1049   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1051  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1053  /** \brief Return and clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1054   * The flag is automatically cleared with the call to this function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1055   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1056   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1057   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1058   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1059   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1060   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1061   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1062   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1063   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1064   *      // Wait till end of the transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1065   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1066   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1067   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1068   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1069  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1070  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1071  /** \brief Returns and clears the pattern detection interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1072   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1073   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1074   * \return TRUE  if pattern detection for a given channel is found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1075   * FALSE if pattern detection for a given channel is not found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1076   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1077   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1078   *      // wait till pattern match is found for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1079   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1080   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1081   *      // Wait for the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1082   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1083   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1084   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1085   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1086  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1087  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1088  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1089   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1090   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1091   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1092   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1093   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1094   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1095   *      // wait for the destination buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1096   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1097   *      boolean destinationWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1098   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1099   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1100   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1101   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1103  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1105  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1106   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1107   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1108   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1109   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1110   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1111   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1112   *      // wait for the source buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1113   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1114   *      boolean sourceWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1115   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1116   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1117   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1118   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1119   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1120  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1122  /** \brief Return a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1123   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1124   * \param channelId channel for which the interrupt flag should be returned
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1125   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1126   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1127   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1128   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1129   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1130   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1131  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1132  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1133  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1134   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1135   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1136   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1137   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1138   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1139   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1140   *      boolean patternDetectOldVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1142   *      // Check the old value of the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1143   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1144   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1146   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1147  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1149  /** \brief Returns the SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1150   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1151   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1152   * \return SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1153   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1154   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1155   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1156   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1157   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1158   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1159  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1160  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1161  /** \brief Setting of channel interrupt service request by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1162   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1163   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1164   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1165   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1166   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1167   *      // Set the channel interrupt service request through software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1168   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1172  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1173  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1174  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1176  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1177  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1178  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1180  /** \brief Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1181   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1182   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1185   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1186   *      // Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1187   *      IfxDma_enableSwapDataByte(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1188   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1189   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1190   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1191  IFX_INLINE void IfxDma_enableSwapDataByte(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1193  /** \brief Configure the hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1194   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1195   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1196   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1197   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1198   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1199   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1200   *      // Set the required hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1201   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1202   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1203   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1204   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1205  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1207  /** \brief Sets the Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1208   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1209   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1210   * \param value Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1211   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1213  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1215  /** \brief Sets the Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1216   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1217   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1218   * \param length Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1220   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1221  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1222  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1223  /** \brief Sets the Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1224   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1225   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1226   * \param length Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1227   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1228   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1229  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1230  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1231  /** \brief Enable the Source Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1232   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1233   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1234   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1236  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1238  /** \brief Enable the Destination Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1239   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1240   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1241   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1242   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1243  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1245  /** \brief Returns the Data CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1246   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1247   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1248   * \return The Data CRC value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1250  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1252  /** \brief Returns the Source and Destination CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1253   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1254   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1255   * \return The source and destination CRC values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1256   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1257  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1258  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1259  /** \brief Returns the ERR pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1260   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1261   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1262   * \return ERR pointer for given DMA resource Partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1263   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1264  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1265  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1266  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1267  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1268  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1269  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1270  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1271  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1272      dma->TSR[channelId].B.HLTCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1273  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1274  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1275  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1276  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1277  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1278      dma->CH[channelId].CHCSR.B.CICH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1279  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1280  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1281  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1282  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1283  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1284      dma->TSR[channelId].B.CTL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1285  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1288  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1289  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1290      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1291      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1292          dma->ME1.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1293      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1294      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1296          dma->ME0.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1298  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1299  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1301  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1302  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1303      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1304  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1305  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1307  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1308  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1309      dma->TSR[channelId].B.DCH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1310  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1311  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1312  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1313  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1314  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1315      dma->TSR[channelId].B.ETRL = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1316  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1317  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1319  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1320  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1321      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1322      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1323          dma->ME1.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1324      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1325      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1326      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1327          dma->ME0.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1328      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1329  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1330  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1331  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1332  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1333  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1334      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1335      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1336          dma->ME1.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1337      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1338      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1339      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1340          dma->ME0.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1341      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1342  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1343  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1344  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1345  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1346  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1347      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1348  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1349  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1350  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1351  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1352  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1353      dma->TSR[channelId].B.ECH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1354  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1355  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1357  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1358  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1359      dma->TSR[channelId].B.ETRL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1360  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1361  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1362  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1363  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1364  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1365      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1366      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1367          dma->ME1.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1368      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1369      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1370      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1371          dma->ME0.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1372      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1373  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1374  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1375  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1376  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1377  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1378      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1379      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1380          dma->ME1.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1381      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1382      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1383      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1384          dma->ME0.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1385      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1386  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1388  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1389  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1390  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1391      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1393      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1394  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1395      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1396      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1397          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1398      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1399  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1400      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1401  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1402  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1403  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1404  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1405  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1406      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1407  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1408      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1409  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1410      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1411      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1412          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1413      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1414  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1415      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1416  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1417  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1419  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1420  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1421      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1422  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1423      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1425      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1426      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1427          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1428      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1429  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1430      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1431  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1432  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1434  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1435  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1436      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1437  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1438      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1439  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1440      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1441      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1442          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1443      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1444  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1445      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1446  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1447  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1448  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1449  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1450  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1451      return dma->CH[channelId].DADR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1452  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1453  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1454  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1455  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1456  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1457      return dma->TSR[channelId].B.HLTACK != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1458  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1459  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1460  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1461  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1462  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1463      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1465      result = dma->CH[channelId].CHCSR.B.ICH;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1466  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1467      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1468  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1469  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1470  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1471  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1472  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1473      return dma->CH[channelId].CHCSR.B.LXO != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1474  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1475  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1477  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1478  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1479      return dma->CH[channelId].SADR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1480  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1481  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1482  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1483  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1484  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1485      return dma->SUSACR[channelId].B.SUSAC;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1486  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1489  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1490  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1491      return dma->TSR[channelId].B.TRL != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1492  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1494  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1495  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1496  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1497      return dma->CH[channelId].CHCSR.B.TCOUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1498  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1499  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1500  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1501  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1502  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1503      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1504  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1505  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1507  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1508  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1509      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1510  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1511      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1512  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1513      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1514      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1515          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1516      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1517  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1518      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1519  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1520  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1522  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1523  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1524      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1525  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1528  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1529  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1530      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1531      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1532          return dma->ME1.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1533      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1534      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1535      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1536          return dma->ME0.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1537      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1538  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1539  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1541  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1542  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1543      IFX_UNUSED_PARAMETER(dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1544      // only a single DMA available, therefore no check for the dma pointer required
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1545      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1546  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1547  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1548  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1549  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1550  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1551      return dma->TIME.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1552  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1555  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1556  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1557      return dma->TSR[channelId].B.RST == 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1558  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1559  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1560  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1561  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1562  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1563      return dma->TSR[channelId].B.HTRE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1564  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1565  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1566  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1567  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1568  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1569      return dma->TSR[channelId].B.CH != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1570  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1571  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1572  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1573  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1574  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1575      dma->CH[channelId].CHCSR.U = 0U << IFX_DMA_CH_CHCSR_FROZEN_OFF;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1576  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1577  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1578  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1579  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1580  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1581      dma->TSR[channelId].B.RST = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1582  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1583  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1584  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1585  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1586  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1587      dma->CH[channelId].CHCFGR.B.BLKM = blockMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1588  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1589  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1590  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1591  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1592  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1593      dma->CH[channelId].CHCFGR.B.CHMODE = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1594  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1595  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1596  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1597  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1598  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1599      dma->CH[channelId].DADR.U = (uint32)address;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1600  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1601  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1602  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1603  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1604  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1605      Ifx_DMA_CH_ADICR adicr;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1606      adicr.U                    = dma->CH[channelId].ADICR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1607      adicr.B.DMF                = incStep;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1608      adicr.B.INCD               = direction;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1609      adicr.B.CBLD               = size;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1610      dma->CH[channelId].ADICR.U = adicr.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1611  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1612  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1614  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1615  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1616      dma->TSR[channelId].B.HLTREQ = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1617  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1619  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1620  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1621  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1622      dma->CH[channelId].CHCSR.B.SIT = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1623  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1625  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1626  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1627  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1628      dma->CH[channelId].CHCFGR.B.CHDW = moveSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1629  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1630  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1631  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1632  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1633  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1634      dma->CH[channelId].ADICR.B.SHCT = shadow;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1635  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1636  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1637  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1638  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1639  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1640      dma->CH[channelId].CHCFGR.B.CHMODE = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1641  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1642  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1643  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1644  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1645  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1646      dma->CH[channelId].CHCFGR.B.RROAT = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1647  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1648  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1649  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1650  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1651  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1652      dma->CH[channelId].CHCFGR.B.RROAT = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1653  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1654  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1656  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1657  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1658      dma->CH[channelId].SADR.U = (uint32)address;
	sha	d15,#5
.L359:
	addsc.a	a5,a5,d15,#0
.L360:
	st.w	[a5]8200,d0
.L146:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    94          IfxDma_setChannelDestinationAddress(fce->fceDmaChannel.dma, fce->fceDmaChannel.channelId, (void *)&InputData->U);
	ld.a	a5,[a15]8
.L361:
	ld.b	d15,[a15]12
.L362:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    41   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    42   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    43   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    44   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    45   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    46   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    47   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    48   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    49   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    50   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    51   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    52   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    53   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    54   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    55   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    56   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    57   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    59  #ifndef IFXDMA_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    60  #define IFXDMA_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    62  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    63  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    65  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    66  #include "_Impl/IfxDma_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    67  #include "IfxDma_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    69  #include "IfxDma_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    70  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    71  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    72  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    74  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    75  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    78  /** \addtogroup IfxLld_Dma_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    79   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    80  /** \brief Bus Master Mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    81   * Definition in Ifx_DMA.MODE[4].B.MODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    82   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    83  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    84  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    85      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    86      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    87  } IfxDma_BusMasterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    89  /** \brief Channel Bus Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    93      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    94      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    95      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    96  } IfxDma_ChannelBusPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    97  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    98  /** \brief DMA circular buffer (wrap around) definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    99   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   103      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   104      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   105      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   119  } IfxDma_ChannelIncrementCircular;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   121  /** \brief DMA incrementation direction definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   122   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   126      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   127      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   128  } IfxDma_ChannelIncrementDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   129  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   130  /** \brief DMA incrementation definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   131   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   132   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   133  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   134  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   135      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   136      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   137      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   143  } IfxDma_ChannelIncrementStep;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   145  /** \brief Channel Transfer Interrupt generation mechanism.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   146   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   147   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   148  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   149  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   150      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   151      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   152  } IfxDma_ChannelInterruptControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   154  /** \brief DMA transfer definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   155   * Definition in Ifx_DMA.ME0.CHCR.B.BLKM and Ifx_DMA.ME1.CHCR.B.BLKM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   156   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   157  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   158  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   159      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   160      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   161      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   167  } IfxDma_ChannelMove;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   169  /** \brief DMA move size definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   170   * Definition in Ifx_DMA.ME0.CHCR.B.CHDW and Ifx_DMA.ME1.CHCR.B.CHDW
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   172  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   173  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   174      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   175      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   176      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   180  } IfxDma_ChannelMoveSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   182  /** \brief DMA operation mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   183   * Definition in Ifx_DMA.ME0.CHCR.B.CHMODE and Ifx_DMA.ME1.CHCR.B.CHMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   185  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   186  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   187      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   188      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   189  } IfxDma_ChannelOperationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   190  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   191  /** \brief Pattern detection selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   192   * Definition in Ifx_DMA.ME0.CHCR.B.PATSEL and Ifx_DMA.ME1.CHCR.B.PATSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   194  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   195  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   196      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   197      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   198      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   204  } IfxDma_ChannelPattern;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   206  /** \brief Channel Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   207   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   208  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   209  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   210      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   211      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   212      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   213  } IfxDma_ChannelPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   215  /** \brief DMA request mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   216   * Definition in Ifx_DMA.ME0.CHCR.B.RROAT and Ifx_DMA.ME1.CHCR.B.RROAT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   217   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   218  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   219  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   220      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   221      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   222  } IfxDma_ChannelRequestMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   224  /** \brief DMA request selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   225   * Definition in Ifx_DMA.ME0.CHCR.B.PRSEL and Ifx_DMA.ME1.CHCR.B.PRSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   227  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   228  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   229      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   230      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   231  } IfxDma_ChannelRequestSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   233  /** \brief shadow definition definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   234   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   236  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   237  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   238      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   239      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   240      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   251  } IfxDma_ChannelShadow;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   253  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   254  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   255      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   256      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   257      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   259  } IfxDma_HardwareResourcePartition;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   261  /** \brief DMA move engine definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   263  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   264  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   265      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   266      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   267  } IfxDma_MoveEngine;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   269  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   270   * Definition in Ifx_DMA.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   271   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   272  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   274      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   275      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   276  } IfxDma_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   278  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   280  /** \addtogroup IfxLld_Dma_Std_Reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   281   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   284  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   287  /** \brief Return the status of a DMA channel (reset / not reset)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   288   * This API needs to be used after the IfxDma_resetChannel()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   289   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   290   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   291   * \return TRUE if the channel is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   292   * FALSE if the channel is not reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   293   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   294   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   295   *      // check whether the channel is reset or not and also the hardware trigger disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   296   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   297   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   298   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   299   *              // Dma is out of RESET and there is no hardware request enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   300   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   301   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   305  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   307  /** \brief Reset the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   308   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   309   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   310   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   311   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   312   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   313   *      // Apply reset to the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   314   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   315   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   316   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   317   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   318  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   319  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   320  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   322  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   323   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   324  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   325  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   326  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   327  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   329  /** \brief Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   330   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   331   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   332   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   333   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   334   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   335   *      // Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   336   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   337   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   338   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   339   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   340  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   341  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   342  /** \brief Disable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   343   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   344   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   345   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   346   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   347   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   348   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   350  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   352  /** \brief Disable the generation of a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   353   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   354   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   355   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   356   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   357   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   358   *      // Disable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   359   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   360   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   362   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   363  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   364  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   365  /** \brief Enable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   366   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   367   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   369   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   370   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   371   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   372   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   373   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   374   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   375   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   376   *      // Do not restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   377   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   378   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   379   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   380   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   381   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   382   *      // Check for end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   383   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   384   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   385   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   386   *      // Enable the hardware trigger for channel 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   387   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   388   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   389   *      // Disable the hardware trigger for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   391   *      // Hardware triggers for second time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   392   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   393   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   394   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   395   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   396   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   397   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   398   *      // Restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   399   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   400   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   401   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   402   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   403   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   404  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   406  /** \brief Enable the generation of  a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   407   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   408   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   410   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   411   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   412   *      // Enable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   413   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   414   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   415   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   416   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   417  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   419  /** \brief Check the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   420   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   421   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   422   * \return TRUE if the TRL is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   423   * FALSE if the TRL is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   424   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   425   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   426   *      boolean trlFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   427   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   428   *      // Check whether the channel transaction request lost flag is set or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   429   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   430   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   431   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   433  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   435  /** \brief Converts DMA circular range to circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   436   * \param range DMA circular range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   437   * \return DMA circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   439  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   441  /** \brief Return the hardware transaction request status of a DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   442   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   443   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   444   * \return TRUE if the hardware transaction request is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   445   * FALSE if the hardware transaction request is disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   446   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   447   * A coding example can be found in \ref IfxDma_isChannelReset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   448   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   449   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   450  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   451  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   452  /** \brief Return the status of a DMA channel (transaction pending)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   453   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   454   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   455   * \return TRUE if a transaction request for the given channel is pending
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   456   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   458   *      // check for the channel request pending with the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   459   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   460   *              // There is channel request pending for channel 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   461   *              result |= 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   462   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   463   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   464   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   466  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   468  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   469   * \param dma pointer to DMA registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   470   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   471   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   473  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   474  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   475  /** \brief Request a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   476   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   477   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   480   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   481   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   482   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   483  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   485  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   487  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   488   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   490  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   491  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   492  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   494  /** \brief Clear the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   495   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   496   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   497   * \param mask value holds the bits to clear or mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   498   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   500   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   501   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   502   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   503   *                                                  IFXDMA_ERROR_S |    // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   504   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   505   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   510   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   512   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   513  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   515  /** \brief Disable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   516   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   517   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   518   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   519   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   520   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   521   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   522   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   523  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   525  /** \brief Disable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   526   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   527   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   528   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   530   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   531   *      // Disable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   532   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   533   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   534   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   535   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   537  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   539  /** \brief Enable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   540   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   541   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   542   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   543   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   544   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   545   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   546   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   547  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   548  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   549  /** \brief Enable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   550   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   551   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   552   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   553   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   554   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   555   *      // Enable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   556   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   557   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   558   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   560   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   561  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   562  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   563  /** \brief Return the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   564   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   565   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   566   * \return the content of the DMA.ERRSR register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   568   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   569   *      uint32 errorFlags = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   570   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   571   *      // Get the status of the error flags of move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   572   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   574   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   575   *              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   576   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   578   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   579   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   580   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   581   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   582   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   583   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   584   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   585   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   586   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   587   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   588   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   589   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   590   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   591   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   592   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   593   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   594   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   595   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   596   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   597   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   598   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   599   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   600   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   601   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   603  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   605  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   606  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   607  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   608   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   609  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   610  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   611  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   612  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   614  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   615   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   616   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   617   * \return Actual channel destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   618   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   619   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   620   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   621   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   622   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   623   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   625  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   627  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   628   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   629   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   630   * \return Actual channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   631   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   632   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   633   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   634   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   635   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   636   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   637  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   639  /** \brief Return the DMA channel suspend Mode status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   640   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   641   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   642   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   643   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   644  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   646  /** \brief Return remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   647   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   648   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   649   * \return Remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   650   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   651   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   652   *      // Wait till transfer count (TCOUNT) becomes 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   653   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   654   *      bool notFinished;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   655   *      do {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   656   *              notFinished = false;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   657   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   658   *                              notFinished = true;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   659   *                              break;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   660   *                      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   661   *      } while( notFinished );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   662   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   663   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   664   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   665  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   667  /** \brief get the time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   668   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   669   * \return the current time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   670   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   671   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   672   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   673   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   674   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   675   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   676  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   678  /** \brief Configure the move count for each DMA channel transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   679   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   680   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   681   * \param blockMode value holds the number of moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   682   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   684   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   685   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   686   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   687  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   688  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   689  /** \brief Configure a DMA channel to "continous transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   690   * After a transaction, the hardware request transaction remain enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   691   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   692   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   694   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   695   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   696   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   697   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   698  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   699  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   700  /** \brief Configure the destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   701   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   702   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   703   * \param address is the Initial address of the destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   704   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   705   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   706   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   707   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   708   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   709  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   710  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   711  /** \brief Configure a DMA channel destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   712   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   713   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   714   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   715   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   716   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   717   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   718   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   719   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   720   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   721   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   722  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   723  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   724  /** \brief Configure a DMA channel move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   725   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   726   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   727   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   728   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   729   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   730   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   733  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   735  /** \brief Configure a DMA channel shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   736   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   737   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   738   * \param shadow Specifies the shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   739   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   740   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   741   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   742   *      // Push the shadow mode into double buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   743   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   744   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   745   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   746   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   748  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   750  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   751   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   752   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   753   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   754   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   755   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   756   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   757   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   758   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   759  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   760  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   761  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   762   * One transfer request starts a complete DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   763   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   764   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   765   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   766   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   767   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   768   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   769   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   770  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   771  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   772  /** \brief Configure a DMA channel to "single transfer mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   773   * A transfer request is required for each transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   774   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   775   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   776   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   777   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   778   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   779   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   780   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   781  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   782  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   783  /** \brief Configure the source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   784   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   785   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   786   * \param address is the Initial address of the source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   787   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   788   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   789   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   790   *      // Check for the end of current transaction and before trigger the channel request for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   791   *      // for another channel, re configure the source and destination addresses
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   792   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   793   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   794   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   795   *      // Re-Program the source address for the channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   796   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   797   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the destination address for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   800   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   801   *      // Start DMA transaction for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   803   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   804   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   805   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   806  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   807  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   808  /** \brief Configure a DMA channel source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   809   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   810   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   811   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   812   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   813   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   814   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   815   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   816   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   817   *      // Re-program the source and destination circular buffer control fields
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   818   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   819   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   820   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   821   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   822   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   823   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   824  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   826  /** \brief Configure a DMA channel suspend enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   827   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   828   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   829   * \param enable enable (1) / disable (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   830   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   831   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   832  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   833  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   834  /** \brief Configure the move count of a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   835   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   836   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   837   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   838   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   839   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   840   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   841   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   842   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   843   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   844   *      // Wait till end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   845   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   846   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   847   *      // Change the TREL configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   848   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   849   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the BLKM configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   852   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the Move size configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   855   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   856   *      // Pull down the channel pending request after the first transfer is initiated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   858   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the transaction gets over
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   861   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   862   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   864   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   867   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   868   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   869   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   870  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   871  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   872  /** \brief Configure the shadow pointer register to read only
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   873   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   874   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   875   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   876   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   877   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   878   *      // Disable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   879   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   880   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   881   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   882   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   883  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   884  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   885  /** \brief Configure the shadow pointer register to write-able
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   886   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   887   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   888   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   889   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   890   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   891   *      // Enable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   892   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   893   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   894   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   895   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   896  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   897  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   898  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   899  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   900  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   901   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   902  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   903  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   904  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   905  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   906  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   907  /** \brief Clear channel halt request and aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   908   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   909   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   910   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   911   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   912   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   913   *      // Quit the halt mode of operation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   914   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   915   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   916   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   918  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   920  /** \brief Get channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   921   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   922   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   923   * \return halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   924   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   925   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   926   *      // Check for the channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   927   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   928   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   929   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   930   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   931  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   932  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   933  /** \brief setting channel halt request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   934   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   935   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   936   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   937   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   938   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   939   *      // Halt the channel processing
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   940   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   941   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   942   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   943   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   944  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   945  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   946  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   948  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   949   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   950  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   951  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   952  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   953  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   954  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   955  /** \brief get information on buffer being read by software and clear the notification flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   956   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   957   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   958   * \return TRUE  if one of the buffers is being read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   959   * FALSE if one of the buffers is already read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   960   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   961   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   962   *      // Check the buffer being read (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   963   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   964   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   965   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   966   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   967  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   968  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   969  /** \brief get Double buffer selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   970   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   971   * \param channelId channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   972   * \return TRUE if buffer 1 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   973   * FALSE if buffer 0 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   974   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   975   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   976   *      boolean buffer_being_filled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   977   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   978   *      // Check the buffer being filled (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   979   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   980   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   981   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   982   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   983  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   984  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   985  /** \brief keeps the double buffer active
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   986   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   987   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   988   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   989   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   990   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   991   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   992   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   993   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   994   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   995  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   996  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   997  /** \brief Double buffer switch application
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   998   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   999   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1000   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1001   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1002   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1003   *      // Apply software buffer switch
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1004   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1005   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1006   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1007   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1008  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1009  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1010  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1012  /** \addtogroup IfxLld_Dma_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1013   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1014  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1015  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1016  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1017  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1019  /** \brief Clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1020   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1021   * \param channelId channel for which the interrupt flag should be cleared
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1022   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1023   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1024   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1025   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1026   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1027  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1028  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1029  /** \brief Disable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1030   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1031   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1032   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1033   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1034   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1035   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1036   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1037   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1038   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1039  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1040  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1041  /** \brief Enable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1042   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1043   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1044   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1045   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1046   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1047   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1048   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1049   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1051  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1053  /** \brief Return and clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1054   * The flag is automatically cleared with the call to this function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1055   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1056   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1057   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1058   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1059   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1060   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1061   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1062   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1063   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1064   *      // Wait till end of the transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1065   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1066   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1067   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1068   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1069  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1070  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1071  /** \brief Returns and clears the pattern detection interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1072   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1073   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1074   * \return TRUE  if pattern detection for a given channel is found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1075   * FALSE if pattern detection for a given channel is not found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1076   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1077   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1078   *      // wait till pattern match is found for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1079   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1080   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1081   *      // Wait for the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1082   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1083   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1084   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1085   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1086  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1087  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1088  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1089   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1090   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1091   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1092   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1093   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1094   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1095   *      // wait for the destination buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1096   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1097   *      boolean destinationWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1098   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1099   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1100   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1101   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1103  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1105  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1106   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1107   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1108   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1109   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1110   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1111   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1112   *      // wait for the source buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1113   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1114   *      boolean sourceWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1115   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1116   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1117   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1118   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1119   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1120  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1122  /** \brief Return a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1123   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1124   * \param channelId channel for which the interrupt flag should be returned
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1125   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1126   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1127   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1128   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1129   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1130   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1131  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1132  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1133  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1134   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1135   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1136   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1137   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1138   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1139   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1140   *      boolean patternDetectOldVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1142   *      // Check the old value of the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1143   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1144   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1146   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1147  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1149  /** \brief Returns the SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1150   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1151   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1152   * \return SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1153   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1154   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1155   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1156   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1157   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1158   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1159  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1160  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1161  /** \brief Setting of channel interrupt service request by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1162   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1163   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1164   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1165   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1166   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1167   *      // Set the channel interrupt service request through software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1168   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1172  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1173  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1174  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1176  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1177  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1178  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1180  /** \brief Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1181   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1182   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1185   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1186   *      // Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1187   *      IfxDma_enableSwapDataByte(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1188   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1189   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1190   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1191  IFX_INLINE void IfxDma_enableSwapDataByte(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1193  /** \brief Configure the hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1194   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1195   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1196   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1197   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1198   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1199   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1200   *      // Set the required hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1201   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1202   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1203   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1204   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1205  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1207  /** \brief Sets the Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1208   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1209   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1210   * \param value Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1211   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1213  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1215  /** \brief Sets the Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1216   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1217   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1218   * \param length Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1220   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1221  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1222  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1223  /** \brief Sets the Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1224   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1225   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1226   * \param length Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1227   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1228   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1229  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1230  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1231  /** \brief Enable the Source Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1232   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1233   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1234   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1236  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1238  /** \brief Enable the Destination Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1239   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1240   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1241   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1242   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1243  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1245  /** \brief Returns the Data CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1246   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1247   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1248   * \return The Data CRC value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1250  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1252  /** \brief Returns the Source and Destination CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1253   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1254   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1255   * \return The source and destination CRC values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1256   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1257  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1258  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1259  /** \brief Returns the ERR pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1260   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1261   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1262   * \return ERR pointer for given DMA resource Partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1263   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1264  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1265  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1266  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1267  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1268  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1269  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1270  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1271  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1272      dma->TSR[channelId].B.HLTCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1273  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1274  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1275  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1276  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1277  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1278      dma->CH[channelId].CHCSR.B.CICH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1279  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1280  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1281  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1282  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1283  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1284      dma->TSR[channelId].B.CTL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1285  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1288  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1289  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1290      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1291      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1292          dma->ME1.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1293      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1294      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1296          dma->ME0.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1298  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1299  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1301  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1302  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1303      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1304  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1305  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1307  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1308  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1309      dma->TSR[channelId].B.DCH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1310  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1311  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1312  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1313  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1314  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1315      dma->TSR[channelId].B.ETRL = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1316  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1317  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1319  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1320  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1321      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1322      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1323          dma->ME1.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1324      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1325      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1326      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1327          dma->ME0.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1328      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1329  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1330  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1331  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1332  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1333  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1334      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1335      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1336          dma->ME1.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1337      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1338      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1339      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1340          dma->ME0.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1341      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1342  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1343  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1344  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1345  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1346  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1347      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1348  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1349  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1350  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1351  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1352  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1353      dma->TSR[channelId].B.ECH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1354  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1355  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1357  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1358  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1359      dma->TSR[channelId].B.ETRL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1360  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1361  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1362  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1363  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1364  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1365      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1366      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1367          dma->ME1.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1368      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1369      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1370      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1371          dma->ME0.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1372      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1373  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1374  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1375  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1376  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1377  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1378      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1379      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1380          dma->ME1.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1381      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1382      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1383      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1384          dma->ME0.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1385      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1386  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1388  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1389  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1390  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1391      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1393      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1394  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1395      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1396      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1397          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1398      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1399  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1400      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1401  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1402  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1403  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1404  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1405  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1406      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1407  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1408      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1409  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1410      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1411      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1412          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1413      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1414  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1415      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1416  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1417  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1419  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1420  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1421      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1422  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1423      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1425      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1426      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1427          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1428      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1429  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1430      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1431  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1432  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1434  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1435  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1436      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1437  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1438      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1439  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1440      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1441      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1442          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1443      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1444  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1445      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1446  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1447  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1448  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1449  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1450  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1451      return dma->CH[channelId].DADR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1452  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1453  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1454  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1455  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1456  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1457      return dma->TSR[channelId].B.HLTACK != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1458  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1459  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1460  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1461  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1462  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1463      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1465      result = dma->CH[channelId].CHCSR.B.ICH;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1466  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1467      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1468  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1469  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1470  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1471  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1472  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1473      return dma->CH[channelId].CHCSR.B.LXO != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1474  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1475  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1477  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1478  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1479      return dma->CH[channelId].SADR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1480  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1481  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1482  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1483  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1484  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1485      return dma->SUSACR[channelId].B.SUSAC;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1486  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1489  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1490  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1491      return dma->TSR[channelId].B.TRL != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1492  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1494  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1495  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1496  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1497      return dma->CH[channelId].CHCSR.B.TCOUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1498  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1499  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1500  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1501  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1502  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1503      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1504  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1505  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1507  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1508  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1509      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1510  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1511      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1512  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1513      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1514      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1515          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1516      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1517  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1518      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1519  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1520  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1522  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1523  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1524      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1525  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1528  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1529  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1530      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1531      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1532          return dma->ME1.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1533      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1534      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1535      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1536          return dma->ME0.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1537      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1538  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1539  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1541  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1542  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1543      IFX_UNUSED_PARAMETER(dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1544      // only a single DMA available, therefore no check for the dma pointer required
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1545      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1546  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1547  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1548  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1549  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1550  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1551      return dma->TIME.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1552  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1555  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1556  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1557      return dma->TSR[channelId].B.RST == 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1558  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1559  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1560  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1561  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1562  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1563      return dma->TSR[channelId].B.HTRE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1564  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1565  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1566  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1567  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1568  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1569      return dma->TSR[channelId].B.CH != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1570  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1571  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1572  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1573  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1574  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1575      dma->CH[channelId].CHCSR.U = 0U << IFX_DMA_CH_CHCSR_FROZEN_OFF;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1576  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1577  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1578  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1579  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1580  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1581      dma->TSR[channelId].B.RST = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1582  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1583  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1584  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1585  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1586  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1587      dma->CH[channelId].CHCFGR.B.BLKM = blockMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1588  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1589  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1590  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1591  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1592  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1593      dma->CH[channelId].CHCFGR.B.CHMODE = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1594  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1595  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1596  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1597  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1598  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1599      dma->CH[channelId].DADR.U = (uint32)address;
	sha	d15,#5
.L363:
	addsc.a	a5,a5,d15,#0
.L364:
	mov.d	d15,a2
.L314:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    41   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    42   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    43   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    44   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    45   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    46   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    47   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    48   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    49   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    50   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    51   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    52   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    53   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    54   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    55   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    56   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    57   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    59  #ifndef IFXDMA_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    60  #define IFXDMA_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    62  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    63  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    65  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    66  #include "_Impl/IfxDma_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    67  #include "IfxDma_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    69  #include "IfxDma_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    70  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    71  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    72  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    74  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    75  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    78  /** \addtogroup IfxLld_Dma_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    79   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    80  /** \brief Bus Master Mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    81   * Definition in Ifx_DMA.MODE[4].B.MODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    82   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    83  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    84  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    85      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    86      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    87  } IfxDma_BusMasterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    89  /** \brief Channel Bus Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    93      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    94      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    95      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    96  } IfxDma_ChannelBusPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    97  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    98  /** \brief DMA circular buffer (wrap around) definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    99   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   103      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   104      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   105      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   119  } IfxDma_ChannelIncrementCircular;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   121  /** \brief DMA incrementation direction definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   122   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   126      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   127      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   128  } IfxDma_ChannelIncrementDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   129  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   130  /** \brief DMA incrementation definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   131   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   132   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   133  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   134  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   135      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   136      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   137      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   143  } IfxDma_ChannelIncrementStep;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   145  /** \brief Channel Transfer Interrupt generation mechanism.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   146   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   147   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   148  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   149  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   150      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   151      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   152  } IfxDma_ChannelInterruptControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   154  /** \brief DMA transfer definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   155   * Definition in Ifx_DMA.ME0.CHCR.B.BLKM and Ifx_DMA.ME1.CHCR.B.BLKM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   156   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   157  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   158  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   159      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   160      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   161      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   167  } IfxDma_ChannelMove;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   169  /** \brief DMA move size definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   170   * Definition in Ifx_DMA.ME0.CHCR.B.CHDW and Ifx_DMA.ME1.CHCR.B.CHDW
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   172  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   173  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   174      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   175      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   176      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   180  } IfxDma_ChannelMoveSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   182  /** \brief DMA operation mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   183   * Definition in Ifx_DMA.ME0.CHCR.B.CHMODE and Ifx_DMA.ME1.CHCR.B.CHMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   185  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   186  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   187      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   188      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   189  } IfxDma_ChannelOperationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   190  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   191  /** \brief Pattern detection selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   192   * Definition in Ifx_DMA.ME0.CHCR.B.PATSEL and Ifx_DMA.ME1.CHCR.B.PATSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   194  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   195  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   196      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   197      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   198      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   204  } IfxDma_ChannelPattern;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   206  /** \brief Channel Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   207   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   208  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   209  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   210      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   211      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   212      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   213  } IfxDma_ChannelPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   215  /** \brief DMA request mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   216   * Definition in Ifx_DMA.ME0.CHCR.B.RROAT and Ifx_DMA.ME1.CHCR.B.RROAT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   217   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   218  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   219  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   220      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   221      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   222  } IfxDma_ChannelRequestMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   224  /** \brief DMA request selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   225   * Definition in Ifx_DMA.ME0.CHCR.B.PRSEL and Ifx_DMA.ME1.CHCR.B.PRSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   227  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   228  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   229      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   230      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   231  } IfxDma_ChannelRequestSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   233  /** \brief shadow definition definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   234   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   236  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   237  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   238      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   239      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   240      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   251  } IfxDma_ChannelShadow;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   253  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   254  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   255      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   256      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   257      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   259  } IfxDma_HardwareResourcePartition;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   261  /** \brief DMA move engine definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   263  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   264  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   265      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   266      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   267  } IfxDma_MoveEngine;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   269  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   270   * Definition in Ifx_DMA.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   271   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   272  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   274      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   275      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   276  } IfxDma_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   278  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   280  /** \addtogroup IfxLld_Dma_Std_Reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   281   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   284  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   287  /** \brief Return the status of a DMA channel (reset / not reset)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   288   * This API needs to be used after the IfxDma_resetChannel()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   289   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   290   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   291   * \return TRUE if the channel is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   292   * FALSE if the channel is not reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   293   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   294   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   295   *      // check whether the channel is reset or not and also the hardware trigger disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   296   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   297   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   298   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   299   *              // Dma is out of RESET and there is no hardware request enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   300   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   301   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   305  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   307  /** \brief Reset the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   308   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   309   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   310   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   311   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   312   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   313   *      // Apply reset to the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   314   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   315   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   316   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   317   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   318  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   319  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   320  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   322  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   323   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   324  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   325  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   326  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   327  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   329  /** \brief Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   330   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   331   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   332   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   333   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   334   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   335   *      // Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   336   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   337   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   338   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   339   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   340  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   341  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   342  /** \brief Disable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   343   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   344   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   345   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   346   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   347   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   348   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   350  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   352  /** \brief Disable the generation of a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   353   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   354   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   355   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   356   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   357   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   358   *      // Disable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   359   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   360   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   362   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   363  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   364  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   365  /** \brief Enable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   366   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   367   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   369   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   370   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   371   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   372   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   373   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   374   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   375   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   376   *      // Do not restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   377   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   378   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   379   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   380   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   381   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   382   *      // Check for end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   383   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   384   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   385   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   386   *      // Enable the hardware trigger for channel 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   387   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   388   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   389   *      // Disable the hardware trigger for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   391   *      // Hardware triggers for second time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   392   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   393   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   394   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   395   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   396   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   397   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   398   *      // Restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   399   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   400   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   401   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   402   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   403   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   404  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   406  /** \brief Enable the generation of  a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   407   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   408   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   410   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   411   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   412   *      // Enable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   413   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   414   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   415   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   416   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   417  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   419  /** \brief Check the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   420   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   421   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   422   * \return TRUE if the TRL is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   423   * FALSE if the TRL is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   424   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   425   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   426   *      boolean trlFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   427   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   428   *      // Check whether the channel transaction request lost flag is set or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   429   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   430   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   431   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   433  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   435  /** \brief Converts DMA circular range to circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   436   * \param range DMA circular range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   437   * \return DMA circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   439  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   441  /** \brief Return the hardware transaction request status of a DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   442   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   443   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   444   * \return TRUE if the hardware transaction request is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   445   * FALSE if the hardware transaction request is disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   446   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   447   * A coding example can be found in \ref IfxDma_isChannelReset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   448   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   449   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   450  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   451  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   452  /** \brief Return the status of a DMA channel (transaction pending)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   453   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   454   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   455   * \return TRUE if a transaction request for the given channel is pending
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   456   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   458   *      // check for the channel request pending with the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   459   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   460   *              // There is channel request pending for channel 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   461   *              result |= 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   462   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   463   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   464   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   466  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   468  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   469   * \param dma pointer to DMA registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   470   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   471   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   473  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   474  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   475  /** \brief Request a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   476   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   477   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   480   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   481   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   482   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   483  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   485  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   487  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   488   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   490  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   491  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   492  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   494  /** \brief Clear the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   495   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   496   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   497   * \param mask value holds the bits to clear or mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   498   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   500   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   501   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   502   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   503   *                                                  IFXDMA_ERROR_S |    // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   504   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   505   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   510   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   512   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   513  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   515  /** \brief Disable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   516   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   517   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   518   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   519   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   520   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   521   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   522   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   523  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   525  /** \brief Disable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   526   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   527   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   528   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   530   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   531   *      // Disable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   532   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   533   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   534   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   535   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   537  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   539  /** \brief Enable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   540   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   541   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   542   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   543   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   544   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   545   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   546   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   547  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   548  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   549  /** \brief Enable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   550   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   551   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   552   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   553   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   554   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   555   *      // Enable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   556   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   557   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   558   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   560   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   561  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   562  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   563  /** \brief Return the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   564   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   565   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   566   * \return the content of the DMA.ERRSR register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   568   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   569   *      uint32 errorFlags = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   570   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   571   *      // Get the status of the error flags of move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   572   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   574   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   575   *              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   576   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   578   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   579   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   580   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   581   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   582   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   583   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   584   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   585   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   586   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   587   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   588   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   589   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   590   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   591   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   592   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   593   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   594   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   595   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   596   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   597   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   598   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   599   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   600   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   601   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   603  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   605  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   606  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   607  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   608   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   609  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   610  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   611  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   612  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   614  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   615   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   616   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   617   * \return Actual channel destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   618   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   619   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   620   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   621   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   622   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   623   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   625  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   627  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   628   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   629   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   630   * \return Actual channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   631   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   632   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   633   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   634   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   635   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   636   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   637  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   639  /** \brief Return the DMA channel suspend Mode status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   640   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   641   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   642   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   643   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   644  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   646  /** \brief Return remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   647   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   648   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   649   * \return Remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   650   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   651   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   652   *      // Wait till transfer count (TCOUNT) becomes 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   653   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   654   *      bool notFinished;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   655   *      do {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   656   *              notFinished = false;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   657   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   658   *                              notFinished = true;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   659   *                              break;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   660   *                      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   661   *      } while( notFinished );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   662   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   663   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   664   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   665  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   667  /** \brief get the time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   668   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   669   * \return the current time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   670   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   671   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   672   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   673   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   674   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   675   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   676  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   678  /** \brief Configure the move count for each DMA channel transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   679   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   680   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   681   * \param blockMode value holds the number of moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   682   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   684   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   685   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   686   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   687  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   688  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   689  /** \brief Configure a DMA channel to "continous transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   690   * After a transaction, the hardware request transaction remain enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   691   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   692   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   694   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   695   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   696   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   697   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   698  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   699  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   700  /** \brief Configure the destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   701   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   702   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   703   * \param address is the Initial address of the destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   704   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   705   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   706   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   707   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   708   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   709  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   710  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   711  /** \brief Configure a DMA channel destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   712   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   713   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   714   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   715   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   716   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   717   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   718   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   719   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   720   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   721   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   722  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   723  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   724  /** \brief Configure a DMA channel move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   725   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   726   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   727   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   728   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   729   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   730   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   733  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   735  /** \brief Configure a DMA channel shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   736   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   737   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   738   * \param shadow Specifies the shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   739   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   740   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   741   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   742   *      // Push the shadow mode into double buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   743   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   744   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   745   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   746   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   748  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   750  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   751   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   752   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   753   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   754   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   755   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   756   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   757   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   758   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   759  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   760  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   761  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   762   * One transfer request starts a complete DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   763   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   764   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   765   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   766   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   767   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   768   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   769   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   770  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   771  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   772  /** \brief Configure a DMA channel to "single transfer mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   773   * A transfer request is required for each transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   774   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   775   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   776   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   777   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   778   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   779   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   780   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   781  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   782  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   783  /** \brief Configure the source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   784   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   785   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   786   * \param address is the Initial address of the source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   787   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   788   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   789   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   790   *      // Check for the end of current transaction and before trigger the channel request for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   791   *      // for another channel, re configure the source and destination addresses
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   792   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   793   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   794   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   795   *      // Re-Program the source address for the channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   796   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   797   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the destination address for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   800   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   801   *      // Start DMA transaction for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   803   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   804   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   805   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   806  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   807  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   808  /** \brief Configure a DMA channel source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   809   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   810   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   811   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   812   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   813   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   814   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   815   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   816   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   817   *      // Re-program the source and destination circular buffer control fields
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   818   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   819   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   820   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   821   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   822   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   823   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   824  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   826  /** \brief Configure a DMA channel suspend enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   827   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   828   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   829   * \param enable enable (1) / disable (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   830   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   831   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   832  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   833  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   834  /** \brief Configure the move count of a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   835   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   836   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   837   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   838   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   839   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   840   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   841   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   842   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   843   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   844   *      // Wait till end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   845   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   846   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   847   *      // Change the TREL configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   848   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   849   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the BLKM configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   852   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the Move size configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   855   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   856   *      // Pull down the channel pending request after the first transfer is initiated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   858   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the transaction gets over
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   861   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   862   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   864   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   867   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   868   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   869   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   870  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   871  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   872  /** \brief Configure the shadow pointer register to read only
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   873   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   874   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   875   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   876   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   877   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   878   *      // Disable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   879   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   880   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   881   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   882   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   883  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   884  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   885  /** \brief Configure the shadow pointer register to write-able
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   886   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   887   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   888   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   889   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   890   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   891   *      // Enable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   892   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   893   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   894   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   895   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   896  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   897  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   898  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   899  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   900  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   901   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   902  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   903  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   904  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   905  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   906  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   907  /** \brief Clear channel halt request and aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   908   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   909   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   910   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   911   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   912   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   913   *      // Quit the halt mode of operation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   914   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   915   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   916   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   918  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   920  /** \brief Get channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   921   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   922   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   923   * \return halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   924   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   925   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   926   *      // Check for the channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   927   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   928   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   929   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   930   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   931  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   932  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   933  /** \brief setting channel halt request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   934   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   935   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   936   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   937   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   938   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   939   *      // Halt the channel processing
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   940   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   941   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   942   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   943   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   944  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   945  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   946  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   948  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   949   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   950  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   951  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   952  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   953  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   954  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   955  /** \brief get information on buffer being read by software and clear the notification flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   956   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   957   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   958   * \return TRUE  if one of the buffers is being read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   959   * FALSE if one of the buffers is already read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   960   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   961   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   962   *      // Check the buffer being read (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   963   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   964   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   965   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   966   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   967  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   968  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   969  /** \brief get Double buffer selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   970   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   971   * \param channelId channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   972   * \return TRUE if buffer 1 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   973   * FALSE if buffer 0 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   974   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   975   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   976   *      boolean buffer_being_filled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   977   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   978   *      // Check the buffer being filled (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   979   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   980   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   981   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   982   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   983  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   984  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   985  /** \brief keeps the double buffer active
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   986   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   987   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   988   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   989   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   990   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   991   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   992   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   993   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   994   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   995  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   996  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   997  /** \brief Double buffer switch application
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   998   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   999   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1000   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1001   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1002   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1003   *      // Apply software buffer switch
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1004   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1005   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1006   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1007   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1008  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1009  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1010  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1012  /** \addtogroup IfxLld_Dma_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1013   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1014  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1015  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1016  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1017  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1019  /** \brief Clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1020   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1021   * \param channelId channel for which the interrupt flag should be cleared
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1022   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1023   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1024   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1025   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1026   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1027  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1028  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1029  /** \brief Disable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1030   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1031   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1032   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1033   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1034   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1035   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1036   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1037   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1038   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1039  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1040  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1041  /** \brief Enable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1042   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1043   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1044   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1045   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1046   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1047   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1048   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1049   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1051  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1053  /** \brief Return and clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1054   * The flag is automatically cleared with the call to this function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1055   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1056   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1057   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1058   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1059   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1060   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1061   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1062   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1063   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1064   *      // Wait till end of the transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1065   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1066   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1067   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1068   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1069  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1070  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1071  /** \brief Returns and clears the pattern detection interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1072   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1073   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1074   * \return TRUE  if pattern detection for a given channel is found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1075   * FALSE if pattern detection for a given channel is not found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1076   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1077   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1078   *      // wait till pattern match is found for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1079   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1080   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1081   *      // Wait for the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1082   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1083   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1084   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1085   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1086  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1087  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1088  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1089   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1090   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1091   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1092   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1093   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1094   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1095   *      // wait for the destination buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1096   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1097   *      boolean destinationWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1098   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1099   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1100   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1101   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1103  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1105  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1106   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1107   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1108   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1109   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1110   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1111   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1112   *      // wait for the source buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1113   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1114   *      boolean sourceWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1115   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1116   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1117   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1118   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1119   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1120  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1122  /** \brief Return a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1123   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1124   * \param channelId channel for which the interrupt flag should be returned
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1125   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1126   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1127   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1128   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1129   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1130   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1131  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1132  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1133  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1134   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1135   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1136   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1137   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1138   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1139   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1140   *      boolean patternDetectOldVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1142   *      // Check the old value of the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1143   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1144   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1146   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1147  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1149  /** \brief Returns the SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1150   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1151   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1152   * \return SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1153   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1154   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1155   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1156   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1157   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1158   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1159  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1160  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1161  /** \brief Setting of channel interrupt service request by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1162   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1163   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1164   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1165   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1166   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1167   *      // Set the channel interrupt service request through software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1168   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1172  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1173  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1174  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1176  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1177  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1178  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1180  /** \brief Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1181   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1182   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1185   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1186   *      // Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1187   *      IfxDma_enableSwapDataByte(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1188   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1189   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1190   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1191  IFX_INLINE void IfxDma_enableSwapDataByte(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1193  /** \brief Configure the hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1194   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1195   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1196   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1197   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1198   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1199   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1200   *      // Set the required hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1201   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1202   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1203   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1204   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1205  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1207  /** \brief Sets the Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1208   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1209   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1210   * \param value Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1211   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1213  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1215  /** \brief Sets the Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1216   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1217   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1218   * \param length Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1220   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1221  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1222  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1223  /** \brief Sets the Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1224   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1225   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1226   * \param length Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1227   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1228   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1229  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1230  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1231  /** \brief Enable the Source Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1232   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1233   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1234   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1236  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1238  /** \brief Enable the Destination Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1239   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1240   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1241   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1242   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1243  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1245  /** \brief Returns the Data CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1246   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1247   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1248   * \return The Data CRC value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1250  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1252  /** \brief Returns the Source and Destination CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1253   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1254   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1255   * \return The source and destination CRC values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1256   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1257  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1258  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1259  /** \brief Returns the ERR pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1260   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1261   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1262   * \return ERR pointer for given DMA resource Partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1263   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1264  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1265  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1266  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1267  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1268  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1269  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1270  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1271  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1272      dma->TSR[channelId].B.HLTCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1273  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1274  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1275  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1276  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1277  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1278      dma->CH[channelId].CHCSR.B.CICH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1279  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1280  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1281  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1282  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1283  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1284      dma->TSR[channelId].B.CTL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1285  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1288  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1289  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1290      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1291      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1292          dma->ME1.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1293      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1294      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1296          dma->ME0.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1298  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1299  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1301  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1302  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1303      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1304  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1305  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1307  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1308  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1309      dma->TSR[channelId].B.DCH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1310  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1311  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1312  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1313  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1314  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1315      dma->TSR[channelId].B.ETRL = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1316  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1317  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1319  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1320  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1321      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1322      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1323          dma->ME1.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1324      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1325      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1326      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1327          dma->ME0.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1328      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1329  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1330  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1331  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1332  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1333  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1334      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1335      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1336          dma->ME1.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1337      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1338      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1339      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1340          dma->ME0.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1341      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1342  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1343  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1344  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1345  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1346  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1347      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1348  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1349  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1350  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1351  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1352  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1353      dma->TSR[channelId].B.ECH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1354  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1355  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1357  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1358  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1359      dma->TSR[channelId].B.ETRL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1360  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1361  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1362  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1363  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1364  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1365      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1366      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1367          dma->ME1.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1368      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1369      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1370      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1371          dma->ME0.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1372      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1373  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1374  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1375  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1376  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1377  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1378      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1379      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1380          dma->ME1.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1381      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1382      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1383      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1384          dma->ME0.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1385      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1386  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1388  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1389  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1390  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1391      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1393      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1394  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1395      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1396      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1397          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1398      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1399  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1400      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1401  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1402  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1403  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1404  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1405  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1406      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1407  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1408      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1409  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1410      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1411      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1412          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1413      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1414  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1415      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1416  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1417  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1419  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1420  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1421      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1422  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1423      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1425      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1426      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1427          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1428      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1429  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1430      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1431  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1432  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1434  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1435  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1436      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1437  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1438      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1439  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1440      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1441      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1442          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1443      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1444  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1445      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1446  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1447  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1448  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1449  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1450  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1451      return dma->CH[channelId].DADR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1452  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1453  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1454  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1455  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1456  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1457      return dma->TSR[channelId].B.HLTACK != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1458  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1459  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1460  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1461  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1462  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1463      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1465      result = dma->CH[channelId].CHCSR.B.ICH;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1466  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1467      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1468  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1469  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1470  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1471  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1472  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1473      return dma->CH[channelId].CHCSR.B.LXO != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1474  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1475  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1477  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1478  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1479      return dma->CH[channelId].SADR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1480  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1481  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1482  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1483  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1484  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1485      return dma->SUSACR[channelId].B.SUSAC;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1486  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1489  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1490  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1491      return dma->TSR[channelId].B.TRL != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1492  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1494  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1495  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1496  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1497      return dma->CH[channelId].CHCSR.B.TCOUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1498  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1499  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1500  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1501  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1502  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1503      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1504  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1505  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1507  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1508  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1509      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1510  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1511      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1512  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1513      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1514      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1515          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1516      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1517  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1518      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1519  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1520  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1522  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1523  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1524      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1525  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1528  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1529  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1530      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1531      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1532          return dma->ME1.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1533      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1534      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1535      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1536          return dma->ME0.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1537      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1538  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1539  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1541  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1542  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1543      IFX_UNUSED_PARAMETER(dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1544      // only a single DMA available, therefore no check for the dma pointer required
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1545      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1546  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1547  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1548  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1549  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1550  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1551      return dma->TIME.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1552  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1555  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1556  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1557      return dma->TSR[channelId].B.RST == 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1558  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1559  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1560  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1561  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1562  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1563      return dma->TSR[channelId].B.HTRE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1564  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1565  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1566  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1567  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1568  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1569      return dma->TSR[channelId].B.CH != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1570  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1571  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1572  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1573  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1574  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1575      dma->CH[channelId].CHCSR.U = 0U << IFX_DMA_CH_CHCSR_FROZEN_OFF;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1576  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1577  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1578  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1579  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1580  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1581      dma->TSR[channelId].B.RST = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1582  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1583  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1584  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1585  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1586  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1587      dma->CH[channelId].CHCFGR.B.BLKM = blockMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1588  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1589  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1590  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1591  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1592  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1593      dma->CH[channelId].CHCFGR.B.CHMODE = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1594  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1595  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1596  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1597  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1598  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1599      dma->CH[channelId].DADR.U = (uint32)address;
	st.w	[a5]8204,d15
.L155:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    95          IfxDma_setChannelTransferCount(fce->fceDmaChannel.dma, fce->fceDmaChannel.channelId, crcDataLength);
	fcall	.cocofun_6
.L164:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    41   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    42   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    43   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    44   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    45   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    46   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    47   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    48   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    49   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    50   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    51   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    52   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    53   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    54   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    55   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    56   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    57   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    59  #ifndef IFXDMA_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    60  #define IFXDMA_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    62  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    63  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    65  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    66  #include "_Impl/IfxDma_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    67  #include "IfxDma_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    69  #include "IfxDma_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    70  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    71  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    72  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    74  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    75  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    78  /** \addtogroup IfxLld_Dma_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    79   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    80  /** \brief Bus Master Mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    81   * Definition in Ifx_DMA.MODE[4].B.MODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    82   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    83  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    84  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    85      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    86      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    87  } IfxDma_BusMasterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    89  /** \brief Channel Bus Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    93      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    94      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    95      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    96  } IfxDma_ChannelBusPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    97  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    98  /** \brief DMA circular buffer (wrap around) definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    99   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   103      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   104      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   105      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   119  } IfxDma_ChannelIncrementCircular;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   121  /** \brief DMA incrementation direction definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   122   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   126      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   127      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   128  } IfxDma_ChannelIncrementDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   129  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   130  /** \brief DMA incrementation definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   131   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   132   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   133  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   134  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   135      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   136      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   137      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   143  } IfxDma_ChannelIncrementStep;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   145  /** \brief Channel Transfer Interrupt generation mechanism.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   146   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   147   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   148  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   149  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   150      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   151      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   152  } IfxDma_ChannelInterruptControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   154  /** \brief DMA transfer definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   155   * Definition in Ifx_DMA.ME0.CHCR.B.BLKM and Ifx_DMA.ME1.CHCR.B.BLKM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   156   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   157  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   158  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   159      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   160      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   161      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   167  } IfxDma_ChannelMove;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   169  /** \brief DMA move size definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   170   * Definition in Ifx_DMA.ME0.CHCR.B.CHDW and Ifx_DMA.ME1.CHCR.B.CHDW
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   172  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   173  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   174      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   175      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   176      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   180  } IfxDma_ChannelMoveSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   182  /** \brief DMA operation mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   183   * Definition in Ifx_DMA.ME0.CHCR.B.CHMODE and Ifx_DMA.ME1.CHCR.B.CHMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   185  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   186  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   187      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   188      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   189  } IfxDma_ChannelOperationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   190  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   191  /** \brief Pattern detection selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   192   * Definition in Ifx_DMA.ME0.CHCR.B.PATSEL and Ifx_DMA.ME1.CHCR.B.PATSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   194  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   195  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   196      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   197      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   198      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   204  } IfxDma_ChannelPattern;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   206  /** \brief Channel Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   207   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   208  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   209  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   210      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   211      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   212      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   213  } IfxDma_ChannelPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   215  /** \brief DMA request mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   216   * Definition in Ifx_DMA.ME0.CHCR.B.RROAT and Ifx_DMA.ME1.CHCR.B.RROAT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   217   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   218  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   219  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   220      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   221      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   222  } IfxDma_ChannelRequestMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   224  /** \brief DMA request selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   225   * Definition in Ifx_DMA.ME0.CHCR.B.PRSEL and Ifx_DMA.ME1.CHCR.B.PRSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   227  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   228  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   229      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   230      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   231  } IfxDma_ChannelRequestSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   233  /** \brief shadow definition definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   234   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   236  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   237  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   238      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   239      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   240      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   251  } IfxDma_ChannelShadow;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   253  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   254  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   255      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   256      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   257      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   259  } IfxDma_HardwareResourcePartition;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   261  /** \brief DMA move engine definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   263  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   264  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   265      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   266      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   267  } IfxDma_MoveEngine;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   269  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   270   * Definition in Ifx_DMA.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   271   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   272  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   274      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   275      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   276  } IfxDma_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   278  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   280  /** \addtogroup IfxLld_Dma_Std_Reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   281   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   284  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   287  /** \brief Return the status of a DMA channel (reset / not reset)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   288   * This API needs to be used after the IfxDma_resetChannel()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   289   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   290   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   291   * \return TRUE if the channel is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   292   * FALSE if the channel is not reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   293   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   294   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   295   *      // check whether the channel is reset or not and also the hardware trigger disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   296   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   297   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   298   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   299   *              // Dma is out of RESET and there is no hardware request enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   300   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   301   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   305  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   307  /** \brief Reset the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   308   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   309   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   310   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   311   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   312   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   313   *      // Apply reset to the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   314   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   315   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   316   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   317   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   318  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   319  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   320  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   322  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   323   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   324  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   325  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   326  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   327  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   329  /** \brief Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   330   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   331   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   332   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   333   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   334   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   335   *      // Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   336   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   337   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   338   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   339   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   340  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   341  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   342  /** \brief Disable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   343   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   344   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   345   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   346   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   347   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   348   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   350  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   352  /** \brief Disable the generation of a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   353   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   354   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   355   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   356   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   357   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   358   *      // Disable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   359   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   360   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   362   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   363  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   364  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   365  /** \brief Enable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   366   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   367   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   369   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   370   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   371   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   372   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   373   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   374   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   375   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   376   *      // Do not restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   377   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   378   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   379   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   380   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   381   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   382   *      // Check for end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   383   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   384   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   385   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   386   *      // Enable the hardware trigger for channel 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   387   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   388   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   389   *      // Disable the hardware trigger for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   391   *      // Hardware triggers for second time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   392   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   393   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   394   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   395   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   396   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   397   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   398   *      // Restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   399   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   400   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   401   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   402   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   403   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   404  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   406  /** \brief Enable the generation of  a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   407   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   408   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   410   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   411   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   412   *      // Enable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   413   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   414   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   415   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   416   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   417  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   419  /** \brief Check the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   420   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   421   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   422   * \return TRUE if the TRL is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   423   * FALSE if the TRL is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   424   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   425   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   426   *      boolean trlFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   427   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   428   *      // Check whether the channel transaction request lost flag is set or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   429   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   430   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   431   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   433  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   435  /** \brief Converts DMA circular range to circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   436   * \param range DMA circular range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   437   * \return DMA circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   439  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   441  /** \brief Return the hardware transaction request status of a DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   442   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   443   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   444   * \return TRUE if the hardware transaction request is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   445   * FALSE if the hardware transaction request is disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   446   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   447   * A coding example can be found in \ref IfxDma_isChannelReset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   448   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   449   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   450  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   451  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   452  /** \brief Return the status of a DMA channel (transaction pending)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   453   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   454   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   455   * \return TRUE if a transaction request for the given channel is pending
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   456   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   458   *      // check for the channel request pending with the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   459   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   460   *              // There is channel request pending for channel 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   461   *              result |= 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   462   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   463   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   464   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   466  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   468  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   469   * \param dma pointer to DMA registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   470   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   471   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   473  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   474  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   475  /** \brief Request a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   476   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   477   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   480   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   481   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   482   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   483  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   485  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   487  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   488   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   490  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   491  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   492  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   494  /** \brief Clear the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   495   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   496   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   497   * \param mask value holds the bits to clear or mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   498   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   500   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   501   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   502   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   503   *                                                  IFXDMA_ERROR_S |    // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   504   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   505   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   510   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   512   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   513  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   515  /** \brief Disable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   516   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   517   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   518   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   519   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   520   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   521   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   522   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   523  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   525  /** \brief Disable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   526   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   527   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   528   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   530   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   531   *      // Disable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   532   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   533   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   534   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   535   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   537  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   539  /** \brief Enable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   540   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   541   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   542   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   543   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   544   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   545   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   546   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   547  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   548  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   549  /** \brief Enable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   550   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   551   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   552   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   553   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   554   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   555   *      // Enable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   556   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   557   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   558   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   560   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   561  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   562  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   563  /** \brief Return the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   564   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   565   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   566   * \return the content of the DMA.ERRSR register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   568   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   569   *      uint32 errorFlags = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   570   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   571   *      // Get the status of the error flags of move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   572   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   574   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   575   *              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   576   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   578   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   579   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   580   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   581   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   582   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   583   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   584   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   585   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   586   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   587   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   588   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   589   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   590   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   591   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   592   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   593   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   594   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   595   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   596   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   597   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   598   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   599   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   600   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   601   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   603  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   605  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   606  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   607  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   608   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   609  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   610  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   611  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   612  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   614  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   615   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   616   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   617   * \return Actual channel destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   618   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   619   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   620   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   621   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   622   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   623   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   625  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   627  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   628   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   629   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   630   * \return Actual channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   631   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   632   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   633   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   634   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   635   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   636   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   637  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   639  /** \brief Return the DMA channel suspend Mode status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   640   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   641   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   642   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   643   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   644  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   646  /** \brief Return remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   647   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   648   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   649   * \return Remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   650   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   651   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   652   *      // Wait till transfer count (TCOUNT) becomes 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   653   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   654   *      bool notFinished;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   655   *      do {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   656   *              notFinished = false;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   657   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   658   *                              notFinished = true;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   659   *                              break;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   660   *                      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   661   *      } while( notFinished );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   662   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   663   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   664   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   665  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   667  /** \brief get the time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   668   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   669   * \return the current time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   670   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   671   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   672   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   673   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   674   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   675   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   676  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   678  /** \brief Configure the move count for each DMA channel transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   679   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   680   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   681   * \param blockMode value holds the number of moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   682   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   684   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   685   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   686   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   687  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   688  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   689  /** \brief Configure a DMA channel to "continous transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   690   * After a transaction, the hardware request transaction remain enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   691   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   692   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   694   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   695   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   696   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   697   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   698  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   699  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   700  /** \brief Configure the destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   701   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   702   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   703   * \param address is the Initial address of the destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   704   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   705   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   706   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   707   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   708   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   709  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   710  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   711  /** \brief Configure a DMA channel destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   712   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   713   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   714   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   715   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   716   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   717   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   718   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   719   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   720   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   721   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   722  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   723  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   724  /** \brief Configure a DMA channel move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   725   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   726   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   727   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   728   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   729   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   730   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   733  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   735  /** \brief Configure a DMA channel shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   736   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   737   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   738   * \param shadow Specifies the shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   739   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   740   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   741   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   742   *      // Push the shadow mode into double buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   743   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   744   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   745   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   746   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   748  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   750  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   751   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   752   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   753   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   754   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   755   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   756   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   757   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   758   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   759  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   760  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   761  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   762   * One transfer request starts a complete DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   763   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   764   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   765   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   766   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   767   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   768   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   769   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   770  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   771  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   772  /** \brief Configure a DMA channel to "single transfer mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   773   * A transfer request is required for each transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   774   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   775   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   776   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   777   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   778   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   779   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   780   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   781  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   782  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   783  /** \brief Configure the source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   784   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   785   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   786   * \param address is the Initial address of the source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   787   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   788   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   789   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   790   *      // Check for the end of current transaction and before trigger the channel request for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   791   *      // for another channel, re configure the source and destination addresses
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   792   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   793   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   794   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   795   *      // Re-Program the source address for the channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   796   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   797   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the destination address for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   800   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   801   *      // Start DMA transaction for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   803   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   804   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   805   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   806  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   807  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   808  /** \brief Configure a DMA channel source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   809   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   810   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   811   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   812   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   813   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   814   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   815   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   816   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   817   *      // Re-program the source and destination circular buffer control fields
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   818   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   819   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   820   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   821   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   822   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   823   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   824  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   826  /** \brief Configure a DMA channel suspend enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   827   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   828   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   829   * \param enable enable (1) / disable (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   830   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   831   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   832  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   833  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   834  /** \brief Configure the move count of a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   835   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   836   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   837   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   838   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   839   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   840   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   841   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   842   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   843   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   844   *      // Wait till end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   845   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   846   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   847   *      // Change the TREL configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   848   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   849   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the BLKM configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   852   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the Move size configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   855   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   856   *      // Pull down the channel pending request after the first transfer is initiated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   858   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the transaction gets over
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   861   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   862   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   864   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   867   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   868   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   869   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   870  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   871  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   872  /** \brief Configure the shadow pointer register to read only
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   873   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   874   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   875   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   876   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   877   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   878   *      // Disable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   879   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   880   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   881   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   882   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   883  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   884  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   885  /** \brief Configure the shadow pointer register to write-able
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   886   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   887   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   888   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   889   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   890   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   891   *      // Enable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   892   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   893   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   894   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   895   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   896  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   897  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   898  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   899  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   900  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   901   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   902  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   903  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   904  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   905  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   906  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   907  /** \brief Clear channel halt request and aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   908   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   909   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   910   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   911   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   912   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   913   *      // Quit the halt mode of operation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   914   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   915   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   916   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   918  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   920  /** \brief Get channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   921   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   922   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   923   * \return halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   924   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   925   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   926   *      // Check for the channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   927   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   928   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   929   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   930   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   931  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   932  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   933  /** \brief setting channel halt request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   934   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   935   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   936   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   937   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   938   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   939   *      // Halt the channel processing
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   940   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   941   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   942   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   943   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   944  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   945  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   946  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   948  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   949   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   950  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   951  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   952  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   953  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   954  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   955  /** \brief get information on buffer being read by software and clear the notification flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   956   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   957   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   958   * \return TRUE  if one of the buffers is being read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   959   * FALSE if one of the buffers is already read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   960   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   961   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   962   *      // Check the buffer being read (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   963   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   964   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   965   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   966   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   967  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   968  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   969  /** \brief get Double buffer selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   970   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   971   * \param channelId channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   972   * \return TRUE if buffer 1 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   973   * FALSE if buffer 0 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   974   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   975   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   976   *      boolean buffer_being_filled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   977   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   978   *      // Check the buffer being filled (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   979   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   980   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   981   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   982   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   983  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   984  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   985  /** \brief keeps the double buffer active
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   986   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   987   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   988   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   989   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   990   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   991   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   992   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   993   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   994   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   995  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   996  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   997  /** \brief Double buffer switch application
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   998   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   999   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1000   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1001   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1002   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1003   *      // Apply software buffer switch
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1004   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1005   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1006   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1007   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1008  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1009  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1010  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1012  /** \addtogroup IfxLld_Dma_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1013   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1014  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1015  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1016  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1017  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1019  /** \brief Clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1020   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1021   * \param channelId channel for which the interrupt flag should be cleared
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1022   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1023   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1024   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1025   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1026   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1027  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1028  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1029  /** \brief Disable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1030   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1031   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1032   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1033   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1034   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1035   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1036   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1037   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1038   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1039  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1040  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1041  /** \brief Enable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1042   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1043   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1044   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1045   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1046   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1047   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1048   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1049   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1051  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1053  /** \brief Return and clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1054   * The flag is automatically cleared with the call to this function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1055   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1056   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1057   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1058   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1059   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1060   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1061   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1062   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1063   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1064   *      // Wait till end of the transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1065   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1066   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1067   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1068   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1069  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1070  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1071  /** \brief Returns and clears the pattern detection interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1072   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1073   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1074   * \return TRUE  if pattern detection for a given channel is found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1075   * FALSE if pattern detection for a given channel is not found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1076   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1077   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1078   *      // wait till pattern match is found for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1079   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1080   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1081   *      // Wait for the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1082   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1083   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1084   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1085   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1086  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1087  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1088  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1089   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1090   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1091   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1092   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1093   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1094   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1095   *      // wait for the destination buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1096   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1097   *      boolean destinationWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1098   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1099   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1100   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1101   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1103  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1105  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1106   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1107   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1108   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1109   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1110   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1111   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1112   *      // wait for the source buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1113   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1114   *      boolean sourceWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1115   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1116   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1117   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1118   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1119   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1120  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1122  /** \brief Return a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1123   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1124   * \param channelId channel for which the interrupt flag should be returned
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1125   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1126   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1127   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1128   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1129   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1130   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1131  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1132  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1133  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1134   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1135   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1136   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1137   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1138   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1139   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1140   *      boolean patternDetectOldVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1142   *      // Check the old value of the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1143   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1144   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1146   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1147  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1149  /** \brief Returns the SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1150   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1151   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1152   * \return SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1153   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1154   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1155   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1156   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1157   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1158   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1159  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1160  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1161  /** \brief Setting of channel interrupt service request by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1162   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1163   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1164   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1165   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1166   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1167   *      // Set the channel interrupt service request through software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1168   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1172  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1173  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1174  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1176  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1177  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1178  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1180  /** \brief Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1181   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1182   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1185   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1186   *      // Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1187   *      IfxDma_enableSwapDataByte(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1188   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1189   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1190   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1191  IFX_INLINE void IfxDma_enableSwapDataByte(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1193  /** \brief Configure the hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1194   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1195   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1196   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1197   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1198   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1199   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1200   *      // Set the required hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1201   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1202   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1203   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1204   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1205  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1207  /** \brief Sets the Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1208   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1209   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1210   * \param value Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1211   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1213  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1215  /** \brief Sets the Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1216   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1217   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1218   * \param length Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1220   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1221  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1222  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1223  /** \brief Sets the Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1224   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1225   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1226   * \param length Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1227   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1228   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1229  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1230  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1231  /** \brief Enable the Source Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1232   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1233   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1234   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1236  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1238  /** \brief Enable the Destination Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1239   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1240   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1241   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1242   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1243  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1245  /** \brief Returns the Data CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1246   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1247   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1248   * \return The Data CRC value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1250  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1252  /** \brief Returns the Source and Destination CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1253   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1254   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1255   * \return The source and destination CRC values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1256   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1257  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1258  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1259  /** \brief Returns the ERR pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1260   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1261   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1262   * \return ERR pointer for given DMA resource Partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1263   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1264  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1265  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1266  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1267  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1268  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1269  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1270  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1271  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1272      dma->TSR[channelId].B.HLTCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1273  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1274  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1275  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1276  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1277  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1278      dma->CH[channelId].CHCSR.B.CICH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1279  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1280  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1281  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1282  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1283  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1284      dma->TSR[channelId].B.CTL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1285  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1288  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1289  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1290      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1291      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1292          dma->ME1.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1293      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1294      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1296          dma->ME0.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1298  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1299  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1301  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1302  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1303      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1304  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1305  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1307  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1308  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1309      dma->TSR[channelId].B.DCH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1310  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1311  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1312  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1313  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1314  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1315      dma->TSR[channelId].B.ETRL = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1316  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1317  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1319  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1320  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1321      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1322      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1323          dma->ME1.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1324      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1325      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1326      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1327          dma->ME0.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1328      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1329  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1330  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1331  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1332  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1333  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1334      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1335      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1336          dma->ME1.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1337      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1338      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1339      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1340          dma->ME0.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1341      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1342  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1343  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1344  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1345  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1346  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1347      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1348  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1349  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1350  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1351  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1352  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1353      dma->TSR[channelId].B.ECH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1354  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1355  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1357  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1358  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1359      dma->TSR[channelId].B.ETRL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1360  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1361  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1362  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1363  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1364  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1365      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1366      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1367          dma->ME1.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1368      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1369      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1370      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1371          dma->ME0.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1372      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1373  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1374  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1375  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1376  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1377  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1378      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1379      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1380          dma->ME1.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1381      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1382      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1383      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1384          dma->ME0.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1385      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1386  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1388  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1389  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1390  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1391      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1393      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1394  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1395      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1396      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1397          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1398      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1399  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1400      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1401  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1402  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1403  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1404  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1405  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1406      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1407  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1408      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1409  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1410      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1411      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1412          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1413      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1414  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1415      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1416  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1417  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1419  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1420  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1421      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1422  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1423      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1425      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1426      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1427          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1428      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1429  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1430      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1431  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1432  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1434  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1435  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1436      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1437  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1438      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1439  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1440      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1441      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1442          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1443      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1444  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1445      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1446  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1447  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1448  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1449  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1450  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1451      return dma->CH[channelId].DADR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1452  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1453  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1454  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1455  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1456  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1457      return dma->TSR[channelId].B.HLTACK != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1458  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1459  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1460  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1461  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1462  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1463      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1465      result = dma->CH[channelId].CHCSR.B.ICH;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1466  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1467      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1468  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1469  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1470  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1471  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1472  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1473      return dma->CH[channelId].CHCSR.B.LXO != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1474  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1475  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1477  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1478  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1479      return dma->CH[channelId].SADR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1480  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1481  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1482  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1483  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1484  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1485      return dma->SUSACR[channelId].B.SUSAC;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1486  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1489  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1490  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1491      return dma->TSR[channelId].B.TRL != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1492  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1494  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1495  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1496  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1497      return dma->CH[channelId].CHCSR.B.TCOUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1498  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1499  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1500  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1501  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1502  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1503      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1504  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1505  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1507  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1508  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1509      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1510  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1511      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1512  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1513      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1514      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1515          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1516      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1517  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1518      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1519  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1520  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1522  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1523  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1524      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1525  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1528  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1529  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1530      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1531      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1532          return dma->ME1.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1533      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1534      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1535      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1536          return dma->ME0.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1537      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1538  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1539  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1541  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1542  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1543      IFX_UNUSED_PARAMETER(dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1544      // only a single DMA available, therefore no check for the dma pointer required
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1545      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1546  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1547  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1548  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1549  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1550  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1551      return dma->TIME.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1552  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1555  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1556  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1557      return dma->TSR[channelId].B.RST == 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1558  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1559  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1560  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1561  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1562  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1563      return dma->TSR[channelId].B.HTRE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1564  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1565  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1566  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1567  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1568  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1569      return dma->TSR[channelId].B.CH != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1570  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1571  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1572  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1573  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1574  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1575      dma->CH[channelId].CHCSR.U = 0U << IFX_DMA_CH_CHCSR_FROZEN_OFF;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1576  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1577  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1578  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1579  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1580  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1581      dma->TSR[channelId].B.RST = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1582  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1583  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1584  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1585  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1586  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1587      dma->CH[channelId].CHCFGR.B.BLKM = blockMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1588  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1589  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1590  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1591  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1592  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1593      dma->CH[channelId].CHCFGR.B.CHMODE = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1594  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1595  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1596  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1597  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1598  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1599      dma->CH[channelId].DADR.U = (uint32)address;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1600  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1601  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1602  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1603  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1604  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1605      Ifx_DMA_CH_ADICR adicr;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1606      adicr.U                    = dma->CH[channelId].ADICR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1607      adicr.B.DMF                = incStep;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1608      adicr.B.INCD               = direction;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1609      adicr.B.CBLD               = size;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1610      dma->CH[channelId].ADICR.U = adicr.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1611  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1612  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1614  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1615  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1616      dma->TSR[channelId].B.HLTREQ = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1617  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1619  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1620  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1621  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1622      dma->CH[channelId].CHCSR.B.SIT = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1623  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1625  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1626  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1627  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1628      dma->CH[channelId].CHCFGR.B.CHDW = moveSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1629  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1630  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1631  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1632  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1633  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1634      dma->CH[channelId].ADICR.B.SHCT = shadow;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1635  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1636  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1637  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1638  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1639  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1640      dma->CH[channelId].CHCFGR.B.CHMODE = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1641  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1642  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1643  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1644  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1645  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1646      dma->CH[channelId].CHCFGR.B.RROAT = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1647  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1648  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1649  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1650  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1651  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1652      dma->CH[channelId].CHCFGR.B.RROAT = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1653  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1654  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1656  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1657  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1658      dma->CH[channelId].SADR.U = (uint32)address;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1659  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1660  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1662  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1663  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1664      Ifx_DMA_CH_ADICR adicr;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1665      adicr.U                    = dma->CH[channelId].ADICR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1666      adicr.B.SMF                = incStep;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1667      adicr.B.INCS               = direction;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1668      adicr.B.CBLS               = size;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1669      dma->CH[channelId].ADICR.U = adicr.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1670  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1671  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1672  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1673  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1674  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1675      dma->SUSENR[channelId].B.SUSEN = enable;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1676  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1678  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1679  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1680  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1681      dma->CH[channelId].CHCFGR.B.TREL = transferCount;
	ld.hu	d15,[a2]8212
.L365:
	insert	d15,d15,d4,#0,#14
	st.h	[a2]8212,d15
.L165:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    96          IfxDma_setChannelMoveSize(fce->fceDmaChannel.dma, fce->fceDmaChannel.channelId, dmaChannelsize);
	fcall	.cocofun_6
.L174:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    41   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    42   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    43   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    44   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    45   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    46   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    47   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    48   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    49   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    50   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    51   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    52   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    53   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    54   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    55   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    56   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    57   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    59  #ifndef IFXDMA_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    60  #define IFXDMA_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    62  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    63  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    65  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    66  #include "_Impl/IfxDma_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    67  #include "IfxDma_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    69  #include "IfxDma_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    70  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    71  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    72  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    74  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    75  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    78  /** \addtogroup IfxLld_Dma_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    79   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    80  /** \brief Bus Master Mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    81   * Definition in Ifx_DMA.MODE[4].B.MODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    82   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    83  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    84  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    85      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    86      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    87  } IfxDma_BusMasterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    89  /** \brief Channel Bus Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    93      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    94      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    95      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    96  } IfxDma_ChannelBusPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    97  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    98  /** \brief DMA circular buffer (wrap around) definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    99   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   103      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   104      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   105      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   119  } IfxDma_ChannelIncrementCircular;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   121  /** \brief DMA incrementation direction definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   122   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   126      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   127      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   128  } IfxDma_ChannelIncrementDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   129  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   130  /** \brief DMA incrementation definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   131   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   132   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   133  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   134  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   135      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   136      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   137      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   143  } IfxDma_ChannelIncrementStep;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   145  /** \brief Channel Transfer Interrupt generation mechanism.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   146   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   147   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   148  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   149  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   150      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   151      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   152  } IfxDma_ChannelInterruptControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   154  /** \brief DMA transfer definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   155   * Definition in Ifx_DMA.ME0.CHCR.B.BLKM and Ifx_DMA.ME1.CHCR.B.BLKM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   156   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   157  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   158  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   159      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   160      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   161      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   167  } IfxDma_ChannelMove;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   169  /** \brief DMA move size definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   170   * Definition in Ifx_DMA.ME0.CHCR.B.CHDW and Ifx_DMA.ME1.CHCR.B.CHDW
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   172  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   173  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   174      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   175      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   176      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   180  } IfxDma_ChannelMoveSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   182  /** \brief DMA operation mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   183   * Definition in Ifx_DMA.ME0.CHCR.B.CHMODE and Ifx_DMA.ME1.CHCR.B.CHMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   185  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   186  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   187      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   188      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   189  } IfxDma_ChannelOperationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   190  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   191  /** \brief Pattern detection selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   192   * Definition in Ifx_DMA.ME0.CHCR.B.PATSEL and Ifx_DMA.ME1.CHCR.B.PATSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   194  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   195  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   196      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   197      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   198      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   204  } IfxDma_ChannelPattern;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   206  /** \brief Channel Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   207   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   208  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   209  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   210      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   211      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   212      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   213  } IfxDma_ChannelPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   215  /** \brief DMA request mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   216   * Definition in Ifx_DMA.ME0.CHCR.B.RROAT and Ifx_DMA.ME1.CHCR.B.RROAT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   217   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   218  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   219  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   220      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   221      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   222  } IfxDma_ChannelRequestMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   224  /** \brief DMA request selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   225   * Definition in Ifx_DMA.ME0.CHCR.B.PRSEL and Ifx_DMA.ME1.CHCR.B.PRSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   227  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   228  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   229      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   230      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   231  } IfxDma_ChannelRequestSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   233  /** \brief shadow definition definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   234   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   236  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   237  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   238      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   239      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   240      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   251  } IfxDma_ChannelShadow;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   253  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   254  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   255      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   256      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   257      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   259  } IfxDma_HardwareResourcePartition;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   261  /** \brief DMA move engine definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   263  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   264  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   265      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   266      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   267  } IfxDma_MoveEngine;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   269  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   270   * Definition in Ifx_DMA.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   271   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   272  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   274      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   275      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   276  } IfxDma_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   278  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   280  /** \addtogroup IfxLld_Dma_Std_Reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   281   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   284  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   287  /** \brief Return the status of a DMA channel (reset / not reset)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   288   * This API needs to be used after the IfxDma_resetChannel()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   289   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   290   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   291   * \return TRUE if the channel is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   292   * FALSE if the channel is not reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   293   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   294   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   295   *      // check whether the channel is reset or not and also the hardware trigger disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   296   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   297   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   298   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   299   *              // Dma is out of RESET and there is no hardware request enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   300   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   301   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   305  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   307  /** \brief Reset the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   308   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   309   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   310   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   311   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   312   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   313   *      // Apply reset to the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   314   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   315   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   316   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   317   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   318  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   319  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   320  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   322  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   323   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   324  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   325  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   326  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   327  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   329  /** \brief Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   330   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   331   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   332   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   333   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   334   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   335   *      // Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   336   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   337   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   338   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   339   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   340  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   341  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   342  /** \brief Disable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   343   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   344   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   345   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   346   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   347   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   348   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   350  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   352  /** \brief Disable the generation of a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   353   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   354   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   355   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   356   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   357   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   358   *      // Disable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   359   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   360   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   362   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   363  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   364  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   365  /** \brief Enable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   366   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   367   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   369   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   370   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   371   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   372   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   373   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   374   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   375   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   376   *      // Do not restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   377   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   378   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   379   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   380   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   381   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   382   *      // Check for end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   383   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   384   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   385   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   386   *      // Enable the hardware trigger for channel 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   387   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   388   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   389   *      // Disable the hardware trigger for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   391   *      // Hardware triggers for second time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   392   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   393   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   394   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   395   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   396   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   397   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   398   *      // Restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   399   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   400   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   401   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   402   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   403   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   404  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   406  /** \brief Enable the generation of  a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   407   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   408   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   410   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   411   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   412   *      // Enable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   413   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   414   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   415   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   416   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   417  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   419  /** \brief Check the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   420   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   421   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   422   * \return TRUE if the TRL is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   423   * FALSE if the TRL is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   424   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   425   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   426   *      boolean trlFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   427   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   428   *      // Check whether the channel transaction request lost flag is set or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   429   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   430   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   431   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   433  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   435  /** \brief Converts DMA circular range to circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   436   * \param range DMA circular range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   437   * \return DMA circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   439  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   441  /** \brief Return the hardware transaction request status of a DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   442   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   443   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   444   * \return TRUE if the hardware transaction request is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   445   * FALSE if the hardware transaction request is disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   446   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   447   * A coding example can be found in \ref IfxDma_isChannelReset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   448   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   449   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   450  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   451  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   452  /** \brief Return the status of a DMA channel (transaction pending)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   453   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   454   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   455   * \return TRUE if a transaction request for the given channel is pending
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   456   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   458   *      // check for the channel request pending with the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   459   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   460   *              // There is channel request pending for channel 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   461   *              result |= 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   462   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   463   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   464   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   466  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   468  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   469   * \param dma pointer to DMA registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   470   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   471   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   473  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   474  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   475  /** \brief Request a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   476   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   477   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   480   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   481   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   482   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   483  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   485  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   487  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   488   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   490  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   491  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   492  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   494  /** \brief Clear the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   495   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   496   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   497   * \param mask value holds the bits to clear or mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   498   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   500   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   501   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   502   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   503   *                                                  IFXDMA_ERROR_S |    // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   504   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   505   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   510   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   512   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   513  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   515  /** \brief Disable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   516   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   517   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   518   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   519   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   520   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   521   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   522   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   523  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   525  /** \brief Disable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   526   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   527   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   528   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   530   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   531   *      // Disable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   532   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   533   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   534   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   535   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   537  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   539  /** \brief Enable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   540   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   541   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   542   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   543   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   544   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   545   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   546   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   547  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   548  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   549  /** \brief Enable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   550   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   551   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   552   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   553   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   554   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   555   *      // Enable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   556   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   557   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   558   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   560   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   561  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   562  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   563  /** \brief Return the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   564   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   565   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   566   * \return the content of the DMA.ERRSR register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   568   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   569   *      uint32 errorFlags = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   570   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   571   *      // Get the status of the error flags of move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   572   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   574   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   575   *              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   576   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   578   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   579   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   580   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   581   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   582   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   583   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   584   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   585   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   586   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   587   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   588   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   589   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   590   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   591   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   592   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   593   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   594   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   595   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   596   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   597   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   598   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   599   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   600   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   601   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   603  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   605  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   606  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   607  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   608   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   609  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   610  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   611  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   612  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   614  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   615   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   616   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   617   * \return Actual channel destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   618   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   619   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   620   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   621   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   622   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   623   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   625  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   627  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   628   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   629   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   630   * \return Actual channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   631   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   632   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   633   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   634   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   635   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   636   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   637  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   639  /** \brief Return the DMA channel suspend Mode status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   640   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   641   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   642   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   643   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   644  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   646  /** \brief Return remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   647   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   648   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   649   * \return Remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   650   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   651   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   652   *      // Wait till transfer count (TCOUNT) becomes 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   653   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   654   *      bool notFinished;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   655   *      do {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   656   *              notFinished = false;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   657   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   658   *                              notFinished = true;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   659   *                              break;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   660   *                      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   661   *      } while( notFinished );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   662   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   663   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   664   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   665  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   667  /** \brief get the time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   668   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   669   * \return the current time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   670   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   671   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   672   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   673   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   674   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   675   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   676  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   678  /** \brief Configure the move count for each DMA channel transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   679   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   680   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   681   * \param blockMode value holds the number of moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   682   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   684   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   685   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   686   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   687  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   688  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   689  /** \brief Configure a DMA channel to "continous transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   690   * After a transaction, the hardware request transaction remain enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   691   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   692   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   694   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   695   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   696   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   697   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   698  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   699  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   700  /** \brief Configure the destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   701   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   702   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   703   * \param address is the Initial address of the destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   704   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   705   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   706   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   707   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   708   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   709  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   710  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   711  /** \brief Configure a DMA channel destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   712   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   713   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   714   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   715   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   716   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   717   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   718   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   719   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   720   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   721   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   722  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   723  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   724  /** \brief Configure a DMA channel move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   725   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   726   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   727   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   728   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   729   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   730   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   733  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   735  /** \brief Configure a DMA channel shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   736   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   737   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   738   * \param shadow Specifies the shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   739   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   740   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   741   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   742   *      // Push the shadow mode into double buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   743   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   744   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   745   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   746   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   748  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   750  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   751   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   752   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   753   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   754   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   755   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   756   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   757   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   758   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   759  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   760  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   761  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   762   * One transfer request starts a complete DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   763   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   764   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   765   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   766   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   767   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   768   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   769   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   770  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   771  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   772  /** \brief Configure a DMA channel to "single transfer mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   773   * A transfer request is required for each transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   774   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   775   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   776   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   777   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   778   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   779   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   780   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   781  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   782  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   783  /** \brief Configure the source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   784   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   785   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   786   * \param address is the Initial address of the source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   787   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   788   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   789   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   790   *      // Check for the end of current transaction and before trigger the channel request for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   791   *      // for another channel, re configure the source and destination addresses
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   792   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   793   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   794   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   795   *      // Re-Program the source address for the channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   796   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   797   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the destination address for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   800   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   801   *      // Start DMA transaction for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   803   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   804   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   805   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   806  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   807  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   808  /** \brief Configure a DMA channel source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   809   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   810   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   811   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   812   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   813   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   814   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   815   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   816   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   817   *      // Re-program the source and destination circular buffer control fields
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   818   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   819   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   820   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   821   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   822   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   823   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   824  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   826  /** \brief Configure a DMA channel suspend enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   827   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   828   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   829   * \param enable enable (1) / disable (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   830   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   831   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   832  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   833  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   834  /** \brief Configure the move count of a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   835   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   836   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   837   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   838   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   839   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   840   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   841   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   842   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   843   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   844   *      // Wait till end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   845   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   846   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   847   *      // Change the TREL configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   848   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   849   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the BLKM configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   852   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the Move size configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   855   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   856   *      // Pull down the channel pending request after the first transfer is initiated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   858   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the transaction gets over
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   861   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   862   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   864   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   867   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   868   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   869   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   870  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   871  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   872  /** \brief Configure the shadow pointer register to read only
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   873   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   874   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   875   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   876   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   877   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   878   *      // Disable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   879   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   880   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   881   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   882   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   883  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   884  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   885  /** \brief Configure the shadow pointer register to write-able
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   886   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   887   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   888   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   889   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   890   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   891   *      // Enable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   892   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   893   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   894   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   895   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   896  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   897  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   898  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   899  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   900  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   901   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   902  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   903  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   904  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   905  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   906  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   907  /** \brief Clear channel halt request and aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   908   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   909   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   910   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   911   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   912   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   913   *      // Quit the halt mode of operation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   914   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   915   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   916   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   918  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   920  /** \brief Get channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   921   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   922   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   923   * \return halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   924   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   925   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   926   *      // Check for the channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   927   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   928   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   929   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   930   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   931  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   932  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   933  /** \brief setting channel halt request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   934   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   935   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   936   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   937   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   938   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   939   *      // Halt the channel processing
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   940   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   941   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   942   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   943   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   944  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   945  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   946  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   948  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   949   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   950  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   951  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   952  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   953  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   954  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   955  /** \brief get information on buffer being read by software and clear the notification flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   956   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   957   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   958   * \return TRUE  if one of the buffers is being read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   959   * FALSE if one of the buffers is already read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   960   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   961   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   962   *      // Check the buffer being read (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   963   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   964   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   965   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   966   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   967  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   968  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   969  /** \brief get Double buffer selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   970   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   971   * \param channelId channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   972   * \return TRUE if buffer 1 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   973   * FALSE if buffer 0 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   974   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   975   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   976   *      boolean buffer_being_filled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   977   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   978   *      // Check the buffer being filled (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   979   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   980   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   981   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   982   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   983  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   984  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   985  /** \brief keeps the double buffer active
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   986   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   987   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   988   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   989   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   990   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   991   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   992   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   993   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   994   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   995  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   996  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   997  /** \brief Double buffer switch application
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   998   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   999   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1000   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1001   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1002   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1003   *      // Apply software buffer switch
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1004   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1005   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1006   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1007   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1008  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1009  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1010  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1012  /** \addtogroup IfxLld_Dma_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1013   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1014  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1015  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1016  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1017  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1019  /** \brief Clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1020   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1021   * \param channelId channel for which the interrupt flag should be cleared
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1022   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1023   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1024   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1025   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1026   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1027  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1028  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1029  /** \brief Disable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1030   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1031   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1032   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1033   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1034   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1035   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1036   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1037   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1038   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1039  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1040  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1041  /** \brief Enable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1042   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1043   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1044   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1045   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1046   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1047   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1048   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1049   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1051  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1053  /** \brief Return and clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1054   * The flag is automatically cleared with the call to this function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1055   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1056   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1057   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1058   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1059   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1060   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1061   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1062   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1063   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1064   *      // Wait till end of the transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1065   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1066   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1067   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1068   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1069  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1070  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1071  /** \brief Returns and clears the pattern detection interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1072   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1073   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1074   * \return TRUE  if pattern detection for a given channel is found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1075   * FALSE if pattern detection for a given channel is not found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1076   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1077   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1078   *      // wait till pattern match is found for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1079   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1080   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1081   *      // Wait for the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1082   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1083   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1084   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1085   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1086  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1087  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1088  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1089   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1090   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1091   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1092   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1093   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1094   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1095   *      // wait for the destination buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1096   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1097   *      boolean destinationWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1098   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1099   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1100   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1101   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1103  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1105  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1106   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1107   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1108   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1109   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1110   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1111   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1112   *      // wait for the source buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1113   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1114   *      boolean sourceWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1115   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1116   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1117   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1118   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1119   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1120  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1122  /** \brief Return a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1123   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1124   * \param channelId channel for which the interrupt flag should be returned
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1125   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1126   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1127   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1128   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1129   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1130   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1131  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1132  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1133  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1134   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1135   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1136   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1137   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1138   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1139   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1140   *      boolean patternDetectOldVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1142   *      // Check the old value of the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1143   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1144   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1146   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1147  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1149  /** \brief Returns the SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1150   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1151   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1152   * \return SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1153   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1154   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1155   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1156   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1157   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1158   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1159  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1160  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1161  /** \brief Setting of channel interrupt service request by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1162   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1163   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1164   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1165   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1166   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1167   *      // Set the channel interrupt service request through software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1168   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1172  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1173  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1174  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1176  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1177  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1178  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1180  /** \brief Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1181   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1182   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1185   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1186   *      // Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1187   *      IfxDma_enableSwapDataByte(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1188   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1189   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1190   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1191  IFX_INLINE void IfxDma_enableSwapDataByte(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1193  /** \brief Configure the hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1194   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1195   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1196   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1197   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1198   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1199   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1200   *      // Set the required hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1201   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1202   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1203   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1204   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1205  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1207  /** \brief Sets the Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1208   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1209   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1210   * \param value Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1211   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1213  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1215  /** \brief Sets the Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1216   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1217   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1218   * \param length Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1220   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1221  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1222  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1223  /** \brief Sets the Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1224   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1225   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1226   * \param length Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1227   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1228   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1229  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1230  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1231  /** \brief Enable the Source Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1232   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1233   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1234   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1236  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1238  /** \brief Enable the Destination Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1239   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1240   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1241   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1242   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1243  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1245  /** \brief Returns the Data CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1246   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1247   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1248   * \return The Data CRC value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1250  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1252  /** \brief Returns the Source and Destination CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1253   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1254   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1255   * \return The source and destination CRC values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1256   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1257  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1258  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1259  /** \brief Returns the ERR pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1260   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1261   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1262   * \return ERR pointer for given DMA resource Partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1263   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1264  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1265  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1266  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1267  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1268  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1269  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1270  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1271  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1272      dma->TSR[channelId].B.HLTCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1273  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1274  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1275  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1276  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1277  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1278      dma->CH[channelId].CHCSR.B.CICH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1279  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1280  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1281  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1282  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1283  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1284      dma->TSR[channelId].B.CTL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1285  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1288  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1289  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1290      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1291      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1292          dma->ME1.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1293      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1294      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1296          dma->ME0.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1298  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1299  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1301  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1302  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1303      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1304  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1305  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1307  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1308  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1309      dma->TSR[channelId].B.DCH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1310  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1311  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1312  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1313  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1314  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1315      dma->TSR[channelId].B.ETRL = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1316  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1317  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1319  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1320  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1321      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1322      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1323          dma->ME1.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1324      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1325      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1326      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1327          dma->ME0.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1328      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1329  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1330  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1331  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1332  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1333  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1334      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1335      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1336          dma->ME1.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1337      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1338      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1339      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1340          dma->ME0.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1341      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1342  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1343  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1344  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1345  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1346  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1347      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1348  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1349  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1350  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1351  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1352  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1353      dma->TSR[channelId].B.ECH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1354  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1355  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1357  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1358  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1359      dma->TSR[channelId].B.ETRL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1360  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1361  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1362  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1363  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1364  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1365      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1366      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1367          dma->ME1.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1368      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1369      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1370      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1371          dma->ME0.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1372      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1373  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1374  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1375  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1376  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1377  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1378      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1379      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1380          dma->ME1.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1381      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1382      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1383      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1384          dma->ME0.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1385      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1386  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1388  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1389  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1390  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1391      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1393      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1394  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1395      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1396      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1397          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1398      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1399  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1400      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1401  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1402  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1403  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1404  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1405  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1406      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1407  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1408      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1409  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1410      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1411      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1412          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1413      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1414  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1415      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1416  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1417  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1419  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1420  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1421      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1422  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1423      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1425      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1426      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1427          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1428      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1429  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1430      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1431  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1432  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1434  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1435  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1436      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1437  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1438      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1439  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1440      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1441      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1442          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1443      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1444  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1445      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1446  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1447  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1448  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1449  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1450  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1451      return dma->CH[channelId].DADR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1452  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1453  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1454  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1455  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1456  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1457      return dma->TSR[channelId].B.HLTACK != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1458  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1459  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1460  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1461  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1462  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1463      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1465      result = dma->CH[channelId].CHCSR.B.ICH;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1466  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1467      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1468  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1469  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1470  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1471  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1472  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1473      return dma->CH[channelId].CHCSR.B.LXO != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1474  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1475  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1477  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1478  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1479      return dma->CH[channelId].SADR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1480  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1481  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1482  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1483  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1484  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1485      return dma->SUSACR[channelId].B.SUSAC;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1486  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1489  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1490  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1491      return dma->TSR[channelId].B.TRL != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1492  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1494  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1495  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1496  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1497      return dma->CH[channelId].CHCSR.B.TCOUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1498  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1499  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1500  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1501  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1502  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1503      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1504  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1505  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1507  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1508  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1509      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1510  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1511      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1512  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1513      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1514      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1515          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1516      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1517  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1518      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1519  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1520  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1522  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1523  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1524      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1525  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1528  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1529  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1530      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1531      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1532          return dma->ME1.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1533      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1534      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1535      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1536          return dma->ME0.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1537      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1538  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1539  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1541  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1542  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1543      IFX_UNUSED_PARAMETER(dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1544      // only a single DMA available, therefore no check for the dma pointer required
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1545      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1546  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1547  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1548  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1549  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1550  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1551      return dma->TIME.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1552  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1555  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1556  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1557      return dma->TSR[channelId].B.RST == 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1558  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1559  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1560  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1561  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1562  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1563      return dma->TSR[channelId].B.HTRE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1564  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1565  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1566  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1567  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1568  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1569      return dma->TSR[channelId].B.CH != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1570  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1571  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1572  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1573  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1574  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1575      dma->CH[channelId].CHCSR.U = 0U << IFX_DMA_CH_CHCSR_FROZEN_OFF;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1576  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1577  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1578  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1579  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1580  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1581      dma->TSR[channelId].B.RST = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1582  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1583  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1584  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1585  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1586  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1587      dma->CH[channelId].CHCFGR.B.BLKM = blockMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1588  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1589  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1590  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1591  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1592  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1593      dma->CH[channelId].CHCFGR.B.CHMODE = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1594  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1595  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1596  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1597  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1598  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1599      dma->CH[channelId].DADR.U = (uint32)address;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1600  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1601  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1602  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1603  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1604  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1605      Ifx_DMA_CH_ADICR adicr;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1606      adicr.U                    = dma->CH[channelId].ADICR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1607      adicr.B.DMF                = incStep;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1608      adicr.B.INCD               = direction;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1609      adicr.B.CBLD               = size;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1610      dma->CH[channelId].ADICR.U = adicr.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1611  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1612  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1614  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1615  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1616      dma->TSR[channelId].B.HLTREQ = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1617  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1619  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1620  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1621  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1622      dma->CH[channelId].CHCSR.B.SIT = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1623  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1625  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1626  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1627  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1628      dma->CH[channelId].CHCFGR.B.CHDW = moveSize;
	ld.bu	d15,[a2]8214
.L366:
	insert	d15,d15,d3,#5,#3
	st.b	[a2]8214,d15
.L175:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    97          IfxDma_setChannelDestinationIncrementStep(fce->fceDmaChannel.dma, fce->fceDmaChannel.channelId, dmaIncrementStep,
	fcall	.cocofun_6
.L184:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    41   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    42   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    43   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    44   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    45   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    46   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    47   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    48   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    49   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    50   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    51   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    52   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    53   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    54   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    55   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    56   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    57   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    59  #ifndef IFXDMA_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    60  #define IFXDMA_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    62  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    63  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    65  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    66  #include "_Impl/IfxDma_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    67  #include "IfxDma_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    69  #include "IfxDma_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    70  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    71  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    72  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    74  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    75  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    78  /** \addtogroup IfxLld_Dma_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    79   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    80  /** \brief Bus Master Mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    81   * Definition in Ifx_DMA.MODE[4].B.MODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    82   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    83  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    84  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    85      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    86      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    87  } IfxDma_BusMasterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    89  /** \brief Channel Bus Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    93      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    94      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    95      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    96  } IfxDma_ChannelBusPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    97  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    98  /** \brief DMA circular buffer (wrap around) definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    99   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   103      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   104      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   105      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   119  } IfxDma_ChannelIncrementCircular;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   121  /** \brief DMA incrementation direction definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   122   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   126      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   127      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   128  } IfxDma_ChannelIncrementDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   129  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   130  /** \brief DMA incrementation definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   131   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   132   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   133  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   134  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   135      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   136      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   137      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   143  } IfxDma_ChannelIncrementStep;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   145  /** \brief Channel Transfer Interrupt generation mechanism.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   146   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   147   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   148  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   149  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   150      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   151      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   152  } IfxDma_ChannelInterruptControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   154  /** \brief DMA transfer definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   155   * Definition in Ifx_DMA.ME0.CHCR.B.BLKM and Ifx_DMA.ME1.CHCR.B.BLKM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   156   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   157  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   158  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   159      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   160      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   161      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   167  } IfxDma_ChannelMove;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   169  /** \brief DMA move size definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   170   * Definition in Ifx_DMA.ME0.CHCR.B.CHDW and Ifx_DMA.ME1.CHCR.B.CHDW
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   172  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   173  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   174      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   175      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   176      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   180  } IfxDma_ChannelMoveSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   182  /** \brief DMA operation mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   183   * Definition in Ifx_DMA.ME0.CHCR.B.CHMODE and Ifx_DMA.ME1.CHCR.B.CHMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   185  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   186  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   187      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   188      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   189  } IfxDma_ChannelOperationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   190  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   191  /** \brief Pattern detection selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   192   * Definition in Ifx_DMA.ME0.CHCR.B.PATSEL and Ifx_DMA.ME1.CHCR.B.PATSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   194  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   195  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   196      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   197      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   198      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   204  } IfxDma_ChannelPattern;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   206  /** \brief Channel Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   207   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   208  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   209  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   210      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   211      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   212      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   213  } IfxDma_ChannelPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   215  /** \brief DMA request mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   216   * Definition in Ifx_DMA.ME0.CHCR.B.RROAT and Ifx_DMA.ME1.CHCR.B.RROAT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   217   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   218  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   219  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   220      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   221      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   222  } IfxDma_ChannelRequestMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   224  /** \brief DMA request selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   225   * Definition in Ifx_DMA.ME0.CHCR.B.PRSEL and Ifx_DMA.ME1.CHCR.B.PRSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   227  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   228  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   229      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   230      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   231  } IfxDma_ChannelRequestSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   233  /** \brief shadow definition definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   234   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   236  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   237  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   238      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   239      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   240      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   251  } IfxDma_ChannelShadow;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   253  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   254  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   255      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   256      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   257      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   259  } IfxDma_HardwareResourcePartition;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   261  /** \brief DMA move engine definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   263  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   264  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   265      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   266      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   267  } IfxDma_MoveEngine;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   269  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   270   * Definition in Ifx_DMA.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   271   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   272  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   274      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   275      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   276  } IfxDma_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   278  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   280  /** \addtogroup IfxLld_Dma_Std_Reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   281   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   284  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   287  /** \brief Return the status of a DMA channel (reset / not reset)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   288   * This API needs to be used after the IfxDma_resetChannel()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   289   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   290   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   291   * \return TRUE if the channel is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   292   * FALSE if the channel is not reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   293   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   294   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   295   *      // check whether the channel is reset or not and also the hardware trigger disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   296   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   297   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   298   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   299   *              // Dma is out of RESET and there is no hardware request enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   300   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   301   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   305  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   307  /** \brief Reset the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   308   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   309   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   310   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   311   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   312   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   313   *      // Apply reset to the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   314   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   315   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   316   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   317   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   318  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   319  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   320  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   322  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   323   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   324  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   325  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   326  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   327  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   329  /** \brief Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   330   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   331   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   332   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   333   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   334   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   335   *      // Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   336   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   337   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   338   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   339   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   340  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   341  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   342  /** \brief Disable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   343   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   344   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   345   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   346   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   347   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   348   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   350  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   352  /** \brief Disable the generation of a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   353   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   354   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   355   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   356   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   357   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   358   *      // Disable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   359   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   360   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   362   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   363  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   364  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   365  /** \brief Enable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   366   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   367   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   369   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   370   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   371   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   372   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   373   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   374   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   375   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   376   *      // Do not restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   377   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   378   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   379   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   380   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   381   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   382   *      // Check for end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   383   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   384   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   385   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   386   *      // Enable the hardware trigger for channel 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   387   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   388   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   389   *      // Disable the hardware trigger for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   391   *      // Hardware triggers for second time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   392   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   393   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   394   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   395   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   396   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   397   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   398   *      // Restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   399   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   400   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   401   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   402   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   403   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   404  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   406  /** \brief Enable the generation of  a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   407   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   408   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   410   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   411   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   412   *      // Enable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   413   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   414   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   415   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   416   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   417  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   419  /** \brief Check the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   420   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   421   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   422   * \return TRUE if the TRL is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   423   * FALSE if the TRL is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   424   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   425   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   426   *      boolean trlFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   427   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   428   *      // Check whether the channel transaction request lost flag is set or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   429   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   430   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   431   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   433  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   435  /** \brief Converts DMA circular range to circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   436   * \param range DMA circular range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   437   * \return DMA circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   439  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   441  /** \brief Return the hardware transaction request status of a DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   442   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   443   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   444   * \return TRUE if the hardware transaction request is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   445   * FALSE if the hardware transaction request is disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   446   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   447   * A coding example can be found in \ref IfxDma_isChannelReset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   448   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   449   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   450  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   451  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   452  /** \brief Return the status of a DMA channel (transaction pending)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   453   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   454   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   455   * \return TRUE if a transaction request for the given channel is pending
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   456   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   458   *      // check for the channel request pending with the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   459   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   460   *              // There is channel request pending for channel 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   461   *              result |= 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   462   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   463   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   464   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   466  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   468  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   469   * \param dma pointer to DMA registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   470   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   471   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   473  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   474  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   475  /** \brief Request a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   476   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   477   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   480   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   481   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   482   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   483  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   485  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   487  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   488   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   490  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   491  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   492  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   494  /** \brief Clear the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   495   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   496   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   497   * \param mask value holds the bits to clear or mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   498   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   500   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   501   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   502   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   503   *                                                  IFXDMA_ERROR_S |    // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   504   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   505   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   510   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   512   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   513  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   515  /** \brief Disable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   516   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   517   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   518   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   519   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   520   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   521   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   522   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   523  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   525  /** \brief Disable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   526   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   527   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   528   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   530   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   531   *      // Disable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   532   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   533   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   534   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   535   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   537  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   539  /** \brief Enable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   540   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   541   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   542   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   543   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   544   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   545   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   546   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   547  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   548  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   549  /** \brief Enable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   550   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   551   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   552   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   553   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   554   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   555   *      // Enable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   556   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   557   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   558   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   560   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   561  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   562  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   563  /** \brief Return the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   564   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   565   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   566   * \return the content of the DMA.ERRSR register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   568   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   569   *      uint32 errorFlags = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   570   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   571   *      // Get the status of the error flags of move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   572   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   574   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   575   *              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   576   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   578   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   579   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   580   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   581   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   582   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   583   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   584   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   585   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   586   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   587   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   588   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   589   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   590   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   591   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   592   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   593   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   594   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   595   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   596   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   597   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   598   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   599   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   600   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   601   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   603  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   605  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   606  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   607  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   608   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   609  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   610  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   611  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   612  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   614  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   615   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   616   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   617   * \return Actual channel destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   618   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   619   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   620   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   621   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   622   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   623   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   625  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   627  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   628   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   629   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   630   * \return Actual channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   631   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   632   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   633   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   634   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   635   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   636   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   637  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   639  /** \brief Return the DMA channel suspend Mode status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   640   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   641   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   642   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   643   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   644  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   646  /** \brief Return remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   647   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   648   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   649   * \return Remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   650   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   651   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   652   *      // Wait till transfer count (TCOUNT) becomes 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   653   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   654   *      bool notFinished;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   655   *      do {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   656   *              notFinished = false;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   657   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   658   *                              notFinished = true;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   659   *                              break;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   660   *                      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   661   *      } while( notFinished );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   662   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   663   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   664   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   665  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   667  /** \brief get the time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   668   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   669   * \return the current time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   670   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   671   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   672   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   673   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   674   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   675   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   676  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   678  /** \brief Configure the move count for each DMA channel transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   679   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   680   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   681   * \param blockMode value holds the number of moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   682   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   684   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   685   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   686   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   687  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   688  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   689  /** \brief Configure a DMA channel to "continous transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   690   * After a transaction, the hardware request transaction remain enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   691   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   692   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   694   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   695   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   696   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   697   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   698  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   699  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   700  /** \brief Configure the destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   701   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   702   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   703   * \param address is the Initial address of the destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   704   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   705   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   706   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   707   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   708   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   709  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   710  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   711  /** \brief Configure a DMA channel destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   712   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   713   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   714   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   715   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   716   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   717   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   718   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   719   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   720   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   721   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   722  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   723  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   724  /** \brief Configure a DMA channel move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   725   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   726   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   727   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   728   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   729   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   730   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   733  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   735  /** \brief Configure a DMA channel shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   736   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   737   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   738   * \param shadow Specifies the shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   739   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   740   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   741   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   742   *      // Push the shadow mode into double buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   743   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   744   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   745   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   746   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   748  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   750  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   751   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   752   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   753   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   754   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   755   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   756   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   757   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   758   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   759  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   760  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   761  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   762   * One transfer request starts a complete DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   763   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   764   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   765   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   766   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   767   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   768   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   769   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   770  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   771  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   772  /** \brief Configure a DMA channel to "single transfer mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   773   * A transfer request is required for each transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   774   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   775   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   776   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   777   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   778   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   779   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   780   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   781  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   782  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   783  /** \brief Configure the source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   784   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   785   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   786   * \param address is the Initial address of the source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   787   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   788   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   789   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   790   *      // Check for the end of current transaction and before trigger the channel request for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   791   *      // for another channel, re configure the source and destination addresses
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   792   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   793   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   794   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   795   *      // Re-Program the source address for the channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   796   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   797   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the destination address for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   800   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   801   *      // Start DMA transaction for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   803   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   804   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   805   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   806  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   807  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   808  /** \brief Configure a DMA channel source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   809   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   810   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   811   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   812   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   813   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   814   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   815   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   816   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   817   *      // Re-program the source and destination circular buffer control fields
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   818   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   819   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   820   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   821   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   822   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   823   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   824  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   826  /** \brief Configure a DMA channel suspend enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   827   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   828   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   829   * \param enable enable (1) / disable (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   830   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   831   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   832  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   833  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   834  /** \brief Configure the move count of a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   835   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   836   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   837   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   838   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   839   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   840   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   841   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   842   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   843   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   844   *      // Wait till end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   845   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   846   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   847   *      // Change the TREL configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   848   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   849   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the BLKM configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   852   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the Move size configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   855   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   856   *      // Pull down the channel pending request after the first transfer is initiated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   858   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the transaction gets over
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   861   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   862   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   864   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   867   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   868   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   869   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   870  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   871  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   872  /** \brief Configure the shadow pointer register to read only
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   873   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   874   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   875   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   876   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   877   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   878   *      // Disable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   879   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   880   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   881   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   882   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   883  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   884  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   885  /** \brief Configure the shadow pointer register to write-able
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   886   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   887   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   888   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   889   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   890   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   891   *      // Enable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   892   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   893   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   894   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   895   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   896  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   897  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   898  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   899  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   900  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   901   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   902  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   903  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   904  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   905  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   906  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   907  /** \brief Clear channel halt request and aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   908   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   909   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   910   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   911   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   912   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   913   *      // Quit the halt mode of operation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   914   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   915   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   916   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   918  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   920  /** \brief Get channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   921   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   922   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   923   * \return halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   924   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   925   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   926   *      // Check for the channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   927   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   928   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   929   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   930   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   931  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   932  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   933  /** \brief setting channel halt request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   934   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   935   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   936   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   937   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   938   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   939   *      // Halt the channel processing
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   940   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   941   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   942   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   943   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   944  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   945  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   946  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   948  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   949   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   950  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   951  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   952  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   953  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   954  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   955  /** \brief get information on buffer being read by software and clear the notification flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   956   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   957   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   958   * \return TRUE  if one of the buffers is being read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   959   * FALSE if one of the buffers is already read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   960   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   961   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   962   *      // Check the buffer being read (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   963   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   964   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   965   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   966   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   967  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   968  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   969  /** \brief get Double buffer selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   970   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   971   * \param channelId channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   972   * \return TRUE if buffer 1 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   973   * FALSE if buffer 0 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   974   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   975   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   976   *      boolean buffer_being_filled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   977   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   978   *      // Check the buffer being filled (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   979   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   980   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   981   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   982   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   983  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   984  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   985  /** \brief keeps the double buffer active
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   986   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   987   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   988   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   989   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   990   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   991   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   992   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   993   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   994   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   995  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   996  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   997  /** \brief Double buffer switch application
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   998   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   999   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1000   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1001   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1002   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1003   *      // Apply software buffer switch
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1004   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1005   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1006   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1007   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1008  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1009  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1010  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1012  /** \addtogroup IfxLld_Dma_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1013   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1014  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1015  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1016  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1017  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1019  /** \brief Clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1020   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1021   * \param channelId channel for which the interrupt flag should be cleared
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1022   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1023   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1024   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1025   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1026   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1027  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1028  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1029  /** \brief Disable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1030   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1031   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1032   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1033   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1034   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1035   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1036   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1037   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1038   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1039  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1040  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1041  /** \brief Enable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1042   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1043   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1044   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1045   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1046   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1047   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1048   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1049   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1051  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1053  /** \brief Return and clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1054   * The flag is automatically cleared with the call to this function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1055   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1056   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1057   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1058   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1059   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1060   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1061   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1062   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1063   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1064   *      // Wait till end of the transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1065   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1066   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1067   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1068   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1069  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1070  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1071  /** \brief Returns and clears the pattern detection interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1072   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1073   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1074   * \return TRUE  if pattern detection for a given channel is found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1075   * FALSE if pattern detection for a given channel is not found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1076   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1077   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1078   *      // wait till pattern match is found for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1079   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1080   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1081   *      // Wait for the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1082   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1083   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1084   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1085   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1086  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1087  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1088  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1089   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1090   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1091   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1092   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1093   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1094   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1095   *      // wait for the destination buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1096   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1097   *      boolean destinationWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1098   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1099   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1100   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1101   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1103  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1105  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1106   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1107   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1108   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1109   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1110   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1111   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1112   *      // wait for the source buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1113   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1114   *      boolean sourceWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1115   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1116   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1117   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1118   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1119   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1120  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1122  /** \brief Return a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1123   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1124   * \param channelId channel for which the interrupt flag should be returned
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1125   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1126   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1127   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1128   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1129   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1130   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1131  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1132  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1133  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1134   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1135   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1136   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1137   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1138   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1139   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1140   *      boolean patternDetectOldVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1142   *      // Check the old value of the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1143   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1144   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1146   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1147  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1149  /** \brief Returns the SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1150   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1151   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1152   * \return SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1153   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1154   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1155   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1156   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1157   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1158   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1159  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1160  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1161  /** \brief Setting of channel interrupt service request by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1162   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1163   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1164   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1165   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1166   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1167   *      // Set the channel interrupt service request through software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1168   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1172  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1173  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1174  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1176  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1177  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1178  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1180  /** \brief Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1181   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1182   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1185   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1186   *      // Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1187   *      IfxDma_enableSwapDataByte(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1188   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1189   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1190   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1191  IFX_INLINE void IfxDma_enableSwapDataByte(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1193  /** \brief Configure the hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1194   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1195   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1196   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1197   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1198   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1199   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1200   *      // Set the required hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1201   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1202   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1203   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1204   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1205  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1207  /** \brief Sets the Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1208   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1209   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1210   * \param value Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1211   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1213  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1215  /** \brief Sets the Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1216   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1217   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1218   * \param length Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1220   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1221  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1222  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1223  /** \brief Sets the Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1224   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1225   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1226   * \param length Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1227   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1228   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1229  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1230  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1231  /** \brief Enable the Source Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1232   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1233   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1234   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1236  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1238  /** \brief Enable the Destination Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1239   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1240   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1241   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1242   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1243  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1245  /** \brief Returns the Data CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1246   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1247   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1248   * \return The Data CRC value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1250  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1252  /** \brief Returns the Source and Destination CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1253   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1254   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1255   * \return The source and destination CRC values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1256   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1257  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1258  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1259  /** \brief Returns the ERR pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1260   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1261   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1262   * \return ERR pointer for given DMA resource Partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1263   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1264  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1265  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1266  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1267  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1268  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1269  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1270  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1271  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1272      dma->TSR[channelId].B.HLTCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1273  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1274  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1275  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1276  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1277  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1278      dma->CH[channelId].CHCSR.B.CICH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1279  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1280  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1281  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1282  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1283  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1284      dma->TSR[channelId].B.CTL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1285  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1288  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1289  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1290      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1291      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1292          dma->ME1.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1293      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1294      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1296          dma->ME0.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1298  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1299  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1301  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1302  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1303      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1304  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1305  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1307  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1308  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1309      dma->TSR[channelId].B.DCH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1310  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1311  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1312  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1313  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1314  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1315      dma->TSR[channelId].B.ETRL = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1316  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1317  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1319  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1320  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1321      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1322      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1323          dma->ME1.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1324      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1325      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1326      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1327          dma->ME0.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1328      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1329  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1330  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1331  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1332  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1333  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1334      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1335      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1336          dma->ME1.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1337      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1338      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1339      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1340          dma->ME0.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1341      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1342  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1343  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1344  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1345  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1346  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1347      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1348  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1349  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1350  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1351  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1352  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1353      dma->TSR[channelId].B.ECH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1354  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1355  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1357  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1358  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1359      dma->TSR[channelId].B.ETRL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1360  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1361  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1362  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1363  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1364  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1365      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1366      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1367          dma->ME1.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1368      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1369      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1370      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1371          dma->ME0.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1372      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1373  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1374  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1375  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1376  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1377  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1378      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1379      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1380          dma->ME1.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1381      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1382      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1383      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1384          dma->ME0.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1385      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1386  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1388  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1389  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1390  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1391      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1393      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1394  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1395      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1396      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1397          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1398      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1399  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1400      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1401  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1402  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1403  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1404  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1405  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1406      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1407  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1408      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1409  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1410      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1411      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1412          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1413      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1414  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1415      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1416  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1417  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1419  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1420  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1421      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1422  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1423      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1425      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1426      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1427          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1428      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1429  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1430      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1431  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1432  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1434  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1435  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1436      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1437  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1438      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1439  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1440      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1441      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1442          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1443      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1444  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1445      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1446  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1447  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1448  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1449  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1450  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1451      return dma->CH[channelId].DADR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1452  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1453  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1454  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1455  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1456  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1457      return dma->TSR[channelId].B.HLTACK != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1458  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1459  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1460  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1461  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1462  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1463      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1465      result = dma->CH[channelId].CHCSR.B.ICH;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1466  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1467      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1468  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1469  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1470  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1471  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1472  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1473      return dma->CH[channelId].CHCSR.B.LXO != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1474  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1475  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1477  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1478  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1479      return dma->CH[channelId].SADR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1480  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1481  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1482  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1483  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1484  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1485      return dma->SUSACR[channelId].B.SUSAC;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1486  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1489  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1490  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1491      return dma->TSR[channelId].B.TRL != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1492  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1494  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1495  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1496  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1497      return dma->CH[channelId].CHCSR.B.TCOUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1498  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1499  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1500  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1501  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1502  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1503      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1504  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1505  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1507  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1508  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1509      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1510  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1511      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1512  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1513      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1514      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1515          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1516      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1517  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1518      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1519  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1520  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1522  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1523  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1524      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1525  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1528  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1529  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1530      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1531      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1532          return dma->ME1.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1533      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1534      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1535      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1536          return dma->ME0.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1537      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1538  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1539  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1541  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1542  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1543      IFX_UNUSED_PARAMETER(dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1544      // only a single DMA available, therefore no check for the dma pointer required
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1545      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1546  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1547  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1548  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1549  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1550  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1551      return dma->TIME.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1552  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1555  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1556  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1557      return dma->TSR[channelId].B.RST == 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1558  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1559  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1560  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1561  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1562  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1563      return dma->TSR[channelId].B.HTRE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1564  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1565  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1566  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1567  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1568  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1569      return dma->TSR[channelId].B.CH != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1570  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1571  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1572  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1573  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1574  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1575      dma->CH[channelId].CHCSR.U = 0U << IFX_DMA_CH_CHCSR_FROZEN_OFF;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1576  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1577  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1578  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1579  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1580  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1581      dma->TSR[channelId].B.RST = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1582  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1583  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1584  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1585  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1586  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1587      dma->CH[channelId].CHCFGR.B.BLKM = blockMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1588  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1589  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1590  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1591  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1592  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1593      dma->CH[channelId].CHCFGR.B.CHMODE = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1594  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1595  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1596  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1597  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1598  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1599      dma->CH[channelId].DADR.U = (uint32)address;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1600  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1601  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1602  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1603  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1604  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1605      Ifx_DMA_CH_ADICR adicr;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1606      adicr.U                    = dma->CH[channelId].ADICR.U;
	ld.w	d0,[a2]8208
.L319:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1607      adicr.B.DMF                = incStep;
	insert	d15,d0,d2,#4,#3
.L367:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1608      adicr.B.INCD               = direction;
	or	d15,#128
	insert	d0,d0,d15,#0,#8
.L368:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1609      adicr.B.CBLD               = size;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1610      dma->CH[channelId].ADICR.U = adicr.U;
	insert	d0,d0,#2,#12,#4
	st.w	[a2]8208,d0
.L185:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	     2   * \file IfxDma_Dma.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	     3   * \brief DMA DMA details
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	     4   * \ingroup IfxLld_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    41   * \defgroup IfxLld_Dma_Dma_Usage How to use the DMA Interface driver?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    42   * \ingroup IfxLld_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    44   * The DMA interface driver provides a default configuration for data moves without intervention of the CPU or other on chip devices.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    45   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    46   * In the following sections it will be described, how to integrate the driver into the application framework for different use cases.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    48   * \section IfxLld_Dma_Dma_Preparation Preparation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    49   * \subsection IfxLld_Dma_Dma_Include Include Files
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    51   * Include following header file into your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    52   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    53   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    54   *      #include <Dma/Dma/IfxDma_Dma.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    55   *      #include <Vadc/Adc/IfxVadc_Adc.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    56   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    57   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    58   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    59   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    60   * \subsection IfxLld_Dma_Dma_Module Module initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    61   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    62   * Declare the dma handle as a global variable:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    63   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    64   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    65   * // DMA handle
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    66   * IfxDma_Dma dma;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    67   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    68   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    69   * Initialize the DMA with following code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    70   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    71   *      // create module config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    72   *      IfxDma_Dma_Config dmaConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    73   *      IfxDma_Dma_initModuleConfig(&dmaConfig, &MODULE_DMA);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    74   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    75   *      // initialize module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    76   *      // IfxDma_Dma dma; // declared globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    77   *      IfxDma_Dma_initModule(&dma, &dmaConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    78   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    79   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    80   * This only has to be done once in the application.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    81   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    82   * The "IfxDma_Dma dma" handle should either be declared as a global variable (as shown in this example),
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    83   * or it can be created locally if desired:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    84   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    85   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    86   *      IfxDma_Dma dma;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    87   *      IfxDma_Dma_createModuleHandle(&dma, &MODULE_DMA);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    88   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    89   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    90   * \subsection IfxLld_Dma_Dma_Simple Memory-to-Memory Transfers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    91   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    92   * A large amount of data should be copied between SRI based memories, e.g. from Flash into the DSPR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    93   * of the current CPU. It's recommended to use 256 bit moves for this purpose for best performance.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    94   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    95   * This requires, that source and target locations are 256 bit (32 byte) aligned. With the GCC compiler
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    96   * this can be achieved by adding __attribute__ ((aligned(64))) to the arrays:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    97   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    98   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    99   * #define MEMORY_TRANSFER_NUM_WORDS 1024
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   100   * uint32 __attribute__ ((aligned(64))) memoryDestination[MEMORY_TRANSFER_NUM_WORDS];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   101   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   103   * Channel configuration and handling for the data move:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   104   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   105   *      // construct the channel configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   106   *      IfxDma_Dma_ChannelConfig chnCfg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   107   *      IfxDma_Dma_initChannelConfig(&chnCfg, &dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   108   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   109   *      // select DMA channel which should be used
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   110   *      chnCfg.channelId           = IfxDma_ChannelId_0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   111   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   112   *      // source and destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   113   *      chnCfg.sourceAddress       = (uint32)0x80000000; // somewhere in flash section, here: start of PFlash (only for demo)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   114   *      chnCfg.destinationAddress  = (uint32)memoryDestination;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   115   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   116   *      // move size, transfer count and request/operation mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   117   *      chnCfg.moveSize            = IfxDma_ChannelMoveSize_256bit;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   118   *      chnCfg.transferCount       = (4 * MEMORY_TRANSFER_NUM_WORDS) / 32; // e.g. 1024 words require 128 * 256 bit moves
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   119   *      chnCfg.requestMode         = IfxDma_ChannelRequestMode_completeTransactionPerRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   120   *      chnCfg.operationMode       = IfxDma_ChannelOperationMode_continuous;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   121   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   122   *      // transfer configuration into DMA channel registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   123   *      IfxDma_Dma_Channel chn;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   124   *      IfxDma_Dma_initChannel(&chn, &chnCfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   126   *      // start transfer and wait until it's finished
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   127   *      IfxDma_Dma_startChannelTransaction(&chn);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   128   *      while( IfxDma_Dma_isChannelTransactionPending(&chn) == TRUE );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   129   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   130   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   131   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   132   * \subsection IfxLld_Dma_Dma_Peripheral Peripheral-to-Memory Transfers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   133   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   134   * The content of 8 ADC result registers should be transfered to a memory location in DSPR whenever
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   135   * an VADC autoscan has been finished. After the DMA transaction, an interrupt should be triggered
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   136   * so that the CPU can process the conversion results.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   137   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   138   * We use following global variables:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   139   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   140   * // buffer for autoscanned conversion result values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   141   * #define NUM_SCANNED_CHANNELS  8
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   142   * static uint16 vadcResultBuffer[NUM_SCANNED_CHANNELS];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   143   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   144   * // VADC handle
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   145   * IfxVadc_Adc vadc;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   146   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   147   * // VADC group handle
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   148   * static IfxVadc_Adc_Group adcGroup;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   149   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   150   * // DMA channel handle
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   151   * static IfxDma_Dma_Channel dmaChn;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   152   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   153   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   154   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   155   * Create an interrupt handler for the DMA channel request:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   156   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   157   * // priorities are normally defined in Ifx_IntPrioDef.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   158   * #define IFX_INTPRIO_DMA_CH0  1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   159   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   160   * IFX_INTERRUPT(dmaCh0ISR, 0, IFX_INTPRIO_DMA_CH0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   161   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   162   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   163   *      // do something with the conversion results in vadcResultBuffer[]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   164   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   165   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   166   *      // re-init DMA channel destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   167   *      IfxDma_Dma_setChannelDestinationAddress(&dmaChn, ADDR_CPU_DSPR(IfxCpu_getCoreId(), &vadcResultBuffer[0]));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   168   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   169   *      // start new transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   170   *      IfxDma_Dma_setChannelTransferCount(&dmaChn, NUM_SCANNED_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   171   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   172   *      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   173   *          uint32 channels = 0xff; // all 8 channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   174   *          uint32 mask = 0xff; // modify the selection of all channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   175   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   176   *          // configure autoscan (single shot, not continuous scan)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   177   *          IfxVadc_Adc_setScan(&adcGroup, channels, mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   178   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   179   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   180   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   181   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   182   * ADC configuration:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   183   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   184   *      // create configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   185   *      IfxVadc_Adc_Config adcConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   186   *      IfxVadc_Adc_initModuleConfig(&adcConfig, &MODULE_VADC);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   187   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   188   *      adcConfig.startupCalibration = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   189   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   190   *      // initialize module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   191   *      // IfxVadc_Adc vadc; // declared globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   192   *      IfxVadc_Adc_initModule(&vadc, &adcConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   193   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   194   *      // create group config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   195   *      IfxVadc_Adc_GroupConfig adcGroupConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   196   *      IfxVadc_Adc_initGroupConfig(&adcGroupConfig, &vadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   197   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   198   *      // initialize the group
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   199   *      //IfxVadc_Adc_Group adcGroup; // defined globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   200   *      adcGroupConfig.groupId = IfxVadc_GroupId_0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   201   *      adcGroupConfig.master = adcGroupConfig.groupId;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   202   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   203   *      // enable all arbiter request sources
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   204   *      adcGroupConfig.arbiter.requestSlotQueueEnabled            = TRUE; // enable Queue mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   205   *      adcGroupConfig.arbiter.requestSlotScanEnabled             = TRUE; // enable Scan mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   206   *      adcGroupConfig.arbiter.requestSlotBackgroundScanEnabled   = TRUE; // enable Background scan
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   207   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   208   *      // enable all gates in "always" mode (no edge detection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   209   *      adcGroupConfig.queueRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   210   *      adcGroupConfig.scanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   211   *      adcGroupConfig.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   212   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   213   *      IfxVadc_Adc_initGroup(&adcGroup, &adcGroupConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   214   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   215   *      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   216   *               // create channel config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   217   *               IfxVadc_Adc_ChannelConfig adcChannelConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   218   *               IfxVadc_Adc_initChannelConfig(&adcChannelConfig, &adcGroup);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   219   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   220   *               // initialize the channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   221   *               for(int i=0; i<NUM_SCANNED_CHANNELS; ++i) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   222   *                   adcChannelConfig.channelId = (IfxVadc_ChannelId)i;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   223   *                   adcChannelConfig.resultRegister = IfxVadc_ChannelResult_0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   224   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   225   *                   // initialize the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   226   *                   IfxVadc_Adc_Channel adcChannel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   227   *                   IfxVadc_Adc_initChannel(&adcChannel, &adcChannelConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   228   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   229   *                   IfxVadc_Adc_configureWaitForReadMode(&adcChannel, TRUE);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   230   *               }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   231   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   232   *      adcGroup.group->RCR[0].B.SRGEN = 1; // interrupt when new result is available
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   233   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   234   *      // send service request to DMA Channel 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   235   *      IfxSrc_init((Ifx_SRC_SRCR*)&MODULE_SRC.VADC.G[0], IfxSrc_Tos_dma, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   236   *      IfxSrc_enable((Ifx_SRC_SRCR*)&MODULE_SRC.VADC.G[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   237   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   238   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   239   * And finally the DMA channel configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   240   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   241   *      // create module config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   242   *      IfxDma_Dma_Config dmaConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   243   *      IfxDma_Dma_initModuleConfig(&dmaConfig, &MODULE_DMA);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   244   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   245   *      // initialize module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   246   *      IfxDma_Dma dma;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   247   *      IfxDma_Dma_initModule(&dma, &dmaConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   249   *      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   250   *              // construct the channel configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   251   *              IfxDma_Dma_ChannelConfig chnCfg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   252   *              IfxDma_Dma_initChannelConfig(&chnCfg, &dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   253   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   254   *              // select DMA channel which should be used
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   255   *              chnCfg.channelId               = IfxDma_ChannelId_0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   256   *              chnCfg.hardwareRequestEnabled  = TRUE; // will be triggered from VADC service request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   257   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   258   *              // interrupt configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   259   *              chnCfg.channelInterruptEnabled       = TRUE; // service request from DMA after all words have been transfered
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   260   *              chnCfg.channelInterruptPriority      = IFX_INTPRIO_DMA_CH0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   261   *              chnCfg.channelInterruptTypeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   262   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   263   *              // source and destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   264   *              chnCfg.sourceAddress                   = (uint32)&adcGroup.group->RES[0]; // first result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   265   *              chnCfg.sourceCircularBufferEnabled     = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   266   *              chnCfg.sourceAddressCircularRange      = IfxDma_ChannelIncrementCircular_1; // keep this address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   267   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   268   *              chnCfg.destinationAddress              = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &vadcResultBuffer[0]); // move into result buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   269   *              chnCfg.destinationAddressIncrementStep = IfxDma_ChannelIncrementStep_1; // increment once (=2 bytes) with each write
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   270   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   271   *              // move size, transfer count and request/operation mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   272   *              chnCfg.moveSize            = IfxDma_ChannelMoveSize_16bit;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   273   *              chnCfg.transferCount       = NUM_SCANNED_CHANNELS; // for the scanned channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   274   *              chnCfg.requestMode         = IfxDma_ChannelRequestMode_oneTransferPerRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   275   *              chnCfg.operationMode       = IfxDma_ChannelOperationMode_continuous; // hw request enable remains set after transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   276   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   277   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   278   *              // transfer configuration into DMA channel registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   279   *              // IfxDma_Dma_Channel dmaChn; // declared globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   280   *              IfxDma_Dma_initChannel(&dmaChn, &chnCfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   281   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   282   *              // configure IRQ handler which will be called after all result registers have been transfered
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   283   *              IfxCpu_Irq_installInterruptHandler(&dmaCh0ISR, IFX_INTPRIO_DMA_CH0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   284   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   285   *              // enable CPU interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   286   *              IfxCpu_enableInterrupts();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   287   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   288   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   289   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   290   * In order to start the initial channel conversions, use:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   291   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   292   *      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   293   *          uint32 channels = 0xff; // all 8 channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   294   *          uint32 mask = 0xff; // modify the selection of all channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   295   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   296   *          // configure and start autoscan (single shot, not continuous mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   297   *          IfxVadc_Adc_setScan(&adcGroup, channels, mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   298   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   299   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   300   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   301   * DMA will transfer the results to DSPR during the autoscan (whenever a new result is availale), and
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   302   * invoke the dmaCh0ISR function once all channels have been converted.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   304   * The ISR will re-configure the DMA channel and re-start the autoscan.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   306   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   307   * \subsection IfxLld_Dma_Dma_LinkedList Linked Lists
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   308   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   309   * Linked lists allow to initiate multiple DMA transactions from independent transaction sets which are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   310   * typically stored in a DSPR memory location, and fetched and executed from the DMA channel without
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   311   * further CPU interaction.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   312   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   313   * Following example demonstrates, how 5 different transactions can be initiated from a single request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   314   * We copy the data of 5 CAN message objects to a DSPR location.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   315   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   316   * Includes and global variables:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   317   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   318   * #include <Dma/Dma/IfxDma_Dma.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   319   * #include <Scu/Std/IfxScuWdt.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   320   * #include <IfxCan_reg.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   321   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   322   * // DMA channel handle
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   323   * IfxDma_Dma_Channel chn;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   324   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   325   * // Linked List storage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   326   * // IMPORTANT: it has to be aligned to an 256bit address, otherwise DMA can't read it
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   327   * #define NUM_LINKED_LIST_ITEMS 5
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   328   * IFX_ALIGN(256) Ifx_DMA_CH linkedList[NUM_LINKED_LIST_ITEMS] ;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   330   * // transfer these values to various CAN_MODATA[LH] registers via linked lists
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   331   * #define NUM_TRANSFERED_WORDS 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   332   * uint32 sourceBuffer[NUM_LINKED_LIST_ITEMS][NUM_TRANSFERED_WORDS];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   333   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   334   * const uint32 destinationAddresses[NUM_LINKED_LIST_ITEMS] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   335   *      (uint32)&CAN_MODATAL0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   336   *      (uint32)&CAN_MODATAL1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   337   *      (uint32)&CAN_MODATAL2,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   338   *      (uint32)&CAN_MODATAL3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   339   *      (uint32)&CAN_MODATAL4,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   340   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   341   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   342   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   343   * Following code to prepare CAN for this demo:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   344   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   345   *      // enable CAN (no Ifx LLD available yet)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   346   *      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   347   *              uint32 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   348   *              IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   350   *              CAN_CLC.U = 0x0100;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   351   *              if( CAN_CLC.U ); // synch access
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   352   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   353   *              // select f_clc as kernel clock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   354   *              CAN_MCR.B.CLKSEL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   355   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   356   *              // configure fractional divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   357   *              CAN_FDR.U = 0x43ff;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   359   *              // wait until RAM has been initialized
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   360   *              while( CAN_PANCTR.B.BUSY );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   362   *              IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   363   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   366   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   367   * Build a linked list
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   368   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   369   *      // create module config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   370   *      IfxDma_Dma_Config dmaConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   371   *      IfxDma_Dma_initModuleConfig(&dmaConfig, &MODULE_DMA);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   372   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   373   *      // initialize module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   374   *      IfxDma_Dma dma;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   375   *      IfxDma_Dma_initModule(&dma, &dmaConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   376   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   377   *      // initial channel configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   378   *      IfxDma_Dma_ChannelConfig cfg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   379   *      IfxDma_Dma_initChannelConfig(&cfg, &dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   381   *      // following settings are used by all transactions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   382   *      cfg.transferCount = NUM_TRANSFERED_WORDS;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   383   *      cfg.requestMode = IfxDma_ChannelRequestMode_completeTransactionPerRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   384   *      cfg.moveSize = IfxDma_ChannelMoveSize_32bit;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   385   *      cfg.shadowControl = IfxDma_ChannelShadow_linkedList;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   386   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   387   *      // generate linked list items
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   388   *      for(int i=0; i<NUM_LINKED_LIST_ITEMS; ++i) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   389   *              cfg.sourceAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   390   *              cfg.destinationAddress = destinationAddresses[i];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   391   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   392   *              // address to next transaction set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   393   *              cfg.shadowAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), (uint32)&linkedList[(i + 1) % NUM_LINKED_LIST_ITEMS]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   394   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   395   *              // transfer first transaction set into DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   396   *              if( i == 0 ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   397   *                      IfxDma_Dma_initChannel(&chn, &cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   398   *              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   399   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   400   *              // transfer into linked list storage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   401   *              IfxDma_Dma_initLinkedListEntry((void *)&linkedList[i], &cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   402   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   403   *              if( i == 0 ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   404   *                      // - trigger channel interrupt once the first transaction set has been loaded (again) into DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   405   *                      linkedList[i].CHCSR.B.SIT = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   406   *              } else {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   407   *                      // - activate SCH (transaction request) for each entry, except for the first one (linked list terminated here)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   408   *                      linkedList[i].CHCSR.B.SCH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   409   *              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   410   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   411   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   413   * The transfer can be started via software with:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   415   *      // clear service request flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   416   *      (IfxDma_Dma_getSrcPointer(&chn))->B.CLRR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   417   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   418   *      // start linked list transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   419   *      IfxDma_Dma_startChannelTransaction(&chn);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   420   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   421   *      // wait for service request which is triggered at the end of linked list transfers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   422   *      while( !(IfxDma_Dma_getSrcPointer(&chn))->B.SRR );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   423   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   424   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   425   * In order to synchronize with the end of linked list operations, it's recommended to poll the service request flag (triggered via linkedList[NUM_LINKED_LIST_ITEMS-1].CHCSR.B.SIT after the last word has been transfered), and not the transaction count as shown before, because a linked list will initiate multiple transactions.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   426   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   427   * \defgroup IfxLld_Dma_Dma DMA
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   428   * \ingroup IfxLld_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   429   * \defgroup IfxLld_Dma_Dma_Data_Structures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   430   * \ingroup IfxLld_Dma_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   431   * \defgroup IfxLld_Dma_Dma_Module_Initialize Module Initialization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   432   * \ingroup IfxLld_Dma_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   433   * \defgroup IfxLld_Dma_Dma_Channel_Initialize Channel Initialization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   434   * \ingroup IfxLld_Dma_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   435   * \defgroup IfxLld_Dma_Dma_Linked_List Linked Lists
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   436   * \ingroup IfxLld_Dma_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   437   * \defgroup IfxLld_Dma_Dma_Channel_Transaction_Initiate Channel Transactions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   438   * \ingroup IfxLld_Dma_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   439   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   441  #ifndef IFXDMA_DMA_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   442  #define IFXDMA_DMA_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   443  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   444  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   445  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   446  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   448  #include "_Impl/IfxDma_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   449  #include "Dma/Std/IfxDma.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   450  #include "Cpu/Std/IfxCpu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   451  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   452  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   453  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   454  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   456  /** \addtogroup IfxLld_Dma_Dma_Data_Structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   457   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   458  /** \brief DMA base address data structure (Module handle)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   459   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   460  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   461  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   462      Ifx_DMA *dma;       /**< \brief Specifies the pointer to the DMA registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   463  } IfxDma_Dma;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   465  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   466  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   467  /** \addtogroup IfxLld_Dma_Dma_Data_Structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   468   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   469  /** \brief Channel handle
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   470   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   471  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   472  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   473      Ifx_DMA         *dma;             /**< \brief Specifies the pointer to the DMA registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   474      IfxDma_ChannelId channelId;       /**< \brief Specifies the DMA channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   475      Ifx_DMA_CH      *channel;         /**< \brief Specifies the pointer to DMA channel registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   476  } IfxDma_Dma_Channel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   478  /** \brief Configuration data structure of the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   480  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   481  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   482      IfxDma_Dma                      *module;                                       /**< \brief Specifies pointer to the IfxDma_Dma module handle */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   483      IfxDma_ChannelId                 channelId;                                    /**< \brief Specifies the channel being used */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   484      uint32                           sourceAddress;                                /**< \brief Source address for the DMA channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   485      uint32                           destinationAddress;                           /**< \brief Destination address for the DMA channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   486      uint32                           shadowAddress;                                /**< \brief Initial content of shadow address for the DMA channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   487      uint32                           readDataCrc;                                  /**< \brief Checksum for read data of the channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   488      uint32                           sourceDestinationAddressCrc;                  /**< \brief Checksum for source and destination address of channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   489      uint16                           transferCount;                                /**< \brief Number of transfers in a transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   490      IfxDma_ChannelMove               blockMode;                                    /**< \brief Number of moves in a transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   491      IfxDma_ChannelRequestMode        requestMode;                                  /**< \brief A service request initiates a single transfer, or the complete transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   492      IfxDma_ChannelOperationMode      operationMode;                                /**< \brief keep enable/disable the hardware channel request after a transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   493      IfxDma_ChannelMoveSize           moveSize;                                     /**< \brief Read/write data size */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   494      IfxDma_ChannelPattern            pattern;                                      /**< \brief Pattern selection operation modes */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   495      IfxDma_ChannelRequestSource      requestSource;                                /**< \brief Request of channel transfer through hardware or daisy chain. channel transfer complete interrupt of previous channel will trigger the next channel request */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   496      IfxDma_ChannelBusPriority        busPriority;                                  /**< \brief Bus priority selection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   497      boolean                          hardwareRequestEnabled;                       /**< \brief Enabling channel transaction via hardware request */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   498      IfxDma_ChannelIncrementStep      sourceAddressIncrementStep;                   /**< \brief Describes the address offset with which the source address should be modified after each move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   499      IfxDma_ChannelIncrementDirection sourceAddressIncrementDirection;              /**< \brief Decides whether the source address offset after each move should be added or decremented from the exisiting address */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   500      IfxDma_ChannelIncrementCircular  sourceAddressCircularRange;                   /**< \brief Determines which part of the source address remains unchanged and therby not updated after each move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   501      IfxDma_ChannelIncrementStep      destinationAddressIncrementStep;              /**< \brief Describes the address offset with which the destination address should be modified after each move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   502      IfxDma_ChannelIncrementDirection destinationAddressIncrementDirection;         /**< \brief Decides whether the destination address offset after each move should be added or decremented from the exisiting address */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   503      IfxDma_ChannelIncrementCircular  destinationAddressCircularRange;              /**< \brief Determines which part of the destination address remains unchanged and therby not updated after each move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   504      IfxDma_ChannelShadow             shadowControl;                                /**< \brief selects the shadow transfer mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   505      boolean                          sourceCircularBufferEnabled;                  /**< \brief Enables/Disables the source circular buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   506      boolean                          destinationCircularBufferEnabled;             /**< \brief Enables/Disables the destination circular buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   507      boolean                          timestampEnabled;                             /**< \brief Enables/Disables the appendage of the time stamp after end of the last DMA move in a transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   508      boolean                          wrapSourceInterruptEnabled;                   /**< \brief An interrupt should be triggered whenever source address is wrapped */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   509      boolean                          wrapDestinationInterruptEnabled;              /**< \brief An interrupt should be triggered whenever destination address is wrapped */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   510      boolean                          channelInterruptEnabled;                      /**< \brief The channel transfer interrupt should be triggered. See also channelInterruptControl */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   511      IfxDma_ChannelInterruptControl   channelInterruptControl;                      /**< \brief The channel transfer interrupt can either be triggered depending on the interruptRaiseThreshold, or each time the transaction count is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   512      uint8                            interruptRaiseThreshold;                      /**< \brief The value of the transferCount at which the interrupt should be raised */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   513      boolean                          transactionRequestLostInterruptEnabled;       /**< \brief Enables/Disables the channel transaction request lost interrupt */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   514      Ifx_Priority                     channelInterruptPriority;                     /**< \brief Priority of the channel interrupt trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   515      IfxSrc_Tos                       channelInterruptTypeOfService;                /**< \brief Interrupt service provider */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   516  } IfxDma_Dma_ChannelConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   517  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   518  /** \brief Configuration data structure of the Module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   520  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   521  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   522      Ifx_DMA *dma;       /**< \brief Specifies the pointer to the DMA registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   523  } IfxDma_Dma_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   525  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   527  /** \addtogroup IfxLld_Dma_Dma_Module_Initialize
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   528   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   529  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   530  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   531  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   532  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   533  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   534  /** \brief initializes a DMA module handle based on the current configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   535   * Can be used in code where it's ensure that the DMA module is already initialized, and a DMA handle isn't globally available.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   536   * \param dmaHandle pointer to the DMA module handle
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   537   * \param dma pointer to the DMA registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   538   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   539   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   540   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   541   *      IfxDma_Dma dma;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   542   *      IfxDma_Dma_createModuleHandle(&dma, &MODULE_DMA);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   543   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   545   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   546  IFX_EXTERN void IfxDma_Dma_createModuleHandle(IfxDma_Dma *dmaHandle, Ifx_DMA *dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   548  /** \brief de-initialize the DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   549   * \param dma pointer to the DMA module handle
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   550   * \param channel the DMA channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   551   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   552   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   553  IFX_EXTERN void IfxDma_Dma_deInitChannel(IfxDma_Dma *dma, IfxDma_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   555  /** \brief Initialize the DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   556   * \param dma pointer to the DMA module handle
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   557   * \param config Pointer to configuration structure of the DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   558   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   560   * See \ref IfxLld_Dma_Dma_Simple
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   562   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   563  IFX_EXTERN void IfxDma_Dma_initModule(IfxDma_Dma *dma, const IfxDma_Dma_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   564  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   565  /** \brief initialize the DMA module configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   566   * \param config Pointer to configuration structure of the DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   567   * \param dma pointer to the DMA registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   568   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   569   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   570   * See \ref IfxLld_Dma_Dma_Simple
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   571   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   573  IFX_EXTERN void IfxDma_Dma_initModuleConfig(IfxDma_Dma_Config *config, Ifx_DMA *dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   575  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   576  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   577  /** \addtogroup IfxLld_Dma_Dma_Channel_Initialize
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   578   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   579  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   580  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   581  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   582  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   583  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   584  /** \brief initialize the DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   585   * \param channel pointer to the DMA base address and channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   586   * \param config pointer to the DMA default channel configuration structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   588   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   589   * See \ref IfxLld_Dma_Dma_Simple
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   590   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   591   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   592  IFX_EXTERN void IfxDma_Dma_initChannel(IfxDma_Dma_Channel *channel, const IfxDma_Dma_ChannelConfig *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   593  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   594  /** \brief initialize the DMA module channel configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   595   * \param config pointer to the DMA default channel configuration structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   596   * \param dma pointer to the DMA module handle
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   599   * See \ref IfxLld_Dma_Dma_Simple
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   602  IFX_EXTERN void IfxDma_Dma_initChannelConfig(IfxDma_Dma_ChannelConfig *config, IfxDma_Dma *dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   604  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   606  /** \addtogroup IfxLld_Dma_Dma_Linked_List
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   607   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   609  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   610  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   611  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   613  /** \brief Returns the SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   614   * \param channel pointer to the DMA base address and channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   615   * \return SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   616   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   617  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_Dma_getSrcPointer(IfxDma_Dma_Channel *channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   619  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   620  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   621  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   622  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   623  /** \brief linked list functionality within the DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   624   * \param ptrToAddress pointer to the memory location where the linked list entry should be stored
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   625   * \param config pointer to the DMA default channel configuration structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   626   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   627   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   628   * See \ref IfxLld_Dma_Dma_LinkedList
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   629   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   631  IFX_EXTERN void IfxDma_Dma_initLinkedListEntry(void *ptrToAddress, const IfxDma_Dma_ChannelConfig *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   633  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   635  /** \addtogroup IfxLld_Dma_Dma_Channel_Transaction_Initiate
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   636   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   637  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   638  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   639  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   640  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   641  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   642  /** \brief Clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   643   * \param channel pointer to the DMA base address and channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   644   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   645   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   646  IFX_INLINE void IfxDma_Dma_clearChannelInterrupt(IfxDma_Dma_Channel *channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   647  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   648  /** \brief Return and clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   649   * The flag is automatically cleared with the call to this function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   650   * \param channel pointer to the DMA base address and channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   651   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   652   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   653   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   654  IFX_INLINE boolean IfxDma_Dma_getAndClearChannelInterrupt(IfxDma_Dma_Channel *channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   656  /** \brief Return a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   657   * \param channel pointer to the DMA base address and channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   658   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   659   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   661  IFX_INLINE boolean IfxDma_Dma_getChannelInterrupt(IfxDma_Dma_Channel *channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   663  /** \brief Poll for an ongoing transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   664   * \param channel pointer to the DMA base address and channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   665   * \return TRUE if a transaction request for the given channel is pending
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   666   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   667   * See \ref IfxLld_Dma_Dma_Simple
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   668   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   669   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   670  IFX_INLINE boolean IfxDma_Dma_isChannelTransactionPending(IfxDma_Dma_Channel *channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   671  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   672  /** \brief Re-initialize the destination address after a transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   673   * \param channel pointer to the DMA base address and channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   674   * \param address is the Initial address of the destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   675   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   676   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   677   * See \ref IfxLld_Dma_Dma_Simple
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   678   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   679   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   680  IFX_INLINE void IfxDma_Dma_setChannelDestinationAddress(IfxDma_Dma_Channel *channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   681  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   682  /** \brief Re-initialize the source address after a transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   683   * \param channel pointer to the DMA base address and channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   684   * \param address is the Initial address of the source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   685   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   686   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   687   * See \ref IfxLld_Dma_Dma_Simple
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   688   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   689   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   690  IFX_INLINE void IfxDma_Dma_setChannelSourceAddress(IfxDma_Dma_Channel *channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   691  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   692  /** \brief Re-initialize the transfer count after a transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   693   * \param channel pointer to the DMA base address and channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   694   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   695   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   696   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   697   * See \ref IfxLld_Dma_Dma_Simple
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   698   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   699   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   700  IFX_INLINE void IfxDma_Dma_setChannelTransferCount(IfxDma_Dma_Channel *channel, uint32 transferCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   701  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   702  /** \brief initiate the DMA move transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   703   * \param channel pointer to the DMA base address and channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   704   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   705   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   706   * See \ref IfxLld_Dma_Dma_Simple
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   707   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   708   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   709  IFX_INLINE void IfxDma_Dma_startChannelTransaction(IfxDma_Dma_Channel *channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   710  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   711  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   712  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   713  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   714  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   715  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   716  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   717  IFX_INLINE void IfxDma_Dma_clearChannelInterrupt(IfxDma_Dma_Channel *channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   718  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   719      IfxDma_clearChannelInterrupt(channel->dma, channel->channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   720  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   721  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   723  IFX_INLINE boolean IfxDma_Dma_getAndClearChannelInterrupt(IfxDma_Dma_Channel *channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   724  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   725      return IfxDma_getAndClearChannelInterrupt(channel->dma, channel->channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   726  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   727  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   729  IFX_INLINE boolean IfxDma_Dma_getChannelInterrupt(IfxDma_Dma_Channel *channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   730  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   731      return IfxDma_getChannelInterrupt(channel->dma, channel->channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   732  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   733  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   735  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_Dma_getSrcPointer(IfxDma_Dma_Channel *channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   736  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   737      return IfxDma_getSrcPointer(channel->dma, channel->channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   738  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   739  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   741  IFX_INLINE boolean IfxDma_Dma_isChannelTransactionPending(IfxDma_Dma_Channel *channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   742  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   743      return IfxDma_isChannelTransactionPending(channel->dma, channel->channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   744  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   745  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   746  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   747  IFX_INLINE void IfxDma_Dma_setChannelDestinationAddress(IfxDma_Dma_Channel *channel, uint32 address)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   748  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   749      IfxDma_setChannelDestinationAddress(channel->dma, channel->channelId, (void *)address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   750  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   751  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   752  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   753  IFX_INLINE void IfxDma_Dma_setChannelSourceAddress(IfxDma_Dma_Channel *channel, uint32 address)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   754  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   755      IfxDma_setChannelSourceAddress(channel->dma, channel->channelId, (void *)address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   756  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   757  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   758  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   759  IFX_INLINE void IfxDma_Dma_setChannelTransferCount(IfxDma_Dma_Channel *channel, uint32 transferCount)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   760  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   761      IfxDma_setChannelTransferCount(channel->dma, channel->channelId, transferCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   762  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   763  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   764  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   765  IFX_INLINE void IfxDma_Dma_startChannelTransaction(IfxDma_Dma_Channel *channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   766  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   767      IfxDma_startChannelTransaction(channel->dma, channel->channelId);
	fcall	.cocofun_6
.L204:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1611  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1612  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1614  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1615  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1616      dma->TSR[channelId].B.HLTREQ = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1617  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1619  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1620  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1621  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1622      dma->CH[channelId].CHCSR.B.SIT = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1623  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1625  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1626  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1627  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1628      dma->CH[channelId].CHCFGR.B.CHDW = moveSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1629  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1630  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1631  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1632  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1633  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1634      dma->CH[channelId].ADICR.B.SHCT = shadow;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1635  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1636  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1637  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1638  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1639  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1640      dma->CH[channelId].CHCFGR.B.CHMODE = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1641  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1642  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1643  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1644  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1645  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1646      dma->CH[channelId].CHCFGR.B.RROAT = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1647  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1648  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1649  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1650  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1651  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1652      dma->CH[channelId].CHCFGR.B.RROAT = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1653  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1654  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1656  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1657  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1658      dma->CH[channelId].SADR.U = (uint32)address;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1659  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1660  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1662  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1663  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1664      Ifx_DMA_CH_ADICR adicr;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1665      adicr.U                    = dma->CH[channelId].ADICR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1666      adicr.B.SMF                = incStep;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1667      adicr.B.INCS               = direction;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1668      adicr.B.CBLS               = size;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1669      dma->CH[channelId].ADICR.U = adicr.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1670  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1671  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1672  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1673  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1674  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1675      dma->SUSENR[channelId].B.SUSEN = enable;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1676  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1678  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1679  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1680  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1681      dma->CH[channelId].CHCFGR.B.TREL = transferCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1682  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1683  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1684  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1685  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1686  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1687      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1688      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1689      dma->CLC.B.EDIS = mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1690      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1691  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1692  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1693  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1694  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1695  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1696      dma->CH[channelId].CHCSR.B.SCH = 1;
	ld.bu	d15,[a2]8223
.L369:
	or	d15,#128
	st.b	[a2]8223,d15

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    98              IfxDma_ChannelIncrementDirection_positive, IfxDma_ChannelIncrementCircular_4);
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	    99  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   100          IfxDma_Dma_startChannelTransaction(&fce->fceDmaChannel);
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   101  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   102          while (IfxDma_Dma_isChannelTransactionPending(&fce->fceDmaChannel) == TRUE)
.L10:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	     2   * \file IfxDma_Dma.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	     3   * \brief DMA DMA details
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	     4   * \ingroup IfxLld_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    41   * \defgroup IfxLld_Dma_Dma_Usage How to use the DMA Interface driver?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    42   * \ingroup IfxLld_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    44   * The DMA interface driver provides a default configuration for data moves without intervention of the CPU or other on chip devices.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    45   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    46   * In the following sections it will be described, how to integrate the driver into the application framework for different use cases.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    48   * \section IfxLld_Dma_Dma_Preparation Preparation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    49   * \subsection IfxLld_Dma_Dma_Include Include Files
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    51   * Include following header file into your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    52   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    53   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    54   *      #include <Dma/Dma/IfxDma_Dma.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    55   *      #include <Vadc/Adc/IfxVadc_Adc.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    56   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    57   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    58   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    59   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    60   * \subsection IfxLld_Dma_Dma_Module Module initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    61   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    62   * Declare the dma handle as a global variable:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    63   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    64   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    65   * // DMA handle
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    66   * IfxDma_Dma dma;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    67   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    68   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    69   * Initialize the DMA with following code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    70   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    71   *      // create module config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    72   *      IfxDma_Dma_Config dmaConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    73   *      IfxDma_Dma_initModuleConfig(&dmaConfig, &MODULE_DMA);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    74   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    75   *      // initialize module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    76   *      // IfxDma_Dma dma; // declared globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    77   *      IfxDma_Dma_initModule(&dma, &dmaConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    78   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    79   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    80   * This only has to be done once in the application.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    81   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    82   * The "IfxDma_Dma dma" handle should either be declared as a global variable (as shown in this example),
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    83   * or it can be created locally if desired:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    84   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    85   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    86   *      IfxDma_Dma dma;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    87   *      IfxDma_Dma_createModuleHandle(&dma, &MODULE_DMA);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    88   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    89   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    90   * \subsection IfxLld_Dma_Dma_Simple Memory-to-Memory Transfers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    91   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    92   * A large amount of data should be copied between SRI based memories, e.g. from Flash into the DSPR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    93   * of the current CPU. It's recommended to use 256 bit moves for this purpose for best performance.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    94   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    95   * This requires, that source and target locations are 256 bit (32 byte) aligned. With the GCC compiler
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    96   * this can be achieved by adding __attribute__ ((aligned(64))) to the arrays:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    97   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    98   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	    99   * #define MEMORY_TRANSFER_NUM_WORDS 1024
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   100   * uint32 __attribute__ ((aligned(64))) memoryDestination[MEMORY_TRANSFER_NUM_WORDS];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   101   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   103   * Channel configuration and handling for the data move:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   104   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   105   *      // construct the channel configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   106   *      IfxDma_Dma_ChannelConfig chnCfg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   107   *      IfxDma_Dma_initChannelConfig(&chnCfg, &dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   108   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   109   *      // select DMA channel which should be used
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   110   *      chnCfg.channelId           = IfxDma_ChannelId_0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   111   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   112   *      // source and destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   113   *      chnCfg.sourceAddress       = (uint32)0x80000000; // somewhere in flash section, here: start of PFlash (only for demo)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   114   *      chnCfg.destinationAddress  = (uint32)memoryDestination;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   115   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   116   *      // move size, transfer count and request/operation mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   117   *      chnCfg.moveSize            = IfxDma_ChannelMoveSize_256bit;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   118   *      chnCfg.transferCount       = (4 * MEMORY_TRANSFER_NUM_WORDS) / 32; // e.g. 1024 words require 128 * 256 bit moves
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   119   *      chnCfg.requestMode         = IfxDma_ChannelRequestMode_completeTransactionPerRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   120   *      chnCfg.operationMode       = IfxDma_ChannelOperationMode_continuous;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   121   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   122   *      // transfer configuration into DMA channel registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   123   *      IfxDma_Dma_Channel chn;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   124   *      IfxDma_Dma_initChannel(&chn, &chnCfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   126   *      // start transfer and wait until it's finished
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   127   *      IfxDma_Dma_startChannelTransaction(&chn);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   128   *      while( IfxDma_Dma_isChannelTransactionPending(&chn) == TRUE );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   129   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   130   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   131   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   132   * \subsection IfxLld_Dma_Dma_Peripheral Peripheral-to-Memory Transfers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   133   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   134   * The content of 8 ADC result registers should be transfered to a memory location in DSPR whenever
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   135   * an VADC autoscan has been finished. After the DMA transaction, an interrupt should be triggered
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   136   * so that the CPU can process the conversion results.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   137   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   138   * We use following global variables:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   139   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   140   * // buffer for autoscanned conversion result values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   141   * #define NUM_SCANNED_CHANNELS  8
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   142   * static uint16 vadcResultBuffer[NUM_SCANNED_CHANNELS];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   143   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   144   * // VADC handle
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   145   * IfxVadc_Adc vadc;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   146   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   147   * // VADC group handle
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   148   * static IfxVadc_Adc_Group adcGroup;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   149   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   150   * // DMA channel handle
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   151   * static IfxDma_Dma_Channel dmaChn;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   152   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   153   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   154   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   155   * Create an interrupt handler for the DMA channel request:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   156   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   157   * // priorities are normally defined in Ifx_IntPrioDef.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   158   * #define IFX_INTPRIO_DMA_CH0  1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   159   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   160   * IFX_INTERRUPT(dmaCh0ISR, 0, IFX_INTPRIO_DMA_CH0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   161   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   162   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   163   *      // do something with the conversion results in vadcResultBuffer[]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   164   *      // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   165   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   166   *      // re-init DMA channel destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   167   *      IfxDma_Dma_setChannelDestinationAddress(&dmaChn, ADDR_CPU_DSPR(IfxCpu_getCoreId(), &vadcResultBuffer[0]));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   168   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   169   *      // start new transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   170   *      IfxDma_Dma_setChannelTransferCount(&dmaChn, NUM_SCANNED_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   171   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   172   *      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   173   *          uint32 channels = 0xff; // all 8 channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   174   *          uint32 mask = 0xff; // modify the selection of all channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   175   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   176   *          // configure autoscan (single shot, not continuous scan)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   177   *          IfxVadc_Adc_setScan(&adcGroup, channels, mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   178   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   179   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   180   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   181   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   182   * ADC configuration:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   183   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   184   *      // create configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   185   *      IfxVadc_Adc_Config adcConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   186   *      IfxVadc_Adc_initModuleConfig(&adcConfig, &MODULE_VADC);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   187   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   188   *      adcConfig.startupCalibration = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   189   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   190   *      // initialize module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   191   *      // IfxVadc_Adc vadc; // declared globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   192   *      IfxVadc_Adc_initModule(&vadc, &adcConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   193   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   194   *      // create group config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   195   *      IfxVadc_Adc_GroupConfig adcGroupConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   196   *      IfxVadc_Adc_initGroupConfig(&adcGroupConfig, &vadc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   197   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   198   *      // initialize the group
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   199   *      //IfxVadc_Adc_Group adcGroup; // defined globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   200   *      adcGroupConfig.groupId = IfxVadc_GroupId_0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   201   *      adcGroupConfig.master = adcGroupConfig.groupId;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   202   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   203   *      // enable all arbiter request sources
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   204   *      adcGroupConfig.arbiter.requestSlotQueueEnabled            = TRUE; // enable Queue mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   205   *      adcGroupConfig.arbiter.requestSlotScanEnabled             = TRUE; // enable Scan mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   206   *      adcGroupConfig.arbiter.requestSlotBackgroundScanEnabled   = TRUE; // enable Background scan
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   207   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   208   *      // enable all gates in "always" mode (no edge detection)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   209   *      adcGroupConfig.queueRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   210   *      adcGroupConfig.scanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   211   *      adcGroupConfig.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   212   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   213   *      IfxVadc_Adc_initGroup(&adcGroup, &adcGroupConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   214   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   215   *      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   216   *               // create channel config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   217   *               IfxVadc_Adc_ChannelConfig adcChannelConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   218   *               IfxVadc_Adc_initChannelConfig(&adcChannelConfig, &adcGroup);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   219   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   220   *               // initialize the channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   221   *               for(int i=0; i<NUM_SCANNED_CHANNELS; ++i) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   222   *                   adcChannelConfig.channelId = (IfxVadc_ChannelId)i;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   223   *                   adcChannelConfig.resultRegister = IfxVadc_ChannelResult_0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   224   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   225   *                   // initialize the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   226   *                   IfxVadc_Adc_Channel adcChannel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   227   *                   IfxVadc_Adc_initChannel(&adcChannel, &adcChannelConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   228   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   229   *                   IfxVadc_Adc_configureWaitForReadMode(&adcChannel, TRUE);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   230   *               }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   231   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   232   *      adcGroup.group->RCR[0].B.SRGEN = 1; // interrupt when new result is available
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   233   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   234   *      // send service request to DMA Channel 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   235   *      IfxSrc_init((Ifx_SRC_SRCR*)&MODULE_SRC.VADC.G[0], IfxSrc_Tos_dma, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   236   *      IfxSrc_enable((Ifx_SRC_SRCR*)&MODULE_SRC.VADC.G[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   237   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   238   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   239   * And finally the DMA channel configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   240   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   241   *      // create module config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   242   *      IfxDma_Dma_Config dmaConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   243   *      IfxDma_Dma_initModuleConfig(&dmaConfig, &MODULE_DMA);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   244   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   245   *      // initialize module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   246   *      IfxDma_Dma dma;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   247   *      IfxDma_Dma_initModule(&dma, &dmaConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   249   *      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   250   *              // construct the channel configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   251   *              IfxDma_Dma_ChannelConfig chnCfg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   252   *              IfxDma_Dma_initChannelConfig(&chnCfg, &dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   253   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   254   *              // select DMA channel which should be used
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   255   *              chnCfg.channelId               = IfxDma_ChannelId_0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   256   *              chnCfg.hardwareRequestEnabled  = TRUE; // will be triggered from VADC service request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   257   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   258   *              // interrupt configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   259   *              chnCfg.channelInterruptEnabled       = TRUE; // service request from DMA after all words have been transfered
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   260   *              chnCfg.channelInterruptPriority      = IFX_INTPRIO_DMA_CH0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   261   *              chnCfg.channelInterruptTypeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   262   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   263   *              // source and destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   264   *              chnCfg.sourceAddress                   = (uint32)&adcGroup.group->RES[0]; // first result register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   265   *              chnCfg.sourceCircularBufferEnabled     = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   266   *              chnCfg.sourceAddressCircularRange      = IfxDma_ChannelIncrementCircular_1; // keep this address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   267   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   268   *              chnCfg.destinationAddress              = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &vadcResultBuffer[0]); // move into result buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   269   *              chnCfg.destinationAddressIncrementStep = IfxDma_ChannelIncrementStep_1; // increment once (=2 bytes) with each write
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   270   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   271   *              // move size, transfer count and request/operation mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   272   *              chnCfg.moveSize            = IfxDma_ChannelMoveSize_16bit;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   273   *              chnCfg.transferCount       = NUM_SCANNED_CHANNELS; // for the scanned channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   274   *              chnCfg.requestMode         = IfxDma_ChannelRequestMode_oneTransferPerRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   275   *              chnCfg.operationMode       = IfxDma_ChannelOperationMode_continuous; // hw request enable remains set after transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   276   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   277   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   278   *              // transfer configuration into DMA channel registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   279   *              // IfxDma_Dma_Channel dmaChn; // declared globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   280   *              IfxDma_Dma_initChannel(&dmaChn, &chnCfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   281   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   282   *              // configure IRQ handler which will be called after all result registers have been transfered
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   283   *              IfxCpu_Irq_installInterruptHandler(&dmaCh0ISR, IFX_INTPRIO_DMA_CH0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   284   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   285   *              // enable CPU interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   286   *              IfxCpu_enableInterrupts();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   287   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   288   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   289   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   290   * In order to start the initial channel conversions, use:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   291   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   292   *      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   293   *          uint32 channels = 0xff; // all 8 channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   294   *          uint32 mask = 0xff; // modify the selection of all channels
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   295   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   296   *          // configure and start autoscan (single shot, not continuous mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   297   *          IfxVadc_Adc_setScan(&adcGroup, channels, mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   298   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   299   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   300   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   301   * DMA will transfer the results to DSPR during the autoscan (whenever a new result is availale), and
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   302   * invoke the dmaCh0ISR function once all channels have been converted.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   304   * The ISR will re-configure the DMA channel and re-start the autoscan.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   305   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   306   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   307   * \subsection IfxLld_Dma_Dma_LinkedList Linked Lists
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   308   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   309   * Linked lists allow to initiate multiple DMA transactions from independent transaction sets which are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   310   * typically stored in a DSPR memory location, and fetched and executed from the DMA channel without
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   311   * further CPU interaction.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   312   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   313   * Following example demonstrates, how 5 different transactions can be initiated from a single request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   314   * We copy the data of 5 CAN message objects to a DSPR location.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   315   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   316   * Includes and global variables:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   317   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   318   * #include <Dma/Dma/IfxDma_Dma.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   319   * #include <Scu/Std/IfxScuWdt.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   320   * #include <IfxCan_reg.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   321   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   322   * // DMA channel handle
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   323   * IfxDma_Dma_Channel chn;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   324   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   325   * // Linked List storage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   326   * // IMPORTANT: it has to be aligned to an 256bit address, otherwise DMA can't read it
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   327   * #define NUM_LINKED_LIST_ITEMS 5
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   328   * IFX_ALIGN(256) Ifx_DMA_CH linkedList[NUM_LINKED_LIST_ITEMS] ;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   329   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   330   * // transfer these values to various CAN_MODATA[LH] registers via linked lists
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   331   * #define NUM_TRANSFERED_WORDS 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   332   * uint32 sourceBuffer[NUM_LINKED_LIST_ITEMS][NUM_TRANSFERED_WORDS];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   333   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   334   * const uint32 destinationAddresses[NUM_LINKED_LIST_ITEMS] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   335   *      (uint32)&CAN_MODATAL0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   336   *      (uint32)&CAN_MODATAL1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   337   *      (uint32)&CAN_MODATAL2,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   338   *      (uint32)&CAN_MODATAL3,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   339   *      (uint32)&CAN_MODATAL4,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   340   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   341   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   342   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   343   * Following code to prepare CAN for this demo:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   344   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   345   *      // enable CAN (no Ifx LLD available yet)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   346   *      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   347   *              uint32 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   348   *              IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   349   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   350   *              CAN_CLC.U = 0x0100;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   351   *              if( CAN_CLC.U ); // synch access
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   352   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   353   *              // select f_clc as kernel clock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   354   *              CAN_MCR.B.CLKSEL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   355   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   356   *              // configure fractional divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   357   *              CAN_FDR.U = 0x43ff;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   359   *              // wait until RAM has been initialized
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   360   *              while( CAN_PANCTR.B.BUSY );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   362   *              IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   363   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   364   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   365   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   366   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   367   * Build a linked list
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   368   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   369   *      // create module config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   370   *      IfxDma_Dma_Config dmaConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   371   *      IfxDma_Dma_initModuleConfig(&dmaConfig, &MODULE_DMA);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   372   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   373   *      // initialize module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   374   *      IfxDma_Dma dma;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   375   *      IfxDma_Dma_initModule(&dma, &dmaConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   376   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   377   *      // initial channel configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   378   *      IfxDma_Dma_ChannelConfig cfg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   379   *      IfxDma_Dma_initChannelConfig(&cfg, &dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   380   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   381   *      // following settings are used by all transactions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   382   *      cfg.transferCount = NUM_TRANSFERED_WORDS;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   383   *      cfg.requestMode = IfxDma_ChannelRequestMode_completeTransactionPerRequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   384   *      cfg.moveSize = IfxDma_ChannelMoveSize_32bit;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   385   *      cfg.shadowControl = IfxDma_ChannelShadow_linkedList;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   386   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   387   *      // generate linked list items
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   388   *      for(int i=0; i<NUM_LINKED_LIST_ITEMS; ++i) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   389   *              cfg.sourceAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   390   *              cfg.destinationAddress = destinationAddresses[i];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   391   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   392   *              // address to next transaction set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   393   *              cfg.shadowAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), (uint32)&linkedList[(i + 1) % NUM_LINKED_LIST_ITEMS]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   394   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   395   *              // transfer first transaction set into DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   396   *              if( i == 0 ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   397   *                      IfxDma_Dma_initChannel(&chn, &cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   398   *              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   399   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   400   *              // transfer into linked list storage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   401   *              IfxDma_Dma_initLinkedListEntry((void *)&linkedList[i], &cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   402   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   403   *              if( i == 0 ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   404   *                      // - trigger channel interrupt once the first transaction set has been loaded (again) into DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   405   *                      linkedList[i].CHCSR.B.SIT = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   406   *              } else {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   407   *                      // - activate SCH (transaction request) for each entry, except for the first one (linked list terminated here)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   408   *                      linkedList[i].CHCSR.B.SCH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   409   *              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   410   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   411   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   412   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   413   * The transfer can be started via software with:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   414   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   415   *      // clear service request flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   416   *      (IfxDma_Dma_getSrcPointer(&chn))->B.CLRR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   417   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   418   *      // start linked list transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   419   *      IfxDma_Dma_startChannelTransaction(&chn);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   420   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   421   *      // wait for service request which is triggered at the end of linked list transfers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   422   *      while( !(IfxDma_Dma_getSrcPointer(&chn))->B.SRR );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   423   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   424   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   425   * In order to synchronize with the end of linked list operations, it's recommended to poll the service request flag (triggered via linkedList[NUM_LINKED_LIST_ITEMS-1].CHCSR.B.SIT after the last word has been transfered), and not the transaction count as shown before, because a linked list will initiate multiple transactions.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   426   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   427   * \defgroup IfxLld_Dma_Dma DMA
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   428   * \ingroup IfxLld_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   429   * \defgroup IfxLld_Dma_Dma_Data_Structures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   430   * \ingroup IfxLld_Dma_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   431   * \defgroup IfxLld_Dma_Dma_Module_Initialize Module Initialization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   432   * \ingroup IfxLld_Dma_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   433   * \defgroup IfxLld_Dma_Dma_Channel_Initialize Channel Initialization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   434   * \ingroup IfxLld_Dma_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   435   * \defgroup IfxLld_Dma_Dma_Linked_List Linked Lists
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   436   * \ingroup IfxLld_Dma_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   437   * \defgroup IfxLld_Dma_Dma_Channel_Transaction_Initiate Channel Transactions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   438   * \ingroup IfxLld_Dma_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   439   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   441  #ifndef IFXDMA_DMA_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   442  #define IFXDMA_DMA_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   443  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   444  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   445  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   446  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   448  #include "_Impl/IfxDma_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   449  #include "Dma/Std/IfxDma.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   450  #include "Cpu/Std/IfxCpu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   451  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   452  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   453  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   454  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   456  /** \addtogroup IfxLld_Dma_Dma_Data_Structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   457   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   458  /** \brief DMA base address data structure (Module handle)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   459   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   460  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   461  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   462      Ifx_DMA *dma;       /**< \brief Specifies the pointer to the DMA registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   463  } IfxDma_Dma;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   465  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   466  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   467  /** \addtogroup IfxLld_Dma_Dma_Data_Structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   468   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   469  /** \brief Channel handle
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   470   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   471  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   472  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   473      Ifx_DMA         *dma;             /**< \brief Specifies the pointer to the DMA registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   474      IfxDma_ChannelId channelId;       /**< \brief Specifies the DMA channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   475      Ifx_DMA_CH      *channel;         /**< \brief Specifies the pointer to DMA channel registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   476  } IfxDma_Dma_Channel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   477  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   478  /** \brief Configuration data structure of the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   480  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   481  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   482      IfxDma_Dma                      *module;                                       /**< \brief Specifies pointer to the IfxDma_Dma module handle */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   483      IfxDma_ChannelId                 channelId;                                    /**< \brief Specifies the channel being used */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   484      uint32                           sourceAddress;                                /**< \brief Source address for the DMA channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   485      uint32                           destinationAddress;                           /**< \brief Destination address for the DMA channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   486      uint32                           shadowAddress;                                /**< \brief Initial content of shadow address for the DMA channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   487      uint32                           readDataCrc;                                  /**< \brief Checksum for read data of the channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   488      uint32                           sourceDestinationAddressCrc;                  /**< \brief Checksum for source and destination address of channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   489      uint16                           transferCount;                                /**< \brief Number of transfers in a transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   490      IfxDma_ChannelMove               blockMode;                                    /**< \brief Number of moves in a transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   491      IfxDma_ChannelRequestMode        requestMode;                                  /**< \brief A service request initiates a single transfer, or the complete transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   492      IfxDma_ChannelOperationMode      operationMode;                                /**< \brief keep enable/disable the hardware channel request after a transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   493      IfxDma_ChannelMoveSize           moveSize;                                     /**< \brief Read/write data size */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   494      IfxDma_ChannelPattern            pattern;                                      /**< \brief Pattern selection operation modes */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   495      IfxDma_ChannelRequestSource      requestSource;                                /**< \brief Request of channel transfer through hardware or daisy chain. channel transfer complete interrupt of previous channel will trigger the next channel request */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   496      IfxDma_ChannelBusPriority        busPriority;                                  /**< \brief Bus priority selection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   497      boolean                          hardwareRequestEnabled;                       /**< \brief Enabling channel transaction via hardware request */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   498      IfxDma_ChannelIncrementStep      sourceAddressIncrementStep;                   /**< \brief Describes the address offset with which the source address should be modified after each move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   499      IfxDma_ChannelIncrementDirection sourceAddressIncrementDirection;              /**< \brief Decides whether the source address offset after each move should be added or decremented from the exisiting address */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   500      IfxDma_ChannelIncrementCircular  sourceAddressCircularRange;                   /**< \brief Determines which part of the source address remains unchanged and therby not updated after each move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   501      IfxDma_ChannelIncrementStep      destinationAddressIncrementStep;              /**< \brief Describes the address offset with which the destination address should be modified after each move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   502      IfxDma_ChannelIncrementDirection destinationAddressIncrementDirection;         /**< \brief Decides whether the destination address offset after each move should be added or decremented from the exisiting address */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   503      IfxDma_ChannelIncrementCircular  destinationAddressCircularRange;              /**< \brief Determines which part of the destination address remains unchanged and therby not updated after each move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   504      IfxDma_ChannelShadow             shadowControl;                                /**< \brief selects the shadow transfer mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   505      boolean                          sourceCircularBufferEnabled;                  /**< \brief Enables/Disables the source circular buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   506      boolean                          destinationCircularBufferEnabled;             /**< \brief Enables/Disables the destination circular buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   507      boolean                          timestampEnabled;                             /**< \brief Enables/Disables the appendage of the time stamp after end of the last DMA move in a transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   508      boolean                          wrapSourceInterruptEnabled;                   /**< \brief An interrupt should be triggered whenever source address is wrapped */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   509      boolean                          wrapDestinationInterruptEnabled;              /**< \brief An interrupt should be triggered whenever destination address is wrapped */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   510      boolean                          channelInterruptEnabled;                      /**< \brief The channel transfer interrupt should be triggered. See also channelInterruptControl */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   511      IfxDma_ChannelInterruptControl   channelInterruptControl;                      /**< \brief The channel transfer interrupt can either be triggered depending on the interruptRaiseThreshold, or each time the transaction count is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   512      uint8                            interruptRaiseThreshold;                      /**< \brief The value of the transferCount at which the interrupt should be raised */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   513      boolean                          transactionRequestLostInterruptEnabled;       /**< \brief Enables/Disables the channel transaction request lost interrupt */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   514      Ifx_Priority                     channelInterruptPriority;                     /**< \brief Priority of the channel interrupt trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   515      IfxSrc_Tos                       channelInterruptTypeOfService;                /**< \brief Interrupt service provider */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   516  } IfxDma_Dma_ChannelConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   517  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   518  /** \brief Configuration data structure of the Module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   519   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   520  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   521  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   522      Ifx_DMA *dma;       /**< \brief Specifies the pointer to the DMA registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   523  } IfxDma_Dma_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   525  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   527  /** \addtogroup IfxLld_Dma_Dma_Module_Initialize
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   528   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   529  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   530  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   531  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   532  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   533  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   534  /** \brief initializes a DMA module handle based on the current configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   535   * Can be used in code where it's ensure that the DMA module is already initialized, and a DMA handle isn't globally available.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   536   * \param dmaHandle pointer to the DMA module handle
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   537   * \param dma pointer to the DMA registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   538   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   539   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   540   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   541   *      IfxDma_Dma dma;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   542   *      IfxDma_Dma_createModuleHandle(&dma, &MODULE_DMA);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   543   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   544   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   545   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   546  IFX_EXTERN void IfxDma_Dma_createModuleHandle(IfxDma_Dma *dmaHandle, Ifx_DMA *dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   547  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   548  /** \brief de-initialize the DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   549   * \param dma pointer to the DMA module handle
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   550   * \param channel the DMA channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   551   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   552   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   553  IFX_EXTERN void IfxDma_Dma_deInitChannel(IfxDma_Dma *dma, IfxDma_ChannelId channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   555  /** \brief Initialize the DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   556   * \param dma pointer to the DMA module handle
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   557   * \param config Pointer to configuration structure of the DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   558   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   560   * See \ref IfxLld_Dma_Dma_Simple
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   561   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   562   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   563  IFX_EXTERN void IfxDma_Dma_initModule(IfxDma_Dma *dma, const IfxDma_Dma_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   564  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   565  /** \brief initialize the DMA module configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   566   * \param config Pointer to configuration structure of the DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   567   * \param dma pointer to the DMA registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   568   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   569   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   570   * See \ref IfxLld_Dma_Dma_Simple
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   571   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   573  IFX_EXTERN void IfxDma_Dma_initModuleConfig(IfxDma_Dma_Config *config, Ifx_DMA *dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   574  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   575  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   576  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   577  /** \addtogroup IfxLld_Dma_Dma_Channel_Initialize
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   578   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   579  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   580  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   581  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   582  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   583  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   584  /** \brief initialize the DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   585   * \param channel pointer to the DMA base address and channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   586   * \param config pointer to the DMA default channel configuration structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   587   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   588   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   589   * See \ref IfxLld_Dma_Dma_Simple
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   590   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   591   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   592  IFX_EXTERN void IfxDma_Dma_initChannel(IfxDma_Dma_Channel *channel, const IfxDma_Dma_ChannelConfig *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   593  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   594  /** \brief initialize the DMA module channel configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   595   * \param config pointer to the DMA default channel configuration structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   596   * \param dma pointer to the DMA module handle
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   597   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   598   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   599   * See \ref IfxLld_Dma_Dma_Simple
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   600   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   601   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   602  IFX_EXTERN void IfxDma_Dma_initChannelConfig(IfxDma_Dma_ChannelConfig *config, IfxDma_Dma *dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   604  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   605  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   606  /** \addtogroup IfxLld_Dma_Dma_Linked_List
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   607   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   609  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   610  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   611  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   612  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   613  /** \brief Returns the SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   614   * \param channel pointer to the DMA base address and channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   615   * \return SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   616   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   617  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_Dma_getSrcPointer(IfxDma_Dma_Channel *channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   619  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   620  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   621  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   622  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   623  /** \brief linked list functionality within the DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   624   * \param ptrToAddress pointer to the memory location where the linked list entry should be stored
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   625   * \param config pointer to the DMA default channel configuration structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   626   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   627   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   628   * See \ref IfxLld_Dma_Dma_LinkedList
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   629   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   631  IFX_EXTERN void IfxDma_Dma_initLinkedListEntry(void *ptrToAddress, const IfxDma_Dma_ChannelConfig *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   633  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   635  /** \addtogroup IfxLld_Dma_Dma_Channel_Transaction_Initiate
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   636   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   637  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   638  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   639  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   640  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   641  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   642  /** \brief Clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   643   * \param channel pointer to the DMA base address and channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   644   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   645   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   646  IFX_INLINE void IfxDma_Dma_clearChannelInterrupt(IfxDma_Dma_Channel *channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   647  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   648  /** \brief Return and clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   649   * The flag is automatically cleared with the call to this function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   650   * \param channel pointer to the DMA base address and channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   651   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   652   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   653   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   654  IFX_INLINE boolean IfxDma_Dma_getAndClearChannelInterrupt(IfxDma_Dma_Channel *channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   656  /** \brief Return a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   657   * \param channel pointer to the DMA base address and channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   658   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   659   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   661  IFX_INLINE boolean IfxDma_Dma_getChannelInterrupt(IfxDma_Dma_Channel *channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   663  /** \brief Poll for an ongoing transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   664   * \param channel pointer to the DMA base address and channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   665   * \return TRUE if a transaction request for the given channel is pending
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   666   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   667   * See \ref IfxLld_Dma_Dma_Simple
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   668   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   669   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   670  IFX_INLINE boolean IfxDma_Dma_isChannelTransactionPending(IfxDma_Dma_Channel *channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   671  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   672  /** \brief Re-initialize the destination address after a transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   673   * \param channel pointer to the DMA base address and channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   674   * \param address is the Initial address of the destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   675   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   676   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   677   * See \ref IfxLld_Dma_Dma_Simple
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   678   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   679   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   680  IFX_INLINE void IfxDma_Dma_setChannelDestinationAddress(IfxDma_Dma_Channel *channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   681  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   682  /** \brief Re-initialize the source address after a transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   683   * \param channel pointer to the DMA base address and channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   684   * \param address is the Initial address of the source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   685   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   686   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   687   * See \ref IfxLld_Dma_Dma_Simple
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   688   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   689   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   690  IFX_INLINE void IfxDma_Dma_setChannelSourceAddress(IfxDma_Dma_Channel *channel, uint32 address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   691  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   692  /** \brief Re-initialize the transfer count after a transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   693   * \param channel pointer to the DMA base address and channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   694   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   695   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   696   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   697   * See \ref IfxLld_Dma_Dma_Simple
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   698   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   699   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   700  IFX_INLINE void IfxDma_Dma_setChannelTransferCount(IfxDma_Dma_Channel *channel, uint32 transferCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   701  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   702  /** \brief initiate the DMA move transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   703   * \param channel pointer to the DMA base address and channel ID
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   704   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   705   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   706   * See \ref IfxLld_Dma_Dma_Simple
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   707   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   708   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   709  IFX_INLINE void IfxDma_Dma_startChannelTransaction(IfxDma_Dma_Channel *channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   710  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   711  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   712  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   713  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   714  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   715  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   716  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   717  IFX_INLINE void IfxDma_Dma_clearChannelInterrupt(IfxDma_Dma_Channel *channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   718  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   719      IfxDma_clearChannelInterrupt(channel->dma, channel->channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   720  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   721  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   723  IFX_INLINE boolean IfxDma_Dma_getAndClearChannelInterrupt(IfxDma_Dma_Channel *channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   724  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   725      return IfxDma_getAndClearChannelInterrupt(channel->dma, channel->channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   726  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   727  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   729  IFX_INLINE boolean IfxDma_Dma_getChannelInterrupt(IfxDma_Dma_Channel *channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   730  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   731      return IfxDma_getChannelInterrupt(channel->dma, channel->channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   732  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   733  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   735  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_Dma_getSrcPointer(IfxDma_Dma_Channel *channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   736  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   737      return IfxDma_getSrcPointer(channel->dma, channel->channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   738  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   739  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   741  IFX_INLINE boolean IfxDma_Dma_isChannelTransactionPending(IfxDma_Dma_Channel *channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   742  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Dma\IfxDma_Dma.h	   743      return IfxDma_isChannelTransactionPending(channel->dma, channel->channelId);
	ld.a	a2,[a15]8
.L370:
	ld.b	d15,[a15]12
.L216:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    41   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    42   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    43   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    44   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    45   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    46   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    47   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    48   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    49   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    50   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    51   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    52   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    53   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    54   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    55   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    56   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    57   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    59  #ifndef IFXDMA_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    60  #define IFXDMA_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    62  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    63  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    65  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    66  #include "_Impl/IfxDma_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    67  #include "IfxDma_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    69  #include "IfxDma_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    70  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    71  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    72  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    74  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    75  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    78  /** \addtogroup IfxLld_Dma_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    79   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    80  /** \brief Bus Master Mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    81   * Definition in Ifx_DMA.MODE[4].B.MODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    82   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    83  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    84  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    85      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    86      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    87  } IfxDma_BusMasterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    89  /** \brief Channel Bus Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    93      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    94      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    95      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    96  } IfxDma_ChannelBusPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    97  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    98  /** \brief DMA circular buffer (wrap around) definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    99   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   103      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   104      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   105      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   119  } IfxDma_ChannelIncrementCircular;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   121  /** \brief DMA incrementation direction definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   122   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   126      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   127      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   128  } IfxDma_ChannelIncrementDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   129  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   130  /** \brief DMA incrementation definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   131   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   132   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   133  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   134  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   135      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   136      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   137      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   143  } IfxDma_ChannelIncrementStep;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   145  /** \brief Channel Transfer Interrupt generation mechanism.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   146   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   147   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   148  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   149  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   150      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   151      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   152  } IfxDma_ChannelInterruptControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   154  /** \brief DMA transfer definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   155   * Definition in Ifx_DMA.ME0.CHCR.B.BLKM and Ifx_DMA.ME1.CHCR.B.BLKM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   156   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   157  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   158  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   159      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   160      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   161      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   167  } IfxDma_ChannelMove;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   169  /** \brief DMA move size definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   170   * Definition in Ifx_DMA.ME0.CHCR.B.CHDW and Ifx_DMA.ME1.CHCR.B.CHDW
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   172  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   173  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   174      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   175      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   176      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   180  } IfxDma_ChannelMoveSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   182  /** \brief DMA operation mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   183   * Definition in Ifx_DMA.ME0.CHCR.B.CHMODE and Ifx_DMA.ME1.CHCR.B.CHMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   185  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   186  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   187      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   188      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   189  } IfxDma_ChannelOperationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   190  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   191  /** \brief Pattern detection selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   192   * Definition in Ifx_DMA.ME0.CHCR.B.PATSEL and Ifx_DMA.ME1.CHCR.B.PATSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   194  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   195  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   196      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   197      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   198      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   204  } IfxDma_ChannelPattern;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   206  /** \brief Channel Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   207   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   208  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   209  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   210      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   211      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   212      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   213  } IfxDma_ChannelPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   215  /** \brief DMA request mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   216   * Definition in Ifx_DMA.ME0.CHCR.B.RROAT and Ifx_DMA.ME1.CHCR.B.RROAT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   217   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   218  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   219  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   220      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   221      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   222  } IfxDma_ChannelRequestMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   224  /** \brief DMA request selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   225   * Definition in Ifx_DMA.ME0.CHCR.B.PRSEL and Ifx_DMA.ME1.CHCR.B.PRSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   227  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   228  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   229      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   230      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   231  } IfxDma_ChannelRequestSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   233  /** \brief shadow definition definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   234   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   236  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   237  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   238      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   239      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   240      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   251  } IfxDma_ChannelShadow;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   253  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   254  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   255      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   256      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   257      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   259  } IfxDma_HardwareResourcePartition;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   261  /** \brief DMA move engine definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   263  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   264  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   265      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   266      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   267  } IfxDma_MoveEngine;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   269  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   270   * Definition in Ifx_DMA.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   271   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   272  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   274      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   275      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   276  } IfxDma_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   278  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   280  /** \addtogroup IfxLld_Dma_Std_Reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   281   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   284  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   287  /** \brief Return the status of a DMA channel (reset / not reset)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   288   * This API needs to be used after the IfxDma_resetChannel()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   289   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   290   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   291   * \return TRUE if the channel is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   292   * FALSE if the channel is not reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   293   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   294   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   295   *      // check whether the channel is reset or not and also the hardware trigger disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   296   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   297   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   298   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   299   *              // Dma is out of RESET and there is no hardware request enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   300   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   301   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   305  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   307  /** \brief Reset the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   308   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   309   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   310   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   311   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   312   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   313   *      // Apply reset to the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   314   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   315   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   316   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   317   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   318  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   319  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   320  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   322  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   323   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   324  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   325  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   326  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   327  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   329  /** \brief Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   330   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   331   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   332   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   333   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   334   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   335   *      // Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   336   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   337   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   338   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   339   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   340  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   341  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   342  /** \brief Disable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   343   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   344   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   345   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   346   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   347   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   348   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   350  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   352  /** \brief Disable the generation of a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   353   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   354   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   355   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   356   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   357   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   358   *      // Disable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   359   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   360   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   362   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   363  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   364  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   365  /** \brief Enable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   366   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   367   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   369   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   370   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   371   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   372   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   373   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   374   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   375   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   376   *      // Do not restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   377   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   378   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   379   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   380   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   381   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   382   *      // Check for end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   383   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   384   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   385   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   386   *      // Enable the hardware trigger for channel 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   387   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   388   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   389   *      // Disable the hardware trigger for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   391   *      // Hardware triggers for second time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   392   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   393   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   394   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   395   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   396   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   397   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   398   *      // Restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   399   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   400   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   401   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   402   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   403   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   404  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   406  /** \brief Enable the generation of  a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   407   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   408   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   410   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   411   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   412   *      // Enable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   413   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   414   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   415   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   416   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   417  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   419  /** \brief Check the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   420   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   421   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   422   * \return TRUE if the TRL is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   423   * FALSE if the TRL is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   424   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   425   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   426   *      boolean trlFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   427   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   428   *      // Check whether the channel transaction request lost flag is set or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   429   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   430   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   431   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   433  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   435  /** \brief Converts DMA circular range to circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   436   * \param range DMA circular range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   437   * \return DMA circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   439  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   441  /** \brief Return the hardware transaction request status of a DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   442   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   443   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   444   * \return TRUE if the hardware transaction request is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   445   * FALSE if the hardware transaction request is disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   446   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   447   * A coding example can be found in \ref IfxDma_isChannelReset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   448   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   449   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   450  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   451  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   452  /** \brief Return the status of a DMA channel (transaction pending)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   453   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   454   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   455   * \return TRUE if a transaction request for the given channel is pending
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   456   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   458   *      // check for the channel request pending with the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   459   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   460   *              // There is channel request pending for channel 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   461   *              result |= 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   462   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   463   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   464   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   466  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   468  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   469   * \param dma pointer to DMA registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   470   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   471   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   473  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   474  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   475  /** \brief Request a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   476   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   477   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   480   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   481   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   482   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   483  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   485  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   487  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   488   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   490  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   491  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   492  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   494  /** \brief Clear the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   495   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   496   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   497   * \param mask value holds the bits to clear or mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   498   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   500   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   501   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   502   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   503   *                                                  IFXDMA_ERROR_S |    // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   504   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   505   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   510   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   512   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   513  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   515  /** \brief Disable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   516   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   517   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   518   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   519   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   520   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   521   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   522   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   523  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   525  /** \brief Disable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   526   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   527   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   528   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   530   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   531   *      // Disable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   532   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   533   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   534   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   535   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   537  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   539  /** \brief Enable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   540   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   541   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   542   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   543   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   544   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   545   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   546   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   547  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   548  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   549  /** \brief Enable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   550   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   551   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   552   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   553   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   554   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   555   *      // Enable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   556   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   557   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   558   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   560   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   561  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   562  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   563  /** \brief Return the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   564   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   565   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   566   * \return the content of the DMA.ERRSR register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   568   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   569   *      uint32 errorFlags = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   570   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   571   *      // Get the status of the error flags of move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   572   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   574   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   575   *              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   576   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   578   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   579   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   580   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   581   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   582   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   583   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   584   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   585   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   586   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   587   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   588   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   589   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   590   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   591   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   592   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   593   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   594   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   595   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   596   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   597   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   598   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   599   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   600   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   601   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   603  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   605  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   606  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   607  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   608   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   609  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   610  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   611  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   612  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   614  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   615   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   616   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   617   * \return Actual channel destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   618   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   619   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   620   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   621   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   622   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   623   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   625  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   627  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   628   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   629   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   630   * \return Actual channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   631   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   632   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   633   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   634   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   635   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   636   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   637  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   639  /** \brief Return the DMA channel suspend Mode status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   640   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   641   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   642   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   643   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   644  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   646  /** \brief Return remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   647   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   648   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   649   * \return Remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   650   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   651   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   652   *      // Wait till transfer count (TCOUNT) becomes 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   653   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   654   *      bool notFinished;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   655   *      do {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   656   *              notFinished = false;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   657   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   658   *                              notFinished = true;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   659   *                              break;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   660   *                      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   661   *      } while( notFinished );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   662   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   663   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   664   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   665  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   667  /** \brief get the time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   668   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   669   * \return the current time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   670   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   671   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   672   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   673   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   674   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   675   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   676  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   678  /** \brief Configure the move count for each DMA channel transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   679   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   680   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   681   * \param blockMode value holds the number of moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   682   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   684   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   685   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   686   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   687  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   688  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   689  /** \brief Configure a DMA channel to "continous transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   690   * After a transaction, the hardware request transaction remain enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   691   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   692   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   694   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   695   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   696   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   697   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   698  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   699  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   700  /** \brief Configure the destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   701   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   702   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   703   * \param address is the Initial address of the destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   704   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   705   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   706   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   707   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   708   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   709  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   710  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   711  /** \brief Configure a DMA channel destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   712   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   713   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   714   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   715   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   716   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   717   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   718   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   719   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   720   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   721   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   722  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   723  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   724  /** \brief Configure a DMA channel move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   725   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   726   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   727   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   728   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   729   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   730   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   733  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   735  /** \brief Configure a DMA channel shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   736   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   737   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   738   * \param shadow Specifies the shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   739   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   740   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   741   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   742   *      // Push the shadow mode into double buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   743   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   744   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   745   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   746   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   748  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   750  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   751   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   752   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   753   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   754   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   755   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   756   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   757   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   758   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   759  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   760  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   761  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   762   * One transfer request starts a complete DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   763   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   764   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   765   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   766   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   767   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   768   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   769   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   770  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   771  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   772  /** \brief Configure a DMA channel to "single transfer mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   773   * A transfer request is required for each transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   774   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   775   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   776   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   777   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   778   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   779   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   780   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   781  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   782  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   783  /** \brief Configure the source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   784   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   785   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   786   * \param address is the Initial address of the source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   787   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   788   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   789   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   790   *      // Check for the end of current transaction and before trigger the channel request for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   791   *      // for another channel, re configure the source and destination addresses
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   792   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   793   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   794   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   795   *      // Re-Program the source address for the channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   796   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   797   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the destination address for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   800   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   801   *      // Start DMA transaction for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   803   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   804   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   805   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   806  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   807  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   808  /** \brief Configure a DMA channel source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   809   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   810   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   811   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   812   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   813   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   814   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   815   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   816   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   817   *      // Re-program the source and destination circular buffer control fields
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   818   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   819   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   820   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   821   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   822   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   823   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   824  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   826  /** \brief Configure a DMA channel suspend enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   827   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   828   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   829   * \param enable enable (1) / disable (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   830   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   831   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   832  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   833  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   834  /** \brief Configure the move count of a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   835   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   836   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   837   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   838   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   839   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   840   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   841   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   842   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   843   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   844   *      // Wait till end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   845   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   846   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   847   *      // Change the TREL configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   848   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   849   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the BLKM configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   852   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the Move size configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   855   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   856   *      // Pull down the channel pending request after the first transfer is initiated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   858   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the transaction gets over
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   861   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   862   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   864   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   867   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   868   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   869   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   870  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   871  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   872  /** \brief Configure the shadow pointer register to read only
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   873   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   874   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   875   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   876   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   877   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   878   *      // Disable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   879   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   880   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   881   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   882   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   883  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   884  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   885  /** \brief Configure the shadow pointer register to write-able
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   886   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   887   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   888   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   889   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   890   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   891   *      // Enable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   892   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   893   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   894   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   895   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   896  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   897  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   898  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   899  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   900  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   901   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   902  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   903  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   904  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   905  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   906  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   907  /** \brief Clear channel halt request and aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   908   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   909   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   910   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   911   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   912   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   913   *      // Quit the halt mode of operation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   914   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   915   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   916   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   918  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   920  /** \brief Get channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   921   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   922   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   923   * \return halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   924   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   925   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   926   *      // Check for the channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   927   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   928   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   929   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   930   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   931  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   932  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   933  /** \brief setting channel halt request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   934   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   935   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   936   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   937   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   938   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   939   *      // Halt the channel processing
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   940   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   941   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   942   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   943   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   944  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   945  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   946  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   948  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   949   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   950  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   951  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   952  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   953  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   954  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   955  /** \brief get information on buffer being read by software and clear the notification flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   956   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   957   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   958   * \return TRUE  if one of the buffers is being read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   959   * FALSE if one of the buffers is already read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   960   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   961   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   962   *      // Check the buffer being read (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   963   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   964   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   965   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   966   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   967  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   968  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   969  /** \brief get Double buffer selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   970   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   971   * \param channelId channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   972   * \return TRUE if buffer 1 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   973   * FALSE if buffer 0 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   974   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   975   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   976   *      boolean buffer_being_filled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   977   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   978   *      // Check the buffer being filled (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   979   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   980   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   981   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   982   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   983  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   984  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   985  /** \brief keeps the double buffer active
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   986   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   987   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   988   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   989   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   990   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   991   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   992   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   993   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   994   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   995  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   996  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   997  /** \brief Double buffer switch application
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   998   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   999   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1000   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1001   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1002   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1003   *      // Apply software buffer switch
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1004   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1005   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1006   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1007   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1008  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1009  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1010  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1012  /** \addtogroup IfxLld_Dma_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1013   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1014  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1015  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1016  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1017  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1019  /** \brief Clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1020   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1021   * \param channelId channel for which the interrupt flag should be cleared
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1022   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1023   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1024   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1025   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1026   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1027  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1028  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1029  /** \brief Disable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1030   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1031   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1032   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1033   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1034   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1035   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1036   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1037   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1038   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1039  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1040  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1041  /** \brief Enable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1042   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1043   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1044   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1045   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1046   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1047   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1048   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1049   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1051  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1053  /** \brief Return and clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1054   * The flag is automatically cleared with the call to this function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1055   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1056   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1057   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1058   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1059   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1060   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1061   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1062   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1063   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1064   *      // Wait till end of the transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1065   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1066   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1067   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1068   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1069  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1070  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1071  /** \brief Returns and clears the pattern detection interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1072   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1073   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1074   * \return TRUE  if pattern detection for a given channel is found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1075   * FALSE if pattern detection for a given channel is not found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1076   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1077   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1078   *      // wait till pattern match is found for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1079   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1080   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1081   *      // Wait for the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1082   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1083   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1084   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1085   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1086  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1087  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1088  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1089   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1090   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1091   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1092   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1093   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1094   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1095   *      // wait for the destination buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1096   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1097   *      boolean destinationWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1098   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1099   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1100   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1101   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1103  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1105  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1106   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1107   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1108   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1109   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1110   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1111   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1112   *      // wait for the source buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1113   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1114   *      boolean sourceWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1115   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1116   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1117   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1118   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1119   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1120  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1122  /** \brief Return a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1123   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1124   * \param channelId channel for which the interrupt flag should be returned
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1125   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1126   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1127   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1128   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1129   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1130   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1131  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1132  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1133  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1134   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1135   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1136   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1137   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1138   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1139   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1140   *      boolean patternDetectOldVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1142   *      // Check the old value of the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1143   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1144   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1146   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1147  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1149  /** \brief Returns the SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1150   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1151   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1152   * \return SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1153   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1154   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1155   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1156   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1157   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1158   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1159  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1160  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1161  /** \brief Setting of channel interrupt service request by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1162   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1163   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1164   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1165   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1166   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1167   *      // Set the channel interrupt service request through software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1168   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1172  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1173  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1174  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1176  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1177  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1178  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1180  /** \brief Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1181   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1182   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1185   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1186   *      // Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1187   *      IfxDma_enableSwapDataByte(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1188   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1189   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1190   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1191  IFX_INLINE void IfxDma_enableSwapDataByte(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1193  /** \brief Configure the hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1194   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1195   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1196   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1197   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1198   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1199   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1200   *      // Set the required hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1201   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1202   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1203   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1204   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1205  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1207  /** \brief Sets the Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1208   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1209   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1210   * \param value Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1211   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1213  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1215  /** \brief Sets the Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1216   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1217   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1218   * \param length Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1220   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1221  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1222  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1223  /** \brief Sets the Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1224   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1225   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1226   * \param length Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1227   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1228   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1229  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1230  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1231  /** \brief Enable the Source Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1232   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1233   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1234   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1236  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1238  /** \brief Enable the Destination Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1239   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1240   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1241   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1242   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1243  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1245  /** \brief Returns the Data CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1246   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1247   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1248   * \return The Data CRC value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1250  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1252  /** \brief Returns the Source and Destination CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1253   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1254   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1255   * \return The source and destination CRC values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1256   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1257  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1258  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1259  /** \brief Returns the ERR pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1260   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1261   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1262   * \return ERR pointer for given DMA resource Partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1263   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1264  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1265  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1266  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1267  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1268  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1269  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1270  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1271  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1272      dma->TSR[channelId].B.HLTCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1273  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1274  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1275  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1276  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1277  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1278      dma->CH[channelId].CHCSR.B.CICH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1279  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1280  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1281  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1282  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1283  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1284      dma->TSR[channelId].B.CTL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1285  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1288  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1289  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1290      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1291      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1292          dma->ME1.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1293      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1294      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1296          dma->ME0.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1298  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1299  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1301  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1302  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1303      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1304  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1305  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1307  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1308  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1309      dma->TSR[channelId].B.DCH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1310  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1311  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1312  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1313  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1314  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1315      dma->TSR[channelId].B.ETRL = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1316  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1317  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1319  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1320  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1321      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1322      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1323          dma->ME1.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1324      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1325      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1326      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1327          dma->ME0.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1328      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1329  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1330  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1331  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1332  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1333  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1334      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1335      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1336          dma->ME1.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1337      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1338      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1339      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1340          dma->ME0.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1341      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1342  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1343  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1344  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1345  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1346  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1347      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1348  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1349  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1350  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1351  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1352  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1353      dma->TSR[channelId].B.ECH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1354  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1355  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1357  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1358  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1359      dma->TSR[channelId].B.ETRL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1360  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1361  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1362  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1363  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1364  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1365      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1366      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1367          dma->ME1.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1368      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1369      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1370      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1371          dma->ME0.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1372      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1373  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1374  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1375  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1376  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1377  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1378      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1379      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1380          dma->ME1.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1381      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1382      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1383      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1384          dma->ME0.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1385      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1386  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1388  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1389  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1390  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1391      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1393      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1394  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1395      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1396      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1397          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1398      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1399  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1400      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1401  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1402  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1403  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1404  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1405  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1406      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1407  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1408      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1409  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1410      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1411      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1412          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1413      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1414  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1415      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1416  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1417  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1419  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1420  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1421      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1422  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1423      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1425      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1426      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1427          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1428      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1429  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1430      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1431  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1432  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1434  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1435  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1436      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1437  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1438      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1439  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1440      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1441      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1442          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1443      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1444  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1445      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1446  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1447  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1448  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1449  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1450  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1451      return dma->CH[channelId].DADR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1452  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1453  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1454  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1455  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1456  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1457      return dma->TSR[channelId].B.HLTACK != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1458  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1459  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1460  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1461  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1462  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1463      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1465      result = dma->CH[channelId].CHCSR.B.ICH;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1466  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1467      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1468  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1469  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1470  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1471  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1472  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1473      return dma->CH[channelId].CHCSR.B.LXO != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1474  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1475  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1477  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1478  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1479      return dma->CH[channelId].SADR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1480  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1481  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1482  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1483  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1484  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1485      return dma->SUSACR[channelId].B.SUSAC;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1486  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1489  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1490  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1491      return dma->TSR[channelId].B.TRL != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1492  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1494  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1495  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1496  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1497      return dma->CH[channelId].CHCSR.B.TCOUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1498  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1499  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1500  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1501  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1502  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1503      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1504  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1505  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1507  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1508  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1509      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1510  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1511      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1512  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1513      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1514      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1515          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1516      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1517  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1518      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1519  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1520  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1522  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1523  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1524      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1525  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1528  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1529  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1530      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1531      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1532          return dma->ME1.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1533      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1534      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1535      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1536          return dma->ME0.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1537      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1538  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1539  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1541  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1542  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1543      IFX_UNUSED_PARAMETER(dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1544      // only a single DMA available, therefore no check for the dma pointer required
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1545      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1546  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1547  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1548  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1549  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1550  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1551      return dma->TIME.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1552  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1555  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1556  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1557      return dma->TSR[channelId].B.RST == 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1558  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1559  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1560  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1561  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1562  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1563      return dma->TSR[channelId].B.HTRE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1564  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1565  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1566  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1567  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1568  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1569      return dma->TSR[channelId].B.CH != 0;
	addsc.a	a2,a2,d15,#2
.L371:
	ld.bu	d15,[a2]7680
.L211:
	jnz.t	d15:3,.L10
.L132:
	j	.L11
.L2:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   103          {}
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   104      }
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   105      else
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   106      {
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   107          /* input in INIT register */
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   108          for (inputDataCounter = 0; inputDataCounter < crcDataLength; ++inputDataCounter)
	mov	d15,#0
	j	.L12
.L13:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   109          {
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   110              InputData->U = *(dataPtr++);
	add	d15,#1
	ld.w	d0,[a5+]
.L372:
	st.w	[a2],d0
.L12:
	jlt.u	d15,d4,.L13
.L11:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   111          }
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   112      }
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   113  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   114      crcResultValue = fceSFR->IN[fce->crcChannel].RES.U;
	ld.bu	d15,[a15]21
	sha	d15,#5
.L373:
	addsc.a	a15,a4,d15,#0
.L320:
	ld.w	d2,[a15]260
.L321:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   115  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   116      return crcResultValue;
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   117  }
	ret
.L85:
	
__IfxFce_Crc_calculateCrc_function_end:
	.size	IfxFce_Crc_calculateCrc,__IfxFce_Crc_calculateCrc_function_end-IfxFce_Crc_calculateCrc
.L43:
	; End of function
	
	.sdecl	'.text.IfxFce_Crc..cocofun_6',code,cluster('.cocofun_6')
	.sect	'.text.IfxFce_Crc..cocofun_6'
	.align	2
; Function .cocofun_6
.L20:
.cocofun_6:	.type	func
; Function body .cocofun_6, coco_iter:0
	ld.a	a2,[a15]8
.L315:
	ld.b	d15,[a15]12
.L316:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    41   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    42   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    43   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    44   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    45   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    46   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    47   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    48   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    49   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    50   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    51   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    52   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    53   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    54   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    55   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    56   * \ingroup IfxLld_Dma_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    57   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    59  #ifndef IFXDMA_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    60  #define IFXDMA_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    61  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    62  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    63  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    64  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    65  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    66  #include "_Impl/IfxDma_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    67  #include "IfxDma_bf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    69  #include "IfxDma_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    70  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    71  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    72  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    73  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    74  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    75  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    77  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    78  /** \addtogroup IfxLld_Dma_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    79   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    80  /** \brief Bus Master Mode definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    81   * Definition in Ifx_DMA.MODE[4].B.MODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    82   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    83  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    84  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    85      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    86      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    87  } IfxDma_BusMasterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    88  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    89  /** \brief Channel Bus Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    90   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    91  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    92  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    93      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    94      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    95      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    96  } IfxDma_ChannelBusPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    97  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    98  /** \brief DMA circular buffer (wrap around) definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	    99   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   100   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   101  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   102  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   103      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   104      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   105      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   119  } IfxDma_ChannelIncrementCircular;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   121  /** \brief DMA incrementation direction definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   122   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   124  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   125  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   126      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   127      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   128  } IfxDma_ChannelIncrementDirection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   129  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   130  /** \brief DMA incrementation definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   131   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   132   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   133  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   134  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   135      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   136      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   137      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   143  } IfxDma_ChannelIncrementStep;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   145  /** \brief Channel Transfer Interrupt generation mechanism.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   146   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   147   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   148  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   149  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   150      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   151      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   152  } IfxDma_ChannelInterruptControl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   154  /** \brief DMA transfer definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   155   * Definition in Ifx_DMA.ME0.CHCR.B.BLKM and Ifx_DMA.ME1.CHCR.B.BLKM
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   156   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   157  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   158  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   159      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   160      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   161      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   167  } IfxDma_ChannelMove;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   169  /** \brief DMA move size definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   170   * Definition in Ifx_DMA.ME0.CHCR.B.CHDW and Ifx_DMA.ME1.CHCR.B.CHDW
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   172  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   173  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   174      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   175      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   176      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   180  } IfxDma_ChannelMoveSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   182  /** \brief DMA operation mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   183   * Definition in Ifx_DMA.ME0.CHCR.B.CHMODE and Ifx_DMA.ME1.CHCR.B.CHMODE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   185  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   186  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   187      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   188      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   189  } IfxDma_ChannelOperationMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   190  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   191  /** \brief Pattern detection selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   192   * Definition in Ifx_DMA.ME0.CHCR.B.PATSEL and Ifx_DMA.ME1.CHCR.B.PATSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   193   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   194  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   195  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   196      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   197      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   198      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   204  } IfxDma_ChannelPattern;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   206  /** \brief Channel Priority definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   207   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   208  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   209  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   210      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   211      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   212      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   213  } IfxDma_ChannelPriority;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   215  /** \brief DMA request mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   216   * Definition in Ifx_DMA.ME0.CHCR.B.RROAT and Ifx_DMA.ME1.CHCR.B.RROAT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   217   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   218  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   219  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   220      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   221      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   222  } IfxDma_ChannelRequestMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   224  /** \brief DMA request selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   225   * Definition in Ifx_DMA.ME0.CHCR.B.PRSEL and Ifx_DMA.ME1.CHCR.B.PRSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   227  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   228  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   229      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   230      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   231  } IfxDma_ChannelRequestSource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   233  /** \brief shadow definition definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   234   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   236  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   237  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   238      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   239      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   240      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   251  } IfxDma_ChannelShadow;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   253  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   254  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   255      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   256      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   257      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   259  } IfxDma_HardwareResourcePartition;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   261  /** \brief DMA move engine definition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   263  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   264  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   265      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   266      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   267  } IfxDma_MoveEngine;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   269  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   270   * Definition in Ifx_DMA.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   271   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   272  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   273  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   274      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   275      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   276  } IfxDma_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   278  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   280  /** \addtogroup IfxLld_Dma_Std_Reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   281   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   284  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   287  /** \brief Return the status of a DMA channel (reset / not reset)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   288   * This API needs to be used after the IfxDma_resetChannel()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   289   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   290   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   291   * \return TRUE if the channel is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   292   * FALSE if the channel is not reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   293   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   294   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   295   *      // check whether the channel is reset or not and also the hardware trigger disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   296   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   297   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   298   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   299   *              // Dma is out of RESET and there is no hardware request enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   300   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   301   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   302   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   303   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   305  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   307  /** \brief Reset the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   308   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   309   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   310   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   311   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   312   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   313   *      // Apply reset to the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   314   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   315   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   316   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   317   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   318  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   319  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   320  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   321  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   322  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   323   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   324  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   325  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   326  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   327  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   329  /** \brief Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   330   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   331   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   332   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   333   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   334   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   335   *      // Clear the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   336   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   337   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   338   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   339   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   340  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   341  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   342  /** \brief Disable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   343   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   344   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   345   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   346   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   347   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   348   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   350  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   352  /** \brief Disable the generation of a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   353   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   354   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   355   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   356   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   357   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   358   *      // Disable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   359   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   360   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   361   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   362   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   363  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   364  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   365  /** \brief Enable a DMA channel hardware transaction request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   366   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   367   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   368   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   369   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   370   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   371   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   372   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   373   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   374   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   375   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   376   *      // Do not restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   377   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   378   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   379   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   380   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   381   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   382   *      // Check for end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   383   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   384   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   385   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   386   *      // Enable the hardware trigger for channel 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   387   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   388   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   389   *      // Disable the hardware trigger for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   391   *      // Hardware triggers for second time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   392   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   393   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   394   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   395   *              IfxSrc_setRequest(src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   396   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   397   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   398   *      // Restrict the hardware triggering to only one transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   399   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   400   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   401   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   402   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   403   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   404  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   406  /** \brief Enable the generation of  a channel transaction lost error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   407   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   408   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   409   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   410   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   411   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   412   *      // Enable the transaction request lost interrupt for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   413   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   414   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   415   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   416   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   417  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   419  /** \brief Check the channel transaction request lost flag status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   420   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   421   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   422   * \return TRUE if the TRL is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   423   * FALSE if the TRL is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   424   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   425   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   426   *      boolean trlFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   427   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   428   *      // Check whether the channel transaction request lost flag is set or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   429   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   430   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   431   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   432   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   433  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   435  /** \brief Converts DMA circular range to circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   436   * \param range DMA circular range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   437   * \return DMA circular code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   439  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   441  /** \brief Return the hardware transaction request status of a DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   442   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   443   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   444   * \return TRUE if the hardware transaction request is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   445   * FALSE if the hardware transaction request is disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   446   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   447   * A coding example can be found in \ref IfxDma_isChannelReset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   448   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   449   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   450  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   451  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   452  /** \brief Return the status of a DMA channel (transaction pending)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   453   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   454   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   455   * \return TRUE if a transaction request for the given channel is pending
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   456   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   457   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   458   *      // check for the channel request pending with the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   459   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   460   *              // There is channel request pending for channel 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   461   *              result |= 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   462   *      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   463   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   464   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   465   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   466  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   468  /** \brief Sets the sensitivity of the module to sleep signal
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   469   * \param dma pointer to DMA registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   470   * \param mode mode selection (enable/disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   471   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   473  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   474  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   475  /** \brief Request a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   476   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   477   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   479   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   480   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   481   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   482   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   483  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   485  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   487  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   488   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   490  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   491  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   492  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   494  /** \brief Clear the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   495   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   496   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   497   * \param mask value holds the bits to clear or mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   498   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   500   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   501   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   502   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   503   *                                                  IFXDMA_ERROR_S |    // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   504   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   505   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   510   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   512   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   513  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   515  /** \brief Disable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   516   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   517   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   518   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   519   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   520   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   521   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   522   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   523  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   524  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   525  /** \brief Disable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   526   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   527   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   528   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   530   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   531   *      // Disable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   532   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   533   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   534   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   535   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   537  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   539  /** \brief Enable the generation of a Move engine destination error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   540   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   541   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   542   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   543   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   544   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   545   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   546   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   547  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   548  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   549  /** \brief Enable the generation of a Move engine source error interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   550   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   551   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   552   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   553   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   554   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   555   *      // Enable the move engine source and destination move errors
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   556   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   557   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   558   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   560   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   561  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   562  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   563  /** \brief Return the DMA error status flags
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   564   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   565   * \param moveEngine pointer to the DMA move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   566   * \return the content of the DMA.ERRSR register
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   567   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   568   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   569   *      uint32 errorFlags = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   570   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   571   *      // Get the status of the error flags of move engine
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   572   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   574   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   575   *              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   576   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   578   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   579   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   580   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   581   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   582   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   583   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   584   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   585   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   586   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   587   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   588   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   589   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   590   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   591   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   592   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   593   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   594   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   595   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   596   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   597   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   598   *           // ...
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   599   *           }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   600   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   601   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   603  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   605  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   606  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   607  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   608   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   609  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   610  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   611  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   612  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   614  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   615   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   616   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   617   * \return Actual channel destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   618   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   619   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   620   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   621   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   622   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   623   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   624   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   625  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   627  /** \brief Get a channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   628   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   629   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   630   * \return Actual channel source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   631   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   632   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   633   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   634   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   635   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   636   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   637  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   639  /** \brief Return the DMA channel suspend Mode status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   640   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   641   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   642   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   643   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   644  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   646  /** \brief Return remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   647   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   648   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   649   * \return Remaining DMA transfer count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   650   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   651   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   652   *      // Wait till transfer count (TCOUNT) becomes 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   653   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   654   *      bool notFinished;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   655   *      do {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   656   *              notFinished = false;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   657   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   658   *                              notFinished = true;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   659   *                              break;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   660   *                      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   661   *      } while( notFinished );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   662   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   663   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   664   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   665  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   666  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   667  /** \brief get the time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   668   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   669   * \return the current time stamp
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   670   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   671   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   672   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   673   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   674   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   675   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   676  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   678  /** \brief Configure the move count for each DMA channel transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   679   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   680   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   681   * \param blockMode value holds the number of moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   682   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   684   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   685   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   686   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   687  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   688  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   689  /** \brief Configure a DMA channel to "continous transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   690   * After a transaction, the hardware request transaction remain enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   691   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   692   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   694   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   695   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   696   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   697   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   698  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   699  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   700  /** \brief Configure the destination address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   701   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   702   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   703   * \param address is the Initial address of the destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   704   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   705   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   706   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   707   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   708   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   709  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   710  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   711  /** \brief Configure a DMA channel destination pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   712   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   713   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   714   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   715   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   716   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   717   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   718   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   719   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   720   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   721   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   722  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   723  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   724  /** \brief Configure a DMA channel move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   725   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   726   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   727   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   728   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   729   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   730   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   733  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   735  /** \brief Configure a DMA channel shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   736   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   737   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   738   * \param shadow Specifies the shadow pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   739   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   740   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   741   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   742   *      // Push the shadow mode into double buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   743   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   744   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   745   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   746   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   748  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   750  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   751   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   752   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   753   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   754   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   755   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   756   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   757   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   758   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   759  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   760  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   761  /** \brief Configure a DMA channel to "single transaction mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   762   * One transfer request starts a complete DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   763   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   764   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   765   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   766   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   767   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   768   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   769   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   770  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   771  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   772  /** \brief Configure a DMA channel to "single transfer mode"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   773   * A transfer request is required for each transfer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   774   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   775   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   776   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   777   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   778   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   779   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   780   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   781  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   782  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   783  /** \brief Configure the source address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   784   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   785   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   786   * \param address is the Initial address of the source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   787   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   788   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   789   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   790   *      // Check for the end of current transaction and before trigger the channel request for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   791   *      // for another channel, re configure the source and destination addresses
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   792   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   793   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   794   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   795   *      // Re-Program the source address for the channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   796   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   797   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the destination address for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   800   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   801   *      // Start DMA transaction for channel 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   803   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   804   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   805   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   806  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   807  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   808  /** \brief Configure a DMA channel source pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   809   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   810   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   811   * \param incStep Specifies the pointer incrementation step
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   812   * \param direction Specifies the incrementation direction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   813   * \param size Specifies the size of the circular buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   814   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   815   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   816   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   817   *      // Re-program the source and destination circular buffer control fields
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   818   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   819   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   820   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   821   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   822   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   823   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   824  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   826  /** \brief Configure a DMA channel suspend enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   827   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   828   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   829   * \param enable enable (1) / disable (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   830   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   831   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   832  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   833  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   834  /** \brief Configure the move count of a DMA channel transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   835   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   836   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   837   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   838   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   839   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   840   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   841   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   842   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   843   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   844   *      // Wait till end of transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   845   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   846   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   847   *      // Change the TREL configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   848   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   849   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the BLKM configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   852   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the Move size configuration for channel 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   855   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   856   *      // Pull down the channel pending request after the first transfer is initiated
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   858   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the transaction gets over
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   861   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   862   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   864   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   867   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   868   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   869   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   870  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   871  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   872  /** \brief Configure the shadow pointer register to read only
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   873   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   874   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   875   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   876   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   877   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   878   *      // Disable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   879   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   880   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   881   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   882   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   883  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   884  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   885  /** \brief Configure the shadow pointer register to write-able
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   886   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   887   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   888   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   889   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   890   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   891   *      // Enable the shadow mode to come out of double buffer mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   892   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   893   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   894   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   895   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   896  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   897  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   898  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   899  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   900  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   901   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   902  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   903  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   904  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   905  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   906  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   907  /** \brief Clear channel halt request and aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   908   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   909   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   910   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   911   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   912   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   913   *      // Quit the halt mode of operation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   914   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   915   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   916   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   918  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   920  /** \brief Get channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   921   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   922   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   923   * \return halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   924   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   925   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   926   *      // Check for the channel halt aknowledgement
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   927   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   928   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   929   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   930   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   931  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   932  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   933  /** \brief setting channel halt request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   934   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   935   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   936   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   937   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   938   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   939   *      // Halt the channel processing
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   940   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   941   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   942   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   943   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   944  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   945  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   946  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   948  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   949   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   950  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   951  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   952  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   953  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   954  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   955  /** \brief get information on buffer being read by software and clear the notification flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   956   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   957   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   958   * \return TRUE  if one of the buffers is being read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   959   * FALSE if one of the buffers is already read by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   960   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   961   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   962   *      // Check the buffer being read (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   963   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   964   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   965   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   966   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   967  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   968  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   969  /** \brief get Double buffer selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   970   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   971   * \param channelId channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   972   * \return TRUE if buffer 1 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   973   * FALSE if buffer 0 is being filled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   974   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   975   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   976   *      boolean buffer_being_filled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   977   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   978   *      // Check the buffer being filled (Double buffer operation mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   979   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   980   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   981   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   982   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   983  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   984  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   985  /** \brief keeps the double buffer active
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   986   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   987   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   988   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   989   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   990   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   991   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   992   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   993   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   994   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   995  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   996  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   997  /** \brief Double buffer switch application
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   998   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	   999   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1000   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1001   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1002   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1003   *      // Apply software buffer switch
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1004   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1005   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1006   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1007   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1008  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1009  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1010  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1012  /** \addtogroup IfxLld_Dma_Std_Interrupts
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1013   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1014  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1015  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1016  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1017  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1019  /** \brief Clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1020   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1021   * \param channelId channel for which the interrupt flag should be cleared
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1022   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1023   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1024   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1025   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1026   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1027  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1028  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1029  /** \brief Disable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1030   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1031   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1032   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1033   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1034   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1035   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1036   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1037   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1038   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1039  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1040  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1041  /** \brief Enable channel interrupt trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1042   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1043   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1044   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1045   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1046   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1047   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1048   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1049   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1051  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1053  /** \brief Return and clear a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1054   * The flag is automatically cleared with the call to this function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1055   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1056   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1057   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1058   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1059   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1060   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1061   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1062   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1063   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1064   *      // Wait till end of the transaction
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1065   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1066   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1067   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1068   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1069  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1070  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1071  /** \brief Returns and clears the pattern detection interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1072   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1073   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1074   * \return TRUE  if pattern detection for a given channel is found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1075   * FALSE if pattern detection for a given channel is not found
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1076   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1077   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1078   *      // wait till pattern match is found for given channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1079   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1080   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1081   *      // Wait for the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1082   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1083   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1084   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1085   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1086  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1087  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1088  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1089   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1090   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1091   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1092   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1093   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1094   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1095   *      // wait for the destination buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1096   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1097   *      boolean destinationWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1098   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1099   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1100   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1101   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1103  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1105  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1106   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1107   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1108   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1109   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1110   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1111   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1112   *      // wait for the source buffer wrap interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1113   *      // and clear it once it is set and checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1114   *      boolean sourceWrapFlag;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1115   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1116   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1117   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1118   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1119   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1120  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1122  /** \brief Return a channel transfer interrupt flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1123   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1124   * \param channelId channel for which the interrupt flag should be returned
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1125   * \return TRUE if the interrupt flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1126   * FALSE if the interrupt flag is not set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1127   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1128   * see Dma.INTSR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1129   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1130   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1131  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1132  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1133  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1134   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1135   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1136   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1137   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1138   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1139   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1140   *      boolean patternDetectOldVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1142   *      // Check the old value of the pattern detection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1143   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1144   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1146   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1147  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1149  /** \brief Returns the SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1150   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1151   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1152   * \return SRC pointer for given DMA channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1153   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1154   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1155   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1156   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1157   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1158   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1159  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1160  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1161  /** \brief Setting of channel interrupt service request by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1162   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1163   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1164   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1165   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1166   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1167   *      // Set the channel interrupt service request through software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1168   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1171   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1172  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1173  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1174  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1176  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1177  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1178  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1180  /** \brief Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1181   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1182   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1183   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1184   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1185   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1186   *      // Enable the Swap Data CRC Byte order
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1187   *      IfxDma_enableSwapDataByte(chn[0].dma, chn[0].channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1188   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1189   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1190   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1191  IFX_INLINE void IfxDma_enableSwapDataByte(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1193  /** \brief Configure the hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1194   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1195   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1196   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1197   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1198   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1199   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1200   *      // Set the required hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1201   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1202   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1203   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1204   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1205  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1207  /** \brief Sets the Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1208   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1209   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1210   * \param value Interrupt control value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1211   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1213  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1215  /** \brief Sets the Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1216   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1217   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1218   * \param length Circular Buffer Destination Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1219   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1220   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1221  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1222  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1223  /** \brief Sets the Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1224   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1225   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1226   * \param length Circular Buffer Source Length
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1227   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1228   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1229  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1230  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1231  /** \brief Enable the Source Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1232   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1233   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1234   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1235   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1236  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1238  /** \brief Enable the Destination Circular Buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1239   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1240   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1241   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1242   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1243  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1245  /** \brief Returns the Data CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1246   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1247   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1248   * \return The Data CRC value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1250  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1252  /** \brief Returns the Source and Destination CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1253   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1254   * \param channelId DMA channel number
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1255   * \return The source and destination CRC values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1256   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1257  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1258  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1259  /** \brief Returns the ERR pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1260   * \param dma pointer to DMA module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1261   * \param resourcePartition Hardware resource partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1262   * \return ERR pointer for given DMA resource Partition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1263   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1264  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma, IfxDma_HardwareResourcePartition resourcePartition);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1265  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1266  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1267  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1268  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1269  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1270  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1271  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1272      dma->TSR[channelId].B.HLTCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1273  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1274  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1275  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1276  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1277  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1278      dma->CH[channelId].CHCSR.B.CICH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1279  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1280  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1281  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1282  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1283  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1284      dma->TSR[channelId].B.CTL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1285  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1288  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1289  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1290      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1291      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1292          dma->ME1.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1293      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1294      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1296          dma->ME0.CLRE.U = mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1298  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1299  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1301  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1302  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1303      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1304  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1305  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1307  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1308  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1309      dma->TSR[channelId].B.DCH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1310  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1311  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1312  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1313  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1314  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1315      dma->TSR[channelId].B.ETRL = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1316  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1317  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1319  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1320  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1321      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1322      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1323          dma->ME1.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1324      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1325      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1326      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1327          dma->ME0.EER.B.EDER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1328      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1329  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1330  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1331  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1332  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1333  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1334      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1335      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1336          dma->ME1.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1337      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1338      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1339      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1340          dma->ME0.EER.B.ESER = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1341      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1342  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1343  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1344  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1345  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1346  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1347      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1348  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1349  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1350  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1351  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1352  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1353      dma->TSR[channelId].B.ECH = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1354  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1355  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1357  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1358  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1359      dma->TSR[channelId].B.ETRL = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1360  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1361  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1362  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1363  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1364  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1365      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1366      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1367          dma->ME1.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1368      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1369      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1370      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1371          dma->ME0.EER.B.EDER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1372      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1373  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1374  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1375  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1376  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1377  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1378      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1379      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1380          dma->ME1.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1381      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1382      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1383      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1384          dma->ME0.EER.B.ESER = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1385      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1386  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1387  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1388  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1389  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1390  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1391      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1393      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1394  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1395      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1396      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1397          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1398      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1399  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1400      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1401  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1402  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1403  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1404  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1405  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1406      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1407  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1408      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1409  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1410      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1411      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1412          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1413      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1414  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1415      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1416  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1417  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1419  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1420  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1421      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1422  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1423      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1424  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1425      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1426      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1427          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1428      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1429  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1430      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1431  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1432  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1434  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1435  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1436      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1437  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1438      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1439  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1440      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1441      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1442          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1443      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1444  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1445      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1446  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1447  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1448  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1449  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1450  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1451      return dma->CH[channelId].DADR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1452  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1453  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1454  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1455  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1456  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1457      return dma->TSR[channelId].B.HLTACK != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1458  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1459  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1460  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1461  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1462  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1463      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1464  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1465      result = dma->CH[channelId].CHCSR.B.ICH;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1466  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1467      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1468  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1469  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1470  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1471  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1472  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1473      return dma->CH[channelId].CHCSR.B.LXO != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1474  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1475  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1477  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1478  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1479      return dma->CH[channelId].SADR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1480  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1481  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1482  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1483  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1484  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1485      return dma->SUSACR[channelId].B.SUSAC;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1486  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1487  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1489  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1490  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1491      return dma->TSR[channelId].B.TRL != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1492  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1494  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1495  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1496  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1497      return dma->CH[channelId].CHCSR.B.TCOUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1498  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1499  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1500  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1501  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1502  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1503      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1504  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1505  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1507  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1508  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1509      boolean result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1510  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1511      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1512  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1513      if (result == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1514      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1515          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1516      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1517  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1518      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1519  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1520  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1521  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1522  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1523  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1524      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1525  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1528  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1529  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1530      if (moveEngine == IfxDma_MoveEngine_1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1531      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1532          return dma->ME1.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1533      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1534      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1535      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1536          return dma->ME0.ERRSR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1537      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1538  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1539  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1541  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1542  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1543      IFX_UNUSED_PARAMETER(dma);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1544      // only a single DMA available, therefore no check for the dma pointer required
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1545      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1546  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1547  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1548  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1549  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1550  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1551      return dma->TIME.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1552  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1555  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1556  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1557      return dma->TSR[channelId].B.RST == 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1558  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1559  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1560  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1561  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1562  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1563      return dma->TSR[channelId].B.HTRE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1564  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1565  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1566  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1567  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1568  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1569      return dma->TSR[channelId].B.CH != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1570  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1571  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1572  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1573  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1574  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1575      dma->CH[channelId].CHCSR.U = 0U << IFX_DMA_CH_CHCSR_FROZEN_OFF;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1576  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1577  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1578  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1579  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1580  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1581      dma->TSR[channelId].B.RST = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1582  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1583  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1584  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1585  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1586  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1587      dma->CH[channelId].CHCFGR.B.BLKM = blockMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1588  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1589  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1590  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1591  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1592  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1593      dma->CH[channelId].CHCFGR.B.CHMODE = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1594  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1595  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1596  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1597  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1598  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1599      dma->CH[channelId].DADR.U = (uint32)address;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1600  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1601  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1602  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1603  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1604  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1605      Ifx_DMA_CH_ADICR adicr;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1606      adicr.U                    = dma->CH[channelId].ADICR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1607      adicr.B.DMF                = incStep;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1608      adicr.B.INCD               = direction;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1609      adicr.B.CBLD               = size;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1610      dma->CH[channelId].ADICR.U = adicr.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1611  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1612  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1614  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1615  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1616      dma->TSR[channelId].B.HLTREQ = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1617  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1619  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1620  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1621  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1622      dma->CH[channelId].CHCSR.B.SIT = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1623  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1624  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1625  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1626  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1627  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1628      dma->CH[channelId].CHCFGR.B.CHDW = moveSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1629  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1630  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1631  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1632  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1633  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1634      dma->CH[channelId].ADICR.B.SHCT = shadow;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1635  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1636  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1637  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1638  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1639  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1640      dma->CH[channelId].CHCFGR.B.CHMODE = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1641  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1642  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1643  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1644  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1645  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1646      dma->CH[channelId].CHCFGR.B.RROAT = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1647  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1648  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1649  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1650  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1651  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1652      dma->CH[channelId].CHCFGR.B.RROAT = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1653  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1654  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1656  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1657  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1658      dma->CH[channelId].SADR.U = (uint32)address;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1659  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1660  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1662  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1663  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1664      Ifx_DMA_CH_ADICR adicr;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1665      adicr.U                    = dma->CH[channelId].ADICR.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1666      adicr.B.SMF                = incStep;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1667      adicr.B.INCS               = direction;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1668      adicr.B.CBLS               = size;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1669      dma->CH[channelId].ADICR.U = adicr.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1670  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1671  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1672  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1673  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1674  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1675      dma->SUSENR[channelId].B.SUSEN = enable;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1676  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1678  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1679  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1680  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Dma\Std\IfxDma.h	  1681      dma->CH[channelId].CHCFGR.B.TREL = transferCount;
	sha	d15,#5
.L475:
	addsc.a	a2,a2,d15,#0
.L476:
	fret
.L83:
	; End of function
	.sdecl	'.text.IfxFce_Crc.IfxFce_Crc_clearErrorFlags',code,cluster('IfxFce_Crc_clearErrorFlags')
	.sect	'.text.IfxFce_Crc.IfxFce_Crc_clearErrorFlags'
	.align	2
	
	.global	IfxFce_Crc_clearErrorFlags

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   118  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   119  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   120  void IfxFce_Crc_clearErrorFlags(IfxFce_Crc_Crc *fce)
; Function IfxFce_Crc_clearErrorFlags
.L22:
IfxFce_Crc_clearErrorFlags:	.type	func

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   121  {
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   122      IfxFce_clearCrcErrorFlags(fce->fce, fce->crcChannel);
	ld.a	a15,[a4]
.L458:
	ld.bu	d15,[a4]21
.L459:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     2   * \file IfxFce.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     3   * \brief FCE  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     4   * \ingroup IfxLld_Fce
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    42   * \defgroup IfxLld_Fce_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    43   * \ingroup IfxLld_Fce_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    44   * \defgroup IfxLld_Fce_Std_Module Module Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    45   * \ingroup IfxLld_Fce_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    46   * \defgroup IfxLld_Fce_Std_Support Support Function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    47   * \ingroup IfxLld_Fce_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    48   * \defgroup IfxLld_Fce_Std_InterruptStatus Interrupt Status Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    49   * \ingroup IfxLld_Fce_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    50   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    51  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    52  #ifndef IFXFCE_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    53  #define IFXFCE_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    55  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    56  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    57  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    59  #include "_Impl/IfxFce_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    60  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    62  #include "IfxFce_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    63  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    64  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    66  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    67  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    69  /** \addtogroup IfxLld_Fce_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    70   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    71  /** \brief Ifx_FCE_CHx(x= 0,1), Specifies the channel used for CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    75      IfxFce_CrcChannel_0 = 0,      /**< \brief Specifies the channel0 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    76      IfxFce_CrcChannel_1,          /**< \brief Specifies the channel1 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    77      IfxFce_CrcChannel_2,          /**< \brief Specifies the channel2 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    78      IfxFce_CrcChannel_3,          /**< \brief Specifies the channel3 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    79      IfxFce_CrcChannel_4,          /**< \brief Specifies the channel4 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    80      IfxFce_CrcChannel_5,          /**< \brief Specifies the channel5 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    81      IfxFce_CrcChannel_6,          /**< \brief Specifies the channel6 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    82      IfxFce_CrcChannel_7           /**< \brief Specifies the channel7 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    83  } IfxFce_CrcChannel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    84  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    85  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    86  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    87  /** \brief Specify the CRC kernel used by the fce channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    88   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    89  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    90  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    91      IfxFce_CrcKernel_0 = 0,  /**< \brief Specifies to use kernel 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    92      IfxFce_CrcKernel_1 = 1,  /**< \brief Specifies to use kernel 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    93      IfxFce_CrcKernel_2 = 2,  /**< \brief Specifies to use kernel 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    94      IfxFce_CrcKernel_3 = 3   /**< \brief Specifies to use kernel 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    95  } IfxFce_CrcKernel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    97  /** \addtogroup IfxLld_Fce_Std_Module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    98   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   100  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   101  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   102  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   103  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   104  /** \brief Disable the control of FCE module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   105   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   106   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   107   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   108  IFX_INLINE void IfxFce_disableModule(Ifx_FCE *fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   109  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   110  /** \brief Enable the control of FCE module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   111   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   112   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   113   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   114  IFX_INLINE void IfxFce_enableModule(Ifx_FCE *fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   116  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   117  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   118  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   119  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   120  /** \brief Reset the module by clearing the kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   121   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   122   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   124  IFX_EXTERN void IfxFce_resetModule(Ifx_FCE *fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   125  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   126  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   127  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   128  /** \addtogroup IfxLld_Fce_Std_Support
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   129   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   131  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   132  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   133  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   135  /** \brief Reflects the CRC data and returns it
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   136   * \param crcStartValue start value for reflection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   137   * \param crcLength length of reflected value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   138   * \return Reflected CRC data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   140  IFX_EXTERN uint32 IfxFce_reflectCrc32(uint32 crcStartValue, uint8 crcLength);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   142  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   144  /** \addtogroup IfxLld_Fce_Std_InterruptStatus
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   145   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   147  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   148  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   149  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   150  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   151  /** \brief Returns the SRC pointer for FCE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   152   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   153   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   154  IFX_INLINE volatile Ifx_SRC_SRCR *IfxFce_getSrcPointer(Ifx_FCE *fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   155  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   156  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   162  /** \brief Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   163   * \param fce Specifies the pointer to FCE module handler
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   164   * \param channel Specifies the Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   167  IFX_INLINE void IfxFce_clearCrcErrorFlags(Ifx_FCE *fce, IfxFce_CrcChannel channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   169  /** \brief Gets the CRC interrupt status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   170   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   171   * \param channel Specifies the Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   172   * \return Return Crc Interrupt Status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   174  IFX_INLINE Ifx_FCE_IN_STS IfxFce_getCrcInterruptStatus(Ifx_FCE *fce, IfxFce_CrcChannel channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   176  /** \brief Set the length of over which CRC checksum is calculated.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   177   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   178   * \param channel Specifies the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   179   * \param crcLength Specifies the Length of CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   180   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   181   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   182  IFX_INLINE void IfxFce_setChannelCrcLength(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 crcLength);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   184  /** \brief Set the CRC start value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   185   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   186   * \param channel Specifies the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   187   * \param crcStartValue Set the crc value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   188   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   189   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   190  IFX_INLINE void IfxFce_setCrcstartValue(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 crcStartValue);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   192  /** \brief Set expected crc value to be checked.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   193   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   194   * \param channel Specifies the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   195   * \param expectedCrc Expected CRC value to be checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   196   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   198  IFX_INLINE void IfxFce_setExpectedCrc(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 expectedCrc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   199  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   200  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   201  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   202  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   204  IFX_INLINE void IfxFce_clearCrcErrorFlags(Ifx_FCE *fce, IfxFce_CrcChannel channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   205  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   206      fce->IN[channel].STS.U = 0x00000000U;
	sha	d15,#5
.L460:
	addsc.a	a15,a15,d15,#0
.L461:
	mov	d15,#0
.L462:
	st.w	[a15]268,d15
.L289:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   123  }
	ret
.L286:
	
__IfxFce_Crc_clearErrorFlags_function_end:
	.size	IfxFce_Crc_clearErrorFlags,__IfxFce_Crc_clearErrorFlags_function_end-IfxFce_Crc_clearErrorFlags
.L73:
	; End of function
	
	.sdecl	'.text.IfxFce_Crc.IfxFce_Crc_deInitModule',code,cluster('IfxFce_Crc_deInitModule')
	.sect	'.text.IfxFce_Crc.IfxFce_Crc_deInitModule'
	.align	2
	
	.global	IfxFce_Crc_deInitModule

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   124  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   125  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   126  void IfxFce_Crc_deInitModule(IfxFce_Crc_Crc *fce)
; Function IfxFce_Crc_deInitModule
.L24:
IfxFce_Crc_deInitModule:	.type	func

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   127  {
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   128      IfxFce_resetModule(fce->fce);
	ld.a	a4,[a4]
.L322:
	j	IfxFce_resetModule
.L222:
	
__IfxFce_Crc_deInitModule_function_end:
	.size	IfxFce_Crc_deInitModule,__IfxFce_Crc_deInitModule_function_end-IfxFce_Crc_deInitModule
.L48:
	; End of function
	
	.sdecl	'.text.IfxFce_Crc.IfxFce_Crc_getInterruptStatus',code,cluster('IfxFce_Crc_getInterruptStatus')
	.sect	'.text.IfxFce_Crc.IfxFce_Crc_getInterruptStatus'
	.align	2
	
	.global	IfxFce_Crc_getInterruptStatus

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   129  }
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   130  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   131  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   132  Ifx_FCE_IN_STS IfxFce_Crc_getInterruptStatus(IfxFce_Crc_Crc *fce)
; Function IfxFce_Crc_getInterruptStatus
.L26:
IfxFce_Crc_getInterruptStatus:	.type	func

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   133  {
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   134      return IfxFce_getCrcInterruptStatus(fce->fce, fce->crcChannel);
	ld.a	a15,[a4]
.L467:
	ld.bu	d15,[a4]21
.L468:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     2   * \file IfxFce.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     3   * \brief FCE  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     4   * \ingroup IfxLld_Fce
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    42   * \defgroup IfxLld_Fce_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    43   * \ingroup IfxLld_Fce_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    44   * \defgroup IfxLld_Fce_Std_Module Module Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    45   * \ingroup IfxLld_Fce_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    46   * \defgroup IfxLld_Fce_Std_Support Support Function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    47   * \ingroup IfxLld_Fce_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    48   * \defgroup IfxLld_Fce_Std_InterruptStatus Interrupt Status Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    49   * \ingroup IfxLld_Fce_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    50   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    51  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    52  #ifndef IFXFCE_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    53  #define IFXFCE_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    55  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    56  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    57  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    59  #include "_Impl/IfxFce_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    60  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    62  #include "IfxFce_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    63  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    64  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    66  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    67  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    69  /** \addtogroup IfxLld_Fce_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    70   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    71  /** \brief Ifx_FCE_CHx(x= 0,1), Specifies the channel used for CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    75      IfxFce_CrcChannel_0 = 0,      /**< \brief Specifies the channel0 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    76      IfxFce_CrcChannel_1,          /**< \brief Specifies the channel1 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    77      IfxFce_CrcChannel_2,          /**< \brief Specifies the channel2 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    78      IfxFce_CrcChannel_3,          /**< \brief Specifies the channel3 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    79      IfxFce_CrcChannel_4,          /**< \brief Specifies the channel4 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    80      IfxFce_CrcChannel_5,          /**< \brief Specifies the channel5 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    81      IfxFce_CrcChannel_6,          /**< \brief Specifies the channel6 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    82      IfxFce_CrcChannel_7           /**< \brief Specifies the channel7 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    83  } IfxFce_CrcChannel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    84  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    85  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    86  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    87  /** \brief Specify the CRC kernel used by the fce channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    88   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    89  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    90  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    91      IfxFce_CrcKernel_0 = 0,  /**< \brief Specifies to use kernel 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    92      IfxFce_CrcKernel_1 = 1,  /**< \brief Specifies to use kernel 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    93      IfxFce_CrcKernel_2 = 2,  /**< \brief Specifies to use kernel 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    94      IfxFce_CrcKernel_3 = 3   /**< \brief Specifies to use kernel 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    95  } IfxFce_CrcKernel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    97  /** \addtogroup IfxLld_Fce_Std_Module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    98   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   100  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   101  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   102  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   103  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   104  /** \brief Disable the control of FCE module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   105   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   106   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   107   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   108  IFX_INLINE void IfxFce_disableModule(Ifx_FCE *fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   109  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   110  /** \brief Enable the control of FCE module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   111   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   112   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   113   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   114  IFX_INLINE void IfxFce_enableModule(Ifx_FCE *fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   116  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   117  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   118  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   119  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   120  /** \brief Reset the module by clearing the kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   121   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   122   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   124  IFX_EXTERN void IfxFce_resetModule(Ifx_FCE *fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   125  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   126  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   127  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   128  /** \addtogroup IfxLld_Fce_Std_Support
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   129   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   131  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   132  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   133  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   135  /** \brief Reflects the CRC data and returns it
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   136   * \param crcStartValue start value for reflection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   137   * \param crcLength length of reflected value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   138   * \return Reflected CRC data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   140  IFX_EXTERN uint32 IfxFce_reflectCrc32(uint32 crcStartValue, uint8 crcLength);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   142  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   144  /** \addtogroup IfxLld_Fce_Std_InterruptStatus
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   145   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   147  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   148  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   149  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   150  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   151  /** \brief Returns the SRC pointer for FCE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   152   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   153   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   154  IFX_INLINE volatile Ifx_SRC_SRCR *IfxFce_getSrcPointer(Ifx_FCE *fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   155  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   156  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   162  /** \brief Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   163   * \param fce Specifies the pointer to FCE module handler
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   164   * \param channel Specifies the Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   167  IFX_INLINE void IfxFce_clearCrcErrorFlags(Ifx_FCE *fce, IfxFce_CrcChannel channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   169  /** \brief Gets the CRC interrupt status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   170   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   171   * \param channel Specifies the Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   172   * \return Return Crc Interrupt Status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   174  IFX_INLINE Ifx_FCE_IN_STS IfxFce_getCrcInterruptStatus(Ifx_FCE *fce, IfxFce_CrcChannel channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   176  /** \brief Set the length of over which CRC checksum is calculated.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   177   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   178   * \param channel Specifies the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   179   * \param crcLength Specifies the Length of CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   180   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   181   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   182  IFX_INLINE void IfxFce_setChannelCrcLength(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 crcLength);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   184  /** \brief Set the CRC start value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   185   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   186   * \param channel Specifies the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   187   * \param crcStartValue Set the crc value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   188   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   189   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   190  IFX_INLINE void IfxFce_setCrcstartValue(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 crcStartValue);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   192  /** \brief Set expected crc value to be checked.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   193   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   194   * \param channel Specifies the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   195   * \param expectedCrc Expected CRC value to be checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   196   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   198  IFX_INLINE void IfxFce_setExpectedCrc(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 expectedCrc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   199  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   200  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   201  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   202  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   204  IFX_INLINE void IfxFce_clearCrcErrorFlags(Ifx_FCE *fce, IfxFce_CrcChannel channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   205  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   206      fce->IN[channel].STS.U = 0x00000000U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   207  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   209  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   210  IFX_INLINE void IfxFce_disableModule(Ifx_FCE *fce)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   212      uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   213      IfxScuWdt_clearCpuEndinit(password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   214      fce->CLC.B.DISR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   215      IfxScuWdt_setCpuEndinit(password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   216  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   217  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   219  IFX_INLINE void IfxFce_enableModule(Ifx_FCE *fce)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   220  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   221      uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   222      IfxScuWdt_clearCpuEndinit(password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   223      fce->CLC.B.DISR = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   224      IfxScuWdt_setCpuEndinit(password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   225  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   226  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   228  IFX_INLINE Ifx_FCE_IN_STS IfxFce_getCrcInterruptStatus(Ifx_FCE *fce, IfxFce_CrcChannel channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   229  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   230      Ifx_FCE_IN_STS interruptStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   231      interruptStatus.U = fce->IN[channel].STS.U;
	sha	d15,#5
.L469:
	addsc.a	a15,a15,d15,#0
.L470:
	ld.w	d2,[a15]268
.L299:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   135  }
	ret
.L296:
	
__IfxFce_Crc_getInterruptStatus_function_end:
	.size	IfxFce_Crc_getInterruptStatus,__IfxFce_Crc_getInterruptStatus_function_end-IfxFce_Crc_getInterruptStatus
.L78:
	; End of function
	
	.sdecl	'.text.IfxFce_Crc.IfxFce_Crc_initCrc',code,cluster('IfxFce_Crc_initCrc')
	.sect	'.text.IfxFce_Crc.IfxFce_Crc_initCrc'
	.align	2
	
	.global	IfxFce_Crc_initCrc

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   136  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   137  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   138  void IfxFce_Crc_initCrc(IfxFce_Crc_Crc *fceCrc, const IfxFce_Crc_CrcConfig *crcConfig)
; Function IfxFce_Crc_initCrc
.L28:
IfxFce_Crc_initCrc:	.type	func
	mov.aa	a15,a5
.L324:
	mov.aa	a13,a4
.L325:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   139  {
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   140      fceCrc->fce = crcConfig->fce;
	ld.a	a2,[a15]
.L382:
	st.a	[a13],a2
.L383:
	sub.a	a10,#64
.L228:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   141      Ifx_FCE *fceSFR = crcConfig->fce;
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   142  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   143      fceCrc->expectedCrc = crcConfig->expectedCrc;
	ld.w	d15,[a15]10
.L384:
	ld.a	a12,[a15]
.L326:
	st.w	[a13]4,d15
.L385:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   144      fceCrc->crcChannel  = crcConfig->crcChannel;
	ld.bu	d15,[a15]22
.L386:
	st.b	[a13]21,d15
.L387:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   145      fceCrc->crcKernel   = crcConfig->crcKernel;
	ld.bu	d15,[a15]23
.L388:
	st.b	[a13]22,d15
.L231:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   146  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   147      uint16         password = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L323:
	mov	d8,d2
.L327:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   148      IfxScuWdt_clearCpuEndinit(password);
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L233:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   149  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   150      Ifx_FCE_IN_CFG tempCFG;
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   151  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   152      tempCFG.U                               = 0;
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   153      tempCFG.B.CMI                           = crcConfig->enabledInterrupts.crcMismatch;
	mov	d0,#0
	ld.bu	d15,[a15]16
.L328:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   154      tempCFG.B.CEI                           = crcConfig->enabledInterrupts.configError;
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   155      tempCFG.B.LEI                           = crcConfig->enabledInterrupts.lengthError;
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   156      tempCFG.B.BEI                           = crcConfig->enabledInterrupts.busError;
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   157      tempCFG.B.CCE                           = crcConfig->crcCheckCompared;
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   158      tempCFG.B.ALR                           = crcConfig->automaticLengthReload;
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   159      tempCFG.B.REFIN                         = crcConfig->dataByteReflectionEnabled;
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   160      tempCFG.B.REFOUT                        = crcConfig->crc32BitReflectionEnabled;
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   161      tempCFG.B.XSEL                          = crcConfig->crcResultInverted;
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   162      tempCFG.B.BYTESWAP                      = crcConfig->swapOrderOfBytes;
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   163      tempCFG.B.KERNEL                        = crcConfig->crcKernel;
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   164  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   165      fceSFR->IN[crcConfig->crcChannel].CFG.U = tempCFG.U;
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   166  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   167      IfxScuWdt_setCpuEndinit(password);
	mov	d4,d8
.L330:
	insert	d0,d0,d15,#0,#1
	ld.bu	d15,[a15]17
.L389:
	insert	d0,d0,d15,#1,#1
	ld.bu	d15,[a15]18
.L390:
	insert	d0,d0,d15,#2,#1
	ld.bu	d15,[a15]19
.L391:
	insert	d0,d0,d15,#3,#1
	ld.bu	d15,[a15]4
.L392:
	insert	d0,d0,d15,#4,#1
	ld.bu	d15,[a15]5
.L393:
	insert	d0,d0,d15,#5,#1
	ld.bu	d15,[a15]6
.L394:
	insert	d0,d0,d15,#8,#1
	ld.bu	d15,[a15]7
.L395:
	insert	d0,d0,d15,#9,#1
	ld.bu	d15,[a15]14
.L396:
	insert	d0,d0,d15,#10,#1
	ld.bu	d15,[a15]8
.L397:
	insert	d0,d0,d15,#11,#1
	ld.bu	d15,[a15]23
.L398:
	insert	d0,d0,d15,#16,#4
	ld.bu	d15,[a15]22
	sha	d15,#5
.L399:
	addsc.a	a2,a12,d15,#0
.L400:
	st.w	[a2]264,d0
.L401:
	call	IfxScuWdt_setCpuEndinit
.L329:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   168  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   169      fceCrc->useDma = crcConfig->useDma;
	ld.bu	d15,[a15]20
.L402:
	st.b	[a13]20,d15
.L403:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   170  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   171      if (fceCrc->useDma == TRUE)
	jne	d15,#1,.L16
.L236:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   172      {
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   173          Ifx_DMA                 *dmaSFR = &MODULE_DMA;
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   174          IfxDma_Dma               dma;
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   175          IfxDma_Dma_createModuleHandle(&dma, dmaSFR);
	mov.aa	a4,a10
.L404:
	movh.a	a5,#61441
	call	IfxDma_Dma_createModuleHandle
.L239:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   176  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   177          IfxDma_Dma_ChannelConfig dmaChannelCfg;
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   178          IfxDma_Dma_initChannelConfig(&dmaChannelCfg, &dma);
	lea	a4,[a10]4
.L405:
	mov.aa	a5,a10
	call	IfxDma_Dma_initChannelConfig
.L406:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   179  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   180          dmaChannelCfg.channelId                        = crcConfig->fceChannelId;
	ld.b	d15,[a15]21
.L407:
	st.b	[a10]8,d15
.L408:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   181          dmaChannelCfg.requestMode                      = IfxDma_ChannelRequestMode_completeTransactionPerRequest;
	mov	d15,#1
	st.b	[a10]33,d15
.L409:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   182          dmaChannelCfg.operationMode                    = IfxDma_ChannelOperationMode_continuous;
	st.b	[a10]34,d15
.L410:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   183          dmaChannelCfg.destinationAddressCircularRange  = IfxDma_ChannelIncrementCircular_4,
	mov	d0,#2
	st.b	[a10]45,d0
.L411:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   184          dmaChannelCfg.destinationCircularBufferEnabled = TRUE,
	st.b	[a10]48,d15
.L412:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   185          IfxDma_Dma_initChannel(&fceCrc->fceDmaChannel, &dmaChannelCfg);
	lea	a4,[a13]8
.L413:
	lea	a5,[a10]4
	j	IfxDma_Dma_initChannel
.L16:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   186      }
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   187  }
	ret
.L224:
	
__IfxFce_Crc_initCrc_function_end:
	.size	IfxFce_Crc_initCrc,__IfxFce_Crc_initCrc_function_end-IfxFce_Crc_initCrc
.L53:
	; End of function
	
	.sdecl	'.text.IfxFce_Crc.IfxFce_Crc_initCrcConfig',code,cluster('IfxFce_Crc_initCrcConfig')
	.sect	'.text.IfxFce_Crc.IfxFce_Crc_initCrcConfig'
	.align	2
	
	.global	IfxFce_Crc_initCrcConfig

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   188  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   189  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   190  void IfxFce_Crc_initCrcConfig(IfxFce_Crc_CrcConfig *crcConfig, IfxFce_Crc *fce)
; Function IfxFce_Crc_initCrcConfig
.L30:
IfxFce_Crc_initCrcConfig:	.type	func

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   191  {
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   192      crcConfig->fce                           = fce->fce;
	ld.a	a15,[a5]
.L418:
	st.a	[a4],a15
.L419:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   193      crcConfig->crcKernel                     = IfxFce_CrcKernel_0;
	mov	d0,#0
	st.b	[a4]23,d0
.L420:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   194      crcConfig->crcChannel                    = IfxFce_CrcChannel_0;
	st.b	[a4]22,d0
.L421:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   195      crcConfig->crcCheckCompared              = TRUE;
	mov	d15,#1
	st.b	[a4]4,d15
.L422:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   196      crcConfig->automaticLengthReload         = FALSE;
	st.b	[a4]5,d0
.L423:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   197      crcConfig->dataByteReflectionEnabled     = TRUE;
	st.b	[a4]6,d15
.L424:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   198      crcConfig->crc32BitReflectionEnabled     = TRUE;
	st.b	[a4]7,d15
.L425:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   199      crcConfig->swapOrderOfBytes              = FALSE;
	st.b	[a4]8,d0
.L426:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   200      crcConfig->crcResultInverted             = TRUE;
	st.b	[a4]14,d15
.L427:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   201      crcConfig->enabledInterrupts.crcMismatch = FALSE; // enable if CRC is already known
	st.b	[a4]16,d0
.L428:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   202      crcConfig->enabledInterrupts.configError = TRUE;
	st.b	[a4]17,d15
.L429:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   203      crcConfig->enabledInterrupts.lengthError = TRUE;
	st.b	[a4]18,d15
.L430:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   204      crcConfig->enabledInterrupts.busError    = TRUE;
	st.b	[a4]19,d15
.L431:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   205      crcConfig->useDma                        = FALSE;
	st.b	[a4]20,d0
.L432:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   206      crcConfig->fceChannelId                  = IfxDma_ChannelId_none;
	mov	d15,#-1
	st.b	[a4]21,d15
.L433:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   207  }
	ret
.L242:
	
__IfxFce_Crc_initCrcConfig_function_end:
	.size	IfxFce_Crc_initCrcConfig,__IfxFce_Crc_initCrcConfig_function_end-IfxFce_Crc_initCrcConfig
.L58:
	; End of function
	
	.sdecl	'.text.IfxFce_Crc.IfxFce_Crc_initModule',code,cluster('IfxFce_Crc_initModule')
	.sect	'.text.IfxFce_Crc.IfxFce_Crc_initModule'
	.align	2
	
	.global	IfxFce_Crc_initModule

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   208  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   209  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   210  void IfxFce_Crc_initModule(IfxFce_Crc *fce, const IfxFce_Crc_Config *config)
; Function IfxFce_Crc_initModule
.L32:
IfxFce_Crc_initModule:	.type	func
	mov.aa	a15,a5
.L332:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   211  {
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   212      fce->fce = config->fce;
	ld.a	a2,[a15]
.L438:
	st.a	[a4],a2
.L251:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   213      Ifx_FCE               *fceSFR = config->fce;
	ld.a	a12,[a15]
.L254:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     2   * \file IfxFce.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     3   * \brief FCE  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     4   * \ingroup IfxLld_Fce
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    42   * \defgroup IfxLld_Fce_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    43   * \ingroup IfxLld_Fce_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    44   * \defgroup IfxLld_Fce_Std_Module Module Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    45   * \ingroup IfxLld_Fce_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    46   * \defgroup IfxLld_Fce_Std_Support Support Function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    47   * \ingroup IfxLld_Fce_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    48   * \defgroup IfxLld_Fce_Std_InterruptStatus Interrupt Status Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    49   * \ingroup IfxLld_Fce_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    50   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    51  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    52  #ifndef IFXFCE_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    53  #define IFXFCE_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    54  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    55  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    56  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    57  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    58  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    59  #include "_Impl/IfxFce_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    60  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    61  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    62  #include "IfxFce_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    63  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    64  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    66  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    67  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    68  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    69  /** \addtogroup IfxLld_Fce_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    70   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    71  /** \brief Ifx_FCE_CHx(x= 0,1), Specifies the channel used for CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    72   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    73  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    74  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    75      IfxFce_CrcChannel_0 = 0,      /**< \brief Specifies the channel0 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    76      IfxFce_CrcChannel_1,          /**< \brief Specifies the channel1 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    77      IfxFce_CrcChannel_2,          /**< \brief Specifies the channel2 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    78      IfxFce_CrcChannel_3,          /**< \brief Specifies the channel3 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    79      IfxFce_CrcChannel_4,          /**< \brief Specifies the channel4 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    80      IfxFce_CrcChannel_5,          /**< \brief Specifies the channel5 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    81      IfxFce_CrcChannel_6,          /**< \brief Specifies the channel6 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    82      IfxFce_CrcChannel_7           /**< \brief Specifies the channel7 used for CRC  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    83  } IfxFce_CrcChannel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    84  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    85  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    86  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    87  /** \brief Specify the CRC kernel used by the fce channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    88   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    89  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    90  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    91      IfxFce_CrcKernel_0 = 0,  /**< \brief Specifies to use kernel 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    92      IfxFce_CrcKernel_1 = 1,  /**< \brief Specifies to use kernel 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    93      IfxFce_CrcKernel_2 = 2,  /**< \brief Specifies to use kernel 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    94      IfxFce_CrcKernel_3 = 3   /**< \brief Specifies to use kernel 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    95  } IfxFce_CrcKernel;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    96  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    97  /** \addtogroup IfxLld_Fce_Std_Module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    98   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	    99  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   100  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   101  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   102  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   103  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   104  /** \brief Disable the control of FCE module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   105   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   106   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   107   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   108  IFX_INLINE void IfxFce_disableModule(Ifx_FCE *fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   109  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   110  /** \brief Enable the control of FCE module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   111   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   112   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   113   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   114  IFX_INLINE void IfxFce_enableModule(Ifx_FCE *fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   115  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   116  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   117  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   118  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   119  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   120  /** \brief Reset the module by clearing the kernel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   121   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   122   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   123   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   124  IFX_EXTERN void IfxFce_resetModule(Ifx_FCE *fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   125  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   126  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   127  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   128  /** \addtogroup IfxLld_Fce_Std_Support
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   129   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   131  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   132  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   133  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   134  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   135  /** \brief Reflects the CRC data and returns it
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   136   * \param crcStartValue start value for reflection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   137   * \param crcLength length of reflected value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   138   * \return Reflected CRC data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   139   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   140  IFX_EXTERN uint32 IfxFce_reflectCrc32(uint32 crcStartValue, uint8 crcLength);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   141  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   142  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   143  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   144  /** \addtogroup IfxLld_Fce_Std_InterruptStatus
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   145   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   147  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   148  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   149  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   150  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   151  /** \brief Returns the SRC pointer for FCE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   152   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   153   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   154  IFX_INLINE volatile Ifx_SRC_SRCR *IfxFce_getSrcPointer(Ifx_FCE *fce);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   155  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   156  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   158  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   159  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   160  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   161  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   162  /** \brief Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   163   * \param fce Specifies the pointer to FCE module handler
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   164   * \param channel Specifies the Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   165   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   166   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   167  IFX_INLINE void IfxFce_clearCrcErrorFlags(Ifx_FCE *fce, IfxFce_CrcChannel channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   169  /** \brief Gets the CRC interrupt status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   170   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   171   * \param channel Specifies the Channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   172   * \return Return Crc Interrupt Status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   174  IFX_INLINE Ifx_FCE_IN_STS IfxFce_getCrcInterruptStatus(Ifx_FCE *fce, IfxFce_CrcChannel channel);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   176  /** \brief Set the length of over which CRC checksum is calculated.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   177   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   178   * \param channel Specifies the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   179   * \param crcLength Specifies the Length of CRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   180   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   181   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   182  IFX_INLINE void IfxFce_setChannelCrcLength(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 crcLength);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   183  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   184  /** \brief Set the CRC start value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   185   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   186   * \param channel Specifies the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   187   * \param crcStartValue Set the crc value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   188   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   189   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   190  IFX_INLINE void IfxFce_setCrcstartValue(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 crcStartValue);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   192  /** \brief Set expected crc value to be checked.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   193   * \param fce Specifies pointer to FCE module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   194   * \param channel Specifies the channel
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   195   * \param expectedCrc Expected CRC value to be checked
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   196   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   198  IFX_INLINE void IfxFce_setExpectedCrc(Ifx_FCE *fce, IfxFce_CrcChannel channel, uint32 expectedCrc);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   199  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   200  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   201  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   202  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   204  IFX_INLINE void IfxFce_clearCrcErrorFlags(Ifx_FCE *fce, IfxFce_CrcChannel channel)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   205  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   206      fce->IN[channel].STS.U = 0x00000000U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   207  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   209  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   210  IFX_INLINE void IfxFce_disableModule(Ifx_FCE *fce)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   212      uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   213      IfxScuWdt_clearCpuEndinit(password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   214      fce->CLC.B.DISR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   215      IfxScuWdt_setCpuEndinit(password);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   216  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   217  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   219  IFX_INLINE void IfxFce_enableModule(Ifx_FCE *fce)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   220  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   221      uint16 password = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L331:
	mov	d15,d2
.L335:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   222      IfxScuWdt_clearCpuEndinit(password);
	mov	d4,d15
	call	IfxScuWdt_clearCpuEndinit
.L334:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   223      fce->CLC.B.DISR = 0;
	ld.bu	d0,[a12]
.L439:
	insert	d0,d0,#0,#0,#1
	st.b	[a12],d0
.L440:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Fce\Std\IfxFce.h	   224      IfxScuWdt_setCpuEndinit(password);
	mov	d4,d15
	call	IfxScuWdt_setCpuEndinit
.L255:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     2   * \file IfxSrc.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     3   * \brief SRC  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     4   * \ingroup IfxLld_Src
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     7   * \copyright Copyright (c) 2016 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    41   * \defgroup IfxLld_Src SRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    42   * \addtogroup IfxLld_Src
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    43   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    44   * \defgroup IfxLld_Src_Usage How to use Service Request Mechanism?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    45   * \addtogroup IfxLld_Src_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    46   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    48   * For Aurix controller peripherals that can generate service requests is connected to one
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    49   * or more Service Request Nodes (SRNs) in the central Interrupt Router(IR) module. Refer to Controller User Manual for more details\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    51   * IfxSrc driver provides the APIs to configure and control service requests. Refer \ref IfxLld_Src_Usage for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    52   * details of these APIs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    53   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    54   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    55   * \section Ifx_Src_UsageInit Initialize the Service Request Node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    56   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    57   * Service request node is initialized to configure the following,\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    58   * 1) Route the interrupt trigger to service provider, which are:\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    59   *  __a. One of the available CPUs or\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    60   *  __b. DMA controller\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    61   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    62   * 2) Priority of CPU Interrupt or DMA Trigger.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    63   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    64   * For Interrupt or DMA to be correctly triggered, following steps are to be done in the user code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    65   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    66   * \subsection Ifx_Src_UsageInitStep1 Step1: Configure the Node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    68   * User must configure the service request node in the application / driver files.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    69   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    70   * \subsection Ifx_Src_UsageInitStep2 Step2: Enable the Trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    71   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    72   * Enable the service request node to connect the trigger event from the hardware to service provider.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    73   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    74   * Example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    75   * Following example show the configuration for STM0 Service request 0 trigger configured to trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    76   * CPU1 with the priority specified by IFX_INTPRIO_STM0 (from the example at IfxCpu_Irq)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    77   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    78   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    79   * //file: myApplication.c
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    80   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    81   * #include "Ifx_IntPrioDef.h" // to get the priority numbers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    82   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    83   * void myDriverInitFunction(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    84   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    85   *    // driver init code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    86   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    87   *    // Step1: Call the function to route the trigger from for SRC_STM0_SR0 to CPU1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    88   *    // and priority specified at Ifx_IntPrioDef.h globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    89   *    IfxSrc_init(&MODULE_SRC.STM.STM[0].SR[0], IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    90   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    91   *    // Step2: Enable the service request node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    92   *    IfxSrc_enable(&MODULE_SRC.STM.STM[0].SR[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    93   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    94   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    95   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    96   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    97   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    99   * \defgroup IfxLld_Src_Std_Service_Request Service Request Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   100   * \ingroup IfxLld_Src_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   101   * \defgroup IfxLld_Src_Std_Module Module Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   102   * \ingroup IfxLld_Src_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   103   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   105  #ifndef IFXSRC_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   106  #define IFXSRC_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   107  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   108  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   109  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   110  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   111  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   112  #include "_Impl/IfxSrc_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   113  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   114  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   115  /** \addtogroup IfxLld_Src_Std_Service_Request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   116   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   117  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   118  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   119  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   120  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   122  /** \brief Resets the overrun flag of the Service Request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   123   * \param src pointer to the Service Request Control register which the overrun flag should be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   124   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   126   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   127   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   129  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   131  /** \brief Resets a specific interrupt service by software.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   132   * \param src pointer to the Service Request Control register which the request should be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   135   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   136   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   137   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   138  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   139  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   140  /** \brief Gets the current overrun status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   141   * \param src pointer to the Service Request Control register for which the overrun status should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   142   * \return current service request control overrun status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   143   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   144   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   147  IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   149  /** \brief Gets the current request status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   150   * \param src pointer to the Service Request Control register for which the request status should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   151   * \return current service request control request status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   152   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   153   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   154   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   156  IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   158  /** \brief Requests a specific interrupt service by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   159   * \param src pointer to the Service Request Control register which the interrupt has to be requested.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   160   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   161   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   162   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   163   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   164   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   165  IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   167  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   169  /** \addtogroup IfxLld_Src_Std_Module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   170   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   171  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   172  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   173  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   174  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   176  /** \brief DeInitializes the service request control register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   177   * \param src pointer to the Service Request Control register which should be deinitialised.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   178   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   179   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   180   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   181   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   182   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   183  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   184  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   185  /** \brief Disables a specific interrupt service request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   186   * \param src pointer to the Service Request Control register for which the interrupt has to be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   187   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   188   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   189   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   190   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   192  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   194  /** \brief Enables a specific interrupt service request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   195   * \param src pointer to the Service Request Control register for which the interrupt has to be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   196   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   197   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   198   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   199   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   200   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   201  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   202  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   203  /** \brief Initializes the service request control register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   204   * \param src pointer to the Service Request Control register which should be initialised.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   205   * \param typOfService type of interrupt service provider.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   206   * \param priority Interrupt priority.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   207   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   208   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   209   * Get the peripheral service control register which request need to be serviced and assign this service to any of service providers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   210   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   211   * //define the interrupt priority
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   212   * #define IFXASCLIN0_TX_INTPRIO 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   213   * //get the service request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   214   * volatile Ifx_SRC_SRCR *src = IfxAsclin_getSrcPointerRx( &MODULE_ASCLIN0 );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   215   * //initlaise the service request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   216   * IfxSrc_init( src, IfxSrc_Tos_cpu0, IFXASCLIN0_TX_INTPRIO );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   217   * // enable the service
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   218   * IfxSrc_enable( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   219   * //check for service request flags and clear if they occur
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   220   * if ( IfxSrc_isRequested( src ) == TRUE )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   221   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   222   *    IfxSrc_clearRequest( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   223   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   224   * if ( IfxSrc_isOverrun( src ) == TRUE )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   225   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   226   *      IfxSrc_clearOverrun( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   227   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   228   * // Atlast deinitialise the service control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   229   * IfxSrc_deinit( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   230   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   231   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   233  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   235  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   237  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   238  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   239  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   241  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   242  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   243      src->B.IOVCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   244  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   245  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   247  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   248  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   249      src->B.CLRR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   250  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   253  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   254  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   255      src->U = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   256  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   259  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   261      src->B.SRE = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   262  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   265  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   266  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   267      src->B.SRE = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   268  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   269  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   271  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   272  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   273      src->B.SRPN = priority;
	ld.w	d0,.3.cnt
.L261:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   214  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   215      IfxFce_enableModule(fceSFR);
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   216  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   217      volatile Ifx_SRC_SRCR *src = IfxFce_getSrcPointer(fceSFR);
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   218      IfxSrc_init(src, config->isrTypeOfService, config->isrPriority);
	ld.bu	d15,[a15]6
.L270:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     2   * \file IfxSrc.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     3   * \brief SRC  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     4   * \ingroup IfxLld_Src
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     7   * \copyright Copyright (c) 2016 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    41   * \defgroup IfxLld_Src SRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    42   * \addtogroup IfxLld_Src
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    43   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    44   * \defgroup IfxLld_Src_Usage How to use Service Request Mechanism?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    45   * \addtogroup IfxLld_Src_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    46   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    48   * For Aurix controller peripherals that can generate service requests is connected to one
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    49   * or more Service Request Nodes (SRNs) in the central Interrupt Router(IR) module. Refer to Controller User Manual for more details\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    51   * IfxSrc driver provides the APIs to configure and control service requests. Refer \ref IfxLld_Src_Usage for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    52   * details of these APIs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    53   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    54   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    55   * \section Ifx_Src_UsageInit Initialize the Service Request Node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    56   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    57   * Service request node is initialized to configure the following,\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    58   * 1) Route the interrupt trigger to service provider, which are:\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    59   *  __a. One of the available CPUs or\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    60   *  __b. DMA controller\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    61   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    62   * 2) Priority of CPU Interrupt or DMA Trigger.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    63   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    64   * For Interrupt or DMA to be correctly triggered, following steps are to be done in the user code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    65   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    66   * \subsection Ifx_Src_UsageInitStep1 Step1: Configure the Node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    68   * User must configure the service request node in the application / driver files.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    69   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    70   * \subsection Ifx_Src_UsageInitStep2 Step2: Enable the Trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    71   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    72   * Enable the service request node to connect the trigger event from the hardware to service provider.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    73   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    74   * Example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    75   * Following example show the configuration for STM0 Service request 0 trigger configured to trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    76   * CPU1 with the priority specified by IFX_INTPRIO_STM0 (from the example at IfxCpu_Irq)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    77   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    78   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    79   * //file: myApplication.c
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    80   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    81   * #include "Ifx_IntPrioDef.h" // to get the priority numbers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    82   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    83   * void myDriverInitFunction(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    84   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    85   *    // driver init code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    86   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    87   *    // Step1: Call the function to route the trigger from for SRC_STM0_SR0 to CPU1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    88   *    // and priority specified at Ifx_IntPrioDef.h globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    89   *    IfxSrc_init(&MODULE_SRC.STM.STM[0].SR[0], IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    90   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    91   *    // Step2: Enable the service request node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    92   *    IfxSrc_enable(&MODULE_SRC.STM.STM[0].SR[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    93   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    94   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    95   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    96   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    97   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    99   * \defgroup IfxLld_Src_Std_Service_Request Service Request Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   100   * \ingroup IfxLld_Src_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   101   * \defgroup IfxLld_Src_Std_Module Module Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   102   * \ingroup IfxLld_Src_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   103   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   105  #ifndef IFXSRC_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   106  #define IFXSRC_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   107  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   108  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   109  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   110  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   111  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   112  #include "_Impl/IfxSrc_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   113  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   114  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   115  /** \addtogroup IfxLld_Src_Std_Service_Request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   116   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   117  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   118  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   119  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   120  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   122  /** \brief Resets the overrun flag of the Service Request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   123   * \param src pointer to the Service Request Control register which the overrun flag should be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   124   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   126   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   127   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   129  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   131  /** \brief Resets a specific interrupt service by software.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   132   * \param src pointer to the Service Request Control register which the request should be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   135   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   136   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   137   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   138  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   139  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   140  /** \brief Gets the current overrun status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   141   * \param src pointer to the Service Request Control register for which the overrun status should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   142   * \return current service request control overrun status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   143   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   144   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   147  IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   149  /** \brief Gets the current request status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   150   * \param src pointer to the Service Request Control register for which the request status should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   151   * \return current service request control request status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   152   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   153   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   154   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   156  IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   158  /** \brief Requests a specific interrupt service by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   159   * \param src pointer to the Service Request Control register which the interrupt has to be requested.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   160   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   161   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   162   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   163   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   164   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   165  IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   167  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   169  /** \addtogroup IfxLld_Src_Std_Module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   170   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   171  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   172  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   173  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   174  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   176  /** \brief DeInitializes the service request control register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   177   * \param src pointer to the Service Request Control register which should be deinitialised.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   178   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   179   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   180   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   181   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   182   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   183  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   184  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   185  /** \brief Disables a specific interrupt service request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   186   * \param src pointer to the Service Request Control register for which the interrupt has to be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   187   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   188   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   189   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   190   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   192  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   194  /** \brief Enables a specific interrupt service request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   195   * \param src pointer to the Service Request Control register for which the interrupt has to be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   196   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   197   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   198   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   199   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   200   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   201  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   202  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   203  /** \brief Initializes the service request control register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   204   * \param src pointer to the Service Request Control register which should be initialised.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   205   * \param typOfService type of interrupt service provider.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   206   * \param priority Interrupt priority.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   207   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   208   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   209   * Get the peripheral service control register which request need to be serviced and assign this service to any of service providers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   210   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   211   * //define the interrupt priority
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   212   * #define IFXASCLIN0_TX_INTPRIO 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   213   * //get the service request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   214   * volatile Ifx_SRC_SRCR *src = IfxAsclin_getSrcPointerRx( &MODULE_ASCLIN0 );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   215   * //initlaise the service request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   216   * IfxSrc_init( src, IfxSrc_Tos_cpu0, IFXASCLIN0_TX_INTPRIO );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   217   * // enable the service
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   218   * IfxSrc_enable( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   219   * //check for service request flags and clear if they occur
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   220   * if ( IfxSrc_isRequested( src ) == TRUE )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   221   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   222   *    IfxSrc_clearRequest( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   223   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   224   * if ( IfxSrc_isOverrun( src ) == TRUE )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   225   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   226   *      IfxSrc_clearOverrun( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   227   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   228   * // Atlast deinitialise the service control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   229   * IfxSrc_deinit( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   230   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   231   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   233  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   235  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   237  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   238  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   239  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   241  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   242  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   243      src->B.IOVCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   244  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   245  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   247  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   248  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   249      src->B.CLRR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   250  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   253  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   254  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   255      src->U = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   256  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   259  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   261      src->B.SRE = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   262  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   265  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   266  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   267      src->B.SRE = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   268  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   269  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   271  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   272  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   273      src->B.SRPN = priority;
	mov.a	a2,d0
.L441:
	ld.hu	d0,[a15]4
.L442:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     2   * \file IfxSrc.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     3   * \brief SRC  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     4   * \ingroup IfxLld_Src
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     7   * \copyright Copyright (c) 2016 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    41   * \defgroup IfxLld_Src SRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    42   * \addtogroup IfxLld_Src
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    43   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    44   * \defgroup IfxLld_Src_Usage How to use Service Request Mechanism?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    45   * \addtogroup IfxLld_Src_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    46   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    48   * For Aurix controller peripherals that can generate service requests is connected to one
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    49   * or more Service Request Nodes (SRNs) in the central Interrupt Router(IR) module. Refer to Controller User Manual for more details\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    51   * IfxSrc driver provides the APIs to configure and control service requests. Refer \ref IfxLld_Src_Usage for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    52   * details of these APIs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    53   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    54   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    55   * \section Ifx_Src_UsageInit Initialize the Service Request Node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    56   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    57   * Service request node is initialized to configure the following,\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    58   * 1) Route the interrupt trigger to service provider, which are:\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    59   *  __a. One of the available CPUs or\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    60   *  __b. DMA controller\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    61   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    62   * 2) Priority of CPU Interrupt or DMA Trigger.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    63   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    64   * For Interrupt or DMA to be correctly triggered, following steps are to be done in the user code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    65   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    66   * \subsection Ifx_Src_UsageInitStep1 Step1: Configure the Node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    68   * User must configure the service request node in the application / driver files.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    69   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    70   * \subsection Ifx_Src_UsageInitStep2 Step2: Enable the Trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    71   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    72   * Enable the service request node to connect the trigger event from the hardware to service provider.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    73   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    74   * Example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    75   * Following example show the configuration for STM0 Service request 0 trigger configured to trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    76   * CPU1 with the priority specified by IFX_INTPRIO_STM0 (from the example at IfxCpu_Irq)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    77   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    78   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    79   * //file: myApplication.c
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    80   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    81   * #include "Ifx_IntPrioDef.h" // to get the priority numbers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    82   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    83   * void myDriverInitFunction(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    84   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    85   *    // driver init code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    86   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    87   *    // Step1: Call the function to route the trigger from for SRC_STM0_SR0 to CPU1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    88   *    // and priority specified at Ifx_IntPrioDef.h globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    89   *    IfxSrc_init(&MODULE_SRC.STM.STM[0].SR[0], IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    90   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    91   *    // Step2: Enable the service request node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    92   *    IfxSrc_enable(&MODULE_SRC.STM.STM[0].SR[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    93   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    94   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    95   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    96   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    97   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    99   * \defgroup IfxLld_Src_Std_Service_Request Service Request Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   100   * \ingroup IfxLld_Src_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   101   * \defgroup IfxLld_Src_Std_Module Module Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   102   * \ingroup IfxLld_Src_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   103   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   105  #ifndef IFXSRC_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   106  #define IFXSRC_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   107  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   108  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   109  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   110  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   111  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   112  #include "_Impl/IfxSrc_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   113  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   114  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   115  /** \addtogroup IfxLld_Src_Std_Service_Request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   116   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   117  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   118  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   119  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   120  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   122  /** \brief Resets the overrun flag of the Service Request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   123   * \param src pointer to the Service Request Control register which the overrun flag should be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   124   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   126   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   127   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   129  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   131  /** \brief Resets a specific interrupt service by software.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   132   * \param src pointer to the Service Request Control register which the request should be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   135   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   136   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   137   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   138  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   139  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   140  /** \brief Gets the current overrun status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   141   * \param src pointer to the Service Request Control register for which the overrun status should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   142   * \return current service request control overrun status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   143   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   144   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   147  IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   149  /** \brief Gets the current request status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   150   * \param src pointer to the Service Request Control register for which the request status should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   151   * \return current service request control request status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   152   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   153   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   154   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   156  IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   158  /** \brief Requests a specific interrupt service by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   159   * \param src pointer to the Service Request Control register which the interrupt has to be requested.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   160   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   161   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   162   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   163   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   164   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   165  IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   167  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   169  /** \addtogroup IfxLld_Src_Std_Module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   170   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   171  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   172  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   173  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   174  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   176  /** \brief DeInitializes the service request control register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   177   * \param src pointer to the Service Request Control register which should be deinitialised.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   178   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   179   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   180   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   181   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   182   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   183  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   184  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   185  /** \brief Disables a specific interrupt service request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   186   * \param src pointer to the Service Request Control register for which the interrupt has to be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   187   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   188   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   189   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   190   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   192  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   194  /** \brief Enables a specific interrupt service request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   195   * \param src pointer to the Service Request Control register for which the interrupt has to be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   196   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   197   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   198   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   199   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   200   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   201  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   202  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   203  /** \brief Initializes the service request control register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   204   * \param src pointer to the Service Request Control register which should be initialised.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   205   * \param typOfService type of interrupt service provider.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   206   * \param priority Interrupt priority.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   207   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   208   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   209   * Get the peripheral service control register which request need to be serviced and assign this service to any of service providers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   210   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   211   * //define the interrupt priority
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   212   * #define IFXASCLIN0_TX_INTPRIO 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   213   * //get the service request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   214   * volatile Ifx_SRC_SRCR *src = IfxAsclin_getSrcPointerRx( &MODULE_ASCLIN0 );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   215   * //initlaise the service request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   216   * IfxSrc_init( src, IfxSrc_Tos_cpu0, IFXASCLIN0_TX_INTPRIO );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   217   * // enable the service
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   218   * IfxSrc_enable( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   219   * //check for service request flags and clear if they occur
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   220   * if ( IfxSrc_isRequested( src ) == TRUE )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   221   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   222   *    IfxSrc_clearRequest( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   223   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   224   * if ( IfxSrc_isOverrun( src ) == TRUE )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   225   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   226   *      IfxSrc_clearOverrun( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   227   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   228   * // Atlast deinitialise the service control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   229   * IfxSrc_deinit( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   230   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   231   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   233  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   235  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   237  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   238  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   239  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   241  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   242  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   243      src->B.IOVCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   244  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   245  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   247  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   248  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   249      src->B.CLRR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   250  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   253  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   254  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   255      src->U = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   256  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   259  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   261      src->B.SRE = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   262  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   265  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   266  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   267      src->B.SRE = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   268  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   269  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   271  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   272  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   273      src->B.SRPN = priority;
	st.b	[a2],d0
.L443:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   274      src->B.TOS  = typOfService;
	ld.w	d0,.4.cnt
	mov.a	a15,d0
.L333:
	ld.bu	d0,[a15]
.L444:
	insert	d15,d0,d15,#3,#3
	st.b	[a15],d15
.L273:
	ld.w	d15,.5.cnt
	mov.a	a2,d15
	ld.bu	d15,[a2]
.L445:
	or	d15,#2
	st.b	[a2],d15
.L271:
	ld.bu	d15,[a15]
.L446:
	or	d15,#4
	st.b	[a15],d15
.L278:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   219      IfxSrc_enable(src);
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   220  }
	ret
.L247:
	
__IfxFce_Crc_initModule_function_end:
	.size	IfxFce_Crc_initModule,__IfxFce_Crc_initModule_function_end-IfxFce_Crc_initModule
.L63:
	; End of function
	
	.sdecl	'.text.IfxFce_Crc.IfxFce_Crc_initModuleConfig',code,cluster('IfxFce_Crc_initModuleConfig')
	.sect	'.text.IfxFce_Crc.IfxFce_Crc_initModuleConfig'
	.align	2
	
	.global	IfxFce_Crc_initModuleConfig

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   221  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   222  
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   223  void IfxFce_Crc_initModuleConfig(IfxFce_Crc_Config *config, Ifx_FCE *fce)
; Function IfxFce_Crc_initModuleConfig
.L34:
IfxFce_Crc_initModuleConfig:	.type	func

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   224  {
; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   225      config->fce              = fce;
	st.a	[a4],a5
.L451:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   226      config->isrPriority      = 0;
	mov	d15,#0
	st.h	[a4]4,d15
.L452:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   227      config->isrTypeOfService = IfxSrc_Tos_cpu0;
	st.b	[a4]6,d15
.L453:

; ..\0_Src\4_McHal\Tricore\Fce\Crc\IfxFce_Crc.c	   228  }
	ret
.L282:
	
__IfxFce_Crc_initModuleConfig_function_end:
	.size	IfxFce_Crc_initModuleConfig,__IfxFce_Crc_initModuleConfig_function_end-IfxFce_Crc_initModuleConfig
.L68:
	; End of function
	
	.calls	'IfxFce_Crc_deInitModule','IfxFce_resetModule'
	.calls	'IfxFce_Crc_initCrc','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxFce_Crc_initCrc','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxFce_Crc_initCrc','IfxScuWdt_setCpuEndinit'
	.calls	'IfxFce_Crc_initCrc','IfxDma_Dma_createModuleHandle'
	.calls	'IfxFce_Crc_initCrc','IfxDma_Dma_initChannelConfig'
	.calls	'IfxFce_Crc_initCrc','IfxDma_Dma_initChannel'
	.calls	'IfxFce_Crc_initModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxFce_Crc_initModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxFce_Crc_initModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxFce_Crc_calculateCrc','.cocofun_6'
	.calls	'IfxFce_Crc_calculateCrc','',0
	.calls	'.cocofun_6','',0
	.calls	'IfxFce_Crc_clearErrorFlags','',0
	.calls	'IfxFce_Crc_deInitModule','',0
	.calls	'IfxFce_Crc_getInterruptStatus','',0
	.calls	'IfxFce_Crc_initCrc','',64
	.calls	'IfxFce_Crc_initCrcConfig','',0
	.calls	'IfxFce_Crc_initModule','',0
	.extern	IfxScuWdt_clearCpuEndinit
	.extern	IfxScuWdt_setCpuEndinit
	.extern	IfxScuWdt_getCpuWatchdogPassword
	.extern	IfxFce_resetModule
	.extern	IfxDma_Dma_createModuleHandle
	.extern	IfxDma_Dma_initChannel
	.extern	IfxDma_Dma_initChannelConfig
	.calls	'IfxFce_Crc_initModuleConfig','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L36:
	.word	122598
	.half	3
	.word	.L37
	.byte	4
.L35:
	.byte	1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Fce\\Crc\\IfxFce_Crc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L38
	.byte	2,1,1,3
	.word	168
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,58,17,1,1,5
	.byte	'fun',0,1,58,43
	.word	171
	.byte	6,0,7
	.byte	'__fract',0,4,128,1,7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,149,2,18
	.word	216
	.byte	1,1,5
	.byte	'a',0,1,149,2,44
	.word	228
	.byte	6,0,4
	.byte	'Ifx__stopPerfCounters',0,3,1,169,2,17,1,1,6,0,7
	.byte	'unsigned long long int',0,8,7,9
	.byte	'void',0,3
	.word	340
	.byte	8
	.byte	'__ld64',0,3,2,132,1,19
	.word	314
	.byte	1,1,5
	.byte	'addr',0,2,132,1,32
	.word	346
	.byte	6,0,4
	.byte	'__st64',0,3,2,140,1,17,1,1,5
	.byte	'addr',0,2,140,1,30
	.word	346
	.byte	5
	.byte	'value',0,2,140,1,43
	.word	314
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,7
	.byte	'int',0,4,5,7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,4,238,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	455
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	455
	.byte	16,0,2,35,0,0,12,4,189,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	471
	.byte	4,2,35,0,0,7
	.byte	'unsigned char',0,1,8
.L90:
	.byte	7
	.byte	'unsigned short int',0,2,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,4,247,9,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	607
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,12,4,197,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	646
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,4,135,10,16,4,11
	.byte	'AE',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	607
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	624
	.byte	16,0,2,35,2,0,12,4,205,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	912
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU',0,4,136,17,25,12,13
	.byte	'CON0',0
	.word	567
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	872
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	1103
	.byte	4,2,35,8,0,14
	.word	1143
	.byte	3
	.word	1206
	.byte	4
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,3,164,4,17,1,1,5
	.byte	'watchdog',0,3,164,4,65
	.word	1211
	.byte	5
	.byte	'password',0,3,164,4,82
	.word	624
	.byte	6,0,4
	.byte	'IfxScuWdt_clearSafetyEndinitInline',0,3,3,197,4,17,1,1,5
	.byte	'password',0,3,197,4,59
	.word	624
	.byte	6,0,4
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,3,144,5,17,1,1,5
	.byte	'watchdog',0,3,144,5,63
	.word	1211
	.byte	5
	.byte	'password',0,3,144,5,80
	.word	624
	.byte	6,0,4
	.byte	'IfxScuWdt_setSafetyEndinitInline',0,3,3,177,5,17,1,1,5
	.byte	'password',0,3,177,5,57
	.word	624
	.byte	6,0,8
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,3,220,4,19
	.word	624
	.byte	1,1,5
	.byte	'watchdog',0,3,220,4,74
	.word	1211
	.byte	6,0,8
	.byte	'IfxScuWdt_getSafetyWatchdogPasswordInline',0,3,3,129,5,19
	.word	624
	.byte	1,1,6,0,10
	.byte	'_Ifx_SRC_SRCR_Bits',0,6,68,16,4,11
	.byte	'SRPN',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	607
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	607
	.byte	3,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	607
	.byte	2,0,2,35,1,11
	.byte	'ECC',0,1
	.word	607
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	607
	.byte	3,0,2,35,2,11
	.byte	'SRR',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	607
	.byte	1,0,2,35,3,0,12,6,93,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1621
	.byte	4,2,35,0,0,14
	.word	1911
	.byte	3
	.word	1950
.L272:
	.byte	4
	.byte	'IfxSrc_clearRequest',0,3,5,247,1,17,1,1
.L274:
	.byte	5
	.byte	'src',0,5,247,1,60
	.word	1955
.L276:
	.byte	6,0
.L277:
	.byte	4
	.byte	'IfxSrc_enable',0,3,5,137,2,17,1,1
.L279:
	.byte	5
	.byte	'src',0,5,137,2,54
	.word	1955
.L281:
	.byte	6,0,15,7,66,9,1,16
	.byte	'IfxSrc_Tos_cpu0',0,0,16
	.byte	'IfxSrc_Tos_dma',0,1,16
	.byte	'IfxSrc_Tos_cpu1',0,2,16
	.byte	'IfxSrc_Tos_cpu2',0,3,16
	.byte	'IfxSrc_Tos_cpu3',0,4,16
	.byte	'IfxSrc_Tos_cpu4',0,5,16
	.byte	'IfxSrc_Tos_cpu5',0,6,0
.L260:
	.byte	4
	.byte	'IfxSrc_init',0,3,5,143,2,17,1,1
.L262:
	.byte	5
	.byte	'src',0,5,143,2,52
	.word	1955
.L264:
	.byte	5
	.byte	'typOfService',0,5,143,2,68
	.word	2040
.L266:
	.byte	5
	.byte	'priority',0,5,143,2,95
	.word	624
.L268:
	.byte	17,6,0,0,10
	.byte	'_Ifx_FCE_CLC_Bits',0,9,125,16,4,11
	.byte	'DISR',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,12,9,133,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2248
	.byte	4,2,35,0,0,18,4
	.word	607
	.byte	19,3,0,10
	.byte	'_Ifx_FCE_ID_Bits',0,9,133,1,16,4,11
	.byte	'MOD_REV',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	607
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,2
	.word	624
	.byte	16,0,2,35,2,0,12,9,141,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2375
	.byte	4,2,35,0,0,18,20
	.word	607
	.byte	19,19,0,10
	.byte	'_Ifx_FCE_CHSTS_Bits',0,9,111,16,4,11
	.byte	'CH0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'CH1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'CH2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'CH3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'CH4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'CH5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'CH6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'CH7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,12,9,253,1,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2509
	.byte	4,2,35,0,0,18,200,1
	.word	607
	.byte	19,199,1,0,10
	.byte	'_Ifx_FCE_KRSTCLR_Bits',0,9,225,1,16,4,11
	.byte	'CLR',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	432
	.byte	31,0,2,35,0,0,12,9,229,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2728
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_FCE_KRST1_Bits',0,9,218,1,16,4,11
	.byte	'RST',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	432
	.byte	31,0,2,35,0,0,12,9,221,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2834
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_FCE_KRST0_Bits',0,9,210,1,16,4,11
	.byte	'RST',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,12,9,213,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2938
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_FCE_ACCEN1_Bits',0,9,105,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,9,245,1,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3061
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_FCE_ACCEN0_Bits',0,9,68,16,4,11
	.byte	'EN0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	607
	.byte	1,0,2,35,3,0,12,9,237,1,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3150
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_FCE_IN_IR_Bits',0,9,181,1,16,4,11
	.byte	'IR',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,9,181,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3719
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_FCE_IN_RES_Bits',0,9,194,1,16,4,11
	.byte	'RES',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,9,197,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3800
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_FCE_IN_CFG_Bits',0,9,141,1,16,4,11
	.byte	'CMI',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'CEI',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'LEI',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'BEI',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'CCE',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'ALR',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	607
	.byte	2,0,2,35,0,11
	.byte	'REFIN',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'REFOUT',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'XSEL',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'BYTESWAP',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	607
	.byte	4,0,2,35,1,11
	.byte	'KERNEL',0,1
	.word	607
	.byte	4,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	624
	.byte	12,0,2,35,2,0
.L234:
	.byte	12,9,149,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3883
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_FCE_IN_STS_Bits',0,9,200,1,16,4,11
	.byte	'CMF',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'CEF',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'LEF',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'BEF',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0
.L295:
	.byte	12,9,205,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4198
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_FCE_IN_LENGTH_Bits',0,9,187,1,16,4,11
	.byte	'LENGTH',0,2
	.word	624
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,12,9,189,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4348
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_FCE_IN_CHECK_Bits',0,9,160,1,16,4,11
	.byte	'CHECK',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,9,157,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4460
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_FCE_IN_CRC_Bits',0,9,166,1,16,4,11
	.byte	'CRC',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,9,165,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4547
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_FCE_IN_CTR_Bits',0,9,172,1,16,4,11
	.byte	'FCM',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'FRM_CFG',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'FRM_CHECK',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	432
	.byte	29,0,2,35,0,0,12,9,173,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4630
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_FCE_IN',0,9,246,2,25,32,13
	.byte	'IR',0
	.word	3760
	.byte	4,2,35,0,13
	.byte	'RES',0
	.word	3843
	.byte	4,2,35,4,13
	.byte	'CFG',0
	.word	4158
	.byte	4,2,35,8,13
	.byte	'STS',0
	.word	4308
	.byte	4,2,35,12,13
	.byte	'LENGTH',0
	.word	4420
	.byte	4,2,35,16,13
	.byte	'CHECK',0
	.word	4507
	.byte	4,2,35,20,13
	.byte	'CRC',0
	.word	4590
	.byte	4,2,35,24,13
	.byte	'CTR',0
	.word	4735
	.byte	4,2,35,28,0,18,128,2
	.word	4775
	.byte	19,7,0,14
	.word	4902
	.byte	10
	.byte	'_Ifx_FCE',0,9,143,3,25,128,4,13
	.byte	'CLC',0
	.word	2326
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	2366
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	2460
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2500
	.byte	20,2,35,12,13
	.byte	'CHSTS',0
	.word	2677
	.byte	4,2,35,32,13
	.byte	'reserved_24',0
	.word	2717
	.byte	200,1,2,35,36,13
	.byte	'KRSTCLR',0
	.word	2794
	.byte	4,3,35,236,1,13
	.byte	'KRST1',0
	.word	2898
	.byte	4,3,35,240,1,13
	.byte	'KRST0',0
	.word	3021
	.byte	4,3,35,244,1,13
	.byte	'ACCEN1',0
	.word	3110
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	3679
	.byte	4,3,35,252,1,13
	.byte	'IN',0
	.word	4912
	.byte	128,2,3,35,128,2,0,14
	.word	4917
.L229:
	.byte	3
	.word	5134
.L253:
	.byte	4
	.byte	'IfxFce_enableModule',0,3,8,219,1,17,1,1
.L256:
	.byte	5
	.byte	'fce',0,8,219,1,46
	.word	5139
.L258:
	.byte	6,0,8
	.byte	'IfxFce_getSrcPointer',0,3,8,237,1,35
	.word	1955
	.byte	1,1,5
	.byte	'fce',0,8,237,1,65
	.word	5139
	.byte	6,0
.L93:
	.byte	15,8,73,9,1,16
	.byte	'IfxFce_CrcChannel_0',0,0,16
	.byte	'IfxFce_CrcChannel_1',0,1,16
	.byte	'IfxFce_CrcChannel_2',0,2,16
	.byte	'IfxFce_CrcChannel_3',0,3,16
	.byte	'IfxFce_CrcChannel_4',0,4,16
	.byte	'IfxFce_CrcChannel_5',0,5,16
	.byte	'IfxFce_CrcChannel_6',0,6,16
	.byte	'IfxFce_CrcChannel_7',0,7,0
.L288:
	.byte	4
	.byte	'IfxFce_clearCrcErrorFlags',0,3,8,204,1,17,1,1
.L290:
	.byte	5
	.byte	'fce',0,8,204,1,52
	.word	5139
.L292:
	.byte	5
	.byte	'channel',0,8,204,1,75
	.word	5235
.L294:
	.byte	6,0
.L298:
	.byte	8
	.byte	'IfxFce_getCrcInterruptStatus',0,3,8,228,1,27
	.word	4308
	.byte	1,1
.L300:
	.byte	5
	.byte	'fce',0,8,228,1,65
	.word	5139
.L302:
	.byte	5
	.byte	'channel',0,8,228,1,88
	.word	5235
.L304:
	.byte	6,0
.L84:
	.byte	7
	.byte	'unsigned long int',0,4,7
.L99:
	.byte	4
	.byte	'IfxFce_setChannelCrcLength',0,3,8,244,1,17,1,1
.L102:
	.byte	5
	.byte	'fce',0,8,244,1,53
	.word	5139
.L104:
	.byte	5
	.byte	'channel',0,8,244,1,76
	.word	5235
.L106:
	.byte	5
	.byte	'crcLength',0,8,244,1,92
	.word	5556
.L108:
	.byte	6,0
.L119:
	.byte	4
	.byte	'IfxFce_setCrcstartValue',0,3,8,252,1,17,1,1
.L121:
	.byte	5
	.byte	'fce',0,8,252,1,50
	.word	5139
.L123:
	.byte	5
	.byte	'channel',0,8,252,1,73
	.word	5235
.L125:
	.byte	5
	.byte	'crcStartValue',0,8,252,1,89
	.word	5556
.L127:
	.byte	6,0
.L109:
	.byte	4
	.byte	'IfxFce_setExpectedCrc',0,3,8,130,2,17,1,1
.L112:
	.byte	5
	.byte	'fce',0,8,130,2,48
	.word	5139
.L114:
	.byte	5
	.byte	'channel',0,8,130,2,71
	.word	5235
.L116:
	.byte	5
	.byte	'expectedCrc',0,8,130,2,87
	.word	5556
.L118:
	.byte	6,0,10
	.byte	'_Ifx_P_OUT_Bits',0,11,145,3,16,4,11
	.byte	'P0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,12,11,171,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5833
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMR_Bits',0,11,171,2,16,4,11
	.byte	'PS0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'PCL0',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	607
	.byte	1,0,2,35,3,0,12,11,251,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6149
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ID_Bits',0,11,133,1,16,4,11
	.byte	'MODREV',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	607
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	624
	.byte	16,0,2,35,2,0,12,11,155,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6720
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR0_Bits',0,11,163,1,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	3,5,2,35,0,11
	.byte	'PC0',0,1
	.word	607
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	607
	.byte	3,5,2,35,1,11
	.byte	'PC1',0,1
	.word	607
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	607
	.byte	3,5,2,35,2,11
	.byte	'PC2',0,1
	.word	607
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	607
	.byte	3,5,2,35,3,11
	.byte	'PC3',0,1
	.word	607
	.byte	5,0,2,35,3,0,12,11,171,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6840
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR4_Bits',0,11,189,1,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	3,5,2,35,0,11
	.byte	'PC4',0,1
	.word	607
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	607
	.byte	3,5,2,35,1,11
	.byte	'PC5',0,1
	.word	607
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	607
	.byte	3,5,2,35,2,11
	.byte	'PC6',0,1
	.word	607
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	607
	.byte	3,5,2,35,3,11
	.byte	'PC7',0,1
	.word	607
	.byte	5,0,2,35,3,0,12,11,187,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7055
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR8_Bits',0,11,202,1,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	3,5,2,35,0,11
	.byte	'PC8',0,1
	.word	607
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	607
	.byte	3,5,2,35,1,11
	.byte	'PC9',0,1
	.word	607
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	607
	.byte	3,5,2,35,2,11
	.byte	'PC10',0,1
	.word	607
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	607
	.byte	3,5,2,35,3,11
	.byte	'PC11',0,1
	.word	607
	.byte	5,0,2,35,3,0,12,11,195,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7270
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR12_Bits',0,11,176,1,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	3,5,2,35,0,11
	.byte	'PC12',0,1
	.word	607
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	607
	.byte	3,5,2,35,1,11
	.byte	'PC13',0,1
	.word	607
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	607
	.byte	3,5,2,35,2,11
	.byte	'PC14',0,1
	.word	607
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	607
	.byte	3,5,2,35,3,11
	.byte	'PC15',0,1
	.word	607
	.byte	5,0,2,35,3,0,12,11,179,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7487
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IN_Bits',0,11,141,1,16,4,11
	.byte	'P0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,12,11,163,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7707
	.byte	4,2,35,0,0,18,24
	.word	607
	.byte	19,23,0,10
	.byte	'_Ifx_P_PDR0_Bits',0,11,212,3,16,4,11
	.byte	'PD0',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	607
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	607
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	607
	.byte	2,0,2,35,0,11
	.byte	'PD2',0,1
	.word	607
	.byte	2,6,2,35,1,11
	.byte	'PL2',0,1
	.word	607
	.byte	2,4,2,35,1,11
	.byte	'PD3',0,1
	.word	607
	.byte	2,2,2,35,1,11
	.byte	'PL3',0,1
	.word	607
	.byte	2,0,2,35,1,11
	.byte	'PD4',0,1
	.word	607
	.byte	2,6,2,35,2,11
	.byte	'PL4',0,1
	.word	607
	.byte	2,4,2,35,2,11
	.byte	'PD5',0,1
	.word	607
	.byte	2,2,2,35,2,11
	.byte	'PL5',0,1
	.word	607
	.byte	2,0,2,35,2,11
	.byte	'PD6',0,1
	.word	607
	.byte	2,6,2,35,3,11
	.byte	'PL6',0,1
	.word	607
	.byte	2,4,2,35,3,11
	.byte	'PD7',0,1
	.word	607
	.byte	2,2,2,35,3,11
	.byte	'PL7',0,1
	.word	607
	.byte	2,0,2,35,3,0,12,11,195,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8031
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDR1_Bits',0,11,233,3,16,4,11
	.byte	'PD8',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'PL8',0,1
	.word	607
	.byte	2,4,2,35,0,11
	.byte	'PD9',0,1
	.word	607
	.byte	2,2,2,35,0,11
	.byte	'PL9',0,1
	.word	607
	.byte	2,0,2,35,0,11
	.byte	'PD10',0,1
	.word	607
	.byte	2,6,2,35,1,11
	.byte	'PL10',0,1
	.word	607
	.byte	2,4,2,35,1,11
	.byte	'PD11',0,1
	.word	607
	.byte	2,2,2,35,1,11
	.byte	'PL11',0,1
	.word	607
	.byte	2,0,2,35,1,11
	.byte	'PD12',0,1
	.word	607
	.byte	2,6,2,35,2,11
	.byte	'PL12',0,1
	.word	607
	.byte	2,4,2,35,2,11
	.byte	'PD13',0,1
	.word	607
	.byte	2,2,2,35,2,11
	.byte	'PL13',0,1
	.word	607
	.byte	2,0,2,35,2,11
	.byte	'PD14',0,1
	.word	607
	.byte	2,6,2,35,3,11
	.byte	'PL14',0,1
	.word	607
	.byte	2,4,2,35,3,11
	.byte	'PD15',0,1
	.word	607
	.byte	2,2,2,35,3,11
	.byte	'PL15',0,1
	.word	607
	.byte	2,0,2,35,3,0,12,11,203,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8335
	.byte	4,2,35,0,0,18,8
	.word	607
	.byte	19,7,0,10
	.byte	'_Ifx_P_ESR_Bits',0,11,111,16,4,11
	.byte	'EN0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,12,11,147,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8660
	.byte	4,2,35,0,0,18,12
	.word	607
	.byte	19,11,0,10
	.byte	'_Ifx_P_PDISC_Bits',0,11,190,3,16,4,11
	.byte	'PDIS0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'PDIS2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'PDIS3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'PDIS4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'PDIS5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'PDIS6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'PDIS7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'PDIS8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'PDIS9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'PDIS10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'PDIS11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'PDIS12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'PDIS13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'PDIS14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'PDIS15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,12,11,187,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9000
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PCSR_Bits',0,11,167,3,16,4,11
	.byte	'SEL0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'SEL1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'SEL2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'SEL3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'SEL4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'SEL5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'SEL6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'SEL7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'SEL8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'SEL9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'SEL10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'SEL11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'SEL12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'SEL13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'SEL14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'SEL15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	607
	.byte	1,0,2,35,3,0,12,11,179,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9366
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR0_Bits',0,11,230,2,16,4,11
	.byte	'PS0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,12,11,139,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9730
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR4_Bits',0,11,251,2,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	4,4,2,35,0,11
	.byte	'PS4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,12,11,155,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9877
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR8_Bits',0,11,134,3,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'PS8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	432
	.byte	20,0,2,35,0,0,12,11,163,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10046
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR12_Bits',0,11,240,2,16,4,11
	.byte	'reserved_0',0,2
	.word	624
	.byte	12,4,2,35,0,11
	.byte	'PS12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,12,11,147,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10218
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR0_Bits',0,11,128,2,16,4,11
	.byte	'reserved_0',0,2
	.word	624
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	624
	.byte	12,0,2,35,2,0,12,11,219,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10393
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR4_Bits',0,11,149,2,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	20,12,2,35,0,11
	.byte	'PCL4',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	607
	.byte	8,0,2,35,3,0,12,11,235,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10567
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR8_Bits',0,11,160,2,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	24,8,2,35,0,11
	.byte	'PCL8',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	607
	.byte	4,0,2,35,3,0,12,11,243,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10741
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR12_Bits',0,11,139,2,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	28,4,2,35,0,11
	.byte	'PCL12',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	607
	.byte	1,0,2,35,3,0,12,11,227,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10917
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR_Bits',0,11,208,2,16,4,11
	.byte	'PS0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,12,11,131,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11073
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR_Bits',0,11,234,1,16,4,11
	.byte	'reserved_0',0,2
	.word	624
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	607
	.byte	1,0,2,35,3,0,12,11,211,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11406
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR_Bits',0,11,215,1,16,4,11
	.byte	'REN_CTRL',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'RX_EN',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'TERM',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'LRXTERM',0,1
	.word	607
	.byte	3,2,2,35,0,11
	.byte	'LVDSM',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'PS',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'TEN_CTRL',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'TX_EN',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'VDIFFADJ',0,1
	.word	607
	.byte	2,4,2,35,1,11
	.byte	'VOSDYN',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'VOSEXT',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'TX_PD',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'TX_PWDPD',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,12,11,203,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11754
	.byte	4,2,35,0,0,18,32
	.word	12034
	.byte	19,7,0,18,56
	.word	607
	.byte	19,55,0,10
	.byte	'_Ifx_P_ACCEN1_Bits',0,11,105,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,11,139,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12092
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ACCEN0_Bits',0,11,68,16,4,11
	.byte	'EN0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	607
	.byte	1,0,2,35,3,0,12,11,131,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12179
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P',0,11,220,5,25,128,2,13
	.byte	'OUT',0
	.word	6109
	.byte	4,2,35,0,13
	.byte	'OMR',0
	.word	6680
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	6800
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2366
	.byte	4,2,35,12,13
	.byte	'IOCR0',0
	.word	7015
	.byte	4,2,35,16,13
	.byte	'IOCR4',0
	.word	7230
	.byte	4,2,35,20,13
	.byte	'IOCR8',0
	.word	7447
	.byte	4,2,35,24,13
	.byte	'IOCR12',0
	.word	7667
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	2366
	.byte	4,2,35,32,13
	.byte	'IN',0
	.word	7982
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	8022
	.byte	24,2,35,40,13
	.byte	'PDR0',0
	.word	8295
	.byte	4,2,35,64,13
	.byte	'PDR1',0
	.word	8611
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	8651
	.byte	8,2,35,72,13
	.byte	'ESR',0
	.word	8951
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	8991
	.byte	12,2,35,84,13
	.byte	'PDISC',0
	.word	9326
	.byte	4,2,35,96,13
	.byte	'PCSR',0
	.word	9690
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	8651
	.byte	8,2,35,104,13
	.byte	'OMSR0',0
	.word	9837
	.byte	4,2,35,112,13
	.byte	'OMSR4',0
	.word	10006
	.byte	4,2,35,116,13
	.byte	'OMSR8',0
	.word	10178
	.byte	4,2,35,120,13
	.byte	'OMSR12',0
	.word	10353
	.byte	4,2,35,124,13
	.byte	'OMCR0',0
	.word	10527
	.byte	4,3,35,128,1,13
	.byte	'OMCR4',0
	.word	10701
	.byte	4,3,35,132,1,13
	.byte	'OMCR8',0
	.word	10877
	.byte	4,3,35,136,1,13
	.byte	'OMCR12',0
	.word	11033
	.byte	4,3,35,140,1,13
	.byte	'OMSR',0
	.word	11366
	.byte	4,3,35,144,1,13
	.byte	'OMCR',0
	.word	11714
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	8651
	.byte	8,3,35,152,1,13
	.byte	'LPCR',0
	.word	12074
	.byte	32,3,35,160,1,13
	.byte	'reserved_C0',0
	.word	12083
	.byte	56,3,35,192,1,13
	.byte	'ACCEN1',0
	.word	12139
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	12706
	.byte	4,3,35,252,1,0,14
	.word	12746
	.byte	3
	.word	13316
	.byte	15,10,187,1,9,4,16
	.byte	'IfxPort_State_notChanged',0,0,16
	.byte	'IfxPort_State_high',0,1,16
	.byte	'IfxPort_State_low',0,128,128,4,16
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,10,169,5,17,1,1,5
	.byte	'port',0,10,169,5,44
	.word	13321
	.byte	5
	.byte	'pinIndex',0,10,169,5,56
	.word	607
	.byte	5
	.byte	'action',0,10,169,5,80
	.word	13326
	.byte	6,0,4
	.byte	'IfxScuCcu_wait',0,3,12,157,14,17,1,1,5
	.byte	'timeSec',0,12,157,14,40
	.word	228
	.byte	17,6,0,0,8
	.byte	'IfxScuCcu_getStmFrequency',0,3,12,188,13,20
	.word	228
	.byte	1,1,6,0,15,14,161,1,9,1,16
	.byte	'IfxCpu_ResourceCpu_0',0,0,16
	.byte	'IfxCpu_ResourceCpu_1',0,1,16
	.byte	'IfxCpu_ResourceCpu_2',0,2,16
	.byte	'IfxCpu_ResourceCpu_3',0,3,16
	.byte	'IfxCpu_ResourceCpu_4',0,4,16
	.byte	'IfxCpu_ResourceCpu_5',0,5,16
	.byte	'IfxCpu_ResourceCpu_none',0,6,0
.L137:
	.byte	8
	.byte	'IfxCpu_getCoreIndex',0,3,13,235,6,31
	.word	13591
	.byte	1,1
.L140:
	.byte	6,0,8
	.byte	'IfxCpu_areInterruptsEnabled',0,3,13,233,5,20
	.word	607
	.byte	1,1,6,0,8
	.byte	'IfxCpu_getPerformanceCounter',0,3,13,255,6,19
	.word	5556
	.byte	1,1,5
	.byte	'address',0,13,255,6,55
	.word	624
	.byte	6,0,8
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,13,156,7,20
	.word	607
	.byte	1,1,5
	.byte	'address',0,13,156,7,70
	.word	624
	.byte	6,0,4
	.byte	'IfxCpu_updatePerformanceCounter',0,3,13,138,9,17,1,1,5
	.byte	'address',0,13,138,9,56
	.word	5556
	.byte	5
	.byte	'count',0,13,138,9,72
	.word	5556
	.byte	17,6,0,0,10
	.byte	'_Ifx_DMA_CLC_Bits',0,16,197,1,16,4,11
	.byte	'DISR',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,12,16,212,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14048
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ID_Bits',0,16,221,1,16,4,11
	.byte	'MOD_REV',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	607
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,2
	.word	624
	.byte	16,0,2,35,2,0,12,16,236,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14205
	.byte	4,2,35,0,0,18,52
	.word	607
	.byte	19,51,0,10
	.byte	'_Ifx_DMA_ACCEN_ACCENR0_Bits',0,16,68,16,4,11
	.byte	'EN0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	607
	.byte	1,0,2,35,3,0,12,16,132,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14339
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ACCEN_ACCENR1_Bits',0,16,105,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,16,140,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14915
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ACCEN',0,16,221,6,25,8,13
	.byte	'ACCENR0',0
	.word	14875
	.byte	4,2,35,0,13
	.byte	'ACCENR1',0
	.word	14971
	.byte	4,2,35,4,0,18,32
	.word	15011
	.byte	19,3,0,14
	.word	15067
	.byte	18,192,1
	.word	607
	.byte	19,191,1,0,10
	.byte	'_Ifx_DMA_ME_EER_Bits',0,16,174,2,16,4,11
	.byte	'reserved_0',0,2
	.word	624
	.byte	16,0,2,35,0,11
	.byte	'ESER',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'EDER',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	624
	.byte	8,6,2,35,2,11
	.byte	'ELER',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	607
	.byte	5,0,2,35,3,0,12,16,156,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15092
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_ERRSR_Bits',0,16,185,2,16,4,11
	.byte	'LEC',0,1
	.word	607
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	624
	.byte	9,0,2,35,0,11
	.byte	'SER',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'DER',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	607
	.byte	2,4,2,35,2,11
	.byte	'SPBER',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'SRIER',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	607
	.byte	2,0,2,35,2,11
	.byte	'RAMER',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'SLLER',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'DLLER',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	607
	.byte	5,0,2,35,3,0,12,16,164,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15276
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_CLRE_Bits',0,16,152,2,16,4,11
	.byte	'reserved_0',0,2
	.word	624
	.byte	16,0,2,35,0,11
	.byte	'CSER',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'CDER',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	607
	.byte	2,4,2,35,2,11
	.byte	'CSPBER',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'CSRIER',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	607
	.byte	2,0,2,35,2,11
	.byte	'CRAMER',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'CSLLER',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'CDLLER',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	607
	.byte	5,0,2,35,3,0,12,16,140,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15567
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_SR_Bits',0,16,170,3,16,4,11
	.byte	'RS',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	607
	.byte	3,4,2,35,0,11
	.byte	'WS',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,2
	.word	624
	.byte	11,0,2,35,0,11
	.byte	'CH',0,1
	.word	607
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	624
	.byte	9,0,2,35,2,0,12,16,140,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15849
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_R0_Bits',0,16,202,2,16,4,11
	.byte	'RD00',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'RD01',0,1
	.word	607
	.byte	8,0,2,35,1,11
	.byte	'RD02',0,1
	.word	607
	.byte	8,0,2,35,2,11
	.byte	'RD03',0,1
	.word	607
	.byte	8,0,2,35,3,0,12,16,172,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16025
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_R1_Bits',0,16,211,2,16,4,11
	.byte	'RD10',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'RD11',0,1
	.word	607
	.byte	8,0,2,35,1,11
	.byte	'RD12',0,1
	.word	607
	.byte	8,0,2,35,2,11
	.byte	'RD13',0,1
	.word	607
	.byte	8,0,2,35,3,0,12,16,180,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16156
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_R2_Bits',0,16,220,2,16,4,11
	.byte	'RD20',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'RD21',0,1
	.word	607
	.byte	8,0,2,35,1,11
	.byte	'RD22',0,1
	.word	607
	.byte	8,0,2,35,2,11
	.byte	'RD23',0,1
	.word	607
	.byte	8,0,2,35,3,0,12,16,188,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16287
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_R3_Bits',0,16,229,2,16,4,11
	.byte	'RD30',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'RD31',0,1
	.word	607
	.byte	8,0,2,35,1,11
	.byte	'RD32',0,1
	.word	607
	.byte	8,0,2,35,2,11
	.byte	'RD33',0,1
	.word	607
	.byte	8,0,2,35,3,0,12,16,196,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16418
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_R4_Bits',0,16,238,2,16,4,11
	.byte	'RD40',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'RD41',0,1
	.word	607
	.byte	8,0,2,35,1,11
	.byte	'RD42',0,1
	.word	607
	.byte	8,0,2,35,2,11
	.byte	'RD43',0,1
	.word	607
	.byte	8,0,2,35,3,0,12,16,204,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16549
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_R5_Bits',0,16,247,2,16,4,11
	.byte	'RD50',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'RD51',0,1
	.word	607
	.byte	8,0,2,35,1,11
	.byte	'RD52',0,1
	.word	607
	.byte	8,0,2,35,2,11
	.byte	'RD53',0,1
	.word	607
	.byte	8,0,2,35,3,0,12,16,212,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16680
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_R6_Bits',0,16,128,3,16,4,11
	.byte	'RD60',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'RD61',0,1
	.word	607
	.byte	8,0,2,35,1,11
	.byte	'RD62',0,1
	.word	607
	.byte	8,0,2,35,2,11
	.byte	'RD63',0,1
	.word	607
	.byte	8,0,2,35,3,0,12,16,220,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16811
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_R7_Bits',0,16,137,3,16,4,11
	.byte	'RD70',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'RD71',0,1
	.word	607
	.byte	8,0,2,35,1,11
	.byte	'RD72',0,1
	.word	607
	.byte	8,0,2,35,2,11
	.byte	'RD73',0,1
	.word	607
	.byte	8,0,2,35,3,0,12,16,228,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16942
	.byte	4,2,35,0,0,18,32
	.word	607
	.byte	19,31,0,10
	.byte	'_Ifx_DMA_ME_RDCRC_Bits',0,16,146,3,16,4,11
	.byte	'RDCRC',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,16,236,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17082
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_SDCRC_Bits',0,16,158,3,16,4,11
	.byte	'SDCRC',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,16,252,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17169
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_SADR_Bits',0,16,152,3,16,4,11
	.byte	'SADR',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,16,244,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17256
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_DADR_Bits',0,16,168,2,16,4,11
	.byte	'DADR',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,16,148,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17341
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_ADICR_Bits',0,16,229,1,16,4,11
	.byte	'SMF',0,1
	.word	607
	.byte	3,5,2,35,0,11
	.byte	'INCS',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'DMF',0,1
	.word	607
	.byte	3,1,2,35,0,11
	.byte	'INCD',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'CBLS',0,1
	.word	607
	.byte	4,4,2,35,1,11
	.byte	'CBLD',0,1
	.word	607
	.byte	4,0,2,35,1,11
	.byte	'SHCT',0,1
	.word	607
	.byte	4,4,2,35,2,11
	.byte	'SCBE',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'DCBE',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'STAMP',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'WRPSE',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'WRPDE',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'INTCT',0,1
	.word	607
	.byte	2,4,2,35,3,11
	.byte	'IRDV',0,1
	.word	607
	.byte	4,0,2,35,3,0,12,16,244,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17426
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_CHCR_Bits',0,16,249,1,16,4,11
	.byte	'TREL',0,2
	.word	624
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	607
	.byte	2,0,2,35,1,11
	.byte	'BLKM',0,1
	.word	607
	.byte	3,5,2,35,2,11
	.byte	'RROAT',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'CHMODE',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'CHDW',0,1
	.word	607
	.byte	3,0,2,35,2,11
	.byte	'PATSEL',0,1
	.word	607
	.byte	3,5,2,35,3,11
	.byte	'SWAP',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'PRSEL',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	607
	.byte	3,0,2,35,3,0,12,16,252,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17745
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_SHADR_Bits',0,16,164,3,16,4,11
	.byte	'SHADR',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,16,132,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17994
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME_CHSR_Bits',0,16,136,2,16,4,11
	.byte	'TCOUNT',0,2
	.word	624
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'LXO',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'WRPS',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'WRPD',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'ICH',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'IPM',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	607
	.byte	2,2,2,35,2,11
	.byte	'BUFFER',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'FROZEN',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	607
	.byte	8,0,2,35,3,0,12,16,132,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18081
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ME',0,16,240,6,25,128,1,13
	.byte	'EER',0
	.word	15236
	.byte	4,2,35,0,13
	.byte	'ERRSR',0
	.word	15527
	.byte	4,2,35,4,13
	.byte	'CLRE',0
	.word	15809
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2366
	.byte	4,2,35,12,13
	.byte	'SR',0
	.word	15985
	.byte	4,2,35,16,13
	.byte	'reserved_14',0
	.word	8991
	.byte	12,2,35,20,13
	.byte	'R0',0
	.word	16116
	.byte	4,2,35,32,13
	.byte	'R1',0
	.word	16247
	.byte	4,2,35,36,13
	.byte	'R2',0
	.word	16378
	.byte	4,2,35,40,13
	.byte	'R3',0
	.word	16509
	.byte	4,2,35,44,13
	.byte	'R4',0
	.word	16640
	.byte	4,2,35,48,13
	.byte	'R5',0
	.word	16771
	.byte	4,2,35,52,13
	.byte	'R6',0
	.word	16902
	.byte	4,2,35,56,13
	.byte	'R7',0
	.word	17033
	.byte	4,2,35,60,13
	.byte	'reserved_40',0
	.word	17073
	.byte	32,2,35,64,13
	.byte	'RDCRC',0
	.word	17129
	.byte	4,2,35,96,13
	.byte	'SDCRC',0
	.word	17216
	.byte	4,2,35,100,13
	.byte	'SADR',0
	.word	17301
	.byte	4,2,35,104,13
	.byte	'DADR',0
	.word	17386
	.byte	4,2,35,108,13
	.byte	'ADICR',0
	.word	17705
	.byte	4,2,35,112,13
	.byte	'CHCR',0
	.word	17954
	.byte	4,2,35,116,13
	.byte	'SHADR',0
	.word	18041
	.byte	4,2,35,120,13
	.byte	'CHSR',0
	.word	18310
	.byte	4,2,35,124,0,14
	.word	18350
	.byte	18,128,31
	.word	607
	.byte	19,255,30,0,14
	.word	18350
	.byte	18,96
	.word	607
	.byte	19,95,0,10
	.byte	'_Ifx_DMA_OTSS_Bits',0,16,188,3,16,4,11
	.byte	'TGS',0,1
	.word	607
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	607
	.byte	3,1,2,35,0,11
	.byte	'BS',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,12,16,156,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18728
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_PRR0_Bits',0,16,197,3,16,4,11
	.byte	'PAT00',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'PAT01',0,1
	.word	607
	.byte	8,0,2,35,1,11
	.byte	'PAT02',0,1
	.word	607
	.byte	8,0,2,35,2,11
	.byte	'PAT03',0,1
	.word	607
	.byte	8,0,2,35,3,0,12,16,164,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18867
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_PRR1_Bits',0,16,206,3,16,4,11
	.byte	'PAT10',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'PAT11',0,1
	.word	607
	.byte	8,0,2,35,1,11
	.byte	'PAT12',0,1
	.word	607
	.byte	8,0,2,35,2,11
	.byte	'PAT13',0,1
	.word	607
	.byte	8,0,2,35,3,0,12,16,172,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19001
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_TIME_Bits',0,16,229,3,16,4,11
	.byte	'COUNT',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,16,196,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19135
	.byte	4,2,35,0,0,18,236,1
	.word	607
	.byte	19,235,1,0,10
	.byte	'_Ifx_DMA_MODE_Bits',0,16,181,3,16,4,11
	.byte	'MODE',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	432
	.byte	31,0,2,35,0,0,12,16,148,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19229
	.byte	4,2,35,0,0,18,16
	.word	19293
	.byte	19,3,0,18,16
	.word	607
	.byte	19,15,0,10
	.byte	'_Ifx_DMA_ERRINTR_Bits',0,16,207,1,16,4,11
	.byte	'SIT',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	432
	.byte	31,0,2,35,0,0,12,16,220,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19351
	.byte	4,2,35,0,0,18,16
	.word	19417
	.byte	19,3,0,18,208,9
	.word	607
	.byte	19,207,9,0,10
	.byte	'_Ifx_DMA_HRR_Bits',0,16,214,1,16,4,11
	.byte	'HRP',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,12,16,228,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19477
	.byte	4,2,35,0,0,18,128,4
	.word	19539
	.byte	19,127,0,10
	.byte	'_Ifx_DMA_SUSENR_Bits',0,16,222,3,16,4,11
	.byte	'SUSEN',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	432
	.byte	31,0,2,35,0,0,12,16,188,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19589
	.byte	4,2,35,0,0,18,128,4
	.word	19656
	.byte	19,127,0,10
	.byte	'_Ifx_DMA_SUSACR_Bits',0,16,215,3,16,4,11
	.byte	'SUSAC',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	432
	.byte	31,0,2,35,0,0,12,16,180,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19706
	.byte	4,2,35,0,0,18,128,4
	.word	19773
	.byte	19,127,0,10
	.byte	'_Ifx_DMA_TSR_Bits',0,16,235,3,16,4,11
	.byte	'RST',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'HTRE',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'TRL',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'CH',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'ETRL',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	607
	.byte	3,0,2,35,0,11
	.byte	'HLTREQ',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'HLTACK',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	607
	.byte	6,0,2,35,1,11
	.byte	'ECH',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'DCH',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'CTL',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	607
	.byte	5,0,2,35,2,11
	.byte	'HLTCLR',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	607
	.byte	7,0,2,35,3,0,12,16,204,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19823
	.byte	4,2,35,0,0,18,128,4
	.word	20114
	.byte	19,127,0,10
	.byte	'_Ifx_DMA_CH_RDCRCR_Bits',0,16,173,1,16,4,11
	.byte	'RDCRC',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,16,180,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20164
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_SDCRCR_Bits',0,16,185,1,16,4,11
	.byte	'SDCRC',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,16,196,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20252
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_SADR_Bits',0,16,179,1,16,4,11
	.byte	'SADR',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,16,188,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20340
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_DADR_Bits',0,16,167,1,16,4,11
	.byte	'DADR',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,16,172,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20425
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_ADICR_Bits',0,16,111,16,4,11
	.byte	'SMF',0,1
	.word	607
	.byte	3,5,2,35,0,11
	.byte	'INCS',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'DMF',0,1
	.word	607
	.byte	3,1,2,35,0,11
	.byte	'INCD',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'CBLS',0,1
	.word	607
	.byte	4,4,2,35,1,11
	.byte	'CBLD',0,1
	.word	607
	.byte	4,0,2,35,1,11
	.byte	'SHCT',0,1
	.word	607
	.byte	4,4,2,35,2,11
	.byte	'SCBE',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'DCBE',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'STAMP',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'WRPSE',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'WRPDE',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'INTCT',0,1
	.word	607
	.byte	2,4,2,35,3,11
	.byte	'IRDV',0,1
	.word	607
	.byte	4,0,2,35,3,0
.L197:
	.byte	12,16,148,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20510
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_CHCFGR_Bits',0,16,131,1,16,4,11
	.byte	'TREL',0,2
	.word	624
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	607
	.byte	2,0,2,35,1,11
	.byte	'BLKM',0,1
	.word	607
	.byte	3,5,2,35,2,11
	.byte	'RROAT',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'CHMODE',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'CHDW',0,1
	.word	607
	.byte	3,0,2,35,2,11
	.byte	'PATSEL',0,1
	.word	607
	.byte	3,5,2,35,3,11
	.byte	'SWAP',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'PRSEL',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	607
	.byte	3,0,2,35,3,0,12,16,156,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20828
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_SHADR_Bits',0,16,191,1,16,4,11
	.byte	'SHADR',0,4
	.word	432
	.byte	32,0,2,35,0,0,12,16,204,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21079
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_CHCSR_Bits',0,16,146,1,16,4,11
	.byte	'TCOUNT',0,2
	.word	624
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'LXO',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'WRPS',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'WRPD',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'ICH',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'IPM',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	607
	.byte	2,2,2,35,2,11
	.byte	'BUFFER',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'FROZEN',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'SWB',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'CWRP',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'CICH',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'SIT',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	607
	.byte	3,1,2,35,3,11
	.byte	'SCH',0,1
	.word	607
	.byte	1,0,2,35,3,0,12,16,164,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21166
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH',0,16,152,7,25,32,13
	.byte	'RDCRCR',0
	.word	20212
	.byte	4,2,35,0,13
	.byte	'SDCRCR',0
	.word	20300
	.byte	4,2,35,4,13
	.byte	'SADR',0
	.word	20385
	.byte	4,2,35,8,13
	.byte	'DADR',0
	.word	20470
	.byte	4,2,35,12,13
	.byte	'ADICR',0
	.word	20788
	.byte	4,2,35,16,13
	.byte	'CHCFGR',0
	.word	21039
	.byte	4,2,35,20,13
	.byte	'SHADR',0
	.word	21126
	.byte	4,2,35,24,13
	.byte	'CHCSR',0
	.word	21473
	.byte	4,2,35,28,0,18,128,32
	.word	21513
	.byte	19,127,0,14
	.word	21653
	.byte	18,128,32
	.word	607
	.byte	19,255,31,0,10
	.byte	'_Ifx_DMA',0,16,177,7,25,128,128,1,13
	.byte	'CLC',0
	.word	14165
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	2366
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	14290
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	14330
	.byte	52,2,35,12,13
	.byte	'ACCEN',0
	.word	15076
	.byte	32,2,35,64,13
	.byte	'reserved_60',0
	.word	15081
	.byte	192,1,2,35,96,13
	.byte	'ME0',0
	.word	18698
	.byte	128,1,3,35,160,2,13
	.byte	'reserved_1A0',0
	.word	18703
	.byte	128,31,3,35,160,3,13
	.byte	'ME1',0
	.word	18714
	.byte	128,1,3,35,160,34,13
	.byte	'reserved_11A0',0
	.word	18719
	.byte	96,3,35,160,35,13
	.byte	'OTSS',0
	.word	18827
	.byte	4,3,35,128,36,13
	.byte	'reserved_1204',0
	.word	2366
	.byte	4,3,35,132,36,13
	.byte	'PRR0',0
	.word	18961
	.byte	4,3,35,136,36,13
	.byte	'PRR1',0
	.word	19095
	.byte	4,3,35,140,36,13
	.byte	'TIME',0
	.word	19178
	.byte	4,3,35,144,36,13
	.byte	'reserved_1214',0
	.word	19218
	.byte	236,1,3,35,148,36,13
	.byte	'MODE',0
	.word	19333
	.byte	16,3,35,128,38,13
	.byte	'reserved_1310',0
	.word	19342
	.byte	16,3,35,144,38,13
	.byte	'ERRINTR',0
	.word	19457
	.byte	16,3,35,160,38,13
	.byte	'reserved_1330',0
	.word	19466
	.byte	208,9,3,35,176,38,13
	.byte	'HRR',0
	.word	19579
	.byte	128,4,3,35,128,48,13
	.byte	'SUSENR',0
	.word	19696
	.byte	128,4,3,35,128,52,13
	.byte	'SUSACR',0
	.word	19813
	.byte	128,4,3,35,128,56,13
	.byte	'TSR',0
	.word	20154
	.byte	128,4,3,35,128,60,13
	.byte	'CH',0
	.word	21663
	.byte	128,32,3,35,128,64,13
	.byte	'reserved_3000',0
	.word	21668
	.byte	128,32,3,35,128,96,0,14
	.word	21679
	.byte	3
	.word	22173
	.byte	15,17,102,9,1,16
	.byte	'IfxDma_ChannelId_none',0,127,16
	.byte	'IfxDma_ChannelId_0',0,0,16
	.byte	'IfxDma_ChannelId_1',0,1,16
	.byte	'IfxDma_ChannelId_2',0,2,16
	.byte	'IfxDma_ChannelId_3',0,3,16
	.byte	'IfxDma_ChannelId_4',0,4,16
	.byte	'IfxDma_ChannelId_5',0,5,16
	.byte	'IfxDma_ChannelId_6',0,6,16
	.byte	'IfxDma_ChannelId_7',0,7,16
	.byte	'IfxDma_ChannelId_8',0,8,16
	.byte	'IfxDma_ChannelId_9',0,9,16
	.byte	'IfxDma_ChannelId_10',0,10,16
	.byte	'IfxDma_ChannelId_11',0,11,16
	.byte	'IfxDma_ChannelId_12',0,12,16
	.byte	'IfxDma_ChannelId_13',0,13,16
	.byte	'IfxDma_ChannelId_14',0,14,16
	.byte	'IfxDma_ChannelId_15',0,15,16
	.byte	'IfxDma_ChannelId_16',0,16,16
	.byte	'IfxDma_ChannelId_17',0,17,16
	.byte	'IfxDma_ChannelId_18',0,18,16
	.byte	'IfxDma_ChannelId_19',0,19,16
	.byte	'IfxDma_ChannelId_20',0,20,16
	.byte	'IfxDma_ChannelId_21',0,21,16
	.byte	'IfxDma_ChannelId_22',0,22,16
	.byte	'IfxDma_ChannelId_23',0,23,16
	.byte	'IfxDma_ChannelId_24',0,24,16
	.byte	'IfxDma_ChannelId_25',0,25,16
	.byte	'IfxDma_ChannelId_26',0,26,16
	.byte	'IfxDma_ChannelId_27',0,27,16
	.byte	'IfxDma_ChannelId_28',0,28,16
	.byte	'IfxDma_ChannelId_29',0,29,16
	.byte	'IfxDma_ChannelId_30',0,30,16
	.byte	'IfxDma_ChannelId_31',0,31,16
	.byte	'IfxDma_ChannelId_32',0,32,16
	.byte	'IfxDma_ChannelId_33',0,33,16
	.byte	'IfxDma_ChannelId_34',0,34,16
	.byte	'IfxDma_ChannelId_35',0,35,16
	.byte	'IfxDma_ChannelId_36',0,36,16
	.byte	'IfxDma_ChannelId_37',0,37,16
	.byte	'IfxDma_ChannelId_38',0,38,16
	.byte	'IfxDma_ChannelId_39',0,39,16
	.byte	'IfxDma_ChannelId_40',0,40,16
	.byte	'IfxDma_ChannelId_41',0,41,16
	.byte	'IfxDma_ChannelId_42',0,42,16
	.byte	'IfxDma_ChannelId_43',0,43,16
	.byte	'IfxDma_ChannelId_44',0,44,16
	.byte	'IfxDma_ChannelId_45',0,45,16
	.byte	'IfxDma_ChannelId_46',0,46,16
	.byte	'IfxDma_ChannelId_47',0,47,16
	.byte	'IfxDma_ChannelId_48',0,48,16
	.byte	'IfxDma_ChannelId_49',0,49,16
	.byte	'IfxDma_ChannelId_50',0,50,16
	.byte	'IfxDma_ChannelId_51',0,51,16
	.byte	'IfxDma_ChannelId_52',0,52,16
	.byte	'IfxDma_ChannelId_53',0,53,16
	.byte	'IfxDma_ChannelId_54',0,54,16
	.byte	'IfxDma_ChannelId_55',0,55,16
	.byte	'IfxDma_ChannelId_56',0,56,16
	.byte	'IfxDma_ChannelId_57',0,57,16
	.byte	'IfxDma_ChannelId_58',0,58,16
	.byte	'IfxDma_ChannelId_59',0,59,16
	.byte	'IfxDma_ChannelId_60',0,60,16
	.byte	'IfxDma_ChannelId_61',0,61,16
	.byte	'IfxDma_ChannelId_62',0,62,16
	.byte	'IfxDma_ChannelId_63',0,63,16
	.byte	'IfxDma_ChannelId_64',0,192,0,16
	.byte	'IfxDma_ChannelId_65',0,193,0,16
	.byte	'IfxDma_ChannelId_66',0,194,0,16
	.byte	'IfxDma_ChannelId_67',0,195,0,16
	.byte	'IfxDma_ChannelId_68',0,196,0,16
	.byte	'IfxDma_ChannelId_69',0,197,0,16
	.byte	'IfxDma_ChannelId_70',0,198,0,16
	.byte	'IfxDma_ChannelId_71',0,199,0,16
	.byte	'IfxDma_ChannelId_72',0,200,0,16
	.byte	'IfxDma_ChannelId_73',0,201,0,16
	.byte	'IfxDma_ChannelId_74',0,202,0,16
	.byte	'IfxDma_ChannelId_75',0,203,0,16
	.byte	'IfxDma_ChannelId_76',0,204,0,16
	.byte	'IfxDma_ChannelId_77',0,205,0,16
	.byte	'IfxDma_ChannelId_78',0,206,0,16
	.byte	'IfxDma_ChannelId_79',0,207,0,16
	.byte	'IfxDma_ChannelId_80',0,208,0,16
	.byte	'IfxDma_ChannelId_81',0,209,0,16
	.byte	'IfxDma_ChannelId_82',0,210,0,16
	.byte	'IfxDma_ChannelId_83',0,211,0,16
	.byte	'IfxDma_ChannelId_84',0,212,0,16
	.byte	'IfxDma_ChannelId_85',0,213,0,16
	.byte	'IfxDma_ChannelId_86',0,214,0,16
	.byte	'IfxDma_ChannelId_87',0,215,0,16
	.byte	'IfxDma_ChannelId_88',0,216,0,16
	.byte	'IfxDma_ChannelId_89',0,217,0,16
	.byte	'IfxDma_ChannelId_90',0,218,0,16
	.byte	'IfxDma_ChannelId_91',0,219,0,16
	.byte	'IfxDma_ChannelId_92',0,220,0,16
	.byte	'IfxDma_ChannelId_93',0,221,0,16
	.byte	'IfxDma_ChannelId_94',0,222,0,16
	.byte	'IfxDma_ChannelId_95',0,223,0,16
	.byte	'IfxDma_ChannelId_96',0,224,0,16
	.byte	'IfxDma_ChannelId_97',0,225,0,16
	.byte	'IfxDma_ChannelId_98',0,226,0,16
	.byte	'IfxDma_ChannelId_99',0,227,0,16
	.byte	'IfxDma_ChannelId_100',0,228,0,16
	.byte	'IfxDma_ChannelId_101',0,229,0,16
	.byte	'IfxDma_ChannelId_102',0,230,0,16
	.byte	'IfxDma_ChannelId_103',0,231,0,16
	.byte	'IfxDma_ChannelId_104',0,232,0,16
	.byte	'IfxDma_ChannelId_105',0,233,0,16
	.byte	'IfxDma_ChannelId_106',0,234,0,16
	.byte	'IfxDma_ChannelId_107',0,235,0,16
	.byte	'IfxDma_ChannelId_108',0,236,0,16
	.byte	'IfxDma_ChannelId_109',0,237,0,16
	.byte	'IfxDma_ChannelId_110',0,238,0,16
	.byte	'IfxDma_ChannelId_111',0,239,0,16
	.byte	'IfxDma_ChannelId_112',0,240,0,16
	.byte	'IfxDma_ChannelId_113',0,241,0,16
	.byte	'IfxDma_ChannelId_114',0,242,0,16
	.byte	'IfxDma_ChannelId_115',0,243,0,16
	.byte	'IfxDma_ChannelId_116',0,244,0,16
	.byte	'IfxDma_ChannelId_117',0,245,0,16
	.byte	'IfxDma_ChannelId_118',0,246,0,16
	.byte	'IfxDma_ChannelId_119',0,247,0,16
	.byte	'IfxDma_ChannelId_120',0,248,0,16
	.byte	'IfxDma_ChannelId_121',0,249,0,16
	.byte	'IfxDma_ChannelId_122',0,250,0,16
	.byte	'IfxDma_ChannelId_123',0,251,0,16
	.byte	'IfxDma_ChannelId_124',0,252,0,16
	.byte	'IfxDma_ChannelId_125',0,253,0,16
	.byte	'IfxDma_ChannelId_126',0,254,0,16
	.byte	'IfxDma_ChannelId_127',0,255,0,0
.L215:
	.byte	8
	.byte	'IfxDma_isChannelTransactionPending',0,3,15,159,12,20
	.word	607
	.byte	1,1
.L217:
	.byte	5
	.byte	'dma',0,15,159,12,64
	.word	22178
.L219:
	.byte	5
	.byte	'channelId',0,15,159,12,86
	.word	22183
.L221:
	.byte	6,0
.L203:
	.byte	4
	.byte	'IfxDma_startChannelTransaction',0,3,15,158,13,17,1,1
.L205:
	.byte	5
	.byte	'dma',0,15,158,13,57
	.word	22178
.L207:
	.byte	5
	.byte	'channelId',0,15,158,13,79
	.word	22183
.L209:
	.byte	6,0
.L154:
	.byte	4
	.byte	'IfxDma_setChannelDestinationAddress',0,3,15,189,12,17,1,1
.L156:
	.byte	5
	.byte	'dma',0,15,189,12,62
	.word	22178
.L158:
	.byte	5
	.byte	'channelId',0,15,189,12,84
	.word	22183
.L160:
	.byte	5
	.byte	'address',0,15,189,12,101
	.word	346
.L162:
	.byte	6,0
.L133:
	.byte	15,15,133,1,9,1,16
	.byte	'IfxDma_ChannelIncrementStep_1',0,0,16
	.byte	'IfxDma_ChannelIncrementStep_2',0,1,16
	.byte	'IfxDma_ChannelIncrementStep_4',0,2,16
	.byte	'IfxDma_ChannelIncrementStep_8',0,3,16
	.byte	'IfxDma_ChannelIncrementStep_16',0,4,16
	.byte	'IfxDma_ChannelIncrementStep_32',0,5,16
	.byte	'IfxDma_ChannelIncrementStep_64',0,6,16
	.byte	'IfxDma_ChannelIncrementStep_128',0,7,0,15,15,124,9,1,16
	.byte	'IfxDma_ChannelIncrementDirection_negative',0,0,16
	.byte	'IfxDma_ChannelIncrementDirection_positive',0,1,0,15,15,101,9,1,16
	.byte	'IfxDma_ChannelIncrementCircular_none',0,0,16
	.byte	'IfxDma_ChannelIncrementCircular_2',0,1,16
	.byte	'IfxDma_ChannelIncrementCircular_4',0,2,16
	.byte	'IfxDma_ChannelIncrementCircular_8',0,3,16
	.byte	'IfxDma_ChannelIncrementCircular_16',0,4,16
	.byte	'IfxDma_ChannelIncrementCircular_32',0,5,16
	.byte	'IfxDma_ChannelIncrementCircular_64',0,6,16
	.byte	'IfxDma_ChannelIncrementCircular_128',0,7,16
	.byte	'IfxDma_ChannelIncrementCircular_256',0,8,16
	.byte	'IfxDma_ChannelIncrementCircular_512',0,9,16
	.byte	'IfxDma_ChannelIncrementCircular_1024',0,10,16
	.byte	'IfxDma_ChannelIncrementCircular_2048',0,11,16
	.byte	'IfxDma_ChannelIncrementCircular_4096',0,12,16
	.byte	'IfxDma_ChannelIncrementCircular_8192',0,13,16
	.byte	'IfxDma_ChannelIncrementCircular_16384',0,14,16
	.byte	'IfxDma_ChannelIncrementCircular_32768',0,15,0
.L183:
	.byte	4
	.byte	'IfxDma_setChannelDestinationIncrementStep',0,3,15,195,12,17,1,1
.L186:
	.byte	5
	.byte	'dma',0,15,195,12,68
	.word	22178
.L188:
	.byte	5
	.byte	'channelId',0,15,195,12,90
	.word	22183
.L190:
	.byte	5
	.byte	'incStep',0,15,195,12,129,1
	.word	25360
.L192:
	.byte	5
	.byte	'direction',0,15,195,12,171,1
	.word	25628
.L194:
	.byte	5
	.byte	'size',0,15,195,12,214,1
	.word	25722
.L196:
	.byte	6,0
.L135:
	.byte	15,15,172,1,9,1,16
	.byte	'IfxDma_ChannelMoveSize_8bit',0,0,16
	.byte	'IfxDma_ChannelMoveSize_16bit',0,1,16
	.byte	'IfxDma_ChannelMoveSize_32bit',0,2,16
	.byte	'IfxDma_ChannelMoveSize_64bit',0,3,16
	.byte	'IfxDma_ChannelMoveSize_128bit',0,4,16
	.byte	'IfxDma_ChannelMoveSize_256bit',0,5,0
.L173:
	.byte	4
	.byte	'IfxDma_setChannelMoveSize',0,3,15,218,12,17,1,1
.L176:
	.byte	5
	.byte	'dma',0,15,218,12,52
	.word	22178
.L178:
	.byte	5
	.byte	'channelId',0,15,218,12,74
	.word	22183
.L180:
	.byte	5
	.byte	'moveSize',0,15,218,12,108
	.word	26473
.L182:
	.byte	6,0,20
	.word	340
	.byte	3
	.word	26753
.L145:
	.byte	4
	.byte	'IfxDma_setChannelSourceAddress',0,3,15,248,12,17,1,1
.L147:
	.byte	5
	.byte	'dma',0,15,248,12,57
	.word	22178
.L149:
	.byte	5
	.byte	'channelId',0,15,248,12,79
	.word	22183
.L151:
	.byte	5
	.byte	'address',0,15,248,12,102
	.word	26758
.L153:
	.byte	6,0
.L163:
	.byte	4
	.byte	'IfxDma_setChannelTransferCount',0,3,15,143,13,17,1,1
.L166:
	.byte	5
	.byte	'dma',0,15,143,13,57
	.word	22178
.L168:
	.byte	5
	.byte	'channelId',0,15,143,13,79
	.word	22183
.L170:
	.byte	5
	.byte	'transferCount',0,15,143,13,97
	.word	5556
.L172:
	.byte	6,0,4
	.byte	'IfxDma_clearChannelInterrupt',0,3,15,252,9,17,1,1,5
	.byte	'dma',0,15,252,9,55
	.word	22178
	.byte	5
	.byte	'channelId',0,15,252,9,77
	.word	22183
	.byte	6,0,8
	.byte	'IfxDma_getAndClearChannelInterrupt',0,3,15,237,10,20
	.word	607
	.byte	1,1,5
	.byte	'dma',0,15,237,10,64
	.word	22178
	.byte	5
	.byte	'channelId',0,15,237,10,86
	.word	22183
	.byte	6,0,8
	.byte	'IfxDma_getChannelInterrupt',0,3,15,181,11,20
	.word	607
	.byte	1,1,5
	.byte	'dma',0,15,181,11,56
	.word	22178
	.byte	5
	.byte	'channelId',0,15,181,11,78
	.word	22183
	.byte	6,0,8
	.byte	'IfxDma_getSrcPointer',0,3,15,133,12,35
	.word	1955
	.byte	1,1,5
	.byte	'dma',0,15,133,12,65
	.word	22178
	.byte	5
	.byte	'channelId',0,15,133,12,87
	.word	22183
	.byte	6,0,14
	.word	21513
	.byte	3
	.word	27241
	.byte	21,18,215,3,9,12,13
	.byte	'dma',0
	.word	22178
	.byte	4,2,35,0,13
	.byte	'channelId',0
	.word	22183
	.byte	1,2,35,4,13
	.byte	'channel',0
	.word	27246
	.byte	4,2,35,8,0,3
	.word	27251
.L210:
	.byte	8
	.byte	'IfxDma_Dma_isChannelTransactionPending',0,3,18,229,5,20
	.word	607
	.byte	1,1
.L212:
	.byte	5
	.byte	'channel',0,18,229,5,79
	.word	27307
.L214:
	.byte	17,6,0,0
.L199:
	.byte	4
	.byte	'IfxDma_Dma_startChannelTransaction',0,3,18,253,5,17,1,1
.L200:
	.byte	5
	.byte	'channel',0,18,253,5,72
	.word	27307
.L202:
	.byte	17,6,0,0,20
	.word	448
	.byte	22
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,23
	.word	27448
	.byte	0,14
	.word	432
	.byte	3
	.word	432
	.byte	24
	.byte	'__cmpswapw',0
	.word	27490
	.byte	1,1,1,1,25
	.byte	'p',0
	.word	27495
	.byte	25
	.byte	'value',0
	.word	432
	.byte	25
	.byte	'compare',0
	.word	432
	.byte	0,24
	.byte	'__minu',0
	.word	432
	.byte	1,1,1,1,23
	.word	432
	.byte	23
	.word	432
	.byte	0,14
	.word	448
	.byte	24
	.byte	'__mfcr',0
	.word	27579
	.byte	1,1,1,1,23
	.word	448
	.byte	0,26
	.word	176
	.byte	27
	.word	202
	.byte	6,0,26
	.word	237
	.byte	27
	.word	269
	.byte	6,0,26
	.word	282
	.byte	6,0,26
	.word	351
	.byte	27
	.word	370
	.byte	6,0,26
	.word	386
	.byte	27
	.word	401
	.byte	27
	.word	415
	.byte	6,0,26
	.word	1216
	.byte	27
	.word	1256
	.byte	27
	.word	1274
	.byte	6,0,26
	.word	1294
	.byte	27
	.word	1337
	.byte	6,0,26
	.word	1357
	.byte	27
	.word	1395
	.byte	27
	.word	1413
	.byte	6,0,26
	.word	1433
	.byte	27
	.word	1474
	.byte	6,0,28
	.byte	'IfxScuWdt_clearCpuEndinit',0,3,237,1,17,1,1,1,1,5
	.byte	'password',0,3,237,1,50
	.word	624
	.byte	0,28
	.byte	'IfxScuWdt_setCpuEndinit',0,3,157,2,17,1,1,1,1,5
	.byte	'password',0,3,157,2,48
	.word	624
	.byte	0,26
	.word	1494
	.byte	27
	.word	1545
	.byte	6,0,26
	.word	1565
	.byte	6,0,29
	.byte	'IfxScuWdt_getCpuWatchdogPassword',0,3,215,3,19
	.word	624
	.byte	1,1,1,1,26
	.word	1960
	.byte	27
	.word	1988
	.byte	6,0,26
	.word	2003
	.byte	27
	.word	2025
	.byte	6,0,26
	.word	2171
	.byte	27
	.word	2191
	.byte	27
	.word	2204
	.byte	27
	.word	2226
	.byte	17,30
	.word	1960
	.byte	27
	.word	1988
	.byte	31
	.word	2001
	.byte	0,6,0,0,26
	.word	5144
	.byte	27
	.word	5172
	.byte	6,0,28
	.byte	'IfxFce_resetModule',0,8,124,17,1,1,1,1,5
	.byte	'fce',0,8,124,45
	.word	5139
	.byte	0,26
	.word	5187
	.byte	27
	.word	5220
	.byte	6,0,26
	.word	5417
	.byte	27
	.word	5451
	.byte	27
	.word	5464
	.byte	6,0,26
	.word	5483
	.byte	27
	.word	5524
	.byte	27
	.word	5537
	.byte	6,0,26
	.word	5577
	.byte	27
	.word	5612
	.byte	27
	.word	5625
	.byte	27
	.word	5642
	.byte	6,0,26
	.word	5663
	.byte	27
	.word	5695
	.byte	27
	.word	5708
	.byte	27
	.word	5725
	.byte	6,0,26
	.word	5750
	.byte	27
	.word	5780
	.byte	27
	.word	5793
	.byte	27
	.word	5810
	.byte	6,0,26
	.word	13429
	.byte	27
	.word	13457
	.byte	27
	.word	13471
	.byte	27
	.word	13489
	.byte	6,0,26
	.word	13507
	.byte	27
	.word	13530
	.byte	17,30
	.word	13551
	.byte	31
	.word	13589
	.byte	0,6,0,0,26
	.word	13551
	.byte	6,0,26
	.word	13762
	.byte	6,0,26
	.word	13796
	.byte	6,0,26
	.word	13838
	.byte	27
	.word	13879
	.byte	6,0,26
	.word	13898
	.byte	27
	.word	13953
	.byte	6,0,26
	.word	13972
	.byte	27
	.word	14012
	.byte	27
	.word	14029
	.byte	17,6,0,0,26
	.word	25111
	.byte	27
	.word	25158
	.byte	27
	.word	25171
	.byte	6,0,26
	.word	25192
	.byte	27
	.word	25231
	.byte	27
	.word	25244
	.byte	6,0,26
	.word	25265
	.byte	27
	.word	25309
	.byte	27
	.word	25322
	.byte	27
	.word	25341
	.byte	6,0,26
	.word	26336
	.byte	27
	.word	26386
	.byte	27
	.word	26399
	.byte	27
	.word	26418
	.byte	27
	.word	26436
	.byte	27
	.word	26456
	.byte	6,0,26
	.word	26667
	.byte	27
	.word	26701
	.byte	27
	.word	26714
	.byte	27
	.word	26733
	.byte	6,0,26
	.word	26763
	.byte	27
	.word	26802
	.byte	27
	.word	26815
	.byte	27
	.word	26834
	.byte	6,0,26
	.word	26853
	.byte	27
	.word	26892
	.byte	27
	.word	26905
	.byte	27
	.word	26924
	.byte	6,0,26
	.word	26949
	.byte	27
	.word	26986
	.byte	27
	.word	26999
	.byte	6,0,26
	.word	27020
	.byte	27
	.word	27067
	.byte	27
	.word	27080
	.byte	6,0,26
	.word	27101
	.byte	27
	.word	27140
	.byte	27
	.word	27153
	.byte	6,0,26
	.word	27174
	.byte	27
	.word	27207
	.byte	27
	.word	27220
	.byte	6,0
.L237:
	.byte	21,18,204,3,9,4,13
	.byte	'dma',0
	.word	22178
	.byte	4,2,35,0,0,3
	.word	28456
	.byte	28
	.byte	'IfxDma_Dma_createModuleHandle',0,18,162,4,17,1,1,1,1,5
	.byte	'dmaHandle',0,18,162,4,59
	.word	28476
	.byte	5
	.byte	'dma',0,18,162,4,79
	.word	22178
	.byte	0,15,15,157,1,9,1,16
	.byte	'IfxDma_ChannelMove_1',0,0,16
	.byte	'IfxDma_ChannelMove_2',0,1,16
	.byte	'IfxDma_ChannelMove_4',0,2,16
	.byte	'IfxDma_ChannelMove_8',0,3,16
	.byte	'IfxDma_ChannelMove_16',0,4,16
	.byte	'IfxDma_ChannelMove_3',0,5,16
	.byte	'IfxDma_ChannelMove_5',0,6,16
	.byte	'IfxDma_ChannelMove_9',0,7,0,15,15,218,1,9,1,16
	.byte	'IfxDma_ChannelRequestMode_oneTransferPerRequest',0,0,16
	.byte	'IfxDma_ChannelRequestMode_completeTransactionPerRequest',0,1,0,15,15,185,1,9,1,16
	.byte	'IfxDma_ChannelOperationMode_single',0,0,16
	.byte	'IfxDma_ChannelOperationMode_continuous',0,1,0,15,15,194,1,9,1,16
	.byte	'IfxDma_ChannelPattern_0_disable',0,0,16
	.byte	'IfxDma_ChannelPattern_0_mode1',0,1,16
	.byte	'IfxDma_ChannelPattern_0_mode2',0,2,16
	.byte	'IfxDma_ChannelPattern_0_mode3',0,3,16
	.byte	'IfxDma_ChannelPattern_1_disable',0,4,16
	.byte	'IfxDma_ChannelPattern_1_mode1',0,5,16
	.byte	'IfxDma_ChannelPattern_1_mode2',0,6,16
	.byte	'IfxDma_ChannelPattern_1_mode3',0,7,0,15,15,227,1,9,1,16
	.byte	'IfxDma_ChannelRequestSource_peripheral',0,0,16
	.byte	'IfxDma_ChannelRequestSource_daisyChain',0,1,0,15,15,91,9,1,16
	.byte	'IfxDma_ChannelBusPriority_low',0,0,16
	.byte	'IfxDma_ChannelBusPriority_medium',0,1,16
	.byte	'IfxDma_ChannelBusPriority_high',0,2,0,15,15,236,1,9,1,16
	.byte	'IfxDma_ChannelShadow_none',0,0,16
	.byte	'IfxDma_ChannelShadow_src',0,1,16
	.byte	'IfxDma_ChannelShadow_dst',0,2,16
	.byte	'IfxDma_ChannelShadow_srcDirectWrite',0,5,16
	.byte	'IfxDma_ChannelShadow_dstDirectWrite',0,6,16
	.byte	'IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch',0,8,16
	.byte	'IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch',0,9,16
	.byte	'IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch',0,10,16
	.byte	'IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch',0,11,16
	.byte	'IfxDma_ChannelShadow_linkedList',0,12,16
	.byte	'IfxDma_ChannelShadow_accumulatedLinkedList',0,13,16
	.byte	'IfxDma_ChannelShadow_safeLinkedList',0,14,16
	.byte	'IfxDma_ChannelShadow_conditionalLinkedList',0,15,0,15,15,148,1,9,1,16
	.byte	'IfxDma_ChannelInterruptControl_thresholdLimitMatch',0,0,16
	.byte	'IfxDma_ChannelInterruptControl_transferCountDecremented',0,1,0
.L240:
	.byte	21,18,224,3,9,56,13
	.byte	'module',0
	.word	28476
	.byte	4,2,35,0,13
	.byte	'channelId',0
	.word	22183
	.byte	1,2,35,4,13
	.byte	'sourceAddress',0
	.word	5556
	.byte	4,2,35,6,13
	.byte	'destinationAddress',0
	.word	5556
	.byte	4,2,35,10,13
	.byte	'shadowAddress',0
	.word	5556
	.byte	4,2,35,14,13
	.byte	'readDataCrc',0
	.word	5556
	.byte	4,2,35,18,13
	.byte	'sourceDestinationAddressCrc',0
	.word	5556
	.byte	4,2,35,22,13
	.byte	'transferCount',0
	.word	624
	.byte	2,2,35,26,13
	.byte	'blockMode',0
	.word	28553
	.byte	1,2,35,28,13
	.byte	'requestMode',0
	.word	28745
	.byte	1,2,35,29,13
	.byte	'operationMode',0
	.word	28860
	.byte	1,2,35,30,13
	.byte	'moveSize',0
	.word	26473
	.byte	1,2,35,31,13
	.byte	'pattern',0
	.word	28945
	.byte	1,2,35,32,13
	.byte	'requestSource',0
	.word	29212
	.byte	1,2,35,33,13
	.byte	'busPriority',0
	.word	29301
	.byte	1,2,35,34,13
	.byte	'hardwareRequestEnabled',0
	.word	607
	.byte	1,2,35,35,13
	.byte	'sourceAddressIncrementStep',0
	.word	25360
	.byte	1,2,35,36,13
	.byte	'sourceAddressIncrementDirection',0
	.word	25628
	.byte	1,2,35,37,13
	.byte	'sourceAddressCircularRange',0
	.word	25722
	.byte	1,2,35,38,13
	.byte	'destinationAddressIncrementStep',0
	.word	25360
	.byte	1,2,35,39,13
	.byte	'destinationAddressIncrementDirection',0
	.word	25628
	.byte	1,2,35,40,13
	.byte	'destinationAddressCircularRange',0
	.word	25722
	.byte	1,2,35,41,13
	.byte	'shadowControl',0
	.word	29407
	.byte	1,2,35,42,13
	.byte	'sourceCircularBufferEnabled',0
	.word	607
	.byte	1,2,35,43,13
	.byte	'destinationCircularBufferEnabled',0
	.word	607
	.byte	1,2,35,44,13
	.byte	'timestampEnabled',0
	.word	607
	.byte	1,2,35,45,13
	.byte	'wrapSourceInterruptEnabled',0
	.word	607
	.byte	1,2,35,46,13
	.byte	'wrapDestinationInterruptEnabled',0
	.word	607
	.byte	1,2,35,47,13
	.byte	'channelInterruptEnabled',0
	.word	607
	.byte	1,2,35,48,13
	.byte	'channelInterruptControl',0
	.word	29960
	.byte	1,2,35,49,13
	.byte	'interruptRaiseThreshold',0
	.word	607
	.byte	1,2,35,50,13
	.byte	'transactionRequestLostInterruptEnabled',0
	.word	607
	.byte	1,2,35,51,13
	.byte	'channelInterruptPriority',0
	.word	624
	.byte	2,2,35,52,13
	.byte	'channelInterruptTypeOfService',0
	.word	2040
	.byte	1,2,35,54,0,20
	.word	30078
	.byte	3
	.word	31115
	.byte	28
	.byte	'IfxDma_Dma_initChannel',0,18,208,4,17,1,1,1,1,5
	.byte	'channel',0,18,208,4,60
	.word	27307
	.byte	5
	.byte	'config',0,18,208,4,101
	.word	31120
	.byte	0,3
	.word	30078
	.byte	28
	.byte	'IfxDma_Dma_initChannelConfig',0,18,218,4,17,1,1,1,1,5
	.byte	'config',0,18,218,4,72
	.word	31191
	.byte	5
	.byte	'dma',0,18,218,4,92
	.word	28476
	.byte	0,26
	.word	27312
	.byte	27
	.word	27363
	.byte	17,30
	.word	25111
	.byte	27
	.word	25158
	.byte	27
	.word	25171
	.byte	31
	.word	25190
	.byte	0,6,0,0,26
	.word	27384
	.byte	27
	.word	27427
	.byte	17,30
	.word	25192
	.byte	27
	.word	25231
	.byte	27
	.word	25244
	.byte	31
	.word	25263
	.byte	0,6,0,0,15,8,89,9,1,16
	.byte	'IfxFce_CrcKernel_0',0,0,16
	.byte	'IfxFce_CrcKernel_1',0,1,16
	.byte	'IfxFce_CrcKernel_2',0,2,16
	.byte	'IfxFce_CrcKernel_3',0,3,0,21,19,151,2,9,24,13
	.byte	'fce',0
	.word	5139
	.byte	4,2,35,0,13
	.byte	'expectedCrc',0
	.word	5556
	.byte	4,2,35,4,13
	.byte	'fceDmaChannel',0
	.word	27251
	.byte	12,2,35,8,13
	.byte	'useDma',0
	.word	607
	.byte	1,2,35,20,13
	.byte	'crcChannel',0
	.word	5235
	.byte	1,2,35,21,13
	.byte	'crcKernel',0
	.word	31334
	.byte	1,2,35,22,0
.L86:
	.byte	3
	.word	31424
	.byte	20
	.word	5556
.L88:
	.byte	3
	.word	31548
.L97:
	.byte	3
	.word	5556
	.byte	14
	.word	3760
.L128:
	.byte	3
	.word	31563
	.byte	21,19,249,1,9,4,13
	.byte	'crcMismatch',0
	.word	607
	.byte	1,2,35,0,13
	.byte	'configError',0
	.word	607
	.byte	1,2,35,1,13
	.byte	'lengthError',0
	.word	607
	.byte	1,2,35,2,13
	.byte	'busError',0
	.word	607
	.byte	1,2,35,3,0,21,19,163,2,9,24,13
	.byte	'fce',0
	.word	5139
	.byte	4,2,35,0,13
	.byte	'crcCheckCompared',0
	.word	607
	.byte	1,2,35,4,13
	.byte	'automaticLengthReload',0
	.word	607
	.byte	1,2,35,5,13
	.byte	'dataByteReflectionEnabled',0
	.word	607
	.byte	1,2,35,6,13
	.byte	'crc32BitReflectionEnabled',0
	.word	607
	.byte	1,2,35,7,13
	.byte	'swapOrderOfBytes',0
	.word	607
	.byte	1,2,35,8,13
	.byte	'expectedCrc',0
	.word	5556
	.byte	4,2,35,10,13
	.byte	'crcResultInverted',0
	.word	607
	.byte	1,2,35,14,13
	.byte	'enabledInterrupts',0
	.word	31573
	.byte	4,2,35,16,13
	.byte	'useDma',0
	.word	607
	.byte	1,2,35,20,13
	.byte	'fceChannelId',0
	.word	22183
	.byte	1,2,35,21,13
	.byte	'crcChannel',0
	.word	5235
	.byte	1,2,35,22,13
	.byte	'crcKernel',0
	.word	31334
	.byte	1,2,35,23,0,20
	.word	31661
.L226:
	.byte	3
	.word	31986
.L243:
	.byte	3
	.word	31661
	.byte	21,19,135,2,9,4,13
	.byte	'fce',0
	.word	5139
	.byte	4,2,35,0,0
.L245:
	.byte	3
	.word	32001
	.byte	21,19,142,2,9,8,13
	.byte	'fce',0
	.word	5139
	.byte	4,2,35,0,13
	.byte	'isrPriority',0
	.word	624
	.byte	2,2,35,4,13
	.byte	'isrTypeOfService',0
	.word	2040
	.byte	1,2,35,6,0,20
	.word	32026
.L249:
	.byte	3
	.word	32093
.L283:
	.byte	3
	.word	32026
	.byte	7
	.byte	'short int',0,2,5,32
	.byte	'__wchar_t',0,20,1,1
	.word	32108
	.byte	32
	.byte	'__size_t',0,20,1,1
	.word	432
	.byte	32
	.byte	'__ptrdiff_t',0,20,1,1
	.word	448
	.byte	33,1,3
	.word	32176
	.byte	32
	.byte	'__codeptr',0,20,1,1
	.word	32178
	.byte	32
	.byte	'boolean',0,21,104,29
	.word	607
	.byte	32
	.byte	'uint8',0,21,108,29
	.word	607
	.byte	32
	.byte	'uint16',0,21,112,29
	.word	624
	.byte	32
	.byte	'uint32',0,21,116,29
	.word	5556
	.byte	32
	.byte	'uint64',0,21,121,29
	.word	314
	.byte	32
	.byte	'sint16',0,21,129,1,29
	.word	32108
	.byte	7
	.byte	'long int',0,4,5,32
	.byte	'sint32',0,21,134,1,29
	.word	32292
	.byte	7
	.byte	'long long int',0,8,5,32
	.byte	'sint64',0,21,141,1,29
	.word	32320
	.byte	32
	.byte	'float32',0,21,170,1,29
	.word	228
	.byte	32
	.byte	'pvoid',0,22,54,28
	.word	346
	.byte	32
	.byte	'Ifx_TickTime',0,22,76,28
	.word	32320
	.byte	32
	.byte	'Ifx_Priority',0,22,100,16
	.word	624
	.byte	15,22,127,9,1,16
	.byte	'Ifx_RxSel_a',0,0,16
	.byte	'Ifx_RxSel_b',0,1,16
	.byte	'Ifx_RxSel_c',0,2,16
	.byte	'Ifx_RxSel_d',0,3,16
	.byte	'Ifx_RxSel_e',0,4,16
	.byte	'Ifx_RxSel_f',0,5,16
	.byte	'Ifx_RxSel_g',0,6,16
	.byte	'Ifx_RxSel_h',0,7,0,32
	.byte	'Ifx_RxSel',0,22,137,1,3
	.word	32426
	.byte	15,23,162,11,9,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,16
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,32
	.byte	'IfxScu_WDTCON1_IR',0,23,167,11,3
	.word	32563
	.byte	32
	.byte	'Ifx_UReg_8Bit',0,24,96,24
	.word	607
	.byte	32
	.byte	'Ifx_UReg_32Bit',0,24,98,24
	.word	432
	.byte	32
	.byte	'Ifx_SReg_32Bit',0,24,101,24
	.word	448
	.byte	10
	.byte	'_Ifx_SCU_ACCEN00_Bits',0,4,68,16,4,11
	.byte	'EN0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_ACCEN00_Bits',0,4,102,3
	.word	32753
	.byte	10
	.byte	'_Ifx_SCU_ACCEN01_Bits',0,4,105,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN01_Bits',0,4,108,3
	.word	33312
	.byte	10
	.byte	'_Ifx_SCU_ACCEN10_Bits',0,4,111,16,4,11
	.byte	'EN0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_ACCEN10_Bits',0,4,145,1,3
	.word	33391
	.byte	10
	.byte	'_Ifx_SCU_ACCEN11_Bits',0,4,148,1,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN11_Bits',0,4,151,1,3
	.word	33951
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,4,154,1,16,4,11
	.byte	'STM0DIS',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'STM3DIS',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'STM4DIS',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'STM5DIS',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	607
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,4,164,1,3
	.word	34032
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,4,167,1,16,4,11
	.byte	'STMDIV',0,1
	.word	607
	.byte	4,4,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	607
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	607
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	607
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	607
	.byte	4,4,2,35,2,11
	.byte	'BBBDIV',0,1
	.word	607
	.byte	4,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	607
	.byte	2,6,2,35,3,11
	.byte	'FSI2DIV',0,1
	.word	607
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	607
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON0_Bits',0,4,181,1,3
	.word	34249
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,4,184,1,16,4,11
	.byte	'MCANDIV',0,1
	.word	607
	.byte	4,4,2,35,0,11
	.byte	'CLKSELMCAN',0,1
	.word	607
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'PLL1DIVDIS',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'I2CDIV',0,1
	.word	607
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	607
	.byte	4,0,2,35,1,11
	.byte	'MSCDIV',0,1
	.word	607
	.byte	4,4,2,35,2,11
	.byte	'CLKSELMSC',0,1
	.word	607
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	607
	.byte	2,0,2,35,2,11
	.byte	'QSPIDIV',0,1
	.word	607
	.byte	4,4,2,35,3,11
	.byte	'CLKSELQSPI',0,1
	.word	607
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON1_Bits',0,4,199,1,3
	.word	34522
	.byte	10
	.byte	'_Ifx_SCU_CCUCON10_Bits',0,4,202,1,16,4,11
	.byte	'CPU4DIV',0,1
	.word	607
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON10_Bits',0,4,206,1,3
	.word	34848
	.byte	10
	.byte	'_Ifx_SCU_CCUCON11_Bits',0,4,209,1,16,4,11
	.byte	'CPU5DIV',0,1
	.word	607
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON11_Bits',0,4,213,1,3
	.word	34950
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,4,216,1,16,4,11
	.byte	'ASCLINFDIV',0,1
	.word	607
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	607
	.byte	4,0,2,35,0,11
	.byte	'ASCLINSDIV',0,1
	.word	607
	.byte	4,4,2,35,1,11
	.byte	'CLKSELASCLINS',0,1
	.word	607
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	432
	.byte	10,8,2,35,0,11
	.byte	'EBUPERON',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'ERAYPERON',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'HSPDMPERON',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	607
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON2_Bits',0,4,228,1,3
	.word	35052
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,4,231,1,16,4,11
	.byte	'PLL0MONEN',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'PLL1MONEN',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'PLL2MONEN',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'SPBMONEN',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'BACKMONEN',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	607
	.byte	3,0,2,35,0,11
	.byte	'PLL0MONTST',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'PLL1MONTST',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'PLL2MONTST',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'SPBMONTST',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'BACKMONTST',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	432
	.byte	11,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	607
	.byte	6,2,2,35,3,11
	.byte	'UP',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON3_Bits',0,4,248,1,3
	.word	35326
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,4,251,1,16,4,11
	.byte	'LOTHR',0,2
	.word	624
	.byte	12,4,2,35,0,11
	.byte	'UPTHR',0,4
	.word	432
	.byte	12,8,2,35,0,11
	.byte	'MONEN',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'MONTST',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	607
	.byte	4,2,2,35,3,11
	.byte	'UP',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON4_Bits',0,4,132,2,3
	.word	35695
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,4,135,2,16,4,11
	.byte	'GETHDIV',0,1
	.word	607
	.byte	4,4,2,35,0,11
	.byte	'MCANHDIV',0,1
	.word	607
	.byte	4,0,2,35,0,11
	.byte	'ADASDIV',0,1
	.word	607
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	432
	.byte	18,2,2,35,0,11
	.byte	'UP',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON5_Bits',0,4,143,2,3
	.word	35875
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,4,146,2,16,4,11
	.byte	'CPU0DIV',0,1
	.word	607
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON6_Bits',0,4,150,2,3
	.word	36044
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,4,153,2,16,4,11
	.byte	'CPU1DIV',0,1
	.word	607
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON7_Bits',0,4,157,2,3
	.word	36144
	.byte	10
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,4,160,2,16,4,11
	.byte	'CPU2DIV',0,1
	.word	607
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON8_Bits',0,4,164,2,3
	.word	36244
	.byte	10
	.byte	'_Ifx_SCU_CCUCON9_Bits',0,4,167,2,16,4,11
	.byte	'CPU3DIV',0,1
	.word	607
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON9_Bits',0,4,171,2,3
	.word	36344
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,4,174,2,16,4,11
	.byte	'CHREV',0,1
	.word	607
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	607
	.byte	2,0,2,35,0,11
	.byte	'CHPK',0,1
	.word	607
	.byte	4,4,2,35,1,11
	.byte	'CHID',0,1
	.word	607
	.byte	4,0,2,35,1,11
	.byte	'EEA',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	607
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	607
	.byte	4,4,2,35,3,11
	.byte	'VART',0,1
	.word	607
	.byte	3,1,2,35,3,11
	.byte	'SEC',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CHIPID_Bits',0,4,185,2,3
	.word	36444
	.byte	10
	.byte	'_Ifx_SCU_DTSCLIM_Bits',0,4,188,2,16,4,11
	.byte	'LOWER',0,2
	.word	624
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'BGPOK',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'EN',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'LLU',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	624
	.byte	12,4,2,35,2,11
	.byte	'INTEN',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'INT',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_DTSCLIM_Bits',0,4,200,2,3
	.word	36647
	.byte	10
	.byte	'_Ifx_SCU_DTSCSTAT_Bits',0,4,203,2,16,4,11
	.byte	'RESULT',0,2
	.word	624
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	432
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_SCU_DTSCSTAT_Bits',0,4,207,2,3
	.word	36879
	.byte	10
	.byte	'_Ifx_SCU_EICON0_Bits',0,4,210,2,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	455
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	455
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SCU_EICON0_Bits',0,4,216,2,3
	.word	36981
	.byte	10
	.byte	'_Ifx_SCU_EICON1_Bits',0,4,219,2,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_EICON1_Bits',0,4,228,2,3
	.word	37109
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,4,231,2,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	607
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	607
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	432
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	607
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	607
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EICR_Bits',0,4,250,2,3
	.word	37298
	.byte	10
	.byte	'_Ifx_SCU_EIFILT_Bits',0,4,253,2,16,4,11
	.byte	'FILRQ0A',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'FILRQ5A',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'FILRQ2A',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'FILRQ3A',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'FILRQ0C',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'FILRQ1C',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'FILRQ3C',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'FILRQ2C',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'FILRQ4A',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'FILRQ6A',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'FILRQ1A',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'FILRQ7A',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'FILRQ6D',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'FILRQ4D',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'FILRQ2B',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'FILRQ3B',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'FILRQ7C',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	607
	.byte	7,0,2,35,2,11
	.byte	'FILTDIV',0,1
	.word	607
	.byte	4,4,2,35,3,11
	.byte	'DEPTH',0,1
	.word	607
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_EIFILT_Bits',0,4,147,3,3
	.word	37662
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,4,150,3,16,4,11
	.byte	'INTF0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_EIFR_Bits',0,4,161,3,3
	.word	38101
	.byte	10
	.byte	'_Ifx_SCU_EISR_Bits',0,4,164,3,16,4,11
	.byte	'AE',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	624
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_EISR_Bits',0,4,174,3,3
	.word	38312
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,4,177,3,16,4,11
	.byte	'POL',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	624
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	624
	.byte	14,0,2,35,2,0,32
	.byte	'Ifx_SCU_EMSR_Bits',0,4,187,3,3
	.word	38488
	.byte	10
	.byte	'_Ifx_SCU_EMSSW_Bits',0,4,190,3,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	24,8,2,35,0,11
	.byte	'EMSFM',0,1
	.word	607
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	607
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	607
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_EMSSW_Bits',0,4,196,3,3
	.word	38682
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,4,199,3,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	624
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	432
	.byte	23,0,2,35,0,0,32
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,4,204,3,3
	.word	38817
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,4,207,3,16,4,11
	.byte	'ARI',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_ESROCFG_Bits',0,4,212,3,3
	.word	38953
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,4,215,3,16,4,11
	.byte	'EN0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	607
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	624
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	607
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	607
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	607
	.byte	8,0,2,35,3,0,32
	.byte	'Ifx_SCU_EXTCON_Bits',0,4,226,3,3
	.word	39064
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,4,229,3,16,4,11
	.byte	'STEP',0,2
	.word	624
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	607
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	607
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	624
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	607
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_FDR_Bits',0,4,237,3,3
	.word	39282
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,4,240,3,16,4,11
	.byte	'FS0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	607
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	607
	.byte	8,0,2,35,3,0,32
	.byte	'Ifx_SCU_FMR_Bits',0,4,132,4,3
	.word	39445
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,4,135,4,16,4,11
	.byte	'MODREV',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	607
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_ID_Bits',0,4,140,4,3
	.word	39781
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,4,143,4,16,4,11
	.byte	'IPEN00',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	607
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	607
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	607
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	607
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SCU_IGCR_Bits',0,4,167,4,3
	.word	39888
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,4,170,4,16,4,11
	.byte	'P0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_IN_Bits',0,4,175,4,3
	.word	40340
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,4,178,4,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	607
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	607
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	607
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_IOCR_Bits',0,4,185,4,3
	.word	40439
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,4,188,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'LBISTRES',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,4
	.word	432
	.byte	18,12,2,35,0,11
	.byte	'reserved_20',0,2
	.word	624
	.byte	8,4,2,35,2,11
	.byte	'LBISTDONE',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'LBISTERRINJ',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'LBISTREQRED',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,4,198,4,3
	.word	40589
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,4,201,4,16,4,11
	.byte	'SEED',0,4
	.word	432
	.byte	19,13,2,35,0,11
	.byte	'reserved_19',0,1
	.word	607
	.byte	5,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	607
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	607
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,4,208,4,3
	.word	40827
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,4,211,4,16,4,11
	.byte	'LENGTH',0,2
	.word	624
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	432
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,4,215,4,3
	.word	40988
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL3_Bits',0,4,218,4,16,4,11
	.byte	'SIGNATURE',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL3_Bits',0,4,221,4,3
	.word	41094
	.byte	10
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,4,224,4,16,4,11
	.byte	'LS2',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	624
	.byte	14,1,2,35,0,11
	.byte	'LSEN2',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'LS0',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	624
	.byte	14,1,2,35,2,11
	.byte	'LSEN0',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_LCLCON0_Bits',0,4,232,4,3
	.word	41180
	.byte	10
	.byte	'_Ifx_SCU_LCLCON1_Bits',0,4,235,4,16,4,11
	.byte	'LS3',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	624
	.byte	14,1,2,35,0,11
	.byte	'LSEN3',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'LS1',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	624
	.byte	14,1,2,35,2,11
	.byte	'LSEN1',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_LCLCON1_Bits',0,4,243,4,3
	.word	41348
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,4,246,4,16,4,11
	.byte	'LCLT0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'LCLT2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'LCLT3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'LCLT4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'LCLT5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	624
	.byte	10,0,2,35,0,11
	.byte	'PLCLT0',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'PLCLT1',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'PLCLT2',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'PLCLT3',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'PLCLT4',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'PLCLT5',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	624
	.byte	10,0,2,35,2,0,32
	.byte	'Ifx_SCU_LCLTEST_Bits',0,4,134,5,3
	.word	41516
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,4,137,5,16,4,11
	.byte	'DEPT',0,1
	.word	607
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	624
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_MANID_Bits',0,4,142,5,3
	.word	41830
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,4,145,5,16,4,11
	.byte	'PS0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	624
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	624
	.byte	14,0,2,35,2,0,32
	.byte	'Ifx_SCU_OMR_Bits',0,4,153,5,3
	.word	41941
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,4,156,5,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	607
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	607
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'HYSEN',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'HYSCTL',0,1
	.word	607
	.byte	2,4,2,35,1,11
	.byte	'AMPCTL',0,1
	.word	607
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	607
	.byte	2,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	607
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	607
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	607
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_OSCCON_Bits',0,4,177,5,3
	.word	42099
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,4,180,5,16,4,11
	.byte	'P0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_OUT_Bits',0,4,185,5,3
	.word	42510
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,4,188,5,16,4,11
	.byte	'CSEL0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'CSEL3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'CSEL4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'CSEL5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	624
	.byte	10,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	607
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	607
	.byte	6,0,2,35,3,0,32
	.byte	'Ifx_SCU_OVCCON_Bits',0,4,204,5,3
	.word	42611
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,4,207,5,16,4,11
	.byte	'OVEN0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'OVEN3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'OVEN4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'OVEN5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,4,216,5,3
	.word	42929
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,4,219,5,16,4,11
	.byte	'PDIS0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDISC_Bits',0,4,224,5,3
	.word	43116
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,4,227,5,16,4,11
	.byte	'PD0',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	607
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	607
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	607
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDR_Bits',0,4,234,5,3
	.word	43227
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,4,237,5,16,4,11
	.byte	'PDR0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDRR_Bits',0,4,248,5,3
	.word	43360
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON0_Bits',0,4,251,5,16,4,11
	.byte	'DIVBY',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	624
	.byte	8,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	607
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	607
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	607
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	607
	.byte	5,0,2,35,3,0,32
	.byte	'Ifx_SCU_PERPLLCON0_Bits',0,4,134,6,3
	.word	43563
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON1_Bits',0,4,137,6,16,4,11
	.byte	'K2DIV',0,1
	.word	607
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	607
	.byte	5,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	607
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLCON1_Bits',0,4,143,6,3
	.word	43803
	.byte	10
	.byte	'_Ifx_SCU_PERPLLSTAT_Bits',0,4,146,6,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'K3RDY',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	432
	.byte	25,0,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLSTAT_Bits',0,4,156,6,3
	.word	43947
	.byte	10
	.byte	'_Ifx_SCU_PMCSR0_Bits',0,4,159,6,16,4,11
	.byte	'REQSLP',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	607
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR0_Bits',0,4,165,6,3
	.word	44169
	.byte	10
	.byte	'_Ifx_SCU_PMCSR1_Bits',0,4,168,6,16,4,11
	.byte	'REQSLP',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	607
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR1_Bits',0,4,174,6,3
	.word	44305
	.byte	10
	.byte	'_Ifx_SCU_PMCSR2_Bits',0,4,177,6,16,4,11
	.byte	'REQSLP',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	607
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR2_Bits',0,4,183,6,3
	.word	44441
	.byte	10
	.byte	'_Ifx_SCU_PMCSR3_Bits',0,4,186,6,16,4,11
	.byte	'REQSLP',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	607
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR3_Bits',0,4,192,6,3
	.word	44577
	.byte	10
	.byte	'_Ifx_SCU_PMCSR4_Bits',0,4,195,6,16,4,11
	.byte	'REQSLP',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	607
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR4_Bits',0,4,201,6,3
	.word	44713
	.byte	10
	.byte	'_Ifx_SCU_PMCSR5_Bits',0,4,204,6,16,4,11
	.byte	'REQSLP',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	607
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	432
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR5_Bits',0,4,210,6,3
	.word	44849
	.byte	10
	.byte	'_Ifx_SCU_PMSTAT0_Bits',0,4,213,6,16,4,11
	.byte	'CPU0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'CPU1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'CPU2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'CPU3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'CPU4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'CPU5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	624
	.byte	10,0,2,35,0,11
	.byte	'CPU0LS',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'CPU1LS',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'CPU2LS',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'CPU3LS',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	624
	.byte	12,0,2,35,2,0,32
	.byte	'Ifx_SCU_PMSTAT0_Bits',0,4,227,6,3
	.word	44985
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,4,230,6,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	607
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	432
	.byte	11,8,2,35,0,11
	.byte	'CPUSEL',0,1
	.word	607
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	607
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,4,241,6,3
	.word	45257
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR0_Bits',0,4,244,6,16,4,11
	.byte	'LJTEN',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'LJTOVEN',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'LJTOVIEN',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'LJTSTRT',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'LJTSTP',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'LJTCLR',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	624
	.byte	6,4,2,35,0,11
	.byte	'SDSTEP',0,1
	.word	607
	.byte	4,0,2,35,1,11
	.byte	'VDTEN',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'VDTOVEN',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'VDTOVIEN',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'VDTSTRT',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'VDTSTP',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'VDTCLR',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	624
	.byte	7,3,2,35,2,11
	.byte	'LPSLPEN',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	607
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMTRCSR0_Bits',0,4,135,7,3
	.word	45502
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR1_Bits',0,4,138,7,16,4,11
	.byte	'LJTCV',0,2
	.word	624
	.byte	16,0,2,35,0,11
	.byte	'VDTCV',0,2
	.word	624
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	607
	.byte	6,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMTRCSR1_Bits',0,4,143,7,3
	.word	45890
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR2_Bits',0,4,146,7,16,4,11
	.byte	'LDJMPREQ',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	2,4,2,35,0,11
	.byte	'LJTRUN',0,1
	.word	607
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	607
	.byte	2,0,2,35,0,11
	.byte	'LJTOV',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	607
	.byte	3,4,2,35,1,11
	.byte	'LJTOVCLR',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	607
	.byte	3,0,2,35,1,11
	.byte	'LJTCNT',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_PMTRCSR2_Bits',0,4,157,7,3
	.word	46008
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR3_Bits',0,4,160,7,16,4,11
	.byte	'VDROOPREQ',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	2,4,2,35,0,11
	.byte	'VDTRUN',0,1
	.word	607
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	607
	.byte	2,0,2,35,0,11
	.byte	'VDTOV',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	607
	.byte	3,4,2,35,1,11
	.byte	'VDTOVCLR',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	607
	.byte	3,0,2,35,1,11
	.byte	'VDTCNT',0,2
	.word	624
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	607
	.byte	6,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMTRCSR3_Bits',0,4,172,7,3
	.word	46251
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,4,175,7,16,4,11
	.byte	'ESR0',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	607
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	607
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	607
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	607
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	607
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	607
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	607
	.byte	2,0,2,35,1,11
	.byte	'STM3',0,1
	.word	607
	.byte	2,6,2,35,2,11
	.byte	'STM4',0,1
	.word	607
	.byte	2,4,2,35,2,11
	.byte	'STM5',0,1
	.word	607
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	624
	.byte	10,0,2,35,2,0,32
	.byte	'Ifx_SCU_RSTCON_Bits',0,4,189,7,3
	.word	46518
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,4,192,7,16,4,11
	.byte	'FRTO',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'CSSX',0,2
	.word	624
	.byte	6,3,2,35,0,11
	.byte	'reserved_13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_RSTCON2_Bits',0,4,206,7,3
	.word	46777
	.byte	10
	.byte	'_Ifx_SCU_RSTCON3_Bits',0,4,209,7,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON3_Bits',0,4,212,7,3
	.word	47082
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,4,215,7,16,4,11
	.byte	'ESR0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'STM3',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'STM4',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'STM5',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	607
	.byte	5,0,2,35,1,11
	.byte	'PORST',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'EVRC',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'HSMS',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'HSMA',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'LBPORST',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'LBTERM',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,4,245,7,3
	.word	47163
	.byte	10
	.byte	'_Ifx_SCU_SEICON0_Bits',0,4,248,7,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	455
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	455
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON0_Bits',0,4,254,7,3
	.word	47712
	.byte	10
	.byte	'_Ifx_SCU_SEICON1_Bits',0,4,129,8,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	432
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON1_Bits',0,4,138,8,3
	.word	47842
	.byte	10
	.byte	'_Ifx_SCU_SEISR_Bits',0,4,141,8,16,4,11
	.byte	'AE',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	624
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SEISR_Bits',0,4,151,8,3
	.word	48033
	.byte	10
	.byte	'_Ifx_SCU_STCON_Bits',0,4,154,8,16,4,11
	.byte	'reserved_0',0,2
	.word	624
	.byte	13,3,2,35,0,11
	.byte	'SFCBAE',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'CFCBAE',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'STP',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_STCON_Bits',0,4,161,8,3
	.word	48211
	.byte	10
	.byte	'_Ifx_SCU_STMEM1_Bits',0,4,164,8,16,4,11
	.byte	'MEM',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM1_Bits',0,4,167,8,3
	.word	48362
	.byte	10
	.byte	'_Ifx_SCU_STMEM2_Bits',0,4,170,8,16,4,11
	.byte	'MEM',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM2_Bits',0,4,173,8,3
	.word	48434
	.byte	10
	.byte	'_Ifx_SCU_STMEM3_Bits',0,4,176,8,16,4,11
	.byte	'MEM',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM3_Bits',0,4,179,8,3
	.word	48506
	.byte	10
	.byte	'_Ifx_SCU_STMEM4_Bits',0,4,182,8,16,4,11
	.byte	'MEM',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM4_Bits',0,4,185,8,3
	.word	48578
	.byte	10
	.byte	'_Ifx_SCU_STMEM5_Bits',0,4,188,8,16,4,11
	.byte	'MEM',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM5_Bits',0,4,191,8,3
	.word	48650
	.byte	10
	.byte	'_Ifx_SCU_STMEM6_Bits',0,4,194,8,16,4,11
	.byte	'MEM',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM6_Bits',0,4,197,8,3
	.word	48722
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,4,200,8,16,4,11
	.byte	'HWCFG',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	607
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	607
	.byte	3,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	607
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_STSTAT_Bits',0,4,216,8,3
	.word	48794
	.byte	10
	.byte	'_Ifx_SCU_SWAPCTRL_Bits',0,4,219,8,16,4,11
	.byte	'ADDRCFG',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'SPARE',0,2
	.word	624
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SWAPCTRL_Bits',0,4,224,8,3
	.word	49123
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,4,227,8,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	6,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	607
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,4,234,8,3
	.word	49243
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,4,237,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	607
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'DDC',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	607
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SYSCON_Bits',0,4,249,8,3
	.word	49413
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON0_Bits',0,4,252,8,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	624
	.byte	6,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	607
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	607
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	607
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	607
	.byte	3,2,2,35,3,11
	.byte	'INSEL',0,1
	.word	607
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SCU_SYSPLLCON0_Bits',0,4,137,9,3
	.word	49676
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON1_Bits',0,4,140,9,16,4,11
	.byte	'K2DIV',0,1
	.word	607
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	432
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON1_Bits',0,4,144,9,3
	.word	49955
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON2_Bits',0,4,147,9,16,4,11
	.byte	'MODCFG',0,2
	.word	624
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SYSPLLCON2_Bits',0,4,151,9,3
	.word	50059
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLSTAT_Bits',0,4,154,9,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	607
	.byte	2,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	432
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLSTAT_Bits',0,4,164,9,3
	.word	50165
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,4,167,9,16,4,11
	.byte	'ESR0T',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,4,174,9,3
	.word	50388
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS0_Bits',0,4,177,9,16,4,11
	.byte	'CPU0ESR0T',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'CPU0ESR1T',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'CPU0TRAP2T',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'CPU0SMUT',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	607
	.byte	4,0,2,35,0,11
	.byte	'CPU1ESR0T',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'CPU1ESR1T',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'CPU1TRAP2T',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'CPU1SMUT',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	607
	.byte	4,0,2,35,1,11
	.byte	'CPU2ESR0T',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'CPU2ESR1T',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'CPU2TRAP2T',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'CPU2SMUT',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	607
	.byte	4,0,2,35,2,11
	.byte	'CPU3ESR0T',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'CPU3ESR1T',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'CPU3TRAP2T',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'CPU3SMUT',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	607
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_TRAPDIS0_Bits',0,4,199,9,3
	.word	50536
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS1_Bits',0,4,202,9,16,4,11
	.byte	'CPU4ESR0T',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'CPU4ESR1T',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'CPU4TRAP2T',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'CPU4SMUT',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	607
	.byte	4,0,2,35,0,11
	.byte	'CPU5ESR0T',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'CPU5ESR1T',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'CPU5TRAP2T',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'CPU5SMUT',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	607
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_TRAPDIS1_Bits',0,4,215,9,3
	.word	51024
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,4,218,9,16,4,11
	.byte	'ESR0T',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSET_Bits',0,4,225,9,3
	.word	51321
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,4,228,9,16,4,11
	.byte	'ESR0T',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,4,235,9,3
	.word	51469
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,4,244,9,3
	.word	471
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,4,132,10,3
	.word	646
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,4,148,10,3
	.word	912
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,4,151,10,16,4,11
	.byte	'ENDINIT',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	455
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	455
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,4,157,10,3
	.word	51719
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,4,160,10,16,4,11
	.byte	'CLRIRF',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	607
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,4,173,10,3
	.word	51845
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,4,176,10,16,4,11
	.byte	'AE',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	607
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,4,189,10,3
	.word	52097
	.byte	12,4,197,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32753
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN00',0,4,202,10,3
	.word	52316
	.byte	12,4,205,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33312
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN01',0,4,210,10,3
	.word	52381
	.byte	12,4,213,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33391
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN10',0,4,218,10,3
	.word	52446
	.byte	12,4,221,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33951
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN11',0,4,226,10,3
	.word	52511
	.byte	12,4,229,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34032
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ARSTDIS',0,4,234,10,3
	.word	52576
	.byte	12,4,237,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34249
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON0',0,4,242,10,3
	.word	52641
	.byte	12,4,245,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34522
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON1',0,4,250,10,3
	.word	52706
	.byte	12,4,253,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34848
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON10',0,4,130,11,3
	.word	52771
	.byte	12,4,133,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34950
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON11',0,4,138,11,3
	.word	52837
	.byte	12,4,141,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35052
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON2',0,4,146,11,3
	.word	52903
	.byte	12,4,149,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35326
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON3',0,4,154,11,3
	.word	52968
	.byte	12,4,157,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35695
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON4',0,4,162,11,3
	.word	53033
	.byte	12,4,165,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35875
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON5',0,4,170,11,3
	.word	53098
	.byte	12,4,173,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36044
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON6',0,4,178,11,3
	.word	53163
	.byte	12,4,181,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36144
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON7',0,4,186,11,3
	.word	53228
	.byte	12,4,189,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36244
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON8',0,4,194,11,3
	.word	53293
	.byte	12,4,197,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36344
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON9',0,4,202,11,3
	.word	53358
	.byte	12,4,205,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36444
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CHIPID',0,4,210,11,3
	.word	53423
	.byte	12,4,213,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36647
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_DTSCLIM',0,4,218,11,3
	.word	53487
	.byte	12,4,221,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36879
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_DTSCSTAT',0,4,226,11,3
	.word	53552
	.byte	12,4,229,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36981
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EICON0',0,4,234,11,3
	.word	53618
	.byte	12,4,237,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37109
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EICON1',0,4,242,11,3
	.word	53682
	.byte	12,4,245,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37298
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EICR',0,4,250,11,3
	.word	53746
	.byte	12,4,253,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37662
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EIFILT',0,4,130,12,3
	.word	53808
	.byte	12,4,133,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38101
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EIFR',0,4,138,12,3
	.word	53872
	.byte	12,4,141,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38312
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EISR',0,4,146,12,3
	.word	53934
	.byte	12,4,149,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38488
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EMSR',0,4,154,12,3
	.word	53996
	.byte	12,4,157,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38682
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EMSSW',0,4,162,12,3
	.word	54058
	.byte	12,4,165,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38817
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX',0,4,170,12,3
	.word	54121
	.byte	12,4,173,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38953
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ESROCFG',0,4,178,12,3
	.word	54194
	.byte	12,4,181,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39064
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EXTCON',0,4,186,12,3
	.word	54259
	.byte	12,4,189,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39282
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_FDR',0,4,194,12,3
	.word	54323
	.byte	12,4,197,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39445
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_FMR',0,4,202,12,3
	.word	54384
	.byte	12,4,205,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39781
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ID',0,4,210,12,3
	.word	54445
	.byte	12,4,213,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39888
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IGCR',0,4,218,12,3
	.word	54505
	.byte	12,4,221,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40340
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IN',0,4,226,12,3
	.word	54567
	.byte	12,4,229,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40439
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IOCR',0,4,234,12,3
	.word	54627
	.byte	12,4,237,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40589
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL0',0,4,242,12,3
	.word	54689
	.byte	12,4,245,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40827
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL1',0,4,250,12,3
	.word	54757
	.byte	12,4,253,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40988
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL2',0,4,130,13,3
	.word	54825
	.byte	12,4,133,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41094
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL3',0,4,138,13,3
	.word	54893
	.byte	12,4,141,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41180
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LCLCON0',0,4,146,13,3
	.word	54961
	.byte	12,4,149,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41348
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LCLCON1',0,4,154,13,3
	.word	55026
	.byte	12,4,157,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41516
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LCLTEST',0,4,162,13,3
	.word	55091
	.byte	12,4,165,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41830
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_MANID',0,4,170,13,3
	.word	55156
	.byte	12,4,173,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41941
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OMR',0,4,178,13,3
	.word	55219
	.byte	12,4,181,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42099
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OSCCON',0,4,186,13,3
	.word	55280
	.byte	12,4,189,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42510
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OUT',0,4,194,13,3
	.word	55344
	.byte	12,4,197,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42611
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OVCCON',0,4,202,13,3
	.word	55405
	.byte	12,4,205,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42929
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OVCENABLE',0,4,210,13,3
	.word	55469
	.byte	12,4,213,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43116
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDISC',0,4,218,13,3
	.word	55536
	.byte	12,4,221,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43227
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDR',0,4,226,13,3
	.word	55599
	.byte	12,4,229,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43360
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDRR',0,4,234,13,3
	.word	55660
	.byte	12,4,237,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43563
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLCON0',0,4,242,13,3
	.word	55722
	.byte	12,4,245,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43803
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLCON1',0,4,250,13,3
	.word	55790
	.byte	12,4,253,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43947
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLSTAT',0,4,130,14,3
	.word	55858
	.byte	12,4,133,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44169
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR0',0,4,138,14,3
	.word	55926
	.byte	12,4,141,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44305
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR1',0,4,146,14,3
	.word	55990
	.byte	12,4,149,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44441
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR2',0,4,154,14,3
	.word	56054
	.byte	12,4,157,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44577
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR3',0,4,162,14,3
	.word	56118
	.byte	12,4,165,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44713
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR4',0,4,170,14,3
	.word	56182
	.byte	12,4,173,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44849
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR5',0,4,178,14,3
	.word	56246
	.byte	12,4,181,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44985
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMSTAT0',0,4,186,14,3
	.word	56310
	.byte	12,4,189,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45257
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMSWCR1',0,4,194,14,3
	.word	56375
	.byte	12,4,197,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45502
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR0',0,4,202,14,3
	.word	56440
	.byte	12,4,205,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45890
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR1',0,4,210,14,3
	.word	56506
	.byte	12,4,213,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46008
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR2',0,4,218,14,3
	.word	56572
	.byte	12,4,221,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46251
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR3',0,4,226,14,3
	.word	56638
	.byte	12,4,229,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46518
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON',0,4,234,14,3
	.word	56704
	.byte	12,4,237,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46777
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON2',0,4,242,14,3
	.word	56768
	.byte	12,4,245,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47082
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON3',0,4,250,14,3
	.word	56833
	.byte	12,4,253,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47163
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTSTAT',0,4,130,15,3
	.word	56898
	.byte	12,4,133,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47712
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON0',0,4,138,15,3
	.word	56963
	.byte	12,4,141,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47842
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON1',0,4,146,15,3
	.word	57028
	.byte	12,4,149,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48033
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SEISR',0,4,154,15,3
	.word	57093
	.byte	12,4,157,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48211
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STCON',0,4,162,15,3
	.word	57156
	.byte	12,4,165,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48362
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM1',0,4,170,15,3
	.word	57219
	.byte	12,4,173,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48434
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM2',0,4,178,15,3
	.word	57283
	.byte	12,4,181,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48506
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM3',0,4,186,15,3
	.word	57347
	.byte	12,4,189,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48578
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM4',0,4,194,15,3
	.word	57411
	.byte	12,4,197,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48650
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM5',0,4,202,15,3
	.word	57475
	.byte	12,4,205,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48722
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM6',0,4,210,15,3
	.word	57539
	.byte	12,4,213,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48794
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STSTAT',0,4,218,15,3
	.word	57603
	.byte	12,4,221,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49123
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SWAPCTRL',0,4,226,15,3
	.word	57667
	.byte	12,4,229,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49243
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SWRSTCON',0,4,234,15,3
	.word	57733
	.byte	12,4,237,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49413
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSCON',0,4,242,15,3
	.word	57799
	.byte	12,4,245,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49676
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON0',0,4,250,15,3
	.word	57863
	.byte	12,4,253,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49955
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON1',0,4,130,16,3
	.word	57931
	.byte	12,4,133,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50059
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON2',0,4,138,16,3
	.word	57999
	.byte	12,4,141,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50165
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLSTAT',0,4,146,16,3
	.word	58067
	.byte	12,4,149,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50388
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPCLR',0,4,154,16,3
	.word	58135
	.byte	12,4,157,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50536
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPDIS0',0,4,162,16,3
	.word	58200
	.byte	12,4,165,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51024
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPDIS1',0,4,170,16,3
	.word	58266
	.byte	12,4,173,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51321
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSET',0,4,178,16,3
	.word	58332
	.byte	12,4,181,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51469
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSTAT',0,4,186,16,3
	.word	58397
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON0',0,4,194,16,3
	.word	567
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON1',0,4,202,16,3
	.word	872
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_SR',0,4,210,16,3
	.word	1103
	.byte	12,4,213,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51719
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON0',0,4,218,16,3
	.word	58548
	.byte	12,4,221,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51845
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON1',0,4,226,16,3
	.word	58615
	.byte	12,4,229,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52097
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_SR',0,4,234,16,3
	.word	58682
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX',0,4,246,16,25,4,13
	.byte	'ESRCFGX',0
	.word	54121
	.byte	4,2,35,0,0,14
	.word	58747
	.byte	32
	.byte	'Ifx_SCU_ESRCFGX',0,4,249,16,3
	.word	58788
	.byte	14
	.word	1143
	.byte	32
	.byte	'Ifx_SCU_WDTCPU',0,4,141,17,3
	.word	58818
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,4,156,17,25,12,13
	.byte	'CON0',0
	.word	58548
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	58615
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	58682
	.byte	4,2,35,8,0,14
	.word	58847
	.byte	32
	.byte	'Ifx_SCU_WDTS',0,4,161,17,3
	.word	58908
	.byte	18,8
	.word	58747
	.byte	19,1,0,14
	.word	58935
	.byte	18,36
	.word	607
	.byte	19,35,0,18,16
	.word	53746
	.byte	19,3,0,18,16
	.word	54505
	.byte	19,3,0,18,72
	.word	1143
	.byte	19,5,0,14
	.word	58976
	.byte	14
	.word	58847
	.byte	18,176,2
	.word	607
	.byte	19,175,2,0,10
	.byte	'_Ifx_SCU',0,4,176,17,25,128,8,13
	.byte	'reserved_0',0
	.word	8651
	.byte	8,2,35,0,13
	.byte	'ID',0
	.word	54445
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2366
	.byte	4,2,35,12,13
	.byte	'OSCCON',0
	.word	55280
	.byte	4,2,35,16,13
	.byte	'SYSPLLSTAT',0
	.word	58067
	.byte	4,2,35,20,13
	.byte	'SYSPLLCON0',0
	.word	57863
	.byte	4,2,35,24,13
	.byte	'SYSPLLCON1',0
	.word	57931
	.byte	4,2,35,28,13
	.byte	'SYSPLLCON2',0
	.word	57999
	.byte	4,2,35,32,13
	.byte	'PERPLLSTAT',0
	.word	55858
	.byte	4,2,35,36,13
	.byte	'PERPLLCON0',0
	.word	55722
	.byte	4,2,35,40,13
	.byte	'PERPLLCON1',0
	.word	55790
	.byte	4,2,35,44,13
	.byte	'CCUCON0',0
	.word	52641
	.byte	4,2,35,48,13
	.byte	'CCUCON1',0
	.word	52706
	.byte	4,2,35,52,13
	.byte	'FDR',0
	.word	54323
	.byte	4,2,35,56,13
	.byte	'EXTCON',0
	.word	54259
	.byte	4,2,35,60,13
	.byte	'CCUCON2',0
	.word	52903
	.byte	4,2,35,64,13
	.byte	'CCUCON3',0
	.word	52968
	.byte	4,2,35,68,13
	.byte	'CCUCON4',0
	.word	53033
	.byte	4,2,35,72,13
	.byte	'CCUCON5',0
	.word	53098
	.byte	4,2,35,76,13
	.byte	'RSTSTAT',0
	.word	56898
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	2366
	.byte	4,2,35,84,13
	.byte	'RSTCON',0
	.word	56704
	.byte	4,2,35,88,13
	.byte	'ARSTDIS',0
	.word	52576
	.byte	4,2,35,92,13
	.byte	'SWRSTCON',0
	.word	57733
	.byte	4,2,35,96,13
	.byte	'RSTCON2',0
	.word	56768
	.byte	4,2,35,100,13
	.byte	'RSTCON3',0
	.word	56833
	.byte	4,2,35,104,13
	.byte	'reserved_6C',0
	.word	2366
	.byte	4,2,35,108,13
	.byte	'ESRCFGX',0
	.word	58944
	.byte	8,2,35,112,13
	.byte	'ESROCFG',0
	.word	54194
	.byte	4,2,35,120,13
	.byte	'SYSCON',0
	.word	57799
	.byte	4,2,35,124,13
	.byte	'CCUCON6',0
	.word	53163
	.byte	4,3,35,128,1,13
	.byte	'CCUCON7',0
	.word	53228
	.byte	4,3,35,132,1,13
	.byte	'CCUCON8',0
	.word	53293
	.byte	4,3,35,136,1,13
	.byte	'CCUCON9',0
	.word	53358
	.byte	4,3,35,140,1,13
	.byte	'CCUCON10',0
	.word	52771
	.byte	4,3,35,144,1,13
	.byte	'CCUCON11',0
	.word	52837
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	2366
	.byte	4,3,35,152,1,13
	.byte	'PDR',0
	.word	55599
	.byte	4,3,35,156,1,13
	.byte	'IOCR',0
	.word	54627
	.byte	4,3,35,160,1,13
	.byte	'OUT',0
	.word	55344
	.byte	4,3,35,164,1,13
	.byte	'OMR',0
	.word	55219
	.byte	4,3,35,168,1,13
	.byte	'IN',0
	.word	54567
	.byte	4,3,35,172,1,13
	.byte	'reserved_B0',0
	.word	19342
	.byte	16,3,35,176,1,13
	.byte	'STSTAT',0
	.word	57603
	.byte	4,3,35,192,1,13
	.byte	'STCON',0
	.word	57156
	.byte	4,3,35,196,1,13
	.byte	'PMCSR0',0
	.word	55926
	.byte	4,3,35,200,1,13
	.byte	'PMCSR1',0
	.word	55990
	.byte	4,3,35,204,1,13
	.byte	'PMCSR2',0
	.word	56054
	.byte	4,3,35,208,1,13
	.byte	'PMCSR3',0
	.word	56118
	.byte	4,3,35,212,1,13
	.byte	'PMCSR4',0
	.word	56182
	.byte	4,3,35,216,1,13
	.byte	'PMCSR5',0
	.word	56246
	.byte	4,3,35,220,1,13
	.byte	'reserved_E0',0
	.word	2366
	.byte	4,3,35,224,1,13
	.byte	'PMSTAT0',0
	.word	56310
	.byte	4,3,35,228,1,13
	.byte	'PMSWCR1',0
	.word	56375
	.byte	4,3,35,232,1,13
	.byte	'reserved_EC',0
	.word	19342
	.byte	16,3,35,236,1,13
	.byte	'EMSR',0
	.word	53996
	.byte	4,3,35,252,1,13
	.byte	'EMSSW',0
	.word	54058
	.byte	4,3,35,128,2,13
	.byte	'DTSCSTAT',0
	.word	53552
	.byte	4,3,35,132,2,13
	.byte	'DTSCLIM',0
	.word	53487
	.byte	4,3,35,136,2,13
	.byte	'reserved_10C',0
	.word	2500
	.byte	20,3,35,140,2,13
	.byte	'TRAPDIS1',0
	.word	58266
	.byte	4,3,35,160,2,13
	.byte	'TRAPSTAT',0
	.word	58397
	.byte	4,3,35,164,2,13
	.byte	'TRAPSET',0
	.word	58332
	.byte	4,3,35,168,2,13
	.byte	'TRAPCLR',0
	.word	58135
	.byte	4,3,35,172,2,13
	.byte	'TRAPDIS0',0
	.word	58200
	.byte	4,3,35,176,2,13
	.byte	'LCLCON0',0
	.word	54961
	.byte	4,3,35,180,2,13
	.byte	'LCLCON1',0
	.word	55026
	.byte	4,3,35,184,2,13
	.byte	'LCLTEST',0
	.word	55091
	.byte	4,3,35,188,2,13
	.byte	'CHIPID',0
	.word	53423
	.byte	4,3,35,192,2,13
	.byte	'MANID',0
	.word	55156
	.byte	4,3,35,196,2,13
	.byte	'reserved_148',0
	.word	2366
	.byte	4,3,35,200,2,13
	.byte	'SWAPCTRL',0
	.word	57667
	.byte	4,3,35,204,2,13
	.byte	'reserved_150',0
	.word	2500
	.byte	20,3,35,208,2,13
	.byte	'LBISTCTRL0',0
	.word	54689
	.byte	4,3,35,228,2,13
	.byte	'LBISTCTRL1',0
	.word	54757
	.byte	4,3,35,232,2,13
	.byte	'LBISTCTRL2',0
	.word	54825
	.byte	4,3,35,236,2,13
	.byte	'LBISTCTRL3',0
	.word	54893
	.byte	4,3,35,240,2,13
	.byte	'reserved_174',0
	.word	19342
	.byte	16,3,35,244,2,13
	.byte	'STMEM1',0
	.word	57219
	.byte	4,3,35,132,3,13
	.byte	'STMEM2',0
	.word	57283
	.byte	4,3,35,136,3,13
	.byte	'PDISC',0
	.word	55536
	.byte	4,3,35,140,3,13
	.byte	'reserved_190',0
	.word	8651
	.byte	8,3,35,144,3,13
	.byte	'PMTRCSR0',0
	.word	56440
	.byte	4,3,35,152,3,13
	.byte	'PMTRCSR1',0
	.word	56506
	.byte	4,3,35,156,3,13
	.byte	'PMTRCSR2',0
	.word	56572
	.byte	4,3,35,160,3,13
	.byte	'PMTRCSR3',0
	.word	56638
	.byte	4,3,35,164,3,13
	.byte	'reserved_1A8',0
	.word	8022
	.byte	24,3,35,168,3,13
	.byte	'STMEM3',0
	.word	57347
	.byte	4,3,35,192,3,13
	.byte	'STMEM4',0
	.word	57411
	.byte	4,3,35,196,3,13
	.byte	'STMEM5',0
	.word	57475
	.byte	4,3,35,200,3,13
	.byte	'STMEM6',0
	.word	57539
	.byte	4,3,35,204,3,13
	.byte	'reserved_1D0',0
	.word	19342
	.byte	16,3,35,208,3,13
	.byte	'OVCENABLE',0
	.word	55469
	.byte	4,3,35,224,3,13
	.byte	'OVCCON',0
	.word	55405
	.byte	4,3,35,228,3,13
	.byte	'reserved_1E8',0
	.word	58949
	.byte	36,3,35,232,3,13
	.byte	'EIFILT',0
	.word	53808
	.byte	4,3,35,140,4,13
	.byte	'EICR',0
	.word	58958
	.byte	16,3,35,144,4,13
	.byte	'EIFR',0
	.word	53872
	.byte	4,3,35,160,4,13
	.byte	'FMR',0
	.word	54384
	.byte	4,3,35,164,4,13
	.byte	'PDRR',0
	.word	55660
	.byte	4,3,35,168,4,13
	.byte	'IGCR',0
	.word	58967
	.byte	16,3,35,172,4,13
	.byte	'reserved_23C',0
	.word	19342
	.byte	16,3,35,188,4,13
	.byte	'WDTCPU',0
	.word	58985
	.byte	72,3,35,204,4,13
	.byte	'reserved_294',0
	.word	8651
	.byte	8,3,35,148,5,13
	.byte	'EICON0',0
	.word	53618
	.byte	4,3,35,156,5,13
	.byte	'EICON1',0
	.word	53682
	.byte	4,3,35,160,5,13
	.byte	'EISR',0
	.word	53934
	.byte	4,3,35,164,5,13
	.byte	'WDTS',0
	.word	58990
	.byte	12,3,35,168,5,13
	.byte	'SEICON0',0
	.word	56963
	.byte	4,3,35,180,5,13
	.byte	'SEICON1',0
	.word	57028
	.byte	4,3,35,184,5,13
	.byte	'SEISR',0
	.word	57093
	.byte	4,3,35,188,5,13
	.byte	'reserved_2C0',0
	.word	58995
	.byte	176,2,3,35,192,5,13
	.byte	'ACCEN11',0
	.word	52511
	.byte	4,3,35,240,7,13
	.byte	'ACCEN10',0
	.word	52446
	.byte	4,3,35,244,7,13
	.byte	'ACCEN01',0
	.word	52381
	.byte	4,3,35,248,7,13
	.byte	'ACCEN00',0
	.word	52316
	.byte	4,3,35,252,7,0,14
	.word	59006
	.byte	32
	.byte	'Ifx_SCU',0,4,166,18,3
	.word	61127
	.byte	32
	.byte	'Ifx_FCE_ACCEN0_Bits',0,9,102,3
	.word	3150
	.byte	32
	.byte	'Ifx_FCE_ACCEN1_Bits',0,9,108,3
	.word	3061
	.byte	32
	.byte	'Ifx_FCE_CHSTS_Bits',0,9,122,3
	.word	2509
	.byte	32
	.byte	'Ifx_FCE_CLC_Bits',0,9,130,1,3
	.word	2248
	.byte	32
	.byte	'Ifx_FCE_ID_Bits',0,9,138,1,3
	.word	2375
	.byte	32
	.byte	'Ifx_FCE_IN_CFG_Bits',0,9,157,1,3
	.word	3883
	.byte	32
	.byte	'Ifx_FCE_IN_CHECK_Bits',0,9,163,1,3
	.word	4460
	.byte	32
	.byte	'Ifx_FCE_IN_CRC_Bits',0,9,169,1,3
	.word	4547
	.byte	32
	.byte	'Ifx_FCE_IN_CTR_Bits',0,9,178,1,3
	.word	4630
	.byte	32
	.byte	'Ifx_FCE_IN_IR_Bits',0,9,184,1,3
	.word	3719
	.byte	32
	.byte	'Ifx_FCE_IN_LENGTH_Bits',0,9,191,1,3
	.word	4348
	.byte	32
	.byte	'Ifx_FCE_IN_RES_Bits',0,9,197,1,3
	.word	3800
	.byte	32
	.byte	'Ifx_FCE_IN_STS_Bits',0,9,207,1,3
	.word	4198
	.byte	32
	.byte	'Ifx_FCE_KRST0_Bits',0,9,215,1,3
	.word	2938
	.byte	32
	.byte	'Ifx_FCE_KRST1_Bits',0,9,222,1,3
	.word	2834
	.byte	32
	.byte	'Ifx_FCE_KRSTCLR_Bits',0,9,229,1,3
	.word	2728
	.byte	32
	.byte	'Ifx_FCE_ACCEN0',0,9,242,1,3
	.word	3679
	.byte	32
	.byte	'Ifx_FCE_ACCEN1',0,9,250,1,3
	.word	3110
	.byte	32
	.byte	'Ifx_FCE_CHSTS',0,9,130,2,3
	.word	2677
	.byte	32
	.byte	'Ifx_FCE_CLC',0,9,138,2,3
	.word	2326
	.byte	32
	.byte	'Ifx_FCE_ID',0,9,146,2,3
	.word	2460
	.byte	32
	.byte	'Ifx_FCE_IN_CFG',0,9,154,2,3
	.word	4158
	.byte	32
	.byte	'Ifx_FCE_IN_CHECK',0,9,162,2,3
	.word	4507
	.byte	32
	.byte	'Ifx_FCE_IN_CRC',0,9,170,2,3
	.word	4590
	.byte	32
	.byte	'Ifx_FCE_IN_CTR',0,9,178,2,3
	.word	4735
	.byte	32
	.byte	'Ifx_FCE_IN_IR',0,9,186,2,3
	.word	3760
	.byte	32
	.byte	'Ifx_FCE_IN_LENGTH',0,9,194,2,3
	.word	4420
	.byte	32
	.byte	'Ifx_FCE_IN_RES',0,9,202,2,3
	.word	3843
	.byte	32
	.byte	'Ifx_FCE_IN_STS',0,9,210,2,3
	.word	4308
	.byte	32
	.byte	'Ifx_FCE_KRST0',0,9,218,2,3
	.word	3021
	.byte	32
	.byte	'Ifx_FCE_KRST1',0,9,226,2,3
	.word	2898
	.byte	32
	.byte	'Ifx_FCE_KRSTCLR',0,9,234,2,3
	.word	2794
	.byte	14
	.word	4775
	.byte	32
	.byte	'Ifx_FCE_IN',0,9,128,3,3
	.word	61984
	.byte	14
	.word	4917
	.byte	32
	.byte	'Ifx_FCE',0,9,157,3,3
	.word	62009
	.byte	32
	.byte	'IfxSrc_Tos',0,7,75,3
	.word	2040
	.byte	32
	.byte	'Ifx_SRC_SRCR_Bits',0,6,85,3
	.word	1621
	.byte	32
	.byte	'Ifx_SRC_SRCR',0,6,98,3
	.word	1911
	.byte	10
	.byte	'_Ifx_SRC_CPU_CPU',0,6,110,25,4,13
	.byte	'SB',0
	.word	1911
	.byte	4,2,35,0,0,14
	.word	62097
	.byte	32
	.byte	'Ifx_SRC_CPU_CPU',0,6,113,3
	.word	62132
	.byte	18,24
	.word	62097
	.byte	19,5,0,14
	.word	62161
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,6,128,1,25,24,13
	.byte	'CPU',0
	.word	62170
	.byte	24,2,35,0,0,14
	.word	62175
	.byte	32
	.byte	'Ifx_SRC_CPU',0,6,131,1,3
	.word	62208
	.byte	10
	.byte	'_Ifx_SRC_AGBT_AGBT',0,6,146,1,25,4,13
	.byte	'SR',0
	.word	1911
	.byte	4,2,35,0,0,14
	.word	62234
	.byte	32
	.byte	'Ifx_SRC_AGBT_AGBT',0,6,149,1,3
	.word	62272
	.byte	18,4
	.word	62234
	.byte	19,0,0,14
	.word	62304
	.byte	10
	.byte	'_Ifx_SRC_AGBT',0,6,164,1,25,4,13
	.byte	'AGBT',0
	.word	62313
	.byte	4,2,35,0,0,14
	.word	62318
	.byte	32
	.byte	'Ifx_SRC_AGBT',0,6,167,1,3
	.word	62353
	.byte	10
	.byte	'_Ifx_SRC_XBAR_XBAR',0,6,182,1,25,4,13
	.byte	'SR',0
	.word	1911
	.byte	4,2,35,0,0,14
	.word	62380
	.byte	32
	.byte	'Ifx_SRC_XBAR_XBAR',0,6,185,1,3
	.word	62418
	.byte	18,12
	.word	62380
	.byte	19,2,0,14
	.word	62450
	.byte	10
	.byte	'_Ifx_SRC_XBAR',0,6,200,1,25,12,13
	.byte	'XBAR',0
	.word	62459
	.byte	12,2,35,0,0,14
	.word	62464
	.byte	32
	.byte	'Ifx_SRC_XBAR',0,6,203,1,3
	.word	62499
	.byte	18,8
	.word	1911
	.byte	19,1,0,10
	.byte	'_Ifx_SRC_CERBERUS_CERBERUS',0,6,218,1,25,8,13
	.byte	'SR',0
	.word	62526
	.byte	8,2,35,0,0,14
	.word	62535
	.byte	32
	.byte	'Ifx_SRC_CERBERUS_CERBERUS',0,6,221,1,3
	.word	62581
	.byte	14
	.word	62535
	.byte	10
	.byte	'_Ifx_SRC_CERBERUS',0,6,236,1,25,8,13
	.byte	'CERBERUS',0
	.word	62621
	.byte	8,2,35,0,0,14
	.word	62626
	.byte	32
	.byte	'Ifx_SRC_CERBERUS',0,6,239,1,3
	.word	62669
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN_ASCLIN',0,6,254,1,25,12,13
	.byte	'TX',0
	.word	1911
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	1911
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	1911
	.byte	4,2,35,8,0,14
	.word	62700
	.byte	32
	.byte	'Ifx_SRC_ASCLIN_ASCLIN',0,6,131,2,3
	.word	62767
	.byte	18,144,1
	.word	62700
	.byte	19,11,0,14
	.word	62803
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,6,146,2,25,144,1,13
	.byte	'ASCLIN',0
	.word	62813
	.byte	144,1,2,35,0,0,14
	.word	62818
	.byte	32
	.byte	'Ifx_SRC_ASCLIN',0,6,149,2,3
	.word	62859
	.byte	10
	.byte	'_Ifx_SRC_QSPI_QSPI',0,6,164,2,25,20,13
	.byte	'TX',0
	.word	1911
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	1911
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	1911
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	1911
	.byte	4,2,35,12,13
	.byte	'U',0
	.word	1911
	.byte	4,2,35,16,0,14
	.word	62888
	.byte	32
	.byte	'Ifx_SRC_QSPI_QSPI',0,6,171,2,3
	.word	62974
	.byte	18,120
	.word	62888
	.byte	19,5,0,14
	.word	63006
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,6,186,2,25,120,13
	.byte	'QSPI',0
	.word	63015
	.byte	120,2,35,0,0,14
	.word	63020
	.byte	32
	.byte	'Ifx_SRC_QSPI',0,6,189,2,3
	.word	63055
	.byte	10
	.byte	'_Ifx_SRC_HSCT_HSCT',0,6,204,2,25,4,13
	.byte	'SR',0
	.word	1911
	.byte	4,2,35,0,0,14
	.word	63082
	.byte	32
	.byte	'Ifx_SRC_HSCT_HSCT',0,6,207,2,3
	.word	63120
	.byte	18,8
	.word	63082
	.byte	19,1,0,14
	.word	63152
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,6,222,2,25,8,13
	.byte	'HSCT',0
	.word	63161
	.byte	8,2,35,0,0,14
	.word	63166
	.byte	32
	.byte	'Ifx_SRC_HSCT',0,6,225,2,3
	.word	63201
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL_CH',0,6,240,2,25,16,13
	.byte	'COK',0
	.word	1911
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	1911
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	1911
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	1911
	.byte	4,2,35,12,0,14
	.word	63228
	.byte	32
	.byte	'Ifx_SRC_HSSL_HSSL_CH',0,6,246,2,3
	.word	63309
	.byte	18,64
	.word	63228
	.byte	19,3,0,14
	.word	63344
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL',0,6,133,3,25,68,13
	.byte	'CH',0
	.word	63353
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	1911
	.byte	4,2,35,64,0,14
	.word	63358
	.byte	32
	.byte	'Ifx_SRC_HSSL_HSSL',0,6,137,3,3
	.word	63409
	.byte	18,136,1
	.word	63358
	.byte	19,1,0,14
	.word	63441
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,6,152,3,25,136,1,13
	.byte	'HSSL',0
	.word	63451
	.byte	136,1,2,35,0,0,14
	.word	63456
	.byte	32
	.byte	'Ifx_SRC_HSSL',0,6,155,3,3
	.word	63493
	.byte	10
	.byte	'_Ifx_SRC_I2C_I2C',0,6,170,3,25,16,13
	.byte	'DTR',0
	.word	1911
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	1911
	.byte	4,2,35,4,13
	.byte	'P',0
	.word	1911
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2366
	.byte	4,2,35,12,0,14
	.word	63520
	.byte	32
	.byte	'Ifx_SRC_I2C_I2C',0,6,176,3,3
	.word	63601
	.byte	18,32
	.word	63520
	.byte	19,1,0,14
	.word	63631
	.byte	10
	.byte	'_Ifx_SRC_I2C',0,6,191,3,25,32,13
	.byte	'I2C',0
	.word	63640
	.byte	32,2,35,0,0,14
	.word	63645
	.byte	32
	.byte	'Ifx_SRC_I2C',0,6,194,3,3
	.word	63678
	.byte	10
	.byte	'_Ifx_SRC_SENT_SENT',0,6,209,3,25,4,13
	.byte	'SR',0
	.word	1911
	.byte	4,2,35,0,0,14
	.word	63704
	.byte	32
	.byte	'Ifx_SRC_SENT_SENT',0,6,212,3,3
	.word	63742
	.byte	18,40
	.word	63704
	.byte	19,9,0,14
	.word	63774
	.byte	10
	.byte	'_Ifx_SRC_SENT',0,6,227,3,25,40,13
	.byte	'SENT',0
	.word	63783
	.byte	40,2,35,0,0,14
	.word	63788
	.byte	32
	.byte	'Ifx_SRC_SENT',0,6,230,3,3
	.word	63823
	.byte	18,20
	.word	1911
	.byte	19,4,0,10
	.byte	'_Ifx_SRC_MSC_MSC',0,6,245,3,25,20,13
	.byte	'SR',0
	.word	63850
	.byte	20,2,35,0,0,14
	.word	63859
	.byte	32
	.byte	'Ifx_SRC_MSC_MSC',0,6,248,3,3
	.word	63895
	.byte	18,80
	.word	63859
	.byte	19,3,0,14
	.word	63925
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,6,135,4,25,80,13
	.byte	'MSC',0
	.word	63934
	.byte	80,2,35,0,0,14
	.word	63939
	.byte	32
	.byte	'Ifx_SRC_MSC',0,6,138,4,3
	.word	63972
	.byte	18,16
	.word	1911
	.byte	19,3,0,10
	.byte	'_Ifx_SRC_CCU6_CCU',0,6,153,4,25,16,13
	.byte	'SR',0
	.word	63998
	.byte	16,2,35,0,0,14
	.word	64007
	.byte	32
	.byte	'Ifx_SRC_CCU6_CCU',0,6,156,4,3
	.word	64044
	.byte	18,32
	.word	64007
	.byte	19,1,0,14
	.word	64075
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,6,171,4,25,32,13
	.byte	'CCU',0
	.word	64084
	.byte	32,2,35,0,0,14
	.word	64089
	.byte	32
	.byte	'Ifx_SRC_CCU6',0,6,174,4,3
	.word	64123
	.byte	10
	.byte	'_Ifx_SRC_GPT12_GPT12',0,6,189,4,25,24,13
	.byte	'CIRQ',0
	.word	1911
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	1911
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	1911
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	1911
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	1911
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	1911
	.byte	4,2,35,20,0,14
	.word	64150
	.byte	32
	.byte	'Ifx_SRC_GPT12_GPT12',0,6,197,4,3
	.word	64252
	.byte	18,24
	.word	64150
	.byte	19,0,0,14
	.word	64286
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,6,212,4,25,24,13
	.byte	'GPT12',0
	.word	64295
	.byte	24,2,35,0,0,14
	.word	64300
	.byte	32
	.byte	'Ifx_SRC_GPT12',0,6,215,4,3
	.word	64337
	.byte	10
	.byte	'_Ifx_SRC_STM_STM',0,6,230,4,25,8,13
	.byte	'SR',0
	.word	62526
	.byte	8,2,35,0,0,14
	.word	64365
	.byte	32
	.byte	'Ifx_SRC_STM_STM',0,6,233,4,3
	.word	64401
	.byte	18,48
	.word	64365
	.byte	19,5,0,14
	.word	64431
	.byte	10
	.byte	'_Ifx_SRC_STM',0,6,248,4,25,48,13
	.byte	'STM',0
	.word	64440
	.byte	48,2,35,0,0,14
	.word	64445
	.byte	32
	.byte	'Ifx_SRC_STM',0,6,251,4,3
	.word	64478
	.byte	10
	.byte	'_Ifx_SRC_FCE_FCE0',0,6,138,5,25,4,13
	.byte	'SR',0
	.word	1911
	.byte	4,2,35,0,0,14
	.word	64504
	.byte	32
	.byte	'Ifx_SRC_FCE_FCE0',0,6,141,5,3
	.word	64541
	.byte	14
	.word	64504
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,6,156,5,25,4,13
	.byte	'FCE0',0
	.word	64572
	.byte	4,2,35,0,0,14
	.word	64577
	.byte	32
	.byte	'Ifx_SRC_FCE',0,6,159,5,3
	.word	64611
	.byte	18,128,4
	.word	1911
	.byte	19,127,0,10
	.byte	'_Ifx_SRC_DMA_DMA',0,6,174,5,25,176,4,13
	.byte	'ERR',0
	.word	63998
	.byte	16,2,35,0,13
	.byte	'reserved_10',0
	.word	17073
	.byte	32,2,35,16,13
	.byte	'CH',0
	.word	64637
	.byte	128,4,2,35,48,0,14
	.word	64647
	.byte	32
	.byte	'Ifx_SRC_DMA_DMA',0,6,179,5,3
	.word	64719
	.byte	18,176,4
	.word	64647
	.byte	19,0,0,14
	.word	64749
	.byte	10
	.byte	'_Ifx_SRC_DMA',0,6,194,5,25,176,4,13
	.byte	'DMA',0
	.word	64759
	.byte	176,4,2,35,0,0,14
	.word	64764
	.byte	32
	.byte	'Ifx_SRC_DMA',0,6,197,5,3
	.word	64799
	.byte	10
	.byte	'_Ifx_SRC_SDMMC_SDMMC',0,6,212,5,25,8,13
	.byte	'ERR',0
	.word	1911
	.byte	4,2,35,0,13
	.byte	'DMA',0
	.word	1911
	.byte	4,2,35,4,0,14
	.word	64825
	.byte	32
	.byte	'Ifx_SRC_SDMMC_SDMMC',0,6,216,5,3
	.word	64879
	.byte	18,8
	.word	64825
	.byte	19,0,0,14
	.word	64913
	.byte	10
	.byte	'_Ifx_SRC_SDMMC',0,6,231,5,25,8,13
	.byte	'SDMMC',0
	.word	64922
	.byte	8,2,35,0,0,14
	.word	64927
	.byte	32
	.byte	'Ifx_SRC_SDMMC',0,6,234,5,3
	.word	64964
	.byte	18,40
	.word	1911
	.byte	19,9,0,10
	.byte	'_Ifx_SRC_GETH_GETH',0,6,249,5,25,40,13
	.byte	'SR',0
	.word	64992
	.byte	40,2,35,0,0,14
	.word	65001
	.byte	32
	.byte	'Ifx_SRC_GETH_GETH',0,6,252,5,3
	.word	65039
	.byte	18,40
	.word	65001
	.byte	19,0,0,14
	.word	65071
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,6,139,6,25,40,13
	.byte	'GETH',0
	.word	65080
	.byte	40,2,35,0,0,14
	.word	65085
	.byte	32
	.byte	'Ifx_SRC_GETH',0,6,142,6,3
	.word	65120
	.byte	18,64
	.word	1911
	.byte	19,15,0,10
	.byte	'_Ifx_SRC_CAN_CAN',0,6,157,6,25,64,13
	.byte	'INT',0
	.word	65147
	.byte	64,2,35,0,0,14
	.word	65156
	.byte	32
	.byte	'Ifx_SRC_CAN_CAN',0,6,160,6,3
	.word	65193
	.byte	18,192,1
	.word	65156
	.byte	19,2,0,14
	.word	65223
	.byte	10
	.byte	'_Ifx_SRC_CAN',0,6,175,6,25,192,1,13
	.byte	'CAN',0
	.word	65233
	.byte	192,1,2,35,0,0,14
	.word	65238
	.byte	32
	.byte	'Ifx_SRC_CAN',0,6,178,6,3
	.word	65273
	.byte	10
	.byte	'_Ifx_SRC_VADC_G',0,6,193,6,25,16,13
	.byte	'SR0',0
	.word	1911
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	1911
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	1911
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	1911
	.byte	4,2,35,12,0,14
	.word	65299
	.byte	32
	.byte	'Ifx_SRC_VADC_G',0,6,199,6,3
	.word	65374
	.byte	10
	.byte	'_Ifx_SRC_VADC_FC',0,6,214,6,25,4,13
	.byte	'SR0',0
	.word	1911
	.byte	4,2,35,0,0,14
	.word	65403
	.byte	32
	.byte	'Ifx_SRC_VADC_FC',0,6,217,6,3
	.word	65440
	.byte	18,192,1
	.word	65299
	.byte	19,11,0,14
	.word	65470
	.byte	18,32
	.word	65403
	.byte	19,7,0,14
	.word	65485
	.byte	18,32
	.word	65299
	.byte	19,1,0,14
	.word	65499
	.byte	10
	.byte	'_Ifx_SRC_VADC',0,6,233,6,25,128,2,13
	.byte	'G',0
	.word	65480
	.byte	192,1,2,35,0,13
	.byte	'FC',0
	.word	65494
	.byte	32,3,35,192,1,13
	.byte	'CG',0
	.word	65508
	.byte	32,3,35,224,1,0,14
	.word	65513
	.byte	32
	.byte	'Ifx_SRC_VADC',0,6,238,6,3
	.word	65573
	.byte	10
	.byte	'_Ifx_SRC_DSADC_DSADC',0,6,253,6,25,8,13
	.byte	'SRM',0
	.word	1911
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	1911
	.byte	4,2,35,4,0,14
	.word	65600
	.byte	32
	.byte	'Ifx_SRC_DSADC_DSADC',0,6,129,7,3
	.word	65654
	.byte	18,112
	.word	65600
	.byte	19,13,0,14
	.word	65688
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,6,144,7,25,112,13
	.byte	'DSADC',0
	.word	65697
	.byte	112,2,35,0,0,14
	.word	65702
	.byte	32
	.byte	'Ifx_SRC_DSADC',0,6,147,7,3
	.word	65739
	.byte	10
	.byte	'_Ifx_SRC_ERAY_ERAY',0,6,162,7,25,48,13
	.byte	'INT0',0
	.word	1911
	.byte	4,2,35,0,13
	.byte	'INT1',0
	.word	1911
	.byte	4,2,35,4,13
	.byte	'TINT0',0
	.word	1911
	.byte	4,2,35,8,13
	.byte	'TINT1',0
	.word	1911
	.byte	4,2,35,12,13
	.byte	'NDAT0',0
	.word	1911
	.byte	4,2,35,16,13
	.byte	'NDAT1',0
	.word	1911
	.byte	4,2,35,20,13
	.byte	'MBSC0',0
	.word	1911
	.byte	4,2,35,24,13
	.byte	'MBSC1',0
	.word	1911
	.byte	4,2,35,28,13
	.byte	'OBUSY',0
	.word	1911
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	1911
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	8651
	.byte	8,2,35,40,0,14
	.word	65767
	.byte	32
	.byte	'Ifx_SRC_ERAY_ERAY',0,6,175,7,3
	.word	65962
	.byte	18,96
	.word	65767
	.byte	19,1,0,14
	.word	65994
	.byte	10
	.byte	'_Ifx_SRC_ERAY',0,6,190,7,25,96,13
	.byte	'ERAY',0
	.word	66003
	.byte	96,2,35,0,0,14
	.word	66008
	.byte	32
	.byte	'Ifx_SRC_ERAY',0,6,193,7,3
	.word	66043
	.byte	10
	.byte	'_Ifx_SRC_HSM_HSM',0,6,208,7,25,8,13
	.byte	'HSM',0
	.word	62526
	.byte	8,2,35,0,0,14
	.word	66070
	.byte	32
	.byte	'Ifx_SRC_HSM_HSM',0,6,211,7,3
	.word	66107
	.byte	18,8
	.word	66070
	.byte	19,0,0,14
	.word	66137
	.byte	10
	.byte	'_Ifx_SRC_HSM',0,6,226,7,25,8,13
	.byte	'HSM',0
	.word	66146
	.byte	8,2,35,0,0,14
	.word	66151
	.byte	32
	.byte	'Ifx_SRC_HSM',0,6,229,7,3
	.word	66184
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,6,244,7,25,16,13
	.byte	'SCUERU',0
	.word	63998
	.byte	16,2,35,0,0,14
	.word	66210
	.byte	32
	.byte	'Ifx_SRC_SCU',0,6,247,7,3
	.word	66246
	.byte	10
	.byte	'_Ifx_SRC_PMS_PMS',0,6,134,8,25,4,13
	.byte	'SR',0
	.word	1911
	.byte	4,2,35,0,0,14
	.word	66272
	.byte	32
	.byte	'Ifx_SRC_PMS_PMS',0,6,137,8,3
	.word	66308
	.byte	18,16
	.word	66272
	.byte	19,3,0,14
	.word	66338
	.byte	10
	.byte	'_Ifx_SRC_PMS',0,6,152,8,25,16,13
	.byte	'PMS',0
	.word	66347
	.byte	16,2,35,0,0,14
	.word	66352
	.byte	32
	.byte	'Ifx_SRC_PMS',0,6,155,8,3
	.word	66385
	.byte	18,12
	.word	1911
	.byte	19,2,0,10
	.byte	'_Ifx_SRC_SMU_SMU',0,6,170,8,25,12,13
	.byte	'SR',0
	.word	66411
	.byte	12,2,35,0,0,14
	.word	66420
	.byte	32
	.byte	'Ifx_SRC_SMU_SMU',0,6,173,8,3
	.word	66456
	.byte	18,12
	.word	66420
	.byte	19,0,0,14
	.word	66486
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,6,188,8,25,12,13
	.byte	'SMU',0
	.word	66495
	.byte	12,2,35,0,0,14
	.word	66500
	.byte	32
	.byte	'Ifx_SRC_SMU',0,6,191,8,3
	.word	66533
	.byte	18,32
	.word	1911
	.byte	19,7,0,10
	.byte	'_Ifx_SRC_PSI5_PSI5',0,6,206,8,25,32,13
	.byte	'SR',0
	.word	66559
	.byte	32,2,35,0,0,14
	.word	66568
	.byte	32
	.byte	'Ifx_SRC_PSI5_PSI5',0,6,209,8,3
	.word	66606
	.byte	18,32
	.word	66568
	.byte	19,0,0,14
	.word	66638
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,6,224,8,25,32,13
	.byte	'PSI5',0
	.word	66647
	.byte	32,2,35,0,0,14
	.word	66652
	.byte	32
	.byte	'Ifx_SRC_PSI5',0,6,227,8,3
	.word	66687
	.byte	10
	.byte	'_Ifx_SRC_HSPDM_HSPDM0',0,6,242,8,25,12,13
	.byte	'BFR',0
	.word	1911
	.byte	4,2,35,0,13
	.byte	'RAMP',0
	.word	1911
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	1911
	.byte	4,2,35,8,0,14
	.word	66714
	.byte	32
	.byte	'Ifx_SRC_HSPDM_HSPDM0',0,6,247,8,3
	.word	66783
	.byte	14
	.word	66714
	.byte	10
	.byte	'_Ifx_SRC_HSPDM',0,6,134,9,25,12,13
	.byte	'HSPDM0',0
	.word	66818
	.byte	12,2,35,0,0,14
	.word	66823
	.byte	32
	.byte	'Ifx_SRC_HSPDM',0,6,137,9,3
	.word	66861
	.byte	10
	.byte	'_Ifx_SRC_DAM_DAM',0,6,152,9,25,24,13
	.byte	'LI0',0
	.word	1911
	.byte	4,2,35,0,13
	.byte	'RI0',0
	.word	1911
	.byte	4,2,35,4,13
	.byte	'LI1',0
	.word	1911
	.byte	4,2,35,8,13
	.byte	'RI1',0
	.word	1911
	.byte	4,2,35,12,13
	.byte	'DR',0
	.word	1911
	.byte	4,2,35,16,13
	.byte	'ERR',0
	.word	1911
	.byte	4,2,35,20,0,14
	.word	66889
	.byte	32
	.byte	'Ifx_SRC_DAM_DAM',0,6,160,9,3
	.word	66990
	.byte	18,48
	.word	66889
	.byte	19,1,0,14
	.word	67020
	.byte	10
	.byte	'_Ifx_SRC_DAM',0,6,175,9,25,48,13
	.byte	'DAM',0
	.word	67029
	.byte	48,2,35,0,0,14
	.word	67034
	.byte	32
	.byte	'Ifx_SRC_DAM',0,6,178,9,3
	.word	67067
	.byte	10
	.byte	'_Ifx_SRC_PSI5S_PSI5S',0,6,193,9,25,32,13
	.byte	'SR',0
	.word	66559
	.byte	32,2,35,0,0,14
	.word	67093
	.byte	32
	.byte	'Ifx_SRC_PSI5S_PSI5S',0,6,196,9,3
	.word	67133
	.byte	18,32
	.word	67093
	.byte	19,0,0,14
	.word	67167
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,6,211,9,25,32,13
	.byte	'PSI5S',0
	.word	67176
	.byte	32,2,35,0,0,14
	.word	67181
	.byte	32
	.byte	'Ifx_SRC_PSI5S',0,6,214,9,3
	.word	67218
	.byte	10
	.byte	'_Ifx_SRC_RIF_RIF',0,6,229,9,25,8,13
	.byte	'ERR',0
	.word	1911
	.byte	4,2,35,0,13
	.byte	'INT',0
	.word	1911
	.byte	4,2,35,4,0,14
	.word	67246
	.byte	32
	.byte	'Ifx_SRC_RIF_RIF',0,6,233,9,3
	.word	67296
	.byte	18,16
	.word	67246
	.byte	19,1,0,14
	.word	67326
	.byte	10
	.byte	'_Ifx_SRC_RIF',0,6,248,9,25,16,13
	.byte	'RIF',0
	.word	67335
	.byte	16,2,35,0,0,14
	.word	67340
	.byte	32
	.byte	'Ifx_SRC_RIF',0,6,251,9,3
	.word	67373
	.byte	10
	.byte	'_Ifx_SRC_SPU_SPU',0,6,138,10,25,8,13
	.byte	'INT',0
	.word	1911
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	1911
	.byte	4,2,35,4,0,14
	.word	67399
	.byte	32
	.byte	'Ifx_SRC_SPU_SPU',0,6,142,10,3
	.word	67449
	.byte	18,16
	.word	67399
	.byte	19,1,0,14
	.word	67479
	.byte	10
	.byte	'_Ifx_SRC_SPU',0,6,157,10,25,16,13
	.byte	'SPU',0
	.word	67488
	.byte	16,2,35,0,0,14
	.word	67493
	.byte	32
	.byte	'Ifx_SRC_SPU',0,6,160,10,3
	.word	67526
	.byte	10
	.byte	'_Ifx_SRC_GPSR_GPSR',0,6,175,10,25,32,13
	.byte	'SR',0
	.word	66559
	.byte	32,2,35,0,0,14
	.word	67552
	.byte	32
	.byte	'Ifx_SRC_GPSR_GPSR',0,6,178,10,3
	.word	67590
	.byte	18,192,1
	.word	67552
	.byte	19,5,0,14
	.word	67622
	.byte	10
	.byte	'_Ifx_SRC_GPSR',0,6,193,10,25,192,1,13
	.byte	'GPSR',0
	.word	67632
	.byte	192,1,2,35,0,0,14
	.word	67637
	.byte	32
	.byte	'Ifx_SRC_GPSR',0,6,196,10,3
	.word	67674
	.byte	32
	.byte	'IfxFce_CrcChannel',0,8,83,3
	.word	5235
	.byte	32
	.byte	'IfxFce_CrcKernel',0,8,95,3
	.word	31334
	.byte	10
	.byte	'_Ifx_CPU_A_Bits',0,25,68,16,4,11
	.byte	'ADDR',0,4
	.word	455
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_A_Bits',0,25,71,3
	.word	67752
	.byte	10
	.byte	'_Ifx_CPU_BIV_Bits',0,25,74,16,4,11
	.byte	'VSS',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'BIV',0,4
	.word	455
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_BIV_Bits',0,25,78,3
	.word	67813
	.byte	10
	.byte	'_Ifx_CPU_BLK_OMASK_Bits',0,25,81,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	5,27,2,35,0,11
	.byte	'OMASK',0,4
	.word	455
	.byte	12,15,2,35,0,11
	.byte	'ONE',0,4
	.word	455
	.byte	11,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	455
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OMASK_Bits',0,25,87,3
	.word	67892
	.byte	10
	.byte	'_Ifx_CPU_BLK_OTAR_Bits',0,25,90,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	5,27,2,35,0,11
	.byte	'TBASE',0,4
	.word	455
	.byte	23,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	455
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OTAR_Bits',0,25,95,3
	.word	68030
	.byte	10
	.byte	'_Ifx_CPU_BLK_RABR_Bits',0,25,98,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	5,27,2,35,0,11
	.byte	'OBASE',0,4
	.word	455
	.byte	17,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	455
	.byte	2,8,2,35,0,11
	.byte	'OMEM',0,4
	.word	455
	.byte	4,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	455
	.byte	3,1,2,35,0,11
	.byte	'OVEN',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_RABR_Bits',0,25,106,3
	.word	68151
	.byte	10
	.byte	'_Ifx_CPU_BTV_Bits',0,25,109,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'BTV',0,4
	.word	455
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_BTV_Bits',0,25,113,3
	.word	68327
	.byte	10
	.byte	'_Ifx_CPU_CCNT_Bits',0,25,116,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	455
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_CCNT_Bits',0,25,120,3
	.word	68413
	.byte	10
	.byte	'_Ifx_CPU_CCTRL_Bits',0,25,123,16,4,11
	.byte	'CM',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'CE',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'M1',0,4
	.word	455
	.byte	3,27,2,35,0,11
	.byte	'M2',0,4
	.word	455
	.byte	3,24,2,35,0,11
	.byte	'M3',0,4
	.word	455
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	455
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_CPU_CCTRL_Bits',0,25,131,1,3
	.word	68502
	.byte	10
	.byte	'_Ifx_CPU_COMPAT_Bits',0,25,134,1,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	3,29,2,35,0,11
	.byte	'RM',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'SP',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	455
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_COMPAT_Bits',0,25,140,1,3
	.word	68649
	.byte	10
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,25,143,1,16,4,11
	.byte	'CORE_ID',0,4
	.word	455
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	455
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_CORE_ID_Bits',0,25,147,1,3
	.word	68778
	.byte	10
	.byte	'_Ifx_CPU_CPR_L_Bits',0,25,150,1,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	5,27,2,35,0,11
	.byte	'LOWBND',0,4
	.word	455
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_L_Bits',0,25,154,1,3
	.word	68878
	.byte	10
	.byte	'_Ifx_CPU_CPR_U_Bits',0,25,157,1,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	5,27,2,35,0,11
	.byte	'UPPBND',0,4
	.word	455
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_U_Bits',0,25,161,1,3
	.word	68973
	.byte	10
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,25,164,1,16,4,11
	.byte	'MOD_REV',0,4
	.word	455
	.byte	8,24,2,35,0,11
	.byte	'MOD_32B',0,4
	.word	455
	.byte	8,16,2,35,0,11
	.byte	'MOD',0,4
	.word	455
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPU_ID_Bits',0,25,169,1,3
	.word	69068
	.byte	10
	.byte	'_Ifx_CPU_CPXE_Bits',0,25,172,1,16,4,11
	.byte	'XE_N',0,4
	.word	455
	.byte	10,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	455
	.byte	22,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPXE_Bits',0,25,176,1,3
	.word	69178
	.byte	10
	.byte	'_Ifx_CPU_CREVT_Bits',0,25,179,1,16,4,11
	.byte	'EVTA',0,4
	.word	455
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	455
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	455
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_CREVT_Bits',0,25,187,1,3
	.word	69270
	.byte	10
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,25,190,1,16,4,11
	.byte	'CID',0,4
	.word	455
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	455
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_CUS_ID_Bits',0,25,194,1,3
	.word	69424
	.byte	10
	.byte	'_Ifx_CPU_D_Bits',0,25,197,1,16,4,11
	.byte	'DATA',0,4
	.word	455
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_D_Bits',0,25,200,1,3
	.word	69518
	.byte	10
	.byte	'_Ifx_CPU_DATR_Bits',0,25,203,1,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	3,29,2,35,0,11
	.byte	'SBE',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	455
	.byte	5,23,2,35,0,11
	.byte	'CWE',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'CFE',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	455
	.byte	3,18,2,35,0,11
	.byte	'SOE',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	455
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_DATR_Bits',0,25,214,1,3
	.word	69581
	.byte	10
	.byte	'_Ifx_CPU_DBGSR_Bits',0,25,217,1,16,4,11
	.byte	'DE',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'HALT',0,4
	.word	455
	.byte	2,29,2,35,0,11
	.byte	'SIH',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'SUSP',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'PREVSUSP',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'PEVT',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EVTSRC',0,4
	.word	455
	.byte	5,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	455
	.byte	19,0,2,35,0,0,32
	.byte	'Ifx_CPU_DBGSR_Bits',0,25,228,1,3
	.word	69807
	.byte	10
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,25,231,1,16,4,11
	.byte	'DTA',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	455
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_DBGTCR_Bits',0,25,235,1,3
	.word	70022
	.byte	10
	.byte	'_Ifx_CPU_DCON0_Bits',0,25,238,1,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'DCBYP',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	455
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_CPU_DCON0_Bits',0,25,243,1,3
	.word	70116
	.byte	10
	.byte	'_Ifx_CPU_DCON2_Bits',0,25,246,1,16,4,11
	.byte	'DCACHE_SZE',0,4
	.word	455
	.byte	16,16,2,35,0,11
	.byte	'DSCRATCH_SZE',0,4
	.word	455
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_DCON2_Bits',0,25,250,1,3
	.word	70232
	.byte	10
	.byte	'_Ifx_CPU_DCX_Bits',0,25,253,1,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	6,26,2,35,0,11
	.byte	'DCXVALUE',0,4
	.word	455
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_CPU_DCX_Bits',0,25,129,2,3
	.word	70333
	.byte	10
	.byte	'_Ifx_CPU_DEADD_Bits',0,25,132,2,16,4,11
	.byte	'ERROR_ADDRESS',0,4
	.word	455
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_DEADD_Bits',0,25,135,2,3
	.word	70426
	.byte	10
	.byte	'_Ifx_CPU_DIEAR_Bits',0,25,138,2,16,4,11
	.byte	'TA',0,4
	.word	455
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_DIEAR_Bits',0,25,141,2,3
	.word	70506
	.byte	10
	.byte	'_Ifx_CPU_DIETR_Bits',0,25,144,2,16,4,11
	.byte	'IED',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	455
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'IE_DLMU',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	455
	.byte	15,0,2,35,0,0,32
	.byte	'Ifx_CPU_DIETR_Bits',0,25,159,2,3
	.word	70575
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,25,162,2,16,4,11
	.byte	'EN0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,25,196,2,3
	.word	70859
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,25,199,2,16,4,11
	.byte	'EN0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,25,233,2,3
	.word	71450
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,25,236,2,16,4,11
	.byte	'EN32',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,25,142,3,3
	.word	72041
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,25,145,3,16,4,11
	.byte	'EN32',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,25,179,3,3
	.word	72642
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,25,182,3,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	455
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,25,186,3,3
	.word	73243
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,25,189,3,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	455
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,25,193,3,3
	.word	73358
	.byte	10
	.byte	'_Ifx_CPU_DMS_Bits',0,25,196,3,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'DMSVALUE',0,4
	.word	455
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_DMS_Bits',0,25,200,3,3
	.word	73473
	.byte	10
	.byte	'_Ifx_CPU_DPRE_Bits',0,25,203,3,16,4,11
	.byte	'RE_N',0,4
	.word	455
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	455
	.byte	14,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPRE_Bits',0,25,207,3,3
	.word	73566
	.byte	10
	.byte	'_Ifx_CPU_DPR_L_Bits',0,25,210,3,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	455
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_L_Bits',0,25,214,3,3
	.word	73658
	.byte	10
	.byte	'_Ifx_CPU_DPR_U_Bits',0,25,217,3,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	455
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_U_Bits',0,25,221,3,3
	.word	73753
	.byte	10
	.byte	'_Ifx_CPU_DPWE_Bits',0,25,224,3,16,4,11
	.byte	'WE_N',0,4
	.word	455
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	455
	.byte	14,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPWE_Bits',0,25,228,3,3
	.word	73848
	.byte	10
	.byte	'_Ifx_CPU_DSTR_Bits',0,25,231,3,16,4,11
	.byte	'SRE',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'GAE',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'LBE',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'DRE',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	455
	.byte	2,26,2,35,0,11
	.byte	'CRE',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	455
	.byte	7,18,2,35,0,11
	.byte	'DTME',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'LOE',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'SDE',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'SCE',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'CAC',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'MPE',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'CLE',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	455
	.byte	3,8,2,35,0,11
	.byte	'ALN',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	455
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_CPU_DSTR_Bits',0,25,250,3,3
	.word	73940
	.byte	10
	.byte	'_Ifx_CPU_EXEVT_Bits',0,25,253,3,16,4,11
	.byte	'EVTA',0,4
	.word	455
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	455
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	455
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_EXEVT_Bits',0,25,133,4,3
	.word	74279
	.byte	10
	.byte	'_Ifx_CPU_FCX_Bits',0,25,136,4,16,4,11
	.byte	'FCXO',0,4
	.word	455
	.byte	16,16,2,35,0,11
	.byte	'FCXS',0,4
	.word	455
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	455
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_FCX_Bits',0,25,141,4,3
	.word	74433
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON0_Bits',0,25,144,4,16,4,11
	.byte	'TAG1',0,4
	.word	455
	.byte	6,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	455
	.byte	2,24,2,35,0,11
	.byte	'TAG2',0,4
	.word	455
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	455
	.byte	2,16,2,35,0,11
	.byte	'TAG3',0,4
	.word	455
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	455
	.byte	2,8,2,35,0,11
	.byte	'TAG4',0,4
	.word	455
	.byte	6,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	455
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON0_Bits',0,25,154,4,3
	.word	74539
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON1_Bits',0,25,157,4,16,4,11
	.byte	'STALL',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	455
	.byte	15,16,2,35,0,11
	.byte	'MASKUECC',0,4
	.word	455
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	455
	.byte	6,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	455
	.byte	6,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON1_Bits',0,25,165,4,3
	.word	74757
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON2_Bits',0,25,168,4,16,4,11
	.byte	'RECDIS',0,4
	.word	455
	.byte	2,30,2,35,0,11
	.byte	'ECCCORDIS',0,4
	.word	455
	.byte	2,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	455
	.byte	4,24,2,35,0,11
	.byte	'HMARGIN',0,4
	.word	455
	.byte	2,22,2,35,0,11
	.byte	'MSEL',0,4
	.word	455
	.byte	2,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	455
	.byte	4,16,2,35,0,11
	.byte	'ECCSCLR',0,4
	.word	455
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	455
	.byte	6,8,2,35,0,11
	.byte	'SBABCLR',0,4
	.word	455
	.byte	2,6,2,35,0,11
	.byte	'DBABCLR',0,4
	.word	455
	.byte	2,4,2,35,0,11
	.byte	'MBABCLR',0,4
	.word	455
	.byte	2,2,2,35,0,11
	.byte	'ZBABCLR',0,4
	.word	455
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON2_Bits',0,25,182,4,3
	.word	74948
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON3_Bits',0,25,185,4,16,4,11
	.byte	'ECCERRINJ',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EDCERRINJ',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'SBABERRINJ',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'DBABERRINJ',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'MBABERRINJ',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'ZBABERRINJ',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'SBERERRINJ',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'DBERERRINJ',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'NVMCERRINJ',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'FLCONERRINJ',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	455
	.byte	22,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON3_Bits',0,25,198,4,3
	.word	75248
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON4_Bits',0,25,201,4,16,4,11
	.byte	'DDIS',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	455
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON4_Bits',0,25,205,4,3
	.word	75553
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,25,208,4,16,4,11
	.byte	'TST',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'TCL',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	455
	.byte	6,24,2,35,0,11
	.byte	'RM',0,4
	.word	455
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	455
	.byte	8,14,2,35,0,11
	.byte	'FXE',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'FUE',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'FZE',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'FVE',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'FIE',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	455
	.byte	3,6,2,35,0,11
	.byte	'FX',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'FU',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'FZ',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'FV',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'FI',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,25,227,4,3
	.word	75654
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,25,230,4,16,4,11
	.byte	'OPC',0,4
	.word	455
	.byte	8,24,2,35,0,11
	.byte	'FMT',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	455
	.byte	7,16,2,35,0,11
	.byte	'DREG',0,4
	.word	455
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	455
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,25,237,4,3
	.word	76003
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,25,240,4,16,4,11
	.byte	'PC',0,4
	.word	455
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,25,243,4,3
	.word	76163
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,25,246,4,16,4,11
	.byte	'SRC1',0,4
	.word	455
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,25,249,4,3
	.word	76244
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,25,252,4,16,4,11
	.byte	'SRC2',0,4
	.word	455
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,25,255,4,3
	.word	76331
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,25,130,5,16,4,11
	.byte	'SRC3',0,4
	.word	455
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,25,133,5,3
	.word	76418
	.byte	10
	.byte	'_Ifx_CPU_ICNT_Bits',0,25,136,5,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	455
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_ICNT_Bits',0,25,140,5,3
	.word	76505
	.byte	10
	.byte	'_Ifx_CPU_ICR_Bits',0,25,143,5,16,4,11
	.byte	'CCPN',0,4
	.word	455
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	455
	.byte	7,17,2,35,0,11
	.byte	'IE',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'PIPN',0,4
	.word	455
	.byte	8,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	455
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_ICR_Bits',0,25,150,5,3
	.word	76596
	.byte	10
	.byte	'_Ifx_CPU_ISP_Bits',0,25,153,5,16,4,11
	.byte	'ISP',0,4
	.word	455
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_ISP_Bits',0,25,156,5,3
	.word	76738
	.byte	10
	.byte	'_Ifx_CPU_KRST0_Bits',0,25,159,5,16,4,11
	.byte	'RST',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'RSTSTAT',0,4
	.word	455
	.byte	2,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	455
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_KRST0_Bits',0,25,164,5,3
	.word	76804
	.byte	10
	.byte	'_Ifx_CPU_KRST1_Bits',0,25,167,5,16,4,11
	.byte	'RST',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	455
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_KRST1_Bits',0,25,171,5,3
	.word	76915
	.byte	10
	.byte	'_Ifx_CPU_KRSTCLR_Bits',0,25,174,5,16,4,11
	.byte	'CLR',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	455
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_KRSTCLR_Bits',0,25,178,5,3
	.word	77007
	.byte	10
	.byte	'_Ifx_CPU_LCX_Bits',0,25,181,5,16,4,11
	.byte	'LCXO',0,4
	.word	455
	.byte	16,16,2,35,0,11
	.byte	'LCXS',0,4
	.word	455
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	455
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_LCX_Bits',0,25,186,5,3
	.word	77103
	.byte	10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,25,189,5,16,4,11
	.byte	'EN0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,25,223,5,3
	.word	77209
	.byte	10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,25,226,5,16,4,11
	.byte	'EN32',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,25,132,6,3
	.word	77792
	.byte	10
	.byte	'_Ifx_CPU_M1CNT_Bits',0,25,135,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	455
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M1CNT_Bits',0,25,139,6,3
	.word	78385
	.byte	10
	.byte	'_Ifx_CPU_M2CNT_Bits',0,25,142,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	455
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M2CNT_Bits',0,25,146,6,3
	.word	78478
	.byte	10
	.byte	'_Ifx_CPU_M3CNT_Bits',0,25,149,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	455
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M3CNT_Bits',0,25,153,6,3
	.word	78571
	.byte	10
	.byte	'_Ifx_CPU_OSEL_Bits',0,25,156,6,16,4,11
	.byte	'SHOVEN_X',0,4
	.word	455
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_OSEL_Bits',0,25,159,6,3
	.word	78664
	.byte	10
	.byte	'_Ifx_CPU_PC_Bits',0,25,162,6,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'PC',0,4
	.word	455
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_PC_Bits',0,25,166,6,3
	.word	78737
	.byte	10
	.byte	'_Ifx_CPU_PCON0_Bits',0,25,169,6,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'PCBYP',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	455
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCON0_Bits',0,25,174,6,3
	.word	78822
	.byte	10
	.byte	'_Ifx_CPU_PCON1_Bits',0,25,177,6,16,4,11
	.byte	'PCINV',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'PBINV',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	455
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCON1_Bits',0,25,182,6,3
	.word	78938
	.byte	10
	.byte	'_Ifx_CPU_PCON2_Bits',0,25,185,6,16,4,11
	.byte	'PCACHE_SZE',0,4
	.word	455
	.byte	16,16,2,35,0,11
	.byte	'PSCRATCH_SZE',0,4
	.word	455
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCON2_Bits',0,25,189,6,3
	.word	79049
	.byte	10
	.byte	'_Ifx_CPU_PCXI_Bits',0,25,192,6,16,4,11
	.byte	'PCXO',0,4
	.word	455
	.byte	16,16,2,35,0,11
	.byte	'PCXS',0,4
	.word	455
	.byte	4,12,2,35,0,11
	.byte	'UL',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'PIE',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'PCPN',0,4
	.word	455
	.byte	8,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	455
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCXI_Bits',0,25,200,6,3
	.word	79150
	.byte	10
	.byte	'_Ifx_CPU_PIEAR_Bits',0,25,203,6,16,4,11
	.byte	'TA',0,4
	.word	455
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_PIEAR_Bits',0,25,206,6,3
	.word	79303
	.byte	10
	.byte	'_Ifx_CPU_PIETR_Bits',0,25,209,6,16,4,11
	.byte	'IED',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	455
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'IE_ADDR',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	455
	.byte	15,0,2,35,0,0,32
	.byte	'Ifx_CPU_PIETR_Bits',0,25,224,6,3
	.word	79372
	.byte	10
	.byte	'_Ifx_CPU_PMA0_Bits',0,25,227,6,16,4,11
	.byte	'DAC',0,4
	.word	455
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	455
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA0_Bits',0,25,231,6,3
	.word	79656
	.byte	10
	.byte	'_Ifx_CPU_PMA1_Bits',0,25,234,6,16,4,11
	.byte	'CAC',0,4
	.word	455
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	455
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA1_Bits',0,25,238,6,3
	.word	79747
	.byte	10
	.byte	'_Ifx_CPU_PMA2_Bits',0,25,241,6,16,4,11
	.byte	'PSI',0,4
	.word	455
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	455
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA2_Bits',0,25,245,6,3
	.word	79838
	.byte	10
	.byte	'_Ifx_CPU_PSTR_Bits',0,25,248,6,16,4,11
	.byte	'FRE',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'FBE',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	455
	.byte	9,20,2,35,0,11
	.byte	'FPE',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'FME',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	455
	.byte	17,0,2,35,0,0,32
	.byte	'Ifx_CPU_PSTR_Bits',0,25,130,7,3
	.word	79929
	.byte	10
	.byte	'_Ifx_CPU_PSW_Bits',0,25,133,7,16,4,11
	.byte	'CDC',0,4
	.word	455
	.byte	7,25,2,35,0,11
	.byte	'CDE',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'GW',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'IS',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'IO',0,4
	.word	455
	.byte	2,20,2,35,0,11
	.byte	'PRS',0,4
	.word	455
	.byte	2,18,2,35,0,11
	.byte	'S',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'PRS2',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	455
	.byte	8,8,2,35,0,11
	.byte	'USB',0,4
	.word	455
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_PSW_Bits',0,25,145,7,3
	.word	80132
	.byte	10
	.byte	'_Ifx_CPU_RGN_ACCENA_Bits',0,25,148,7,16,4,11
	.byte	'EN0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENA_Bits',0,25,182,7,3
	.word	80337
	.byte	10
	.byte	'_Ifx_CPU_RGN_ACCENB_Bits',0,25,185,7,16,4,11
	.byte	'EN32',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENB_Bits',0,25,219,7,3
	.word	80904
	.byte	10
	.byte	'_Ifx_CPU_RGN_LA_Bits',0,25,222,7,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	455
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_LA_Bits',0,25,226,7,3
	.word	81481
	.byte	10
	.byte	'_Ifx_CPU_RGN_UA_Bits',0,25,229,7,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	455
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_UA_Bits',0,25,233,7,3
	.word	81576
	.byte	10
	.byte	'_Ifx_CPU_SEGEN_Bits',0,25,236,7,16,4,11
	.byte	'ADFLIP',0,4
	.word	455
	.byte	8,24,2,35,0,11
	.byte	'ADTYPE',0,4
	.word	455
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	455
	.byte	21,1,2,35,0,11
	.byte	'AE',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SEGEN_Bits',0,25,242,7,3
	.word	81671
	.byte	10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,25,245,7,16,4,11
	.byte	'EN0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,25,151,8,3
	.word	81799
	.byte	10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,25,154,8,16,4,11
	.byte	'EN32',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,25,188,8,3
	.word	82382
	.byte	10
	.byte	'_Ifx_CPU_SMACON_Bits',0,25,191,8,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	24,8,2,35,0,11
	.byte	'IODT',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	455
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_CPU_SMACON_Bits',0,25,196,8,3
	.word	82975
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,25,199,8,16,4,11
	.byte	'EN0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,25,233,8,3
	.word	83093
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,25,236,8,16,4,11
	.byte	'EN32',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,25,142,9,3
	.word	83682
	.byte	10
	.byte	'_Ifx_CPU_SWEVT_Bits',0,25,145,9,16,4,11
	.byte	'EVTA',0,4
	.word	455
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	455
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	455
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_SWEVT_Bits',0,25,153,9,3
	.word	84281
	.byte	10
	.byte	'_Ifx_CPU_SYSCON_Bits',0,25,156,9,16,4,11
	.byte	'FCDSF',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'PROTEN',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'TPROTEN',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'IS',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'TS',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	455
	.byte	3,24,2,35,0,11
	.byte	'ESDIS',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	455
	.byte	7,16,2,35,0,11
	.byte	'U1_IED',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'U1_IOS',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	455
	.byte	6,8,2,35,0,11
	.byte	'BHALT',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	455
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_CPU_SYSCON_Bits',0,25,171,9,3
	.word	84435
	.byte	10
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,25,174,9,16,4,11
	.byte	'ASI',0,4
	.word	455
	.byte	5,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	455
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,25,178,9,3
	.word	84734
	.byte	10
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,25,181,9,16,4,11
	.byte	'TEXP0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'TEXP1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'TEXP2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	455
	.byte	13,16,2,35,0,11
	.byte	'TTRAP',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	455
	.byte	15,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_CON_Bits',0,25,189,9,3
	.word	84832
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,25,192,9,16,4,11
	.byte	'EXTIM_CLASS_EN',0,4
	.word	455
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	455
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,25,196,9,3
	.word	85004
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,25,199,9,16,4,11
	.byte	'ENTRY_CVAL',0,4
	.word	455
	.byte	12,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	455
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,25,203,9,3
	.word	85133
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,25,206,9,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	4,28,2,35,0,11
	.byte	'ENTRY_LVAL',0,4
	.word	455
	.byte	8,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	455
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,25,211,9,3
	.word	85263
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,25,214,9,16,4,11
	.byte	'EXIT_CVAL',0,4
	.word	455
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	455
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,25,218,9,3
	.word	85415
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,25,221,9,16,4,11
	.byte	'reserved_0',0,4
	.word	455
	.byte	4,28,2,35,0,11
	.byte	'EXIT_LVAL',0,4
	.word	455
	.byte	20,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	455
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,25,226,9,3
	.word	85542
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_FCX_Bits',0,25,229,9,16,4,11
	.byte	'EXIT_FCX',0,4
	.word	455
	.byte	20,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	455
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_FCX_Bits',0,25,233,9,3
	.word	85691
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_STAT_Bits',0,25,236,9,16,4,11
	.byte	'EXIT_TIN',0,4
	.word	455
	.byte	8,24,2,35,0,11
	.byte	'EXIT_CLASS',0,4
	.word	455
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	455
	.byte	4,17,2,35,0,11
	.byte	'EXIT_AT',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'ENTRY_TIN',0,4
	.word	455
	.byte	8,8,2,35,0,11
	.byte	'ENTRY_CLASS',0,4
	.word	455
	.byte	3,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	455
	.byte	4,1,2,35,0,11
	.byte	'ENTRY_AT',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_STAT_Bits',0,25,246,9,3
	.word	85805
	.byte	10
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,25,249,9,16,4,11
	.byte	'TIMER',0,4
	.word	455
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,25,252,9,3
	.word	86049
	.byte	10
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,25,255,9,16,4,11
	.byte	'T0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'T1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'T2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'T3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'T4',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'T5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'T6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'T7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	455
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,25,138,10,3
	.word	86129
	.byte	10
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,25,141,10,16,4,11
	.byte	'ADDR',0,4
	.word	455
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_TR_ADR_Bits',0,25,144,10,3
	.word	86324
	.byte	10
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,25,147,10,16,4,11
	.byte	'EVTA',0,4
	.word	455
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	455
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	455
	.byte	4,20,2,35,0,11
	.byte	'TYP',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'RNG',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'ASI_EN',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'ASI',0,4
	.word	455
	.byte	5,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	455
	.byte	6,5,2,35,0,11
	.byte	'AST',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'ALD',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	455
	.byte	3,0,2,35,0,0,32
	.byte	'Ifx_CPU_TR_EVT_Bits',0,25,164,10,3
	.word	86397
	.byte	12,25,172,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67752
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_A',0,25,177,10,3
	.word	86715
	.byte	12,25,180,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67813
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BIV',0,25,185,10,3
	.word	86774
	.byte	12,25,188,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67892
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OMASK',0,25,193,10,3
	.word	86835
	.byte	12,25,196,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68030
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OTAR',0,25,201,10,3
	.word	86902
	.byte	12,25,204,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68151
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_RABR',0,25,209,10,3
	.word	86968
	.byte	12,25,212,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68327
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BTV',0,25,217,10,3
	.word	87034
	.byte	12,25,220,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68413
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CCNT',0,25,225,10,3
	.word	87095
	.byte	12,25,228,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68502
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CCTRL',0,25,233,10,3
	.word	87157
	.byte	12,25,236,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68649
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_COMPAT',0,25,241,10,3
	.word	87220
	.byte	12,25,244,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68778
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CORE_ID',0,25,249,10,3
	.word	87284
	.byte	12,25,252,10,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68878
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_L',0,25,129,11,3
	.word	87349
	.byte	12,25,132,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68973
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_U',0,25,137,11,3
	.word	87412
	.byte	12,25,140,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69068
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPU_ID',0,25,145,11,3
	.word	87475
	.byte	12,25,148,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69178
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPXE',0,25,153,11,3
	.word	87539
	.byte	12,25,156,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69270
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CREVT',0,25,161,11,3
	.word	87601
	.byte	12,25,164,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69424
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CUS_ID',0,25,169,11,3
	.word	87664
	.byte	12,25,172,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69518
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_D',0,25,177,11,3
	.word	87728
	.byte	12,25,180,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69581
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DATR',0,25,185,11,3
	.word	87787
	.byte	12,25,188,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69807
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DBGSR',0,25,193,11,3
	.word	87849
	.byte	12,25,196,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70022
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DBGTCR',0,25,201,11,3
	.word	87912
	.byte	12,25,204,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70116
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DCON0',0,25,209,11,3
	.word	87976
	.byte	12,25,212,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70232
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DCON2',0,25,217,11,3
	.word	88039
	.byte	12,25,220,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70333
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DCX',0,25,225,11,3
	.word	88102
	.byte	12,25,228,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70426
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DEADD',0,25,233,11,3
	.word	88163
	.byte	12,25,236,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70506
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DIEAR',0,25,241,11,3
	.word	88226
	.byte	12,25,244,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70575
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DIETR',0,25,249,11,3
	.word	88289
	.byte	12,25,252,11,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70859
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R',0,25,129,12,3
	.word	88352
	.byte	12,25,132,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71450
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W',0,25,137,12,3
	.word	88432
	.byte	12,25,140,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72041
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R',0,25,145,12,3
	.word	88512
	.byte	12,25,148,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72642
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W',0,25,153,12,3
	.word	88592
	.byte	12,25,156,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73243
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA',0,25,161,12,3
	.word	88672
	.byte	12,25,164,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73358
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA',0,25,169,12,3
	.word	88746
	.byte	12,25,172,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73473
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DMS',0,25,177,12,3
	.word	88820
	.byte	12,25,180,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73566
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPRE',0,25,185,12,3
	.word	88881
	.byte	12,25,188,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73658
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_L',0,25,193,12,3
	.word	88943
	.byte	12,25,196,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73753
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_U',0,25,201,12,3
	.word	89006
	.byte	12,25,204,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73848
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPWE',0,25,209,12,3
	.word	89069
	.byte	12,25,212,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73940
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DSTR',0,25,217,12,3
	.word	89131
	.byte	12,25,220,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74279
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_EXEVT',0,25,225,12,3
	.word	89193
	.byte	12,25,228,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74433
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FCX',0,25,233,12,3
	.word	89256
	.byte	12,25,236,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74539
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON0',0,25,241,12,3
	.word	89317
	.byte	12,25,244,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74757
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON1',0,25,249,12,3
	.word	89384
	.byte	12,25,252,12,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74948
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON2',0,25,129,13,3
	.word	89451
	.byte	12,25,132,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75248
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON3',0,25,137,13,3
	.word	89518
	.byte	12,25,140,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75553
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON4',0,25,145,13,3
	.word	89585
	.byte	12,25,148,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75654
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,25,153,13,3
	.word	89652
	.byte	12,25,156,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76003
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,25,161,13,3
	.word	89722
	.byte	12,25,164,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76163
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,25,169,13,3
	.word	89792
	.byte	12,25,172,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76244
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,25,177,13,3
	.word	89861
	.byte	12,25,180,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76331
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,25,185,13,3
	.word	89932
	.byte	12,25,188,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76418
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,25,193,13,3
	.word	90003
	.byte	12,25,196,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76505
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ICNT',0,25,201,13,3
	.word	90074
	.byte	12,25,204,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76596
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ICR',0,25,209,13,3
	.word	90136
	.byte	12,25,212,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76738
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ISP',0,25,217,13,3
	.word	90197
	.byte	12,25,220,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76804
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_KRST0',0,25,225,13,3
	.word	90258
	.byte	12,25,228,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76915
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_KRST1',0,25,233,13,3
	.word	90321
	.byte	12,25,236,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77007
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_KRSTCLR',0,25,241,13,3
	.word	90384
	.byte	12,25,244,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77103
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_LCX',0,25,249,13,3
	.word	90449
	.byte	12,25,252,13,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77209
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R',0,25,129,14,3
	.word	90510
	.byte	12,25,132,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77792
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R',0,25,137,14,3
	.word	90586
	.byte	12,25,140,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78385
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M1CNT',0,25,145,14,3
	.word	90662
	.byte	12,25,148,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78478
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M2CNT',0,25,153,14,3
	.word	90725
	.byte	12,25,156,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78571
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M3CNT',0,25,161,14,3
	.word	90788
	.byte	12,25,164,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78664
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_OSEL',0,25,169,14,3
	.word	90851
	.byte	12,25,172,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78737
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PC',0,25,177,14,3
	.word	90913
	.byte	12,25,180,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78822
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCON0',0,25,185,14,3
	.word	90973
	.byte	12,25,188,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78938
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCON1',0,25,193,14,3
	.word	91036
	.byte	12,25,196,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79049
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCON2',0,25,201,14,3
	.word	91099
	.byte	12,25,204,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79150
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCXI',0,25,209,14,3
	.word	91162
	.byte	12,25,212,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79303
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PIEAR',0,25,217,14,3
	.word	91224
	.byte	12,25,220,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79372
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PIETR',0,25,225,14,3
	.word	91287
	.byte	12,25,228,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79656
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA0',0,25,233,14,3
	.word	91350
	.byte	12,25,236,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79747
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA1',0,25,241,14,3
	.word	91412
	.byte	12,25,244,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79838
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA2',0,25,249,14,3
	.word	91474
	.byte	12,25,252,14,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79929
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PSTR',0,25,129,15,3
	.word	91536
	.byte	12,25,132,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80132
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PSW',0,25,137,15,3
	.word	91598
	.byte	12,25,140,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80337
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENA',0,25,145,15,3
	.word	91659
	.byte	12,25,148,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80904
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENB',0,25,153,15,3
	.word	91727
	.byte	12,25,156,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81481
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_LA',0,25,161,15,3
	.word	91795
	.byte	12,25,164,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81576
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_UA',0,25,169,15,3
	.word	91859
	.byte	12,25,172,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81671
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SEGEN',0,25,177,15,3
	.word	91923
	.byte	12,25,180,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81799
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W',0,25,185,15,3
	.word	91986
	.byte	12,25,188,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82382
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W',0,25,193,15,3
	.word	92062
	.byte	12,25,196,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82975
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SMACON',0,25,201,15,3
	.word	92138
	.byte	12,25,204,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83093
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R',0,25,209,15,3
	.word	92202
	.byte	12,25,212,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83682
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R',0,25,217,15,3
	.word	92281
	.byte	12,25,220,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	84281
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SWEVT',0,25,225,15,3
	.word	92360
	.byte	12,25,228,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	84435
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SYSCON',0,25,233,15,3
	.word	92423
	.byte	12,25,236,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	84734
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TASK_ASI',0,25,241,15,3
	.word	92487
	.byte	12,25,244,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	84832
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_CON',0,25,249,15,3
	.word	92553
	.byte	12,25,252,15,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85004
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN',0,25,129,16,3
	.word	92618
	.byte	12,25,132,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85133
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL',0,25,137,16,3
	.word	92694
	.byte	12,25,140,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85263
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL',0,25,145,16,3
	.word	92772
	.byte	12,25,148,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85415
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL',0,25,153,16,3
	.word	92850
	.byte	12,25,156,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85542
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL',0,25,161,16,3
	.word	92927
	.byte	12,25,164,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85691
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_FCX',0,25,169,16,3
	.word	93004
	.byte	12,25,172,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	85805
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_STAT',0,25,177,16,3
	.word	93075
	.byte	12,25,180,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86049
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_TIMER',0,25,185,16,3
	.word	93147
	.byte	12,25,188,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86129
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TRIG_ACC',0,25,193,16,3
	.word	93214
	.byte	12,25,196,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86324
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TR_ADR',0,25,201,16,3
	.word	93280
	.byte	12,25,204,16,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86397
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TR_EVT',0,25,209,16,3
	.word	93344
	.byte	10
	.byte	'_Ifx_CPU_RGN',0,25,221,16,25,16,13
	.byte	'LA',0
	.word	91795
	.byte	4,2,35,0,13
	.byte	'UA',0
	.word	91859
	.byte	4,2,35,4,13
	.byte	'ACCENA',0
	.word	91659
	.byte	4,2,35,8,13
	.byte	'ACCENB',0
	.word	91727
	.byte	4,2,35,12,0,14
	.word	93408
	.byte	32
	.byte	'Ifx_CPU_RGN',0,25,227,16,3
	.word	93484
	.byte	10
	.byte	'_Ifx_CPU_BLK',0,25,242,16,25,12,13
	.byte	'RABR',0
	.word	86968
	.byte	4,2,35,0,13
	.byte	'OTAR',0
	.word	86902
	.byte	4,2,35,4,13
	.byte	'OMASK',0
	.word	86835
	.byte	4,2,35,8,0,14
	.word	93510
	.byte	32
	.byte	'Ifx_CPU_BLK',0,25,247,16,3
	.word	93573
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP',0,25,134,17,25,28,13
	.byte	'CON',0
	.word	89652
	.byte	4,2,35,0,13
	.byte	'PC',0
	.word	89792
	.byte	4,2,35,4,13
	.byte	'OPC',0
	.word	89722
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2366
	.byte	4,2,35,12,13
	.byte	'SRC1',0
	.word	89861
	.byte	4,2,35,16,13
	.byte	'SRC2',0
	.word	89932
	.byte	4,2,35,20,13
	.byte	'SRC3',0
	.word	90003
	.byte	4,2,35,24,0,14
	.word	93599
	.byte	32
	.byte	'Ifx_CPU_FPU_TRAP',0,25,143,17,3
	.word	93724
	.byte	10
	.byte	'_Ifx_CPU_DPR',0,25,158,17,25,8,13
	.byte	'L',0
	.word	88943
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	89006
	.byte	4,2,35,4,0,14
	.word	93755
	.byte	32
	.byte	'Ifx_CPU_DPR',0,25,162,17,3
	.word	93797
	.byte	10
	.byte	'_Ifx_CPU_CPR',0,25,177,17,25,8,13
	.byte	'L',0
	.word	87349
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	87412
	.byte	4,2,35,4,0,14
	.word	93823
	.byte	32
	.byte	'Ifx_CPU_CPR',0,25,181,17,3
	.word	93865
	.byte	18,12
	.word	93147
	.byte	19,2,0,10
	.byte	'_Ifx_CPU_TPS',0,25,196,17,25,16,13
	.byte	'CON',0
	.word	92553
	.byte	4,2,35,0,13
	.byte	'TIMER',0
	.word	93891
	.byte	12,2,35,4,0,14
	.word	93900
	.byte	32
	.byte	'Ifx_CPU_TPS',0,25,200,17,3
	.word	93948
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM',0,25,215,17,25,28,13
	.byte	'ENTRY_LVAL',0
	.word	92772
	.byte	4,2,35,0,13
	.byte	'ENTRY_CVAL',0
	.word	92694
	.byte	4,2,35,4,13
	.byte	'EXIT_LVAL',0
	.word	92927
	.byte	4,2,35,8,13
	.byte	'EXIT_CVAL',0
	.word	92850
	.byte	4,2,35,12,13
	.byte	'CLASS_EN',0
	.word	92618
	.byte	4,2,35,16,13
	.byte	'STAT',0
	.word	93075
	.byte	4,2,35,20,13
	.byte	'FCX',0
	.word	93004
	.byte	4,2,35,24,0,14
	.word	93974
	.byte	32
	.byte	'Ifx_CPU_TPS_EXTIM',0,25,224,17,3
	.word	94123
	.byte	10
	.byte	'_Ifx_CPU_TR',0,25,239,17,25,8,13
	.byte	'EVT',0
	.word	93344
	.byte	4,2,35,0,13
	.byte	'ADR',0
	.word	93280
	.byte	4,2,35,4,0,14
	.word	94155
	.byte	32
	.byte	'Ifx_CPU_TR',0,25,243,17,3
	.word	94200
	.byte	18,128,34
	.word	607
	.byte	19,255,33,0,18,236,253,2
	.word	607
	.byte	19,235,253,2,0,18,244,31
	.word	607
	.byte	19,243,31,0,18,128,1
	.word	93408
	.byte	19,7,0,14
	.word	94260
	.byte	18,232,1
	.word	607
	.byte	19,231,1,0,18,128,48
	.word	607
	.byte	19,255,47,0,18,128,3
	.word	93510
	.byte	19,31,0,14
	.word	94297
	.byte	18,160,39
	.word	607
	.byte	19,159,39,0,18,208,223,1
	.word	607
	.byte	19,207,223,1,0,18,248,1
	.word	607
	.byte	19,247,1,0,18,244,29
	.word	607
	.byte	19,243,29,0,18,188,3
	.word	607
	.byte	19,187,3,0,18,232,3
	.word	607
	.byte	19,231,3,0,18,252,23
	.word	607
	.byte	19,251,23,0,14
	.word	93599
	.byte	18,228,63
	.word	607
	.byte	19,227,63,0,18,144,1
	.word	93755
	.byte	19,17,0,14
	.word	94407
	.byte	18,240,30
	.word	607
	.byte	19,239,30,0,18,80
	.word	93823
	.byte	19,9,0,14
	.word	94433
	.byte	18,176,31
	.word	607
	.byte	19,175,31,0,18,152,7
	.word	607
	.byte	19,151,7,0,14
	.word	93900
	.byte	18,48
	.word	607
	.byte	19,47,0,14
	.word	93974
	.byte	18,164,23
	.word	607
	.byte	19,163,23,0,18,64
	.word	94155
	.byte	19,7,0,14
	.word	94499
	.byte	18,192,23
	.word	607
	.byte	19,191,23,0,18,28
	.word	607
	.byte	19,27,0,18,180,1
	.word	607
	.byte	19,179,1,0,18,172,1
	.word	607
	.byte	19,171,1,0,18,64
	.word	87728
	.byte	19,15,0,18,64
	.word	607
	.byte	19,63,0,18,64
	.word	86715
	.byte	19,15,0,10
	.byte	'_Ifx_CPU',0,25,130,18,25,128,128,8,13
	.byte	'reserved_0',0
	.word	94225
	.byte	128,34,2,35,0,13
	.byte	'FLASHCON0',0
	.word	89317
	.byte	4,3,35,128,34,13
	.byte	'FLASHCON1',0
	.word	89384
	.byte	4,3,35,132,34,13
	.byte	'FLASHCON2',0
	.word	89451
	.byte	4,3,35,136,34,13
	.byte	'FLASHCON3',0
	.word	89518
	.byte	4,3,35,140,34,13
	.byte	'FLASHCON4',0
	.word	89585
	.byte	4,3,35,144,34,13
	.byte	'reserved_1114',0
	.word	94236
	.byte	236,253,2,3,35,148,34,13
	.byte	'KRST0',0
	.word	90258
	.byte	4,4,35,128,160,3,13
	.byte	'KRST1',0
	.word	90321
	.byte	4,4,35,132,160,3,13
	.byte	'KRSTCLR',0
	.word	90384
	.byte	4,4,35,136,160,3,13
	.byte	'reserved_D00C',0
	.word	94249
	.byte	244,31,4,35,140,160,3,13
	.byte	'RGN',0
	.word	94270
	.byte	128,1,4,35,128,192,3,13
	.byte	'reserved_E080',0
	.word	8651
	.byte	8,4,35,128,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R0',0
	.word	92202
	.byte	4,4,35,136,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R0',0
	.word	92281
	.byte	4,4,35,140,193,3,13
	.byte	'reserved_E090',0
	.word	8651
	.byte	8,4,35,144,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R1',0
	.word	92202
	.byte	4,4,35,152,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R1',0
	.word	92281
	.byte	4,4,35,156,193,3,13
	.byte	'reserved_E0A0',0
	.word	8651
	.byte	8,4,35,160,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R2',0
	.word	92202
	.byte	4,4,35,168,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R2',0
	.word	92281
	.byte	4,4,35,172,193,3,13
	.byte	'reserved_E0B0',0
	.word	8651
	.byte	8,4,35,176,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R3',0
	.word	92202
	.byte	4,4,35,184,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R3',0
	.word	92281
	.byte	4,4,35,188,193,3,13
	.byte	'reserved_E0C0',0
	.word	8651
	.byte	8,4,35,192,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R4',0
	.word	92202
	.byte	4,4,35,200,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R4',0
	.word	92281
	.byte	4,4,35,204,193,3,13
	.byte	'reserved_E0D0',0
	.word	8651
	.byte	8,4,35,208,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R5',0
	.word	92202
	.byte	4,4,35,216,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R5',0
	.word	92281
	.byte	4,4,35,220,193,3,13
	.byte	'reserved_E0E0',0
	.word	8651
	.byte	8,4,35,224,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R6',0
	.word	92202
	.byte	4,4,35,232,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R6',0
	.word	92281
	.byte	4,4,35,236,193,3,13
	.byte	'reserved_E0F0',0
	.word	8651
	.byte	8,4,35,240,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R7',0
	.word	92202
	.byte	4,4,35,248,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R7',0
	.word	92281
	.byte	4,4,35,252,193,3,13
	.byte	'SFR_SPROT_ACCENA_W',0
	.word	91986
	.byte	4,4,35,128,194,3,13
	.byte	'SFR_SPROT_ACCENB_W',0
	.word	92062
	.byte	4,4,35,132,194,3,13
	.byte	'reserved_E108',0
	.word	8651
	.byte	8,4,35,136,194,3,13
	.byte	'LPB_SPROT_ACCENA_R',0
	.word	90510
	.byte	4,4,35,144,194,3,13
	.byte	'LPB_SPROT_ACCENB_R',0
	.word	90586
	.byte	4,4,35,148,194,3,13
	.byte	'reserved_E118',0
	.word	94275
	.byte	232,1,4,35,152,194,3,13
	.byte	'DLMU_SPROT_RGNLA0',0
	.word	88672
	.byte	4,4,35,128,196,3,13
	.byte	'DLMU_SPROT_RGNUA0',0
	.word	88746
	.byte	4,4,35,132,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W0',0
	.word	88432
	.byte	4,4,35,136,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W0',0
	.word	88592
	.byte	4,4,35,140,196,3,13
	.byte	'DLMU_SPROT_RGNLA1',0
	.word	88672
	.byte	4,4,35,144,196,3,13
	.byte	'DLMU_SPROT_RGNUA1',0
	.word	88746
	.byte	4,4,35,148,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W1',0
	.word	88432
	.byte	4,4,35,152,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W1',0
	.word	88592
	.byte	4,4,35,156,196,3,13
	.byte	'DLMU_SPROT_RGNLA2',0
	.word	88672
	.byte	4,4,35,160,196,3,13
	.byte	'DLMU_SPROT_RGNUA2',0
	.word	88746
	.byte	4,4,35,164,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W2',0
	.word	88432
	.byte	4,4,35,168,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W2',0
	.word	88592
	.byte	4,4,35,172,196,3,13
	.byte	'DLMU_SPROT_RGNLA3',0
	.word	88672
	.byte	4,4,35,176,196,3,13
	.byte	'DLMU_SPROT_RGNUA3',0
	.word	88746
	.byte	4,4,35,180,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W3',0
	.word	88432
	.byte	4,4,35,184,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W3',0
	.word	88592
	.byte	4,4,35,188,196,3,13
	.byte	'DLMU_SPROT_RGNLA4',0
	.word	88672
	.byte	4,4,35,192,196,3,13
	.byte	'DLMU_SPROT_RGNUA4',0
	.word	88746
	.byte	4,4,35,196,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W4',0
	.word	88432
	.byte	4,4,35,200,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W4',0
	.word	88592
	.byte	4,4,35,204,196,3,13
	.byte	'DLMU_SPROT_RGNLA5',0
	.word	88672
	.byte	4,4,35,208,196,3,13
	.byte	'DLMU_SPROT_RGNUA5',0
	.word	88746
	.byte	4,4,35,212,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W5',0
	.word	88432
	.byte	4,4,35,216,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W5',0
	.word	88592
	.byte	4,4,35,220,196,3,13
	.byte	'DLMU_SPROT_RGNLA6',0
	.word	88672
	.byte	4,4,35,224,196,3,13
	.byte	'DLMU_SPROT_RGNUA6',0
	.word	88746
	.byte	4,4,35,228,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W6',0
	.word	88432
	.byte	4,4,35,232,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W6',0
	.word	88592
	.byte	4,4,35,236,196,3,13
	.byte	'DLMU_SPROT_RGNLA7',0
	.word	88672
	.byte	4,4,35,240,196,3,13
	.byte	'DLMU_SPROT_RGNUA7',0
	.word	88746
	.byte	4,4,35,244,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W7',0
	.word	88432
	.byte	4,4,35,248,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W7',0
	.word	88592
	.byte	4,4,35,252,196,3,13
	.byte	'reserved_E280',0
	.word	8651
	.byte	8,4,35,128,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R0',0
	.word	88352
	.byte	4,4,35,136,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R0',0
	.word	88512
	.byte	4,4,35,140,197,3,13
	.byte	'reserved_E290',0
	.word	8651
	.byte	8,4,35,144,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R1',0
	.word	88352
	.byte	4,4,35,152,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R1',0
	.word	88512
	.byte	4,4,35,156,197,3,13
	.byte	'reserved_E2A0',0
	.word	8651
	.byte	8,4,35,160,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R2',0
	.word	88352
	.byte	4,4,35,168,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R2',0
	.word	88512
	.byte	4,4,35,172,197,3,13
	.byte	'reserved_E2B0',0
	.word	8651
	.byte	8,4,35,176,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R3',0
	.word	88352
	.byte	4,4,35,184,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R3',0
	.word	88512
	.byte	4,4,35,188,197,3,13
	.byte	'reserved_E2C0',0
	.word	8651
	.byte	8,4,35,192,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R4',0
	.word	88352
	.byte	4,4,35,200,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R4',0
	.word	88512
	.byte	4,4,35,204,197,3,13
	.byte	'reserved_E2D0',0
	.word	8651
	.byte	8,4,35,208,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R5',0
	.word	88352
	.byte	4,4,35,216,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R5',0
	.word	88512
	.byte	4,4,35,220,197,3,13
	.byte	'reserved_E2E0',0
	.word	8651
	.byte	8,4,35,224,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R6',0
	.word	88352
	.byte	4,4,35,232,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R6',0
	.word	88512
	.byte	4,4,35,236,197,3,13
	.byte	'reserved_E2F0',0
	.word	8651
	.byte	8,4,35,240,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R7',0
	.word	88352
	.byte	4,4,35,248,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R7',0
	.word	88512
	.byte	4,4,35,252,197,3,13
	.byte	'reserved_E300',0
	.word	94286
	.byte	128,48,4,35,128,198,3,13
	.byte	'OSEL',0
	.word	90851
	.byte	4,4,35,128,246,3,13
	.byte	'reserved_FB04',0
	.word	8991
	.byte	12,4,35,132,246,3,13
	.byte	'BLK',0
	.word	94307
	.byte	128,3,4,35,144,246,3,13
	.byte	'reserved_FC90',0
	.word	94312
	.byte	160,39,4,35,144,249,3,13
	.byte	'SEGEN',0
	.word	91923
	.byte	4,4,35,176,160,4,13
	.byte	'reserved_11034',0
	.word	94323
	.byte	208,223,1,4,35,180,160,4,13
	.byte	'TASK_ASI',0
	.word	92487
	.byte	4,4,35,132,128,6,13
	.byte	'reserved_18008',0
	.word	94336
	.byte	248,1,4,35,136,128,6,13
	.byte	'PMA0',0
	.word	91350
	.byte	4,4,35,128,130,6,13
	.byte	'PMA1',0
	.word	91412
	.byte	4,4,35,132,130,6,13
	.byte	'PMA2',0
	.word	91474
	.byte	4,4,35,136,130,6,13
	.byte	'reserved_1810C',0
	.word	94347
	.byte	244,29,4,35,140,130,6,13
	.byte	'DCON2',0
	.word	88039
	.byte	4,4,35,128,160,6,13
	.byte	'reserved_19004',0
	.word	8651
	.byte	8,4,35,132,160,6,13
	.byte	'SMACON',0
	.word	92138
	.byte	4,4,35,140,160,6,13
	.byte	'DSTR',0
	.word	89131
	.byte	4,4,35,144,160,6,13
	.byte	'reserved_19014',0
	.word	2366
	.byte	4,4,35,148,160,6,13
	.byte	'DATR',0
	.word	87787
	.byte	4,4,35,152,160,6,13
	.byte	'DEADD',0
	.word	88163
	.byte	4,4,35,156,160,6,13
	.byte	'DIEAR',0
	.word	88226
	.byte	4,4,35,160,160,6,13
	.byte	'DIETR',0
	.word	88289
	.byte	4,4,35,164,160,6,13
	.byte	'reserved_19028',0
	.word	8022
	.byte	24,4,35,168,160,6,13
	.byte	'DCON0',0
	.word	87976
	.byte	4,4,35,192,160,6,13
	.byte	'reserved_19044',0
	.word	94358
	.byte	188,3,4,35,196,160,6,13
	.byte	'PSTR',0
	.word	91536
	.byte	4,4,35,128,164,6,13
	.byte	'PCON1',0
	.word	91036
	.byte	4,4,35,132,164,6,13
	.byte	'PCON2',0
	.word	91099
	.byte	4,4,35,136,164,6,13
	.byte	'PCON0',0
	.word	90973
	.byte	4,4,35,140,164,6,13
	.byte	'PIEAR',0
	.word	91224
	.byte	4,4,35,144,164,6,13
	.byte	'PIETR',0
	.word	91287
	.byte	4,4,35,148,164,6,13
	.byte	'reserved_19218',0
	.word	94369
	.byte	232,3,4,35,152,164,6,13
	.byte	'COMPAT',0
	.word	87220
	.byte	4,4,35,128,168,6,13
	.byte	'reserved_19404',0
	.word	94380
	.byte	252,23,4,35,132,168,6,13
	.byte	'FPU_TRAP',0
	.word	94391
	.byte	28,4,35,128,192,6,13
	.byte	'reserved_1A01C',0
	.word	94396
	.byte	228,63,4,35,156,192,6,13
	.byte	'DPR',0
	.word	94417
	.byte	144,1,4,35,128,128,7,13
	.byte	'reserved_1C090',0
	.word	94422
	.byte	240,30,4,35,144,129,7,13
	.byte	'CPR',0
	.word	94442
	.byte	80,4,35,128,160,7,13
	.byte	'reserved_1D050',0
	.word	94447
	.byte	176,31,4,35,208,160,7,13
	.byte	'CPXE_0',0
	.word	87539
	.byte	4,4,35,128,192,7,13
	.byte	'CPXE_1',0
	.word	87539
	.byte	4,4,35,132,192,7,13
	.byte	'CPXE_2',0
	.word	87539
	.byte	4,4,35,136,192,7,13
	.byte	'CPXE_3',0
	.word	87539
	.byte	4,4,35,140,192,7,13
	.byte	'DPRE_0',0
	.word	88881
	.byte	4,4,35,144,192,7,13
	.byte	'DPRE_1',0
	.word	88881
	.byte	4,4,35,148,192,7,13
	.byte	'DPRE_2',0
	.word	88881
	.byte	4,4,35,152,192,7,13
	.byte	'DPRE_3',0
	.word	88881
	.byte	4,4,35,156,192,7,13
	.byte	'DPWE_0',0
	.word	89069
	.byte	4,4,35,160,192,7,13
	.byte	'DPWE_1',0
	.word	89069
	.byte	4,4,35,164,192,7,13
	.byte	'DPWE_2',0
	.word	89069
	.byte	4,4,35,168,192,7,13
	.byte	'DPWE_3',0
	.word	89069
	.byte	4,4,35,172,192,7,13
	.byte	'reserved_1E030',0
	.word	19342
	.byte	16,4,35,176,192,7,13
	.byte	'CPXE_4',0
	.word	87539
	.byte	4,4,35,192,192,7,13
	.byte	'CPXE_5',0
	.word	87539
	.byte	4,4,35,196,192,7,13
	.byte	'reserved_1E048',0
	.word	8651
	.byte	8,4,35,200,192,7,13
	.byte	'DPRE_4',0
	.word	88881
	.byte	4,4,35,208,192,7,13
	.byte	'DPRE_5',0
	.word	88881
	.byte	4,4,35,212,192,7,13
	.byte	'reserved_1E058',0
	.word	8651
	.byte	8,4,35,216,192,7,13
	.byte	'DPWE_4',0
	.word	89069
	.byte	4,4,35,224,192,7,13
	.byte	'DPWE_5',0
	.word	89069
	.byte	4,4,35,228,192,7,13
	.byte	'reserved_1E068',0
	.word	94458
	.byte	152,7,4,35,232,192,7,13
	.byte	'TPS',0
	.word	94469
	.byte	16,4,35,128,200,7,13
	.byte	'reserved_1E410',0
	.word	94474
	.byte	48,4,35,144,200,7,13
	.byte	'TPS_EXTIM',0
	.word	94483
	.byte	28,4,35,192,200,7,13
	.byte	'reserved_1E45C',0
	.word	94488
	.byte	164,23,4,35,220,200,7,13
	.byte	'TR',0
	.word	94508
	.byte	64,4,35,128,224,7,13
	.byte	'reserved_1F040',0
	.word	94513
	.byte	192,23,4,35,192,224,7,13
	.byte	'CCTRL',0
	.word	87157
	.byte	4,4,35,128,248,7,13
	.byte	'CCNT',0
	.word	87095
	.byte	4,4,35,132,248,7,13
	.byte	'ICNT',0
	.word	90074
	.byte	4,4,35,136,248,7,13
	.byte	'M1CNT',0
	.word	90662
	.byte	4,4,35,140,248,7,13
	.byte	'M2CNT',0
	.word	90725
	.byte	4,4,35,144,248,7,13
	.byte	'M3CNT',0
	.word	90788
	.byte	4,4,35,148,248,7,13
	.byte	'reserved_1FC18',0
	.word	94275
	.byte	232,1,4,35,152,248,7,13
	.byte	'DBGSR',0
	.word	87849
	.byte	4,4,35,128,250,7,13
	.byte	'reserved_1FD04',0
	.word	2366
	.byte	4,4,35,132,250,7,13
	.byte	'EXEVT',0
	.word	89193
	.byte	4,4,35,136,250,7,13
	.byte	'CREVT',0
	.word	87601
	.byte	4,4,35,140,250,7,13
	.byte	'SWEVT',0
	.word	92360
	.byte	4,4,35,144,250,7,13
	.byte	'reserved_1FD14',0
	.word	94524
	.byte	28,4,35,148,250,7,13
	.byte	'TRIG_ACC',0
	.word	93214
	.byte	4,4,35,176,250,7,13
	.byte	'reserved_1FD34',0
	.word	8991
	.byte	12,4,35,180,250,7,13
	.byte	'DMS',0
	.word	88820
	.byte	4,4,35,192,250,7,13
	.byte	'DCX',0
	.word	88102
	.byte	4,4,35,196,250,7,13
	.byte	'DBGTCR',0
	.word	87912
	.byte	4,4,35,200,250,7,13
	.byte	'reserved_1FD4C',0
	.word	94533
	.byte	180,1,4,35,204,250,7,13
	.byte	'PCXI',0
	.word	91162
	.byte	4,4,35,128,252,7,13
	.byte	'PSW',0
	.word	91598
	.byte	4,4,35,132,252,7,13
	.byte	'PC',0
	.word	90913
	.byte	4,4,35,136,252,7,13
	.byte	'reserved_1FE0C',0
	.word	8651
	.byte	8,4,35,140,252,7,13
	.byte	'SYSCON',0
	.word	92423
	.byte	4,4,35,148,252,7,13
	.byte	'CPU_ID',0
	.word	87475
	.byte	4,4,35,152,252,7,13
	.byte	'CORE_ID',0
	.word	87284
	.byte	4,4,35,156,252,7,13
	.byte	'BIV',0
	.word	86774
	.byte	4,4,35,160,252,7,13
	.byte	'BTV',0
	.word	87034
	.byte	4,4,35,164,252,7,13
	.byte	'ISP',0
	.word	90197
	.byte	4,4,35,168,252,7,13
	.byte	'ICR',0
	.word	90136
	.byte	4,4,35,172,252,7,13
	.byte	'reserved_1FE30',0
	.word	8651
	.byte	8,4,35,176,252,7,13
	.byte	'FCX',0
	.word	89256
	.byte	4,4,35,184,252,7,13
	.byte	'LCX',0
	.word	90449
	.byte	4,4,35,188,252,7,13
	.byte	'reserved_1FE40',0
	.word	19342
	.byte	16,4,35,192,252,7,13
	.byte	'CUS_ID',0
	.word	87664
	.byte	4,4,35,208,252,7,13
	.byte	'reserved_1FE54',0
	.word	94544
	.byte	172,1,4,35,212,252,7,13
	.byte	'D',0
	.word	94555
	.byte	64,4,35,128,254,7,13
	.byte	'reserved_1FF40',0
	.word	94564
	.byte	64,4,35,192,254,7,13
	.byte	'A',0
	.word	94573
	.byte	64,4,35,128,255,7,13
	.byte	'reserved_1FFC0',0
	.word	94564
	.byte	64,4,35,192,255,7,0,14
	.word	94582
	.byte	32
	.byte	'Ifx_CPU',0,25,210,19,3
	.word	99680
	.byte	15,14,124,9,1,16
	.byte	'IfxCpu_Id_0',0,0,16
	.byte	'IfxCpu_Id_1',0,1,16
	.byte	'IfxCpu_Id_2',0,2,16
	.byte	'IfxCpu_Id_3',0,3,16
	.byte	'IfxCpu_Id_4',0,4,16
	.byte	'IfxCpu_Id_6',0,6,16
	.byte	'IfxCpu_Id_none',0,7,0,32
	.byte	'IfxCpu_Id',0,14,133,1,3
	.word	99702
	.byte	32
	.byte	'IfxCpu_ResourceCpu',0,14,170,1,3
	.word	13591
	.byte	10
	.byte	'_Ifx_STM_ACCEN0_Bits',0,26,68,16,4,11
	.byte	'EN0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_STM_ACCEN0_Bits',0,26,102,3
	.word	99856
	.byte	10
	.byte	'_Ifx_STM_ACCEN1_Bits',0,26,105,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN1_Bits',0,26,108,3
	.word	100413
	.byte	10
	.byte	'_Ifx_STM_CAP_Bits',0,26,111,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CAP_Bits',0,26,114,3
	.word	100490
	.byte	10
	.byte	'_Ifx_STM_CAPSV_Bits',0,26,117,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CAPSV_Bits',0,26,120,3
	.word	100563
	.byte	10
	.byte	'_Ifx_STM_CLC_Bits',0,26,123,16,4,11
	.byte	'DISR',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_STM_CLC_Bits',0,26,130,1,3
	.word	100640
	.byte	10
	.byte	'_Ifx_STM_CMCON_Bits',0,26,133,1,16,4,11
	.byte	'MSIZE0',0,1
	.word	607
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	607
	.byte	3,0,2,35,0,11
	.byte	'MSTART0',0,1
	.word	607
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	607
	.byte	3,0,2,35,1,11
	.byte	'MSIZE1',0,1
	.word	607
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	607
	.byte	3,0,2,35,2,11
	.byte	'MSTART1',0,1
	.word	607
	.byte	5,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	607
	.byte	3,0,2,35,3,0,32
	.byte	'Ifx_STM_CMCON_Bits',0,26,143,1,3
	.word	100782
	.byte	10
	.byte	'_Ifx_STM_CMP_Bits',0,26,146,1,16,4,11
	.byte	'CMPVAL',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CMP_Bits',0,26,149,1,3
	.word	101002
	.byte	10
	.byte	'_Ifx_STM_ICR_Bits',0,26,152,1,16,4,11
	.byte	'CMP0EN',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'CMP0IR',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'CMP0OS',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'CMP1EN',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'CMP1IR',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'CMP1OS',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	432
	.byte	25,0,2,35,0,0,32
	.byte	'Ifx_STM_ICR_Bits',0,26,162,1,3
	.word	101071
	.byte	10
	.byte	'_Ifx_STM_ID_Bits',0,26,165,1,16,4,11
	.byte	'MODREV',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	607
	.byte	8,0,2,35,1,11
	.byte	'MODNUM',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_STM_ID_Bits',0,26,170,1,3
	.word	101274
	.byte	10
	.byte	'_Ifx_STM_ISCR_Bits',0,26,173,1,16,4,11
	.byte	'CMP0IRR',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'CMP0IRS',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'CMP1IRR',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'CMP1IRS',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_STM_ISCR_Bits',0,26,180,1,3
	.word	101378
	.byte	10
	.byte	'_Ifx_STM_KRST0_Bits',0,26,183,1,16,4,11
	.byte	'RST',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_STM_KRST0_Bits',0,26,188,1,3
	.word	101529
	.byte	10
	.byte	'_Ifx_STM_KRST1_Bits',0,26,191,1,16,4,11
	.byte	'RST',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	432
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_STM_KRST1_Bits',0,26,195,1,3
	.word	101640
	.byte	10
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,26,198,1,16,4,11
	.byte	'CLR',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	432
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_STM_KRSTCLR_Bits',0,26,202,1,3
	.word	101732
	.byte	10
	.byte	'_Ifx_STM_OCS_Bits',0,26,205,1,16,4,11
	.byte	'reserved_0',0,1
	.word	607
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	432
	.byte	21,8,2,35,0,11
	.byte	'SUS',0,1
	.word	607
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	607
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_STM_OCS_Bits',0,26,213,1,3
	.word	101828
	.byte	10
	.byte	'_Ifx_STM_TIM0_Bits',0,26,216,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM0_Bits',0,26,219,1,3
	.word	101996
	.byte	10
	.byte	'_Ifx_STM_TIM0SV_Bits',0,26,222,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM0SV_Bits',0,26,225,1,3
	.word	102069
	.byte	10
	.byte	'_Ifx_STM_TIM1_Bits',0,26,228,1,16,4,11
	.byte	'STM_35_4',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM1_Bits',0,26,231,1,3
	.word	102146
	.byte	10
	.byte	'_Ifx_STM_TIM2_Bits',0,26,234,1,16,4,11
	.byte	'STM_39_8',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM2_Bits',0,26,237,1,3
	.word	102219
	.byte	10
	.byte	'_Ifx_STM_TIM3_Bits',0,26,240,1,16,4,11
	.byte	'STM_43_12',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM3_Bits',0,26,243,1,3
	.word	102292
	.byte	10
	.byte	'_Ifx_STM_TIM4_Bits',0,26,246,1,16,4,11
	.byte	'STM_47_16',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM4_Bits',0,26,249,1,3
	.word	102366
	.byte	10
	.byte	'_Ifx_STM_TIM5_Bits',0,26,252,1,16,4,11
	.byte	'STM_51_20',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM5_Bits',0,26,255,1,3
	.word	102440
	.byte	10
	.byte	'_Ifx_STM_TIM6_Bits',0,26,130,2,16,4,11
	.byte	'STM_63_32',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM6_Bits',0,26,133,2,3
	.word	102514
	.byte	12,26,141,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	99856
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN0',0,26,146,2,3
	.word	102588
	.byte	12,26,149,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	100413
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN1',0,26,154,2,3
	.word	102652
	.byte	12,26,157,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	100490
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CAP',0,26,162,2,3
	.word	102716
	.byte	12,26,165,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	100563
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CAPSV',0,26,170,2,3
	.word	102777
	.byte	12,26,173,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	100640
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CLC',0,26,178,2,3
	.word	102840
	.byte	12,26,181,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	100782
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CMCON',0,26,186,2,3
	.word	102901
	.byte	12,26,189,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101002
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CMP',0,26,194,2,3
	.word	102964
	.byte	12,26,197,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101071
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ICR',0,26,202,2,3
	.word	103025
	.byte	12,26,205,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101274
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ID',0,26,210,2,3
	.word	103086
	.byte	12,26,213,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101378
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ISCR',0,26,218,2,3
	.word	103146
	.byte	12,26,221,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101529
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRST0',0,26,226,2,3
	.word	103208
	.byte	12,26,229,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101640
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRST1',0,26,234,2,3
	.word	103271
	.byte	12,26,237,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101732
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRSTCLR',0,26,242,2,3
	.word	103334
	.byte	12,26,245,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101828
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_OCS',0,26,250,2,3
	.word	103399
	.byte	12,26,253,2,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	101996
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM0',0,26,130,3,3
	.word	103460
	.byte	12,26,133,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	102069
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM0SV',0,26,138,3,3
	.word	103522
	.byte	12,26,141,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	102146
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM1',0,26,146,3,3
	.word	103586
	.byte	12,26,149,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	102219
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM2',0,26,154,3,3
	.word	103648
	.byte	12,26,157,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	102292
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM3',0,26,162,3,3
	.word	103710
	.byte	12,26,165,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	102366
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM4',0,26,170,3,3
	.word	103772
	.byte	12,26,173,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	102440
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM5',0,26,178,3,3
	.word	103834
	.byte	12,26,181,3,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	102514
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM6',0,26,186,3,3
	.word	103896
	.byte	32
	.byte	'Ifx_P_ACCEN0_Bits',0,11,102,3
	.word	12179
	.byte	32
	.byte	'Ifx_P_ACCEN1_Bits',0,11,108,3
	.word	12092
	.byte	32
	.byte	'Ifx_P_ESR_Bits',0,11,130,1,3
	.word	8660
	.byte	32
	.byte	'Ifx_P_ID_Bits',0,11,138,1,3
	.word	6720
	.byte	32
	.byte	'Ifx_P_IN_Bits',0,11,160,1,3
	.word	7707
	.byte	32
	.byte	'Ifx_P_IOCR0_Bits',0,11,173,1,3
	.word	6840
	.byte	32
	.byte	'Ifx_P_IOCR12_Bits',0,11,186,1,3
	.word	7487
	.byte	32
	.byte	'Ifx_P_IOCR4_Bits',0,11,199,1,3
	.word	7055
	.byte	32
	.byte	'Ifx_P_IOCR8_Bits',0,11,212,1,3
	.word	7270
	.byte	32
	.byte	'Ifx_P_LPCR_Bits',0,11,231,1,3
	.word	11754
	.byte	32
	.byte	'Ifx_P_OMCR_Bits',0,11,253,1,3
	.word	11406
	.byte	32
	.byte	'Ifx_P_OMCR0_Bits',0,11,136,2,3
	.word	10393
	.byte	32
	.byte	'Ifx_P_OMCR12_Bits',0,11,146,2,3
	.word	10917
	.byte	32
	.byte	'Ifx_P_OMCR4_Bits',0,11,157,2,3
	.word	10567
	.byte	32
	.byte	'Ifx_P_OMCR8_Bits',0,11,168,2,3
	.word	10741
	.byte	32
	.byte	'Ifx_P_OMR_Bits',0,11,205,2,3
	.word	6149
	.byte	32
	.byte	'Ifx_P_OMSR_Bits',0,11,227,2,3
	.word	11073
	.byte	32
	.byte	'Ifx_P_OMSR0_Bits',0,11,237,2,3
	.word	9730
	.byte	32
	.byte	'Ifx_P_OMSR12_Bits',0,11,248,2,3
	.word	10218
	.byte	32
	.byte	'Ifx_P_OMSR4_Bits',0,11,131,3,3
	.word	9877
	.byte	32
	.byte	'Ifx_P_OMSR8_Bits',0,11,142,3,3
	.word	10046
	.byte	32
	.byte	'Ifx_P_OUT_Bits',0,11,164,3,3
	.word	5833
	.byte	32
	.byte	'Ifx_P_PCSR_Bits',0,11,187,3,3
	.word	9366
	.byte	32
	.byte	'Ifx_P_PDISC_Bits',0,11,209,3,3
	.word	9000
	.byte	32
	.byte	'Ifx_P_PDR0_Bits',0,11,230,3,3
	.word	8031
	.byte	32
	.byte	'Ifx_P_PDR1_Bits',0,11,251,3,3
	.word	8335
	.byte	32
	.byte	'Ifx_P_ACCEN0',0,11,136,4,3
	.word	12706
	.byte	32
	.byte	'Ifx_P_ACCEN1',0,11,144,4,3
	.word	12139
	.byte	32
	.byte	'Ifx_P_ESR',0,11,152,4,3
	.word	8951
	.byte	32
	.byte	'Ifx_P_ID',0,11,160,4,3
	.word	6800
	.byte	32
	.byte	'Ifx_P_IN',0,11,168,4,3
	.word	7982
	.byte	32
	.byte	'Ifx_P_IOCR0',0,11,176,4,3
	.word	7015
	.byte	32
	.byte	'Ifx_P_IOCR12',0,11,184,4,3
	.word	7667
	.byte	32
	.byte	'Ifx_P_IOCR4',0,11,192,4,3
	.word	7230
	.byte	32
	.byte	'Ifx_P_IOCR8',0,11,200,4,3
	.word	7447
	.byte	32
	.byte	'Ifx_P_LPCR',0,11,208,4,3
	.word	12034
	.byte	32
	.byte	'Ifx_P_OMCR',0,11,216,4,3
	.word	11714
	.byte	32
	.byte	'Ifx_P_OMCR0',0,11,224,4,3
	.word	10527
	.byte	32
	.byte	'Ifx_P_OMCR12',0,11,232,4,3
	.word	11033
	.byte	32
	.byte	'Ifx_P_OMCR4',0,11,240,4,3
	.word	10701
	.byte	32
	.byte	'Ifx_P_OMCR8',0,11,248,4,3
	.word	10877
	.byte	32
	.byte	'Ifx_P_OMR',0,11,128,5,3
	.word	6680
	.byte	32
	.byte	'Ifx_P_OMSR',0,11,136,5,3
	.word	11366
	.byte	32
	.byte	'Ifx_P_OMSR0',0,11,144,5,3
	.word	9837
	.byte	32
	.byte	'Ifx_P_OMSR12',0,11,152,5,3
	.word	10353
	.byte	32
	.byte	'Ifx_P_OMSR4',0,11,160,5,3
	.word	10006
	.byte	32
	.byte	'Ifx_P_OMSR8',0,11,168,5,3
	.word	10178
	.byte	32
	.byte	'Ifx_P_OUT',0,11,176,5,3
	.word	6109
	.byte	32
	.byte	'Ifx_P_PCSR',0,11,184,5,3
	.word	9690
	.byte	32
	.byte	'Ifx_P_PDISC',0,11,192,5,3
	.word	9326
	.byte	32
	.byte	'Ifx_P_PDR0',0,11,200,5,3
	.word	8295
	.byte	32
	.byte	'Ifx_P_PDR1',0,11,208,5,3
	.word	8611
	.byte	14
	.word	12746
	.byte	32
	.byte	'Ifx_P',0,11,128,6,3
	.word	105152
	.byte	15,10,73,9,1,16
	.byte	'IfxPort_ControlledBy_port',0,0,16
	.byte	'IfxPort_ControlledBy_hsct',0,1,0,32
	.byte	'IfxPort_ControlledBy',0,10,77,3
	.word	105172
	.byte	15,10,81,9,1,16
	.byte	'IfxPort_InputMode_undefined',0,127,16
	.byte	'IfxPort_InputMode_noPullDevice',0,0,16
	.byte	'IfxPort_InputMode_pullDown',0,8,16
	.byte	'IfxPort_InputMode_pullUp',0,16,0,32
	.byte	'IfxPort_InputMode',0,10,87,3
	.word	105263
	.byte	15,10,91,9,1,16
	.byte	'IfxPort_LvdsMode_high',0,0,16
	.byte	'IfxPort_LvdsMode_medium',0,1,0,32
	.byte	'IfxPort_LvdsMode',0,10,95,3
	.word	105414
	.byte	15,10,126,9,1,16
	.byte	'IfxPort_OutputIdx_general',0,128,1,16
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,16
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,16
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,16
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,16
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,16
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,16
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,32
	.byte	'IfxPort_OutputIdx',0,10,136,1,3
	.word	105495
	.byte	15,10,140,1,9,1,16
	.byte	'IfxPort_OutputMode_none',0,0,16
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,16
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,32
	.byte	'IfxPort_OutputMode',0,10,145,1,3
	.word	105739
	.byte	15,10,151,1,9,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,16
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,16
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,16
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,16
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed1',0,12,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed2',0,13,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed3',0,14,16
	.byte	'IfxPort_PadDriver_ttl3v3Speed4',0,15,0,32
	.byte	'IfxPort_PadDriver',0,10,165,1,3
	.word	105863
	.byte	15,10,169,1,9,1,16
	.byte	'IfxPort_PadSupply_3v',0,0,16
	.byte	'IfxPort_PadSupply_5v',0,1,0,32
	.byte	'IfxPort_PadSupply',0,10,173,1,3
	.word	106313
	.byte	15,10,177,1,9,1,16
	.byte	'IfxPort_PinFunctionMode_digital',0,0,16
	.byte	'IfxPort_PinFunctionMode_analog',0,1,0,32
	.byte	'IfxPort_PinFunctionMode',0,10,181,1,3
	.word	106393
	.byte	32
	.byte	'IfxPort_State',0,10,193,1,3
	.word	13326
	.byte	21,10,246,1,9,8,13
	.byte	'port',0
	.word	13321
	.byte	4,2,35,0,13
	.byte	'pinIndex',0
	.word	607
	.byte	1,2,35,4,0,32
	.byte	'IfxPort_Pin',0,10,250,1,3
	.word	106523
	.byte	10
	.byte	'_Ifx_SMU_ACCEN0_Bits',0,27,68,16,4,11
	.byte	'EN0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SMU_ACCEN0_Bits',0,27,102,3
	.word	106583
	.byte	10
	.byte	'_Ifx_SMU_ACCEN1_Bits',0,27,105,16,4,11
	.byte	'reserved_0',0,4
	.word	432
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SMU_ACCEN1_Bits',0,27,108,3
	.word	107140
	.byte	10
	.byte	'_Ifx_SMU_AD_Bits',0,27,111,16,4,11
	.byte	'DF0',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'DF1',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'DF2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'DF3',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'DF4',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'DF5',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'DF6',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'DF7',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'DF8',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'DF9',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'DF10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'DF11',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'DF12',0,1
	.word	607
	.byte	1,3,2,35,1,11
	.byte	'DF13',0,1
	.word	607
	.byte	1,2,2,35,1,11
	.byte	'DF14',0,1
	.word	607
	.byte	1,1,2,35,1,11
	.byte	'DF15',0,1
	.word	607
	.byte	1,0,2,35,1,11
	.byte	'DF16',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'DF17',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'DF18',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'DF19',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'DF20',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'DF21',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'DF22',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'DF23',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'DF24',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'DF25',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'DF26',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'DF27',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'DF28',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'DF29',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'DF30',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'DF31',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SMU_AD_Bits',0,27,145,1,3
	.word	107217
	.byte	10
	.byte	'_Ifx_SMU_AEX_Bits',0,27,148,1,16,4,11
	.byte	'IRQ0STS',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'IRQ1STS',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'IRQ2STS',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'RST0STS',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'RST1STS',0,1
	.word	607
	.byte	1,3,2,35,0,11
	.byte	'RST2STS',0,1
	.word	607
	.byte	1,2,2,35,0,11
	.byte	'RST3STS',0,1
	.word	607
	.byte	1,1,2,35,0,11
	.byte	'RST4STS',0,1
	.word	607
	.byte	1,0,2,35,0,11
	.byte	'RST5STS',0,1
	.word	607
	.byte	1,7,2,35,1,11
	.byte	'NMISTS',0,1
	.word	607
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	607
	.byte	1,5,2,35,1,11
	.byte	'EMSSTS',0,1
	.word	607
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	607
	.byte	4,0,2,35,1,11
	.byte	'IRQ0AEM',0,1
	.word	607
	.byte	1,7,2,35,2,11
	.byte	'IRQ1AEM',0,1
	.word	607
	.byte	1,6,2,35,2,11
	.byte	'IRQ2AEM',0,1
	.word	607
	.byte	1,5,2,35,2,11
	.byte	'RST0AEM',0,1
	.word	607
	.byte	1,4,2,35,2,11
	.byte	'RST1AEM',0,1
	.word	607
	.byte	1,3,2,35,2,11
	.byte	'RST2AEM',0,1
	.word	607
	.byte	1,2,2,35,2,11
	.byte	'RST3AEM',0,1
	.word	607
	.byte	1,1,2,35,2,11
	.byte	'RST4AEM',0,1
	.word	607
	.byte	1,0,2,35,2,11
	.byte	'RST5AEM',0,1
	.word	607
	.byte	1,7,2,35,3,11
	.byte	'NMIAEM',0,1
	.word	607
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	607
	.byte	1,5,2,35,3,11
	.byte	'EMSAEM',0,1
	.word	607
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	607
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SMU_AEX_Bits',0,27,176,1,3
	.word	107767
	.byte	10
	.byte	'_Ifx_SMU_AEXCLR_Bits',0,27,179,1,16,4,11
	.byte	'IRQ0CLR',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'IRQ1CLR',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'IRQ2CLR',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'RST0CLR',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'RST1CLR',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'RST2CLR',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'RST3CLR',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'RST4CLR',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'RST5CLR',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'NMICLR',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'EMSCLR',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	455
	.byte	4,16,2,35,0,11
	.byte	'IRQ0AEMCLR',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'IRQ1AEMCLR',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'IRQ2AEMCLR',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'RST0AEMCLR',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'RST1AEMCLR',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'RST2AEMCLR',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'RST3AEMCLR',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'RST4AEMCLR',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'RST5AEMCLR',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'NMIAEMCLR',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'EMSAEMCLR',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	455
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_SMU_AEXCLR_Bits',0,27,207,1,3
	.word	108324
	.byte	10
	.byte	'_Ifx_SMU_AFCNT_Bits',0,27,210,1,16,4,11
	.byte	'FCNT',0,1
	.word	607
	.byte	4,4,2,35,0,11
	.byte	'ACNT',0,2
	.word	624
	.byte	12,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	624
	.byte	14,2,2,35,2,11
	.byte	'FCO',0,1
	.word	607
	.byte	1,1,2,35,3,11
	.byte	'ACO',0,1
	.word	607
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SMU_AFCNT_Bits',0,27,217,1,3
	.word	108920
	.byte	10
	.byte	'_Ifx_SMU_AG_Bits',0,27,220,1,16,4,11
	.byte	'SF0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'SF1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'SF2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'SF3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'SF4',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'SF5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'SF6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'SF7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'SF8',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'SF9',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'SF10',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'SF11',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'SF12',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'SF13',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'SF14',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'SF15',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'SF16',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'SF17',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'SF18',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'SF19',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'SF20',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'SF21',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'SF22',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'SF23',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'SF24',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'SF25',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'SF26',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'SF27',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'SF28',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'SF29',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'SF30',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'SF31',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_AG_Bits',0,27,254,1,3
	.word	109060
	.byte	10
	.byte	'_Ifx_SMU_AGC_Bits',0,27,129,2,16,4,11
	.byte	'IGCS0',0,4
	.word	455
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'IGCS1',0,4
	.word	455
	.byte	3,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'IGCS2',0,4
	.word	455
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	455
	.byte	5,16,2,35,0,11
	.byte	'RCS',0,4
	.word	455
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	455
	.byte	2,8,2,35,0,11
	.byte	'PES',0,4
	.word	455
	.byte	5,3,2,35,0,11
	.byte	'EFRST',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	455
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_SMU_AGC_Bits',0,27,142,2,3
	.word	109611
	.byte	10
	.byte	'_Ifx_SMU_AGCF_Bits',0,27,145,2,16,4,11
	.byte	'CF0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'CF1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'CF2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'CF3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'CF4',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'CF5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'CF6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'CF7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'CF8',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'CF9',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'CF10',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'CF11',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'CF12',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'CF13',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'CF14',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'CF15',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'CF16',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'CF17',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'CF18',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'CF19',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'CF20',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'CF21',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'CF22',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'CF23',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'CF24',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'CF25',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'CF26',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'CF27',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'CF28',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'CF29',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'CF30',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'CF31',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_AGCF_Bits',0,27,179,2,3
	.word	109873
	.byte	10
	.byte	'_Ifx_SMU_AGFSP_Bits',0,27,182,2,16,4,11
	.byte	'FE0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'FE1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'FE2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'FE3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'FE4',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'FE5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'FE6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'FE7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'FE8',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'FE9',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'FE10',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'FE11',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'FE12',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'FE13',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'FE14',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'FE15',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'FE16',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'FE17',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'FE18',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'FE19',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'FE20',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'FE21',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'FE22',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'FE23',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'FE24',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'FE25',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'FE26',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'FE27',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'FE28',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'FE29',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'FE30',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'FE31',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_AGFSP_Bits',0,27,216,2,3
	.word	110428
	.byte	10
	.byte	'_Ifx_SMU_CLC_Bits',0,27,219,2,16,4,11
	.byte	'DISR',0,1
	.word	607
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	607
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SMU_CLC_Bits',0,27,226,2,3
	.word	110985
	.byte	10
	.byte	'_Ifx_SMU_CMD_Bits',0,27,229,2,16,4,11
	.byte	'CMD',0,4
	.word	455
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	455
	.byte	4,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	455
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SMU_CMD_Bits',0,27,234,2,3
	.word	111128
	.byte	10
	.byte	'_Ifx_SMU_DBG_Bits',0,27,237,2,16,4,11
	.byte	'SSM',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	432
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SMU_DBG_Bits',0,27,241,2,3
	.word	111231
	.byte	10
	.byte	'_Ifx_SMU_FSP_Bits',0,27,244,2,16,4,11
	.byte	'PRE1',0,4
	.word	455
	.byte	3,29,2,35,0,11
	.byte	'PRE2',0,4
	.word	455
	.byte	2,27,2,35,0,11
	.byte	'MODE',0,4
	.word	455
	.byte	2,25,2,35,0,11
	.byte	'PES',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'TFSP_LOW',0,4
	.word	455
	.byte	14,10,2,35,0,11
	.byte	'TFSP_HIGH',0,4
	.word	455
	.byte	10,0,2,35,0,0,32
	.byte	'Ifx_SMU_FSP_Bits',0,27,252,2,3
	.word	111319
	.byte	10
	.byte	'_Ifx_SMU_ID_Bits',0,27,255,2,16,4,11
	.byte	'MOD_REV',0,1
	.word	607
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	607
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,2
	.word	624
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SMU_ID_Bits',0,27,132,3,3
	.word	111474
	.byte	10
	.byte	'_Ifx_SMU_KEYS_Bits',0,27,135,3,16,4,11
	.byte	'CFGLCK',0,4
	.word	455
	.byte	8,24,2,35,0,11
	.byte	'PERLCK',0,4
	.word	455
	.byte	8,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	455
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SMU_KEYS_Bits',0,27,140,3,3
	.word	111584
	.byte	10
	.byte	'_Ifx_SMU_OCS_Bits',0,27,143,3,16,4,11
	.byte	'TGS',0,1
	.word	607
	.byte	2,6,2,35,0,11
	.byte	'TGB',0,1
	.word	607
	.byte	1,5,2,35,0,11
	.byte	'TG_P',0,1
	.word	607
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	432
	.byte	20,8,2,35,0,11
	.byte	'SUS',0,1
	.word	607
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	607
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	607
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	607
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SMU_OCS_Bits',0,27,153,3,3
	.word	111696
	.byte	10
	.byte	'_Ifx_SMU_PCTL_Bits',0,27,156,3,16,4,11
	.byte	'HWDIR',0,4
	.word	455
	.byte	2,30,2,35,0,11
	.byte	'HWEN',0,4
	.word	455
	.byte	2,28,2,35,0,11
	.byte	'GFSCU_EN',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'GFSTS_EN',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'PCS',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	455
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	455
	.byte	9,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	455
	.byte	9,0,2,35,0,0,32
	.byte	'Ifx_SMU_PCTL_Bits',0,27,167,3,3
	.word	111888
	.byte	10
	.byte	'_Ifx_SMU_RMCTL_Bits',0,27,170,3,16,4,11
	.byte	'TE0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'TE1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'TE2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'TE3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'TE4',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'TE5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'TE6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'TE7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'TE8',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'TE9',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'TE10',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_RMCTL_Bits',0,27,204,3,3
	.word	112119
	.byte	10
	.byte	'_Ifx_SMU_RMEF_Bits',0,27,207,3,16,4,11
	.byte	'EF0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'EF1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'EF2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'EF3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'EF4',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'EF5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'EF6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'EF7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'EF8',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'EF9',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'EF10',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_RMEF_Bits',0,27,241,3,3
	.word	112823
	.byte	10
	.byte	'_Ifx_SMU_RMSTS_Bits',0,27,244,3,16,4,11
	.byte	'STS0',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'STS1',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'STS2',0,4
	.word	455
	.byte	1,29,2,35,0,11
	.byte	'STS3',0,4
	.word	455
	.byte	1,28,2,35,0,11
	.byte	'STS4',0,4
	.word	455
	.byte	1,27,2,35,0,11
	.byte	'STS5',0,4
	.word	455
	.byte	1,26,2,35,0,11
	.byte	'STS6',0,4
	.word	455
	.byte	1,25,2,35,0,11
	.byte	'STS7',0,4
	.word	455
	.byte	1,24,2,35,0,11
	.byte	'STS8',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'STS9',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'STS10',0,4
	.word	455
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	455
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	455
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	455
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	455
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	455
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	455
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	455
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	455
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	455
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	455
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	455
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	455
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	455
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	455
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	455
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	455
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_RMSTS_Bits',0,27,150,4,3
	.word	113525
	.byte	10
	.byte	'_Ifx_SMU_RTAC00_Bits',0,27,153,4,16,4,11
	.byte	'GID0',0,4
	.word	455
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	455
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	455
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	455
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	455
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	455
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC00_Bits',0,27,161,4,3
	.word	114240
	.byte	10
	.byte	'_Ifx_SMU_RTAC01_Bits',0,27,164,4,16,4,11
	.byte	'GID2',0,4
	.word	455
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	455
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	455
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	455
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	455
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	455
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC01_Bits',0,27,172,4,3
	.word	114408
	.byte	10
	.byte	'_Ifx_SMU_RTAC10_Bits',0,27,175,4,16,4,11
	.byte	'GID0',0,4
	.word	455
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	455
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	455
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	455
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	455
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	455
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC10_Bits',0,27,183,4,3
	.word	114576
	.byte	10
	.byte	'_Ifx_SMU_RTAC11_Bits',0,27,186,4,16,4,11
	.byte	'GID2',0,4
	.word	455
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	455
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	455
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	455
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	455
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	455
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC11_Bits',0,27,194,4,3
	.word	114744
	.byte	10
	.byte	'_Ifx_SMU_RTC_Bits',0,27,197,4,16,4,11
	.byte	'RT0E',0,4
	.word	455
	.byte	1,31,2,35,0,11
	.byte	'RT1E',0,4
	.word	455
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	455
	.byte	6,24,2,35,0,11
	.byte	'RTD',0,4
	.word	455
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTC_Bits',0,27,203,4,3
	.word	114912
	.byte	10
	.byte	'_Ifx_SMU_STS_Bits',0,27,206,4,16,4,11
	.byte	'CMD',0,4
	.word	455
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	455
	.byte	4,24,2,35,0,11
	.byte	'RES',0,4
	.word	455
	.byte	1,23,2,35,0,11
	.byte	'ASCE',0,4
	.word	455
	.byte	1,22,2,35,0,11
	.byte	'FSP',0,4
	.word	455
	.byte	2,20,2,35,0,11
	.byte	'FSTS',0,4
	.word	455
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	455
	.byte	3,16,2,35,0,11
	.byte	'RTS0',0,4
	.word	455
	.byte	1,15,2,35,0,11
	.byte	'RTME0',0,4
	.word	455
	.byte	1,14,2,35,0,11
	.byte	'RTS1',0,4
	.word	455
	.byte	1,13,2,35,0,11
	.byte	'RTME1',0,4
	.word	455
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	455
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_SMU_STS_Bits',0,27,220,4,3
	.word	115032
	.byte	12,27,228,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	106583
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_ACCEN0',0,27,233,4,3
	.word	115287
	.byte	12,27,236,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107140
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_ACCEN1',0,27,241,4,3
	.word	115351
	.byte	12,27,244,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107217
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AD',0,27,249,4,3
	.word	115415
	.byte	12,27,252,4,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107767
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AEX',0,27,129,5,3
	.word	115475
	.byte	12,27,132,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108324
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AEXCLR',0,27,137,5,3
	.word	115536
	.byte	12,27,140,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108920
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AFCNT',0,27,145,5,3
	.word	115600
	.byte	12,27,148,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109060
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AG',0,27,153,5,3
	.word	115663
	.byte	12,27,156,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109611
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AGC',0,27,161,5,3
	.word	115723
	.byte	12,27,164,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109873
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AGCF',0,27,169,5,3
	.word	115784
	.byte	12,27,172,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110428
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AGFSP',0,27,177,5,3
	.word	115846
	.byte	12,27,180,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110985
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_CLC',0,27,185,5,3
	.word	115909
	.byte	12,27,188,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111128
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_CMD',0,27,193,5,3
	.word	115970
	.byte	12,27,196,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111231
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_DBG',0,27,201,5,3
	.word	116031
	.byte	12,27,204,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111319
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_FSP',0,27,209,5,3
	.word	116092
	.byte	12,27,212,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111474
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_ID',0,27,217,5,3
	.word	116153
	.byte	12,27,220,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111584
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_KEYS',0,27,225,5,3
	.word	116213
	.byte	12,27,228,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111696
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_OCS',0,27,233,5,3
	.word	116275
	.byte	12,27,236,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111888
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_PCTL',0,27,241,5,3
	.word	116336
	.byte	12,27,244,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	112119
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RMCTL',0,27,249,5,3
	.word	116398
	.byte	12,27,252,5,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	112823
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RMEF',0,27,129,6,3
	.word	116461
	.byte	12,27,132,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	113525
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RMSTS',0,27,137,6,3
	.word	116523
	.byte	12,27,140,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	114240
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC00',0,27,145,6,3
	.word	116586
	.byte	12,27,148,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	114408
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC01',0,27,153,6,3
	.word	116650
	.byte	12,27,156,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	114576
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC10',0,27,161,6,3
	.word	116714
	.byte	12,27,164,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	114744
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC11',0,27,169,6,3
	.word	116778
	.byte	12,27,172,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	114912
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTC',0,27,177,6,3
	.word	116842
	.byte	12,27,180,6,9,4,13
	.byte	'U',0
	.word	432
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	448
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	115032
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_STS',0,27,185,6,3
	.word	116903
	.byte	15,12,210,2,9,1,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy30',0,1,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy60',0,2,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy120',0,3,16
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy240',0,4,0,32
	.byte	'IfxScuCcu_LowPowerDivRatio',0,12,216,2,3
	.word	116964
	.byte	15,12,220,2,9,1,16
	.byte	'IfxScuCcu_ModulationAmplitude_0p5',0,0,16
	.byte	'IfxScuCcu_ModulationAmplitude_1p0',0,1,16
	.byte	'IfxScuCcu_ModulationAmplitude_1p25',0,2,16
	.byte	'IfxScuCcu_ModulationAmplitude_1p5',0,3,16
	.byte	'IfxScuCcu_ModulationAmplitude_2p0',0,4,16
	.byte	'IfxScuCcu_ModulationAmplitude_2p5',0,5,16
	.byte	'IfxScuCcu_ModulationAmplitude_count',0,6,0,32
	.byte	'IfxScuCcu_ModulationAmplitude',0,12,229,2,3
	.word	117157
	.byte	15,12,254,3,9,1,16
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc1',0,0,16
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc0',0,1,16
	.byte	'IfxScuCcu_PllInputClockSelection_fSysclk',0,2,0,32
	.byte	'IfxScuCcu_PllInputClockSelection',0,12,131,4,3
	.word	117458
	.byte	15,12,135,4,9,1,16
	.byte	'IfxScuCcu_Traprequest_esr0',0,0,16
	.byte	'IfxScuCcu_Traprequest_esr1',0,1,16
	.byte	'IfxScuCcu_Traprequest_trap2',0,2,16
	.byte	'IfxScuCcu_Traprequest_smu',0,3,0,32
	.byte	'IfxScuCcu_Traprequest',0,12,141,4,3
	.word	117632
	.byte	15,12,147,4,9,1,16
	.byte	'IfxScuCcu_ModEn_disabled',0,0,16
	.byte	'IfxScuCcu_ModEn_enabled',0,1,0,32
	.byte	'IfxScuCcu_ModEn',0,12,151,4,3
	.word	117786
	.byte	21,12,162,4,9,6,13
	.byte	'pDivider',0
	.word	607
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	607
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	607
	.byte	1,2,35,2,13
	.byte	'k3Divider',0
	.word	607
	.byte	1,2,35,3,13
	.byte	'k3DividerBypass',0
	.word	607
	.byte	1,2,35,4,0,32
	.byte	'IfxScuCcu_PerPllConfig',0,12,171,4,3
	.word	117871
	.byte	21,12,176,4,9,4,13
	.byte	'pDivider',0
	.word	607
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	607
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	607
	.byte	1,2,35,2,0,32
	.byte	'IfxScuCcu_SysPllConfig',0,12,181,4,3
	.word	118009
	.byte	21,12,189,4,9,8,13
	.byte	'value',0
	.word	5556
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	5556
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_CcuconRegConfig',0,12,193,4,3
	.word	118103
	.byte	21,12,197,4,9,6,13
	.byte	'k2Step',0
	.word	607
	.byte	1,2,35,0,13
	.byte	'waitTime',0
	.word	228
	.byte	4,2,35,2,0,32
	.byte	'IfxScuCcu_PllStepConfig',0,12,201,4,3
	.word	118174
	.byte	21,12,205,4,9,16,13
	.byte	'xtalFrequency',0
	.word	5556
	.byte	4,2,35,0,13
	.byte	'pllInputClockSelection',0
	.word	117458
	.byte	1,2,35,4,13
	.byte	'sysPllConfig',0
	.word	118009
	.byte	4,2,35,6,13
	.byte	'perPllConfig',0
	.word	117871
	.byte	6,2,35,10,0,32
	.byte	'IfxScuCcu_pllsParameterConfig',0,12,211,4,3
	.word	118248
	.byte	21,12,219,4,9,8,13
	.byte	'value',0
	.word	5556
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	5556
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,12,223,4,3
	.word	118393
	.byte	21,12,231,4,9,80,13
	.byte	'ccucon0',0
	.word	118103
	.byte	8,2,35,0,13
	.byte	'ccucon1',0
	.word	118103
	.byte	8,2,35,8,13
	.byte	'ccucon2',0
	.word	118103
	.byte	8,2,35,16,13
	.byte	'ccucon5',0
	.word	118103
	.byte	8,2,35,24,13
	.byte	'ccucon6',0
	.word	118103
	.byte	8,2,35,32,13
	.byte	'ccucon7',0
	.word	118103
	.byte	8,2,35,40,13
	.byte	'ccucon8',0
	.word	118103
	.byte	8,2,35,48,13
	.byte	'ccucon9',0
	.word	118103
	.byte	8,2,35,56,13
	.byte	'ccucon10',0
	.word	118103
	.byte	8,2,35,64,13
	.byte	'ccucon11',0
	.word	118103
	.byte	8,2,35,72,0,32
	.byte	'IfxScuCcu_ClockDistributionConfig',0,12,243,4,3
	.word	118469
	.byte	21,12,247,4,9,20,13
	.byte	'pllsParameters',0
	.word	118248
	.byte	16,2,35,0,13
	.byte	'waitTime',0
	.word	228
	.byte	4,2,35,16,0,32
	.byte	'IfxScuCcu_InitialStepConfig',0,12,251,4,3
	.word	118691
	.byte	20
	.word	118174
	.byte	3
	.word	118777
	.byte	21,12,255,4,9,8,13
	.byte	'numOfSteps',0
	.word	607
	.byte	1,2,35,0,13
	.byte	'pllSteps',0
	.word	118782
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_PllThrottleConfig',0,12,131,5,3
	.word	118787
	.byte	21,12,137,5,9,2,13
	.byte	'Mod_Enable',0
	.word	117786
	.byte	1,2,35,0,13
	.byte	'Mod_Amp',0
	.word	117157
	.byte	1,2,35,1,0,32
	.byte	'IfxScuCcu_Mod_Config',0,12,141,5,3
	.word	118869
	.byte	15,13,141,1,9,1,16
	.byte	'IfxCpu_CounterMode_normal',0,0,16
	.byte	'IfxCpu_CounterMode_task',0,1,0,32
	.byte	'IfxCpu_CounterMode',0,13,145,1,3
	.word	118943
	.byte	21,13,198,1,9,6,13
	.byte	'counter',0
	.word	5556
	.byte	4,2,35,0,13
	.byte	'overlfow',0
	.word	607
	.byte	1,2,35,4,0,32
	.byte	'IfxCpu_Counter',0,13,202,1,3
	.word	119032
	.byte	21,13,210,1,9,32,13
	.byte	'instruction',0
	.word	119032
	.byte	6,2,35,0,13
	.byte	'clock',0
	.word	119032
	.byte	6,2,35,6,13
	.byte	'counter1',0
	.word	119032
	.byte	6,2,35,12,13
	.byte	'counter2',0
	.word	119032
	.byte	6,2,35,18,13
	.byte	'counter3',0
	.word	119032
	.byte	6,2,35,24,0,32
	.byte	'IfxCpu_Perf',0,13,217,1,3
	.word	119098
	.byte	32
	.byte	'IfxDma_ChannelId',0,17,233,1,3
	.word	22183
	.byte	32
	.byte	'Ifx_DMA_ACCEN_ACCENR0_Bits',0,16,102,3
	.word	14339
	.byte	32
	.byte	'Ifx_DMA_ACCEN_ACCENR1_Bits',0,16,108,3
	.word	14915
	.byte	32
	.byte	'Ifx_DMA_CH_ADICR_Bits',0,16,128,1,3
	.word	20510
	.byte	32
	.byte	'Ifx_DMA_CH_CHCFGR_Bits',0,16,143,1,3
	.word	20828
	.byte	32
	.byte	'Ifx_DMA_CH_CHCSR_Bits',0,16,164,1,3
	.word	21166
	.byte	32
	.byte	'Ifx_DMA_CH_DADR_Bits',0,16,170,1,3
	.word	20425
	.byte	32
	.byte	'Ifx_DMA_CH_RDCRCR_Bits',0,16,176,1,3
	.word	20164
	.byte	32
	.byte	'Ifx_DMA_CH_SADR_Bits',0,16,182,1,3
	.word	20340
	.byte	32
	.byte	'Ifx_DMA_CH_SDCRCR_Bits',0,16,188,1,3
	.word	20252
	.byte	32
	.byte	'Ifx_DMA_CH_SHADR_Bits',0,16,194,1,3
	.word	21079
	.byte	32
	.byte	'Ifx_DMA_CLC_Bits',0,16,204,1,3
	.word	14048
	.byte	32
	.byte	'Ifx_DMA_ERRINTR_Bits',0,16,211,1,3
	.word	19351
	.byte	32
	.byte	'Ifx_DMA_HRR_Bits',0,16,218,1,3
	.word	19477
	.byte	32
	.byte	'Ifx_DMA_ID_Bits',0,16,226,1,3
	.word	14205
	.byte	32
	.byte	'Ifx_DMA_ME_ADICR_Bits',0,16,246,1,3
	.word	17426
	.byte	32
	.byte	'Ifx_DMA_ME_CHCR_Bits',0,16,133,2,3
	.word	17745
	.byte	32
	.byte	'Ifx_DMA_ME_CHSR_Bits',0,16,149,2,3
	.word	18081
	.byte	32
	.byte	'Ifx_DMA_ME_CLRE_Bits',0,16,165,2,3
	.word	15567
	.byte	32
	.byte	'Ifx_DMA_ME_DADR_Bits',0,16,171,2,3
	.word	17341
	.byte	32
	.byte	'Ifx_DMA_ME_EER_Bits',0,16,182,2,3
	.word	15092
	.byte	32
	.byte	'Ifx_DMA_ME_ERRSR_Bits',0,16,199,2,3
	.word	15276
	.byte	32
	.byte	'Ifx_DMA_ME_R0_Bits',0,16,208,2,3
	.word	16025
	.byte	32
	.byte	'Ifx_DMA_ME_R1_Bits',0,16,217,2,3
	.word	16156
	.byte	32
	.byte	'Ifx_DMA_ME_R2_Bits',0,16,226,2,3
	.word	16287
	.byte	32
	.byte	'Ifx_DMA_ME_R3_Bits',0,16,235,2,3
	.word	16418
	.byte	32
	.byte	'Ifx_DMA_ME_R4_Bits',0,16,244,2,3
	.word	16549
	.byte	32
	.byte	'Ifx_DMA_ME_R5_Bits',0,16,253,2,3
	.word	16680
	.byte	32
	.byte	'Ifx_DMA_ME_R6_Bits',0,16,134,3,3
	.word	16811
	.byte	32
	.byte	'Ifx_DMA_ME_R7_Bits',0,16,143,3,3
	.word	16942
	.byte	32
	.byte	'Ifx_DMA_ME_RDCRC_Bits',0,16,149,3,3
	.word	17082
	.byte	32
	.byte	'Ifx_DMA_ME_SADR_Bits',0,16,155,3,3
	.word	17256
	.byte	32
	.byte	'Ifx_DMA_ME_SDCRC_Bits',0,16,161,3,3
	.word	17169
	.byte	32
	.byte	'Ifx_DMA_ME_SHADR_Bits',0,16,167,3,3
	.word	17994
	.byte	32
	.byte	'Ifx_DMA_ME_SR_Bits',0,16,178,3,3
	.word	15849
	.byte	32
	.byte	'Ifx_DMA_MODE_Bits',0,16,185,3,3
	.word	19229
	.byte	32
	.byte	'Ifx_DMA_OTSS_Bits',0,16,194,3,3
	.word	18728
	.byte	32
	.byte	'Ifx_DMA_PRR0_Bits',0,16,203,3,3
	.word	18867
	.byte	32
	.byte	'Ifx_DMA_PRR1_Bits',0,16,212,3,3
	.word	19001
	.byte	32
	.byte	'Ifx_DMA_SUSACR_Bits',0,16,219,3,3
	.word	19706
	.byte	32
	.byte	'Ifx_DMA_SUSENR_Bits',0,16,226,3,3
	.word	19589
	.byte	32
	.byte	'Ifx_DMA_TIME_Bits',0,16,232,3,3
	.word	19135
	.byte	32
	.byte	'Ifx_DMA_TSR_Bits',0,16,252,3,3
	.word	19823
	.byte	32
	.byte	'Ifx_DMA_ACCEN_ACCENR0',0,16,137,4,3
	.word	14875
	.byte	32
	.byte	'Ifx_DMA_ACCEN_ACCENR1',0,16,145,4,3
	.word	14971
	.byte	32
	.byte	'Ifx_DMA_CH_ADICR',0,16,153,4,3
	.word	20788
	.byte	32
	.byte	'Ifx_DMA_CH_CHCFGR',0,16,161,4,3
	.word	21039
	.byte	32
	.byte	'Ifx_DMA_CH_CHCSR',0,16,169,4,3
	.word	21473
	.byte	32
	.byte	'Ifx_DMA_CH_DADR',0,16,177,4,3
	.word	20470
	.byte	32
	.byte	'Ifx_DMA_CH_RDCRCR',0,16,185,4,3
	.word	20212
	.byte	32
	.byte	'Ifx_DMA_CH_SADR',0,16,193,4,3
	.word	20385
	.byte	32
	.byte	'Ifx_DMA_CH_SDCRCR',0,16,201,4,3
	.word	20300
	.byte	32
	.byte	'Ifx_DMA_CH_SHADR',0,16,209,4,3
	.word	21126
	.byte	32
	.byte	'Ifx_DMA_CLC',0,16,217,4,3
	.word	14165
	.byte	32
	.byte	'Ifx_DMA_ERRINTR',0,16,225,4,3
	.word	19417
	.byte	32
	.byte	'Ifx_DMA_HRR',0,16,233,4,3
	.word	19539
	.byte	32
	.byte	'Ifx_DMA_ID',0,16,241,4,3
	.word	14290
	.byte	32
	.byte	'Ifx_DMA_ME_ADICR',0,16,249,4,3
	.word	17705
	.byte	32
	.byte	'Ifx_DMA_ME_CHCR',0,16,129,5,3
	.word	17954
	.byte	32
	.byte	'Ifx_DMA_ME_CHSR',0,16,137,5,3
	.word	18310
	.byte	32
	.byte	'Ifx_DMA_ME_CLRE',0,16,145,5,3
	.word	15809
	.byte	32
	.byte	'Ifx_DMA_ME_DADR',0,16,153,5,3
	.word	17386
	.byte	32
	.byte	'Ifx_DMA_ME_EER',0,16,161,5,3
	.word	15236
	.byte	32
	.byte	'Ifx_DMA_ME_ERRSR',0,16,169,5,3
	.word	15527
	.byte	32
	.byte	'Ifx_DMA_ME_R0',0,16,177,5,3
	.word	16116
	.byte	32
	.byte	'Ifx_DMA_ME_R1',0,16,185,5,3
	.word	16247
	.byte	32
	.byte	'Ifx_DMA_ME_R2',0,16,193,5,3
	.word	16378
	.byte	32
	.byte	'Ifx_DMA_ME_R3',0,16,201,5,3
	.word	16509
	.byte	32
	.byte	'Ifx_DMA_ME_R4',0,16,209,5,3
	.word	16640
	.byte	32
	.byte	'Ifx_DMA_ME_R5',0,16,217,5,3
	.word	16771
	.byte	32
	.byte	'Ifx_DMA_ME_R6',0,16,225,5,3
	.word	16902
	.byte	32
	.byte	'Ifx_DMA_ME_R7',0,16,233,5,3
	.word	17033
	.byte	32
	.byte	'Ifx_DMA_ME_RDCRC',0,16,241,5,3
	.word	17129
	.byte	32
	.byte	'Ifx_DMA_ME_SADR',0,16,249,5,3
	.word	17301
	.byte	32
	.byte	'Ifx_DMA_ME_SDCRC',0,16,129,6,3
	.word	17216
	.byte	32
	.byte	'Ifx_DMA_ME_SHADR',0,16,137,6,3
	.word	18041
	.byte	32
	.byte	'Ifx_DMA_ME_SR',0,16,145,6,3
	.word	15985
	.byte	32
	.byte	'Ifx_DMA_MODE',0,16,153,6,3
	.word	19293
	.byte	32
	.byte	'Ifx_DMA_OTSS',0,16,161,6,3
	.word	18827
	.byte	32
	.byte	'Ifx_DMA_PRR0',0,16,169,6,3
	.word	18961
	.byte	32
	.byte	'Ifx_DMA_PRR1',0,16,177,6,3
	.word	19095
	.byte	32
	.byte	'Ifx_DMA_SUSACR',0,16,185,6,3
	.word	19773
	.byte	32
	.byte	'Ifx_DMA_SUSENR',0,16,193,6,3
	.word	19656
	.byte	32
	.byte	'Ifx_DMA_TIME',0,16,201,6,3
	.word	19178
	.byte	32
	.byte	'Ifx_DMA_TSR',0,16,209,6,3
	.word	20114
	.byte	14
	.word	15011
	.byte	32
	.byte	'Ifx_DMA_ACCEN',0,16,225,6,3
	.word	121496
	.byte	14
	.word	18350
	.byte	32
	.byte	'Ifx_DMA_ME',0,16,137,7,3
	.word	121524
	.byte	14
	.word	21513
	.byte	32
	.byte	'Ifx_DMA_CH',0,16,162,7,3
	.word	121549
	.byte	14
	.word	21679
	.byte	32
	.byte	'Ifx_DMA',0,16,205,7,3
	.word	121574
	.byte	32
	.byte	'IfxDma_ChannelBusPriority',0,15,96,3
	.word	29301
	.byte	32
	.byte	'IfxDma_ChannelIncrementCircular',0,15,119,3
	.word	25722
	.byte	32
	.byte	'IfxDma_ChannelIncrementDirection',0,15,128,1,3
	.word	25628
	.byte	32
	.byte	'IfxDma_ChannelIncrementStep',0,15,143,1,3
	.word	25360
	.byte	32
	.byte	'IfxDma_ChannelInterruptControl',0,15,152,1,3
	.word	29960
	.byte	32
	.byte	'IfxDma_ChannelMove',0,15,167,1,3
	.word	28553
	.byte	32
	.byte	'IfxDma_ChannelMoveSize',0,15,180,1,3
	.word	26473
	.byte	32
	.byte	'IfxDma_ChannelOperationMode',0,15,189,1,3
	.word	28860
	.byte	32
	.byte	'IfxDma_ChannelPattern',0,15,204,1,3
	.word	28945
	.byte	32
	.byte	'IfxDma_ChannelRequestMode',0,15,222,1,3
	.word	28745
	.byte	32
	.byte	'IfxDma_ChannelRequestSource',0,15,231,1,3
	.word	29212
	.byte	32
	.byte	'IfxDma_ChannelShadow',0,15,251,1,3
	.word	29407
	.byte	15,15,253,1,9,1,16
	.byte	'IfxDma_HardwareResourcePartition_0',0,0,16
	.byte	'IfxDma_HardwareResourcePartition_1',0,1,16
	.byte	'IfxDma_HardwareResourcePartition_2',0,2,16
	.byte	'IfxDma_HardwareResourcePartition_3',0,3,0,32
	.byte	'IfxDma_HardwareResourcePartition',0,15,131,2,3
	.word	122019
	.byte	15,15,135,2,9,1,16
	.byte	'IfxDma_MoveEngine_0',0,0,16
	.byte	'IfxDma_MoveEngine_1',0,1,0,32
	.byte	'IfxDma_MoveEngine',0,15,139,2,3
	.word	122216
	.byte	15,15,144,2,9,1,16
	.byte	'IfxDma_SleepMode_enable',0,0,16
	.byte	'IfxDma_SleepMode_disable',0,1,0,32
	.byte	'IfxDma_SleepMode',0,15,148,2,3
	.word	122294
	.byte	32
	.byte	'IfxDma_Dma',0,18,207,3,3
	.word	28456
	.byte	32
	.byte	'IfxDma_Dma_Channel',0,18,220,3,3
	.word	27251
	.byte	32
	.byte	'IfxDma_Dma_ChannelConfig',0,18,132,4,3
	.word	30078
	.byte	32
	.byte	'IfxFce_Crc_EnabledInterrupts',0,19,255,1,3
	.word	31573
	.byte	32
	.byte	'IfxFce_Crc',0,19,138,2,3
	.word	32001
	.byte	32
	.byte	'IfxFce_Crc_Config',0,19,147,2,3
	.word	32026
	.byte	32
	.byte	'IfxFce_Crc_Crc',0,19,159,2,3
	.word	31424
	.byte	32
	.byte	'IfxFce_Crc_CrcConfig',0,19,178,2,3
	.word	31661
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L37:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,4,1,58,15,59,15,57,15,11,15,0,0,16,40,0,3,8,28,13,0,0
	.byte	17,11,1,0,0,18,1,1,11,15,73,19,0,0,19,33,0,47,15,0,0,20,38,0,73,19,0,0,21,19,1,58,15,59,15,57,15,11,15
	.byte	0,0,22,46,1,3,8,54,15,39,12,63,12,60,12,0,0,23,5,0,73,19,0,0,24,46,1,3,8,73,19,54,15,39,12,63,12,60,12
	.byte	0,0,25,5,0,3,8,73,19,0,0,26,46,1,49,19,0,0,27,5,0,49,19,0,0,28,46,1,3,8,58,15,59,15,57,15,54,15,39,12
	.byte	63,12,60,12,0,0,29,46,0,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,30,29,1,49,19,0,0,31,11
	.byte	0,49,19,0,0,32,22,0,3,8,58,15,59,15,57,15,73,19,0,0,33,21,0,54,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L38:
	.word	.L337-.L336
.L336:
	.half	3
	.word	.L339-.L338
.L338:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Dma',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxScuWdt.h',0,2,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0
	.byte	'IfxSrc.h',0,4,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'IfxSrc_cfg.h',0,5,0,0
	.byte	'IfxFce.h',0,6,0,0
	.byte	'IfxFce_regdef.h',0,3,0,0
	.byte	'IfxPort.h',0,7,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'IfxScuCcu.h',0,2,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxCpu_cfg.h',0,5,0,0
	.byte	'IfxDma.h',0,8,0,0
	.byte	'IfxDma_regdef.h',0,3,0,0
	.byte	'IfxDma_cfg.h',0,5,0,0
	.byte	'IfxDma_Dma.h',0,9,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Fce\\Crc\\IfxFce_Crc.h',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Fce\\Crc\\IfxFce_Crc.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'IfxScu_cfg.h',0,5,0,0
	.byte	'Ifx_TypesReg.h',0,3,0,0
	.byte	'IfxCpu_regdef.h',0,3,0,0
	.byte	'IfxStm_regdef.h',0,3,0,0
	.byte	'IfxSmu_regdef.h',0,3,0,0,0
.L339:
.L337:
	.sdecl	'.debug_info',debug,cluster('IfxFce_Crc_calculateCrc')
	.sect	'.debug_info'
.L39:
	.word	1201
	.half	3
	.word	.L40
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Fce\\Crc\\IfxFce_Crc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L42,.L41
	.byte	2
	.word	.L35
	.byte	3
	.byte	'IfxFce_Crc_calculateCrc',0,1,53,8
	.word	.L84
	.byte	1,1,1
	.word	.L18,.L85,.L17
	.byte	4
	.byte	'fce',0,1,53,48
	.word	.L86,.L87
	.byte	4
	.byte	'crcData',0,1,53,67
	.word	.L88,.L89
	.byte	4
	.byte	'crcDataLength',0,1,53,83
	.word	.L90,.L91
	.byte	4
	.byte	'crcStartValue',0,1,53,105
	.word	.L84,.L92
	.byte	5
	.word	.L18,.L85
	.byte	6
	.byte	'crcChannel',0,1,56,23
	.word	.L93,.L94
	.byte	6
	.byte	'inputDataCounter',0,1,57,23
	.word	.L84,.L95
	.byte	6
	.byte	'crcResultValue',0,1,58,23
	.word	.L84,.L96
	.byte	6
	.byte	'dataPtr',0,1,59,23
	.word	.L97,.L98
	.byte	7
	.word	.L99,.L100,.L101
	.byte	8
	.word	.L102,.L103
	.byte	8
	.word	.L104,.L105
	.byte	8
	.word	.L106,.L107
	.byte	9
	.word	.L108,.L100,.L101
	.byte	0,7
	.word	.L109,.L110,.L111
	.byte	8
	.word	.L112,.L113
	.byte	8
	.word	.L114,.L115
	.byte	8
	.word	.L116,.L117
	.byte	9
	.word	.L118,.L110,.L111
	.byte	0,7
	.word	.L119,.L111,.L120
	.byte	8
	.word	.L121,.L122
	.byte	8
	.word	.L123,.L124
	.byte	8
	.word	.L125,.L126
	.byte	9
	.word	.L127,.L111,.L120
	.byte	0,5
	.word	.L120,.L85
	.byte	6
	.byte	'InputData',0,1,70,29
	.word	.L128,.L129
	.byte	10
	.word	.L130
	.byte	6
	.byte	'dmaIncrementStep',0,1,74,37
	.word	.L133,.L134
	.byte	6
	.byte	'dmaChannelsize',0,1,75,37
	.word	.L135,.L136
	.byte	7
	.word	.L137,.L138,.L139
	.byte	11
	.word	.L140,.L141
	.byte	6
	.byte	'reg',0,2,237,6,12
	.word	.L84,.L144
	.byte	0,0,12
	.word	.L137,.L142,.L143
	.byte	7
	.word	.L145,.L8,.L146
	.byte	8
	.word	.L147,.L148
	.byte	8
	.word	.L149,.L150
	.byte	8
	.word	.L151,.L152
	.byte	9
	.word	.L153,.L8,.L146
	.byte	0,7
	.word	.L154,.L146,.L155
	.byte	8
	.word	.L156,.L157
	.byte	8
	.word	.L158,.L159
	.byte	8
	.word	.L160,.L161
	.byte	9
	.word	.L162,.L146,.L155
	.byte	0,7
	.word	.L163,.L164,.L165
	.byte	8
	.word	.L166,.L167
	.byte	8
	.word	.L168,.L169
	.byte	8
	.word	.L170,.L171
	.byte	9
	.word	.L172,.L164,.L165
	.byte	0,7
	.word	.L173,.L174,.L175
	.byte	8
	.word	.L176,.L177
	.byte	8
	.word	.L178,.L179
	.byte	8
	.word	.L180,.L181
	.byte	9
	.word	.L182,.L174,.L175
	.byte	0,7
	.word	.L183,.L184,.L185
	.byte	8
	.word	.L186,.L187
	.byte	8
	.word	.L188,.L189
	.byte	8
	.word	.L190,.L191
	.byte	8
	.word	.L192,.L193
	.byte	8
	.word	.L194,.L195
	.byte	13
	.word	.L196,.L184,.L185
	.byte	6
	.byte	'adicr',0,3,197,12,22
	.word	.L197,.L198
	.byte	0,0,7
	.word	.L199,.L185,.L10
	.byte	8
	.word	.L200,.L201
	.byte	13
	.word	.L202,.L185,.L10
	.byte	7
	.word	.L203,.L204,.L10
	.byte	8
	.word	.L205,.L206
	.byte	8
	.word	.L207,.L208
	.byte	9
	.word	.L209,.L204,.L10
	.byte	0,0,0,7
	.word	.L210,.L10,.L211
	.byte	8
	.word	.L212,.L213
	.byte	13
	.word	.L214,.L10,.L211
	.byte	7
	.word	.L215,.L216,.L211
	.byte	8
	.word	.L217,.L218
	.byte	8
	.word	.L219,.L220
	.byte	9
	.word	.L221,.L216,.L211
	.byte	0,0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxFce_Crc_calculateCrc')
	.sect	'.debug_abbrev'
.L40:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,11,1,85,6,0,0,11,11,1,49,16,85,6,0,0,12,29,0,49,16,17,1,18,1,0,0,13,11,1,49,16,17,1,18,1
	.byte	0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxFce_Crc_calculateCrc')
	.sect	'.debug_line'
.L41:
	.word	.L341-.L340
.L340:
	.half	3
	.word	.L343-.L342
.L342:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Dma',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Fce\\Crc\\IfxFce_Crc.c',0,0,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxDma.h',0,2,0,0
	.byte	'IfxFce.h',0,3,0,0
	.byte	'IfxDma_Dma.h',0,4,0,0,0
.L343:
	.byte	5,8,7,0,5,2
	.word	.L18
	.byte	3,52,1,5,39,9
	.half	.L318-.L18
	.byte	3,2,1,9
	.half	.L307-.L318
	.byte	3,1,1,4,4,5,33,9
	.half	.L100-.L307
	.byte	3,191,1,1,5,13,9
	.half	.L344-.L100
	.byte	1,5,12,9
	.half	.L308-.L344
	.byte	1,5,31,9
	.half	.L345-.L308
	.byte	1,9
	.half	.L346-.L345
	.byte	3,1,1,4,1,5,30,9
	.half	.L101-.L346
	.byte	3,201,126,1,5,52,9
	.half	.L347-.L101
	.byte	1,4,4,5,12,9
	.half	.L110-.L347
	.byte	3,196,1,1,5,30,9
	.half	.L348-.L110
	.byte	1,9
	.half	.L349-.L348
	.byte	3,1,1,4,1,5,32,9
	.half	.L111-.L349
	.byte	3,190,126,1,4,4,5,12,9
	.half	.L350-.L111
	.byte	3,186,1,1,5,28,9
	.half	.L351-.L350
	.byte	1,4,1,5,56,9
	.half	.L120-.L351
	.byte	3,200,126,1,5,52,9
	.half	.L352-.L120
	.byte	1,5,12,9
	.half	.L353-.L352
	.byte	3,2,1,5,52,9
	.half	.L354-.L353
	.byte	3,126,1,5,5,9
	.half	.L309-.L354
	.byte	3,2,1,5,17,7,9
	.half	.L131-.L309
	.byte	3,5,1,5,13,9
	.half	.L355-.L131
	.byte	1,5,71,7,9
	.half	.L356-.L355
	.byte	1,5,30,7,9
	.half	.L3-.L356
	.byte	3,2,1,9
	.half	.L310-.L3
	.byte	3,1,1,5,61,3,127,1,5,14,9
	.half	.L4-.L310
	.byte	3,3,1,5,30,7,9
	.half	.L357-.L4
	.byte	3,2,1,9
	.half	.L311-.L357
	.byte	3,1,1,5,61,3,127,1,5,30,9
	.half	.L6-.L311
	.byte	3,5,1,9
	.half	.L317-.L6
	.byte	3,1,1,5,102,9
	.half	.L5-.L317
	.byte	3,3,1,4,2,5,17,9
	.half	.L138-.L5
	.byte	3,145,6,1,4,1,5,102,9
	.half	.L139-.L138
	.byte	3,239,121,1,4,2,5,38,9
	.half	.L142-.L139
	.byte	3,146,6,1,5,12,9
	.half	.L313-.L142
	.byte	1,4,1,5,102,9
	.half	.L143-.L313
	.byte	3,238,121,1,5,58,9
	.half	.L8-.L143
	.byte	1,5,82,9
	.half	.L306-.L8
	.byte	1,4,3,5,13,9
	.half	.L358-.L306
	.byte	3,157,12,1,5,12,9
	.half	.L359-.L358
	.byte	1,5,31,9
	.half	.L360-.L359
	.byte	1,4,1,5,63,9
	.half	.L146-.L360
	.byte	3,228,115,1,5,87,9
	.half	.L361-.L146
	.byte	1,4,3,5,13,9
	.half	.L362-.L361
	.byte	3,225,11,1,5,12,9
	.half	.L363-.L362
	.byte	1,4,1,5,108,9
	.half	.L364-.L363
	.byte	3,159,116,1,4,3,5,31,9
	.half	.L314-.L364
	.byte	3,225,11,1,4,1,5,58,9
	.half	.L155-.L314
	.byte	3,160,116,1,4,3,5,32,9
	.half	.L164-.L155
	.byte	3,178,12,1,5,38,9
	.half	.L365-.L164
	.byte	1,4,1,5,53,9
	.half	.L165-.L365
	.byte	3,207,115,1,4,3,5,32,9
	.half	.L174-.L165
	.byte	3,252,11,1,5,38,9
	.half	.L366-.L174
	.byte	1,4,1,5,69,9
	.half	.L175-.L366
	.byte	3,133,116,1,4,3,5,58,9
	.half	.L184-.L175
	.byte	3,229,11,1,5,32,9
	.half	.L319-.L184
	.byte	3,1,1,9
	.half	.L367-.L319
	.byte	3,1,1,9
	.half	.L368-.L367
	.byte	3,1,1,3,1,1,4,5,5,43,9
	.half	.L185-.L368
	.byte	3,181,121,1,4,3,5,31,9
	.half	.L204-.L185
	.byte	3,161,7,1,5,36,9
	.half	.L369-.L204
	.byte	1,4,5,5,54,9
	.half	.L10-.L369
	.byte	3,199,120,1,5,68,9
	.half	.L370-.L10
	.byte	1,4,3,5,20,9
	.half	.L216-.L370
	.byte	3,186,6,1,5,33,9
	.half	.L371-.L216
	.byte	1,4,1,5,83,9
	.half	.L211-.L371
	.byte	3,197,116,1,7,9
	.half	.L132-.L211
	.byte	1,5,31,9
	.half	.L2-.L132
	.byte	3,6,1,5,68,1,5,70,9
	.half	.L13-.L2
	.byte	1,5,28,3,2,1,5,26,9
	.half	.L372-.L13
	.byte	1,5,68,9
	.half	.L12-.L372
	.byte	3,126,1,5,36,7,9
	.half	.L11-.L12
	.byte	3,6,1,5,32,9
	.half	.L373-.L11
	.byte	1,5,53,9
	.half	.L320-.L373
	.byte	1,5,1,9
	.half	.L321-.L320
	.byte	3,3,1,7,9
	.half	.L43-.L321
	.byte	0,1,1
.L341:
	.sdecl	'.debug_ranges',debug,cluster('IfxFce_Crc_calculateCrc')
	.sect	'.debug_ranges'
.L42:
	.word	-1,.L18,0,.L43-.L18,0,0
.L130:
	.word	-1,.L18,.L131-.L18,.L132-.L18,-1,.L20,0,.L83-.L20,0,0
.L141:
	.word	-1,.L18,.L138-.L18,.L139-.L18,.L142-.L18,.L143-.L18,0,0
	.sdecl	'.debug_info',debug,cluster('IfxFce_Crc_deInitModule')
	.sect	'.debug_info'
.L44:
	.word	243
	.half	3
	.word	.L45
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Fce\\Crc\\IfxFce_Crc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L47,.L46
	.byte	2
	.word	.L35
	.byte	3
	.byte	'IfxFce_Crc_deInitModule',0,1,126,6,1,1,1
	.word	.L24,.L222,.L23
	.byte	4
	.byte	'fce',0,1,126,46
	.word	.L86,.L223
	.byte	5
	.word	.L24,.L222
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxFce_Crc_deInitModule')
	.sect	'.debug_abbrev'
.L45:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxFce_Crc_deInitModule')
	.sect	'.debug_line'
.L46:
	.word	.L375-.L374
.L374:
	.half	3
	.word	.L377-.L376
.L376:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Fce\\Crc\\IfxFce_Crc.c',0,0,0,0,0
.L377:
	.byte	5,27,7,0,5,2
	.word	.L24
	.byte	3,255,0,1,5,1,9
	.half	.L48-.L24
	.byte	3,1,0,1,1
.L375:
	.sdecl	'.debug_ranges',debug,cluster('IfxFce_Crc_deInitModule')
	.sect	'.debug_ranges'
.L47:
	.word	-1,.L24,0,.L48-.L24,0,0
	.sdecl	'.debug_info',debug,cluster('IfxFce_Crc_initCrc')
	.sect	'.debug_info'
.L49:
	.word	424
	.half	3
	.word	.L50
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Fce\\Crc\\IfxFce_Crc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L52,.L51
	.byte	2
	.word	.L35
	.byte	3
	.byte	'IfxFce_Crc_initCrc',0,1,138,1,6,1,1,1
	.word	.L28,.L224,.L27
	.byte	4
	.byte	'fceCrc',0,1,138,1,41
	.word	.L86,.L225
	.byte	4
	.byte	'crcConfig',0,1,138,1,77
	.word	.L226,.L227
	.byte	5
	.word	.L28,.L224
	.byte	5
	.word	.L228,.L224
	.byte	6
	.byte	'fceSFR',0,1,141,1,14
	.word	.L229,.L230
	.byte	5
	.word	.L231,.L224
	.byte	6
	.byte	'password',0,1,147,1,20
	.word	.L90,.L232
	.byte	5
	.word	.L233,.L224
	.byte	6
	.byte	'tempCFG',0,1,150,1,20
	.word	.L234,.L235
	.byte	5
	.word	.L236,.L16
	.byte	6
	.byte	'dma',0,1,174,1,34
	.word	.L237,.L238
	.byte	5
	.word	.L239,.L16
	.byte	6
	.byte	'dmaChannelCfg',0,1,177,1,34
	.word	.L240,.L241
	.byte	0,0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxFce_Crc_initCrc')
	.sect	'.debug_abbrev'
.L50:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxFce_Crc_initCrc')
	.sect	'.debug_line'
.L51:
	.word	.L379-.L378
.L378:
	.half	3
	.word	.L381-.L380
.L380:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Fce\\Crc\\IfxFce_Crc.c',0,0,0,0,0
.L381:
	.byte	5,6,7,0,5,2
	.word	.L28
	.byte	3,137,1,1,5,28,9
	.half	.L325-.L28
	.byte	3,2,1,5,17,9
	.half	.L382-.L325
	.byte	1,5,6,9
	.half	.L383-.L382
	.byte	3,126,1,5,36,9
	.half	.L228-.L383
	.byte	3,5,1,5,32,9
	.half	.L384-.L228
	.byte	3,126,1,5,25,9
	.half	.L326-.L384
	.byte	3,2,1,5,36,9
	.half	.L385-.L326
	.byte	3,1,1,5,25,9
	.half	.L386-.L385
	.byte	1,5,36,9
	.half	.L387-.L386
	.byte	3,1,1,5,25,9
	.half	.L388-.L387
	.byte	1,5,63,9
	.half	.L231-.L388
	.byte	3,2,1,5,29,9
	.half	.L323-.L231
	.byte	1,5,31,9
	.half	.L327-.L323
	.byte	3,1,1,5,45,9
	.half	.L233-.L327
	.byte	3,4,1,5,75,3,1,1,5,29,9
	.half	.L328-.L233
	.byte	3,14,1,5,45,9
	.half	.L330-.L328
	.byte	3,114,1,5,75,3,1,1,5,45,9
	.half	.L389-.L330
	.byte	1,5,75,3,1,1,5,45,9
	.half	.L390-.L389
	.byte	1,5,75,3,1,1,5,45,9
	.half	.L391-.L390
	.byte	1,5,56,3,1,1,5,45,9
	.half	.L392-.L391
	.byte	1,5,56,3,1,1,5,45,9
	.half	.L393-.L392
	.byte	1,5,56,3,1,1,5,45,9
	.half	.L394-.L393
	.byte	1,5,56,3,1,1,5,45,9
	.half	.L395-.L394
	.byte	1,5,56,3,1,1,5,45,9
	.half	.L396-.L395
	.byte	1,5,56,3,1,1,5,45,9
	.half	.L397-.L396
	.byte	1,5,56,3,1,1,5,45,9
	.half	.L398-.L397
	.byte	1,5,25,3,2,1,5,15,9
	.half	.L399-.L398
	.byte	1,5,45,9
	.half	.L400-.L399
	.byte	1,5,29,9
	.half	.L401-.L400
	.byte	3,2,1,5,31,9
	.half	.L329-.L401
	.byte	3,2,1,5,20,9
	.half	.L402-.L329
	.byte	1,5,5,9
	.half	.L403-.L402
	.byte	3,2,1,5,40,7,9
	.half	.L236-.L403
	.byte	3,4,1,5,44,9
	.half	.L404-.L236
	.byte	3,126,1,5,39,9
	.half	.L239-.L404
	.byte	3,5,1,5,55,9
	.half	.L405-.L239
	.byte	1,5,67,9
	.half	.L406-.L405
	.byte	3,2,1,5,56,9
	.half	.L407-.L406
	.byte	1,5,58,9
	.half	.L408-.L407
	.byte	3,1,1,5,56,1,9
	.half	.L409-.L408
	.byte	3,1,1,5,58,9
	.half	.L410-.L409
	.byte	3,1,1,5,56,1,9
	.half	.L411-.L410
	.byte	3,1,1,5,39,9
	.half	.L412-.L411
	.byte	3,1,1,5,57,9
	.half	.L413-.L412
	.byte	1,5,1,9
	.half	.L16-.L413
	.byte	3,2,1,7,9
	.half	.L53-.L16
	.byte	0,1,1
.L379:
	.sdecl	'.debug_ranges',debug,cluster('IfxFce_Crc_initCrc')
	.sect	'.debug_ranges'
.L52:
	.word	-1,.L28,0,.L53-.L28,0,0
	.sdecl	'.debug_info',debug,cluster('IfxFce_Crc_initCrcConfig')
	.sect	'.debug_info'
.L54:
	.word	269
	.half	3
	.word	.L55
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Fce\\Crc\\IfxFce_Crc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L57,.L56
	.byte	2
	.word	.L35
	.byte	3
	.byte	'IfxFce_Crc_initCrcConfig',0,1,190,1,6,1,1,1
	.word	.L30,.L242,.L29
	.byte	4
	.byte	'crcConfig',0,1,190,1,53
	.word	.L243,.L244
	.byte	4
	.byte	'fce',0,1,190,1,76
	.word	.L245,.L246
	.byte	5
	.word	.L30,.L242
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxFce_Crc_initCrcConfig')
	.sect	'.debug_abbrev'
.L55:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxFce_Crc_initCrcConfig')
	.sect	'.debug_line'
.L56:
	.word	.L415-.L414
.L414:
	.half	3
	.word	.L417-.L416
.L416:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Fce\\Crc\\IfxFce_Crc.c',0,0,0,0,0
.L417:
	.byte	5,51,7,0,5,2
	.word	.L30
	.byte	3,191,1,1,5,46,9
	.half	.L418-.L30
	.byte	1,5,48,9
	.half	.L419-.L418
	.byte	3,1,1,5,46,1,9
	.half	.L420-.L419
	.byte	3,1,1,5,48,9
	.half	.L421-.L420
	.byte	3,1,1,5,46,1,9
	.half	.L422-.L421
	.byte	3,1,1,9
	.half	.L423-.L422
	.byte	3,1,1,9
	.half	.L424-.L423
	.byte	3,1,1,9
	.half	.L425-.L424
	.byte	3,1,1,9
	.half	.L426-.L425
	.byte	3,1,1,9
	.half	.L427-.L426
	.byte	3,1,1,9
	.half	.L428-.L427
	.byte	3,1,1,9
	.half	.L429-.L428
	.byte	3,1,1,9
	.half	.L430-.L429
	.byte	3,1,1,9
	.half	.L431-.L430
	.byte	3,1,1,5,48,9
	.half	.L432-.L431
	.byte	3,1,1,5,46,1,5,1,9
	.half	.L433-.L432
	.byte	3,1,1,7,9
	.half	.L58-.L433
	.byte	0,1,1
.L415:
	.sdecl	'.debug_ranges',debug,cluster('IfxFce_Crc_initCrcConfig')
	.sect	'.debug_ranges'
.L57:
	.word	-1,.L30,0,.L58-.L30,0,0
	.sdecl	'.debug_info',debug,cluster('IfxFce_Crc_initModule')
	.sect	'.debug_info'
.L59:
	.word	527
	.half	3
	.word	.L60
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Fce\\Crc\\IfxFce_Crc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L62,.L61
	.byte	2
	.word	.L35
	.byte	3
	.byte	'IfxFce_Crc_initModule',0,1,210,1,6,1,1,1
	.word	.L32,.L247,.L31
	.byte	4
	.byte	'fce',0,1,210,1,40
	.word	.L245,.L248
	.byte	4
	.byte	'config',0,1,210,1,70
	.word	.L249,.L250
	.byte	5
	.word	.L32,.L247
	.byte	5
	.word	.L251,.L247
	.byte	6
	.byte	'fceSFR',0,1,213,1,28
	.word	.L229,.L252
	.byte	7
	.word	.L253,.L254,.L255
	.byte	8
	.word	.L256,.L257
	.byte	9
	.word	.L258,.L254,.L255
	.byte	6
	.byte	'password',0,2,221,1,12
	.word	.L90,.L259
	.byte	0,0,5
	.word	.L255,.L247
	.byte	7
	.word	.L260,.L255,.L261
	.byte	8
	.word	.L262,.L263
	.byte	8
	.word	.L264,.L265
	.byte	8
	.word	.L266,.L267
	.byte	10
	.word	.L268,.L269
	.byte	7
	.word	.L272,.L273,.L271
	.byte	8
	.word	.L274,.L275
	.byte	11
	.word	.L276,.L273,.L271
	.byte	0,0,0,7
	.word	.L260,.L270,.L271
	.byte	8
	.word	.L262,.L263
	.byte	8
	.word	.L264,.L265
	.byte	8
	.word	.L266,.L267
	.byte	0,7
	.word	.L277,.L271,.L278
	.byte	8
	.word	.L279,.L280
	.byte	11
	.word	.L281,.L271,.L278
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxFce_Crc_initModule')
	.sect	'.debug_abbrev'
.L60:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,10,11,1,49,16,85,6,0,0,11,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxFce_Crc_initModule')
	.sect	'.debug_line'
.L61:
	.word	.L435-.L434
.L434:
	.half	3
	.word	.L437-.L436
.L436:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Fce\\Crc\\IfxFce_Crc.c',0,0,0,0
	.byte	'IfxFce.h',0,1,0,0
	.byte	'IfxSrc.h',0,2,0,0,0
.L437:
	.byte	5,6,7,0,5,2
	.word	.L32
	.byte	3,209,1,1,5,22,9
	.half	.L332-.L32
	.byte	3,2,1,5,14,9
	.half	.L438-.L332
	.byte	1,5,43,9
	.half	.L251-.L438
	.byte	3,1,1,4,2,5,55,9
	.half	.L254-.L251
	.byte	3,8,1,5,21,9
	.half	.L331-.L254
	.byte	1,5,31,9
	.half	.L335-.L331
	.byte	3,1,1,5,15,9
	.half	.L334-.L335
	.byte	3,1,1,5,21,9
	.half	.L439-.L334
	.byte	1,5,29,9
	.half	.L440-.L439
	.byte	3,1,1,4,3,5,11,9
	.half	.L255-.L440
	.byte	3,49,1,4,1,5,28,9
	.half	.L261-.L255
	.byte	3,73,1,4,3,5,11,9
	.half	.L270-.L261
	.byte	3,55,1,4,1,5,54,9
	.half	.L441-.L270
	.byte	3,73,1,4,3,5,17,9
	.half	.L442-.L441
	.byte	3,55,1,5,11,9
	.half	.L443-.L442
	.byte	3,1,1,5,17,9
	.half	.L444-.L443
	.byte	1,5,11,9
	.half	.L273-.L444
	.byte	3,103,1,5,17,9
	.half	.L445-.L273
	.byte	1,5,11,9
	.half	.L271-.L445
	.byte	3,18,1,5,16,9
	.half	.L446-.L271
	.byte	1,4,1,5,1,9
	.half	.L278-.L446
	.byte	3,81,1,7,9
	.half	.L63-.L278
	.byte	0,1,1
.L435:
	.sdecl	'.debug_ranges',debug,cluster('IfxFce_Crc_initModule')
	.sect	'.debug_ranges'
.L62:
	.word	-1,.L32,0,.L63-.L32,0,0
.L269:
	.word	-1,.L32,.L255-.L32,.L261-.L32,.L270-.L32,.L271-.L32,0,0
	.sdecl	'.debug_info',debug,cluster('IfxFce_Crc_initModuleConfig')
	.sect	'.debug_info'
.L64:
	.word	269
	.half	3
	.word	.L65
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Fce\\Crc\\IfxFce_Crc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L67,.L66
	.byte	2
	.word	.L35
	.byte	3
	.byte	'IfxFce_Crc_initModuleConfig',0,1,223,1,6,1,1,1
	.word	.L34,.L282,.L33
	.byte	4
	.byte	'config',0,1,223,1,53
	.word	.L283,.L284
	.byte	4
	.byte	'fce',0,1,223,1,70
	.word	.L229,.L285
	.byte	5
	.word	.L34,.L282
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxFce_Crc_initModuleConfig')
	.sect	'.debug_abbrev'
.L65:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxFce_Crc_initModuleConfig')
	.sect	'.debug_line'
.L66:
	.word	.L448-.L447
.L447:
	.half	3
	.word	.L450-.L449
.L449:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Fce\\Crc\\IfxFce_Crc.c',0,0,0,0,0
.L450:
	.byte	5,30,7,0,5,2
	.word	.L34
	.byte	3,224,1,1,5,32,9
	.half	.L451-.L34
	.byte	3,1,1,5,30,1,9
	.half	.L452-.L451
	.byte	3,1,1,5,1,9
	.half	.L453-.L452
	.byte	3,1,1,7,9
	.half	.L68-.L453
	.byte	0,1,1
.L448:
	.sdecl	'.debug_ranges',debug,cluster('IfxFce_Crc_initModuleConfig')
	.sect	'.debug_ranges'
.L67:
	.word	-1,.L34,0,.L68-.L34,0,0
	.sdecl	'.debug_info',debug,cluster('IfxFce_Crc_clearErrorFlags')
	.sect	'.debug_info'
.L69:
	.word	292
	.half	3
	.word	.L70
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Fce\\Crc\\IfxFce_Crc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L72,.L71
	.byte	2
	.word	.L35
	.byte	3
	.byte	'IfxFce_Crc_clearErrorFlags',0,1,120,6,1,1,1
	.word	.L22,.L286,.L21
	.byte	4
	.byte	'fce',0,1,120,49
	.word	.L86,.L287
	.byte	5
	.word	.L22,.L286
	.byte	6
	.word	.L288,.L22,.L289
	.byte	7
	.word	.L290,.L291
	.byte	7
	.word	.L292,.L293
	.byte	8
	.word	.L294,.L22,.L289
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxFce_Crc_clearErrorFlags')
	.sect	'.debug_abbrev'
.L70:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxFce_Crc_clearErrorFlags')
	.sect	'.debug_line'
.L71:
	.word	.L455-.L454
.L454:
	.half	3
	.word	.L457-.L456
.L456:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Fce\\Crc\\IfxFce_Crc.c',0,0,0,0
	.byte	'IfxFce.h',0,1,0,0,0
.L457:
	.byte	5,34,7,0,5,2
	.word	.L22
	.byte	3,249,0,1,5,44,9
	.half	.L458-.L22
	.byte	1,4,2,5,13,9
	.half	.L459-.L458
	.byte	3,212,0,1,5,12,9
	.half	.L460-.L459
	.byte	1,5,30,9
	.half	.L461-.L460
	.byte	1,5,28,9
	.half	.L462-.L461
	.byte	1,4,1,5,1,9
	.half	.L289-.L462
	.byte	3,173,127,1,7,9
	.half	.L73-.L289
	.byte	0,1,1
.L455:
	.sdecl	'.debug_ranges',debug,cluster('IfxFce_Crc_clearErrorFlags')
	.sect	'.debug_ranges'
.L72:
	.word	-1,.L22,0,.L73-.L22,0,0
	.sdecl	'.debug_info',debug,cluster('IfxFce_Crc_getInterruptStatus')
	.sect	'.debug_info'
.L74:
	.word	331
	.half	3
	.word	.L75
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Fce\\Crc\\IfxFce_Crc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L77,.L76
	.byte	2
	.word	.L35
	.byte	3
	.byte	'IfxFce_Crc_getInterruptStatus',0,1,132,1,16
	.word	.L295
	.byte	1,1,1
	.word	.L26,.L296,.L25
	.byte	4
	.byte	'fce',0,1,132,1,62
	.word	.L86,.L297
	.byte	5
	.word	.L26,.L296
	.byte	6
	.word	.L298,.L26,.L299
	.byte	7
	.word	.L300,.L301
	.byte	7
	.word	.L302,.L303
	.byte	8
	.word	.L304,.L26,.L299
	.byte	9
	.byte	'interruptStatus',0,2,230,1,20
	.word	.L295,.L305
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxFce_Crc_getInterruptStatus')
	.sect	'.debug_abbrev'
.L75:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,52,0,3,8,58,15,59,15,57,15,73
	.byte	16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxFce_Crc_getInterruptStatus')
	.sect	'.debug_line'
.L76:
	.word	.L464-.L463
.L463:
	.half	3
	.word	.L466-.L465
.L465:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Fce\\Crc\\IfxFce_Crc.c',0,0,0,0
	.byte	'IfxFce.h',0,1,0,0,0
.L466:
	.byte	5,44,7,0,5,2
	.word	.L26
	.byte	3,133,1,1,5,54,9
	.half	.L467-.L26
	.byte	1,4,2,5,33,9
	.half	.L468-.L467
	.byte	3,225,0,1,5,32,9
	.half	.L469-.L468
	.byte	1,5,45,9
	.half	.L470-.L469
	.byte	1,4,1,5,1,9
	.half	.L299-.L470
	.byte	3,160,127,1,7,9
	.half	.L78-.L299
	.byte	0,1,1
.L464:
	.sdecl	'.debug_ranges',debug,cluster('IfxFce_Crc_getInterruptStatus')
	.sect	'.debug_ranges'
.L77:
	.word	-1,.L26,0,.L78-.L26,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_6')
	.sect	'.debug_info'
.L79:
	.word	202
	.half	3
	.word	.L80
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Fce\\Crc\\IfxFce_Crc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L82,.L81
	.byte	2
	.word	.L35
	.byte	3
	.byte	'.cocofun_6',0,1,53,8,1
	.word	.L20,.L83,.L19
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_6')
	.sect	'.debug_abbrev'
.L80:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_6')
	.sect	'.debug_line'
.L81:
	.word	.L472-.L471
.L471:
	.half	3
	.word	.L474-.L473
.L473:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Dma',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Fce\\Crc\\IfxFce_Crc.c',0,0,0,0
	.byte	'IfxDma.h',0,1,0,0
	.byte	'IfxDma_Dma.h',0,2,0,0,0
.L474:
	.byte	5,58,7,0,5,2
	.word	.L20
	.byte	3,222,0,1,5,82,9
	.half	.L315-.L20
	.byte	1,4,2,5,13,9
	.half	.L316-.L315
	.byte	3,178,12,1,5,12,9
	.half	.L475-.L316
	.byte	1,9
	.half	.L83-.L475
	.byte	0,1,1,5,53,0,5,2
	.word	.L20
	.byte	3,223,0,1,5,77,9
	.half	.L315-.L20
	.byte	1,4,2,5,13,9
	.half	.L316-.L315
	.byte	3,252,11,1,5,12,9
	.half	.L475-.L316
	.byte	1,9
	.half	.L476-.L475
	.byte	3,53,1,7,9
	.half	.L83-.L476
	.byte	0,1,1,5,69,0,5,2
	.word	.L20
	.byte	3,224,0,1,5,93,9
	.half	.L315-.L20
	.byte	1,4,2,5,42,9
	.half	.L316-.L315
	.byte	3,229,11,1,5,41,9
	.half	.L475-.L316
	.byte	1,5,12,9
	.half	.L476-.L475
	.byte	3,203,0,1,7,9
	.half	.L83-.L476
	.byte	0,1,1,4,3,5,43,0,5,2
	.word	.L20
	.byte	3,254,5,1,5,57,9
	.half	.L315-.L20
	.byte	1,4,2,5,13,9
	.half	.L316-.L315
	.byte	3,161,7,1,5,12,9
	.half	.L475-.L316
	.byte	1,9
	.half	.L476-.L475
	.byte	3,113,1,7,9
	.half	.L83-.L476
	.byte	0,1,1
.L472:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_6')
	.sect	'.debug_ranges'
.L82:
	.word	-1,.L20,0,.L83-.L20,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_6')
	.sect	'.debug_loc'
.L19:
	.word	-1,.L20,0,.L83-.L20
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxFce_Crc_calculateCrc')
	.sect	'.debug_loc'
.L17:
	.word	-1,.L18,0,.L85-.L18
	.half	2
	.byte	138,0
	.word	0,0
.L129:
	.word	-1,.L18,.L309-.L18,.L164-.L18
	.half	1
	.byte	98
	.word	.L314-.L18,.L164-.L18
	.half	1
	.byte	95
	.word	.L20-.L18,.L315-.L18
	.half	1
	.byte	98
	.word	.L20-.L18,.L316-.L18
	.half	1
	.byte	95
	.word	.L2-.L18,.L11-.L18
	.half	1
	.byte	98
	.word	0,0
.L161:
	.word	0,0
.L152:
	.word	0,0
.L198:
	.word	-1,.L18,.L319-.L18,.L185-.L18
	.half	5
	.byte	144,32,157,32,0
	.word	.L20-.L18,.L83-.L18
	.half	5
	.byte	144,32,157,32,0
	.word	.L204-.L18,.L2-.L18
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L105:
	.word	0,0
.L124:
	.word	0,0
.L115:
	.word	0,0
.L213:
	.word	0,0
.L201:
	.word	0,0
.L220:
	.word	0,0
.L159:
	.word	0,0
.L189:
	.word	0,0
.L179:
	.word	0,0
.L150:
	.word	0,0
.L169:
	.word	0,0
.L208:
	.word	0,0
.L94:
	.word	-1,.L18,.L100-.L18,.L308-.L18
	.half	1
	.byte	95
	.word	0,0
.L89:
	.word	-1,.L18,0,.L306-.L18
	.half	1
	.byte	101
	.word	.L312-.L18,.L142-.L18
	.half	5
	.byte	144,32,157,32,0
	.word	.L2-.L18,.L11-.L18
	.half	1
	.byte	101
	.word	0,0
.L91:
	.word	-1,.L18,.L20-.L18,.L83-.L18
	.half	1
	.byte	84
	.word	0,.L165-.L18
	.half	1
	.byte	84
	.word	.L174-.L18,.L175-.L18
	.half	1
	.byte	84
	.word	.L184-.L18,.L185-.L18
	.half	1
	.byte	84
	.word	.L204-.L18,.L85-.L18
	.half	1
	.byte	84
	.word	0,0
.L107:
	.word	0,0
.L96:
	.word	-1,.L18,.L321-.L18,.L85-.L18
	.half	1
	.byte	82
	.word	0,0
.L92:
	.word	-1,.L18,.L20-.L18,.L83-.L18
	.half	1
	.byte	85
	.word	0,.L165-.L18
	.half	1
	.byte	85
	.word	.L174-.L18,.L175-.L18
	.half	1
	.byte	85
	.word	.L184-.L18,.L185-.L18
	.half	1
	.byte	85
	.word	.L204-.L18,.L85-.L18
	.half	1
	.byte	85
	.word	0,0
.L126:
	.word	0,0
.L98:
	.word	0,0
.L193:
	.word	0,0
.L218:
	.word	0,0
.L157:
	.word	0,0
.L187:
	.word	0,0
.L177:
	.word	0,0
.L148:
	.word	0,0
.L167:
	.word	0,0
.L206:
	.word	0,0
.L136:
	.word	-1,.L18,.L20-.L18,.L83-.L18
	.half	1
	.byte	83
	.word	.L5-.L18,.L165-.L18
	.half	1
	.byte	83
	.word	.L174-.L18,.L175-.L18
	.half	1
	.byte	83
	.word	.L184-.L18,.L185-.L18
	.half	1
	.byte	83
	.word	.L204-.L18,.L2-.L18
	.half	1
	.byte	83
	.word	0,0
.L134:
	.word	-1,.L18,.L310-.L18,.L4-.L18
	.half	1
	.byte	82
	.word	.L311-.L18,.L6-.L18
	.half	1
	.byte	82
	.word	.L20-.L18,.L83-.L18
	.half	1
	.byte	82
	.word	.L317-.L18,.L165-.L18
	.half	1
	.byte	82
	.word	.L174-.L18,.L175-.L18
	.half	1
	.byte	82
	.word	.L184-.L18,.L185-.L18
	.half	1
	.byte	82
	.word	.L204-.L18,.L2-.L18
	.half	1
	.byte	82
	.word	0,0
.L117:
	.word	0,0
.L87:
	.word	-1,.L18,0,.L307-.L18
	.half	1
	.byte	100
	.word	.L20-.L18,.L83-.L18
	.half	1
	.byte	111
	.word	.L318-.L18,.L165-.L18
	.half	1
	.byte	111
	.word	.L174-.L18,.L175-.L18
	.half	1
	.byte	111
	.word	.L184-.L18,.L185-.L18
	.half	1
	.byte	111
	.word	.L204-.L18,.L320-.L18
	.half	1
	.byte	111
	.word	0,0
.L103:
	.word	0,0
.L122:
	.word	0,0
.L113:
	.word	0,0
.L191:
	.word	0,0
.L95:
	.word	-1,.L18,.L13-.L18,.L11-.L18
	.half	1
	.byte	95
	.word	0,0
.L181:
	.word	0,0
.L144:
	.word	-1,.L18,.L139-.L18,.L313-.L18
	.half	1
	.byte	95
	.word	0,0
.L195:
	.word	0,0
.L171:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxFce_Crc_clearErrorFlags')
	.sect	'.debug_loc'
.L21:
	.word	-1,.L22,0,.L286-.L22
	.half	2
	.byte	138,0
	.word	0,0
.L293:
	.word	0,0
.L287:
	.word	-1,.L22,0,.L286-.L22
	.half	1
	.byte	100
	.word	0,0
.L291:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxFce_Crc_deInitModule')
	.sect	'.debug_loc'
.L23:
	.word	-1,.L24,0,.L222-.L24
	.half	2
	.byte	138,0
	.word	0,0
.L223:
	.word	-1,.L24,0,.L322-.L24
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxFce_Crc_getInterruptStatus')
	.sect	'.debug_loc'
.L25:
	.word	-1,.L26,0,.L296-.L26
	.half	2
	.byte	138,0
	.word	0,0
.L303:
	.word	0,0
.L297:
	.word	-1,.L26,0,.L296-.L26
	.half	1
	.byte	100
	.word	0,0
.L301:
	.word	0,0
.L305:
	.word	-1,.L26,.L299-.L26,.L296-.L26
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxFce_Crc_initCrc')
	.sect	'.debug_loc'
.L27:
	.word	-1,.L28,0,.L228-.L28
	.half	2
	.byte	138,0
	.word	.L228-.L28,.L16-.L28
	.half	3
	.byte	138,192,0
	.word	.L16-.L28,.L16-.L28
	.half	2
	.byte	138,0
	.word	.L16-.L28,.L224-.L28
	.half	3
	.byte	138,192,0
	.word	.L224-.L28,.L224-.L28
	.half	2
	.byte	138,0
	.word	0,0
.L227:
	.word	-1,.L28,0,.L323-.L28
	.half	1
	.byte	101
	.word	.L324-.L28,.L224-.L28
	.half	1
	.byte	111
	.word	0,0
.L238:
	.word	-1,.L28,0,.L224-.L28
	.half	2
	.byte	145,64
	.word	0,0
.L241:
	.word	-1,.L28,0,.L224-.L28
	.half	2
	.byte	145,68
	.word	0,0
.L225:
	.word	-1,.L28,0,.L323-.L28
	.half	1
	.byte	100
	.word	.L325-.L28,.L224-.L28
	.half	1
	.byte	109
	.word	0,0
.L230:
	.word	-1,.L28,.L326-.L28,.L224-.L28
	.half	1
	.byte	108
	.word	0,0
.L232:
	.word	-1,.L28,.L323-.L28,.L233-.L28
	.half	1
	.byte	82
	.word	.L327-.L28,.L224-.L28
	.half	1
	.byte	88
	.word	.L330-.L28,.L329-.L28
	.half	1
	.byte	84
	.word	0,0
.L235:
	.word	-1,.L28,.L328-.L28,.L329-.L28
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxFce_Crc_initCrcConfig')
	.sect	'.debug_loc'
.L29:
	.word	-1,.L30,0,.L242-.L30
	.half	2
	.byte	138,0
	.word	0,0
.L244:
	.word	-1,.L30,0,.L242-.L30
	.half	1
	.byte	100
	.word	0,0
.L246:
	.word	-1,.L30,0,.L242-.L30
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxFce_Crc_initModule')
	.sect	'.debug_loc'
.L31:
	.word	-1,.L32,0,.L247-.L32
	.half	2
	.byte	138,0
	.word	0,0
.L250:
	.word	-1,.L32,0,.L331-.L32
	.half	1
	.byte	101
	.word	.L332-.L32,.L333-.L32
	.half	1
	.byte	111
	.word	0,0
.L248:
	.word	-1,.L32,0,.L331-.L32
	.half	1
	.byte	100
	.word	0,0
.L257:
	.word	0,0
.L252:
	.word	-1,.L32,.L254-.L32,.L247-.L32
	.half	1
	.byte	108
	.word	0,0
.L259:
	.word	-1,.L32,.L331-.L32,.L334-.L32
	.half	1
	.byte	82
	.word	.L335-.L32,.L270-.L32
	.half	1
	.byte	95
	.word	0,0
.L267:
	.word	0,0
.L275:
	.word	0,0
.L280:
	.word	0,0
.L263:
	.word	0,0
.L265:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxFce_Crc_initModuleConfig')
	.sect	'.debug_loc'
.L33:
	.word	-1,.L34,0,.L282-.L34
	.half	2
	.byte	138,0
	.word	0,0
.L284:
	.word	-1,.L34,0,.L282-.L34
	.half	1
	.byte	100
	.word	0,0
.L285:
	.word	-1,.L34,0,.L282-.L34
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L477:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxFce_Crc_calculateCrc')
	.sect	'.debug_frame'
	.word	20
	.word	.L477,.L18,.L85-.L18
	.byte	8,19,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxFce_Crc_clearErrorFlags')
	.sect	'.debug_frame'
	.word	24
	.word	.L477,.L22,.L286-.L22
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxFce_Crc_deInitModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L477,.L24,.L222-.L24
	.sdecl	'.debug_frame',debug,cluster('IfxFce_Crc_getInterruptStatus')
	.sect	'.debug_frame'
	.word	24
	.word	.L477,.L26,.L296-.L26
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxFce_Crc_initCrc')
	.sect	'.debug_frame'
	.word	56
	.word	.L477,.L28,.L224-.L28
	.byte	4
	.word	(.L228-.L28)/2
	.byte	19,192,0,22,26,4,19,138,192,0,4
	.word	(.L16-.L228)/2
	.byte	19,0,8,26,19,192,0,22,26,4,19,138,192,0,4
	.word	(.L224-.L16)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('IfxFce_Crc_initCrcConfig')
	.sect	'.debug_frame'
	.word	20
	.word	.L477,.L30,.L242-.L30
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxFce_Crc_initModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L477,.L32,.L247-.L32
	.sdecl	'.debug_frame',debug,cluster('IfxFce_Crc_initModuleConfig')
	.sect	'.debug_frame'
	.word	20
	.word	.L477,.L34,.L282-.L34
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L478:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_6')
	.sect	'.debug_frame'
	.word	24
	.word	.L478,.L20,.L83-.L20
	.byte	8,18,8,19,8,20,8,21,8,22,8,23


	; Module end
